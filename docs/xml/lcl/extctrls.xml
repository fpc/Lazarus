<?xml version="1.0" encoding="UTF-8"?>
<!--

Documentation for LCL (Lazarus Component Library) and LazUtils (Lazarus 
Utilities) are published under the Creative Commons Attribution-ShareAlike 4.0 
International public license.

https://creativecommons.org/licenses/by-sa/4.0/legalcode.txt
https://gitlab.com/freepascal.org/lazarus/lazarus/-/blob/main/docs/cc-by-sa-4-0.txt

Copyright (c) 1997-2025, by the Lazarus Development Team.

-->
<fpdoc-descriptions>
<package name="lcl">
<!--
====================================================================
ExtCtrls
====================================================================
-->
<module name="ExtCtrls">
<short>Contains extra controls commonly used in Lazarus forms.</short>
<descr>
<p>
<file>extctrls.pp</file> contains extra controls commonly used in Lazarus 
Component Library (<b>LCL</b>) applications. It adds components to the 
following tabs in the Lazarus IDE Component Palette:
</p>
<p>
<b>Standard</b> Tab
</p>
<ul>
<li>TRadioGroup</li>
<li>TCheckGroup</li>
<li>TPanel</li>
</ul>
<p>
<b>Additional</b> Tab
</p>
<ul>
<li>TImage</li>
<li>TShape</li>
<li>TBevel</li>
<li>TPaintBox</li>
<li>TNotebook</li>
<li>TLabeledEdit</li>
<li>TSplitter</li>
<li>TTrayIcon</li>
<li>TControlBar</li>
<li>TFlowPanel</li>
</ul>
<p>
<b>System</b> Tab
</p>
<ul>
<li>TTimer</li>
<li>TIdleTimer</li>
</ul>
<p>
The following are registered but not displayed:
</p>
<ul>
<li>TPage</li>
</ul>
</descr>

<!-- unresolved external references -->
<element name="SysUtils"/>
<element name="Types"/>
<element name="Classes"/>
<element name="contnrs"/>
<element name="FGL"/>
<element name="LCLStrConsts"/>
<element name="LCLType"/>
<element name="LCLProc"/>
<element name="LResources"/>
<element name="LMessages"/>
<element name="Controls"/>
<element name="Forms"/>
<element name="StdCtrls"/>
<element name="Graphics"/>
<element name="LCLIntf"/>
<element name="CustomTimer"/>
<element name="Themes"/>
<element name="LCLClasses"/>
<element name="Menus"/>
<element name="PopupNotifier"/>
<element name="ImgList"/>
<element name="GraphType"/>
<element name="LazLoggerBase"/>
<element name="LazTracer"/>
<element name="LazUtilities"/>

<element name="TBeforeShowPageEvent">
<short>
Specifies an event handler triggered before a page in displayed.
</short>
<descr>
<p>
<var>TBeforeShowPageEvent</var> is an object procedure which specifies an 
event handler triggered before a page in displayed. TBeforeShowPageEvent can 
be used to perform actions needed to configure the page or its parent control 
before the new page is displayed.
</p>
<p>
TBeforeShowPageEvent is the type used to implement the 
<var>OnBeforeShow</var> event handler in <var>TPage</var>.
</p>
</descr>
<seealso>
<link id="TPage.OnBeforeShow"/>
</seealso>
</element>
<element name="TBeforeShowPageEvent.ASender">
<short>Object for the event notification.</short>
</element>
<element name="TBeforeShowPageEvent.ANewPage">
<short>The page instance for the notification.</short>
</element>
<element name="TBeforeShowPageEvent.ANewIndex">
<short>The ordinal position for the page in the parent control.</short>
</element>

<element name="TImagePaintBackgroundEvent">
<short>
Specifies an event handler signalled to draw the background for an image.
</short>
<descr>
<p>
<var>TImagePaintBackgroundEvent</var> is an object procedure which specifies 
an event handler signalled to draw the background for a <var>TImage</var> 
class instance. TImagePaintBackgroundEvent is the type used to implement the 
<var>OnPaintBackground</var> event handler in <var>TCustomImage</var>.
</p>
</descr>
<seealso>
<link id="TCustomImage.OnPaintBackground"/>
</seealso>
</element>
<element name="TImagePaintBackgroundEvent.ASender">
<short>Object for the event notification.</short>
</element>
<element name="TImagePaintBackgroundEvent.ACanvas">
<short>Canvas for the image is drawn.</short>
</element>
<element name="TImagePaintBackgroundEvent.ARect">
<short>Rectangle with the dimensions for the image.</short>
</element>

<element name="TPage">
<short>
<var>TPage</var>: One of the pages in a tabbed Notebook.</short>
<descr>
<p>
<var>TPage</var> is a <var>TCustomControl</var> descendant that implements a 
page displayed in a tabbed Notebook.
</p>
</descr>
<seealso>
<link id="#lcl.ExtCtrls.MultiPageControls">Multi-Page Controls</link>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How to use StdCtrls, ComCtrls or ExtCtrls. </link>
</seealso>
</element>

<element name="TPage.FOnBeforeShow"/>

<element name="TPage.GetPageIndex">
<short>Gets the ordinal position for the page in the TNotebook.</short>
<descr>
<p>
<var>GetPageIndex</var> is an Integer function used to get the ordinal 
position for the page in the <var>TNotebook</var>.
</p>
<p>
<var>GetPageIndex</var> checks the value in <var>Parent</var> to ensure that 
a <var>TNotebook</var> instance has been assigned as the parent control. The 
<var>IndexOf</var> method in TNotebook is used to get the position for the 
current page. When Parent is unassigned, or not derived from TNotebook, the 
value <b>-1</b> is used as the return value.
</p>
</descr>
<seealso>
<link id="TCustomControl.Parent"/>
<link id="TNotebook.IndexOf"/>
</seealso>
</element>
<element name="TPage.GetPageIndex.Result">
<short>
Ordinal position for the page, or -1 when the Parent control is unassigned or 
not a TNotebook instance.
</short>
</element>

<element name="TPage.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TPage.SetParent">
<short>Sets the value for the Parent property.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
</seealso>
</element>
<element name="TPage.SetParent.AParent">
<short>New value for the property.</short>
</element>

<element name="TPage.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance. 
Create calls the inherited constructor, and sets the default values for 
properties in the class instance. The following properties are updated in the 
method:
</p>
<dl>
<dt>ControlStyle</dt>
<dd>
Includes the values <var>csAcceptsControls</var>, 
<var>csDesignFixedBounds</var>, <var>csNoDesignVisible</var>, and 
<var>csNoFocus</var> in the set.
</dd>
<dt>Align</dt>
<dd>
Set to <var>alClient</var>. The height and width for the page depend on the 
dimensions for the parent control.
</dd>
<dt>Caption</dt>
<dd>Set to an empty string (<b>''</b>).</dd>
<dt>Visible</dt>
<dd>Set to <b>False</b>.</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TPage.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TPage.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. 
Destroy ensures that the page is also removed from the page list maintained 
in the <var>Parent</var> control (<var>TNotebook</var>). The action is not 
performed when the Parent control has <var>csDestroying</var> in its 
<var>ComponentState</var>, or when Parent has not been assigned.
</p>
<p>
Destroy calls the inherited destructor prior to exiting from the method.
</p>
</descr>
<seealso/>
</element>

<element name="TPage.PageIndex">
<short>Ordinal position for the page in its Notebook.</short>
<descr>
<p>
<var>PageIndex</var> is a read-only <var>Integer</var> property which 
contains the ordinal position for the page in its <var>TNotebook</var> 
container. The return value is <b>-1</b> when the <var>Parent</var> control 
is unassigned, or not derived from <var>TNotebook</var>.
</p>
</descr>
<seealso>
<link id="TNotebook.IndexOf"/>
<link id="#lcl.comctrls.TCustomPage.PageIndex">TCustomPage.PageIndex</link>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
</seealso>
</element>

<element name="TPage.OnBeforeShow">
<short>Event handler signalled before a page is displayed.</short>
<descr>
<p>
<var>OnBeforeShow</var> is a <var>TBeforeShowPageEvent</var> property that 
contains the event handler signalled before a page is displayed. Applications 
must assign an object procedure to the event handler to respond to the event 
notification.
</p>
</descr>
<seealso>
<link id="TBeforeShowPageEvent"/>
</seealso>
</element>

<element name="TPage.OnBeforeShow">
<short>Event handler signalled before the page is displayed.</short>
<descr>
<p>
<var>OnBeforeShow</var> is a <var>TBeforeShowPageEvent</var> property with 
the event handler signalled before a page is displayed. It allows an 
application to make any preparations needed for the page or its contents. It 
is signalled (when assigned) when the value for the <var>PageIndex</var> 
property is changed in a <var>TNotebook</var> instance.
</p>
</descr>
<seealso>
<link id="TBeforeShowPageEvent"/>
<link id="TNotebook.PageIndex"/>
</seealso>
</element>

<element name="TPage.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TPage.ChildSizing" link="#lcl.controls.TWinControl.ChildSizing"/>
<element name="TPage.Color" link="#lcl.controls.TControl.Color"/>
<element name="TPage.Left" link="#lcl.controls.TControl.Left"/>
<element name="TPage.Top" link="#lcl.controls.TControl.Top"/>
<element name="TPage.Width" link="#lcl.controls.TControl.Width"/>
<element name="TPage.Height" link="#lcl.controls.TControl.Height"/>
<element name="TPage.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TPage.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TPage.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TPage.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TPage.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TPage.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TPage.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TPage.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TPage.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TPage.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TPage.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TPage.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TPage.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TPage.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TPage.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TPage.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TPage.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TPage.OnResize" link="#lcl.controls.TControl.OnResize"/>

<element name="TUNBPages">
<short>Represents page names and page class instances for a notebook.</short>
<descr>
<p>
<var>TUNBPages</var> is a <var>TStrings</var> descendant used to represent 
the names, <var>TPage</var> instances, and the owner class in 
<var>TNotebook</var>. TUNBPages extends the ancestor class by providing 
overridden methods needed to add, insert, delete and locate pages with a 
specified name or TPage class instance.
</p>
<p>
TUNBPages is used in the implementation of the <var>TNotebook</var> class.
</p>
</descr>
<seealso>
<link id="TNotebook"/>
</seealso>
</element>

<element name="TUNBPages.FPageList"/>
<element name="TUNBPages.FNotebook"/>

<element name="TUNBPages.GetNotebookOwner">
<short>Gets the owner for the TNotebook instance for the pages.</short>
<descr/>
<seealso/>
</element>
<element name="TUNBPages.GetNotebookOwner.Result">
<short>Owner of the TNotebook instance for the pages.</short>
</element>

<element name="TUNBPages.Get">
<short>
Gets the name for the page stored at the specified position in the list of 
pages.
</short>
<descr>
<p>
<var>Get</var> is an overridden <var>String</var> function used to get the 
name for the page stored at the specified position in the list of pages.
</p>
<p>
<var>Index</var> contains the ordinal position in the page list for the 
requested page. Index must be a valid position in the page list or an 
Exception is raised. The return value contains the name assigned to the TPage 
instance stored at the specified position.
</p>
</descr>
<errors>
Calls <var>RaiseGDBException</var> to raise an exception when 
<var>Index</var> is not valid for the page list in the class instance. Raised 
with the exception message: 'TUNBPages.Get Index out of bounds'.
</errors>
<seealso/>
</element>
<element name="TUNBPages.Get.Result">
<short>Name for the page at the specified position.</short>
</element>
<element name="TUNBPages.Get.Index">
<short>Ordinal position for the page requested in the method.</short>
</element>

<element name="TUNBPages.GetCount">
<short>Gets the number of pages defined in the page list.</short>
<descr/>
<seealso/>
</element>
<element name="TUNBPages.GetCount.Result">
<short>Value for the Count property.</short>
</element>

<element name="TUNBPages.GetObject">
<short>
Gets the TPage class instance stored at the specified ordinal position in the 
page list.
</short>
<descr/>
<seealso/>
</element>
<element name="TUNBPages.GetObject.Result">
<short>TPage class instance at the specified position.</short>
</element>
<element name="TUNBPages.GetObject.Index">
<short>
Ordinal position in the list of pages for the requested page object.
</short>
</element>

<element name="TUNBPages.Put">
<short>
Ensures that the index value is valid before accessing the TPage object.
</short>
<descr>
<p>
<var>Put</var> is overridden in <var>TUNBPages</var> to set the name for the 
page object at the specified position. Put ensures that the value in Index is 
valid. Index must contain a value in the range 0 to the number of defined 
pages - 1. An exception is raised when Index contains an invalid value.
</p>
<p>
Put sets the name in the <var>TPage</var> object at the specified position to 
the value in <var>S</var>.
</p>
</descr>
<errors>
Calls <var>RaiseGDBException</var> with the exception message 'TUNBPages.Put 
Index out of bounds' when Index contains an invalid value.
</errors>
<seealso>
<link id="#rtl.classes.TStrings">TStrings</link>
</seealso>
</element>
<element name="TUNBPages.Put.Index">
<short>Ordinal position for the page object updated in the method.</short>
</element>
<element name="TUNBPages.Put.S">
<short>Name stored in the requested page object.</short>
</element>

<element name="TUNBPages.Create">
<short>Constructor for the class instance.</short>
<descr/>
<seealso/>
</element>
<element name="TUNBPages.Create.theNotebook">
<short>Notebook that is the owner of the class instance.</short>
</element>

<element name="TUNBPages.Destroy">
<short>Destructor for the class instance.</short>
<descr/>
<seealso/>
</element>

<element name="TUNBPages.Add">
<short>Creates a new page instance with the specified name.</short>
<descr>
<p>
<var>Add</var> is an overridden <var>Integer</var> function used to create a 
new <var>TPage</var> instance with the name specified in <var>S</var>. The 
page object is created using the return value from 
<var>GetNotebookOwner</var> as the owner of the class instance. Add calls the 
<var>AddObject</var> method to store the page object in the list of pages for 
the notebook.
</p>
<p>
The return value contains the ordinal position in the page list where the 
page object was stored.
</p>
</descr>
<seealso/>
</element>
<element name="TUNBPages.Add.Result">
<short>Ordinal position where the page object was stored.</short>
</element>
<element name="TUNBPages.Add.S">
<short>Name for the page added in the method.</short>
</element>

<element name="TUNBPages.AddObject">
<short>
Adds the specified page object to the list of pages.
</short>
<descr>
<p>
<var>AddObject</var> is an overridden method in <var>TUNBPages</var> used to 
add the specified object to the page list maintained in the class instance. It 
re-implements the virtual method introduced in TStrings, and does <b>not</b> 
call the inherited method.
</p>
<p>
<var>S</var> contains the string used to identify the page instance in 
<var>AObject</var>. The value is used as the Caption for the page object, 
and as the basis for the Name used in the TPage class instance. The Name for 
the class instance must be a unique identifier (when specified) in the 
Components for the TNoteBook control owner. A numeric suffix is appended to 
the Name value if S is not a unique identifier name on the owner of the 
TNotebook control. If S is not specified (contains ''), the Name for the
class instance is not assigned.
</p>
<p>
<var>AObject</var> is the page instance added to the internal list. AddObject 
ensures that AObject is cast to TPage and its properties are initialized:
</p>
<ul>
<li>
Sets Name to the unique identifier derived from S when S is not an empty 
string.
</li>
<li>
Sets Caption to the value specified in S (which can be an empty string).
</li>
<li>
Sets Parent to the TNotebook instance which owns the page list.
</li>
<li>
Sets Align to alClient to align the page to the client area for the TNotebook 
control.
</li>
<li>
Sets Visible to <b>False</b>.
</li>
<li>
Sets control style flags so that the page is not visible at design-time.
</li>
</ul>
<p>
The return value is the ordinal position in the internal page list where 
AObject was stored. If the notebook does not already have an active page, the 
return value is assigned as the active PageIndex in the notebook control.
</p>
<p>
AddObject is called from the Add method using the TPage instance created in 
that method.
</p>
</descr>
<seealso>
<link id="TUNBPages.Add"/>
<link id="TPage.PageIndex"/>
<link id="TPage.Visible"/>
<link id="TNotebook.PageIndex"/>
<link id="TNotebook.Pages"/>
<link id="#lcl.controls.TControl.Caption">TControl.Caption</link>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
<link id="#lcl.controls.TControl.Align">TControl.Align</link>
<link id="#rtl.classes.TComponent.Name">TComponent.Name</link>
</seealso>
</element>
<element name="TUNBPages.AddObject.Result">
<short>
Ordinal position in the page list where the specified page object was stored.
</short>
</element>
<element name="TUNBPages.AddObject.S">
<short>
Identifier used as the name and caption for the page object.
</short>
</element>
<element name="TUNBPages.AddObject.AObject">
<short>
Object with the TPage instance stored in the method.
</short>
</element>

<element name="TUNBPages.Clear">
<short>Removes all page objects stored in the list of pages.</short>
<descr>
<p>
<var>Clear</var> is an overridden method which implements the abstract 
virtual method declared in the <var>TStrings</var> ancestor. Clear is used to 
remove all <var>TPage</var> instances stored in the internal page list. 
It calls the <var>Delete</var> method to remove the last TPage instance in 
the list until all items in the list have been deleted.
</p>
</descr>
<seealso>
<link id="TUNBPages.Delete"/>
<link id="TPage"/>
</seealso>
</element>

<element name="TUNBPages.Delete">
<short>
Deletes the page at the specified position in the list of pages.
</short>
<descr>
</descr>
<seealso/>
</element>
<element name="TUNBPages.Delete.Index">
<short>
Ordinal position in the list of pages for page removed in the method.
</short>
</element>

<element name="TUNBPages.IndexOfObject">
<short>
Gets the ordinal position for the specified page object in the list of pages.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStrings.IndexOfObject">TStrings.IndexOfObject</link>
</seealso>
</element>
<element name="TUNBPages.IndexOfObject.Result">
<short>Ordinal position for the page object.</short>
</element>
<element name="TUNBPages.IndexOfObject.AObject">
<short>The page object to locate in the list of pages.</short>
</element>

<element name="TUNBPages.Insert">
<short>
Inserts a page with the specified name at the given position in the list of 
pages.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStrings.Insert">TStrings.Insert</link>
</seealso>
</element>
<element name="TUNBPages.Insert.Index">
<short>Ordinal position where the page is stored.</short>
</element>
<element name="TUNBPages.Insert.S">
<short>Name for new page.</short>
</element>

<element name="TUNBPages.Move">
<short>Moves the active page to a position in the page list.</short>
<descr>
<p>
<var>Move</var> is an overridden procedure in <var>TUNBPages</var>. It 
re-implements the method defined in the <var>TStrings</var> ancestor class. 
Move is used to relocate the active page in a NoteBook control to a new 
position in the page list.
</p>
<p>
Move uses the internal <var>TNotebook</var> member that is the owner of the 
class instance to retrieve the current page and its ordinal position.
</p>
<p>
<var>CurIndex</var> is set to the <var>PageIndex</var> for the active page in 
the Notebook component. <var>NewIndex</var> specifies the new ordinal 
position in the page list for the <var>TPage</var> instance.
</p>
<p>
The Move method in the internal page list (TObjectList) is called to move the 
TPage instance from using the required positions. The PageIndex for the 
TNotebook control is reset to re-activate the page moved in the operation.
</p>
<remark>
Move does <b>NOT</b> call the inherited method.
</remark>
</descr>
<seealso>
<link id="#lcl.extctrls.TNotebook.Pages">TNotebook.Pages</link>
<link id="#lcl.extctrls.TNotebook.PageIndex">TNotebook.PageIndex</link>
<link id="#lcl.extctrls.TNotebook.IndexOf">TNotebook.IndexOf</link>
<link id="#lcl.extctrls.TPage">TPage</link>
<link id="#rtl.classes.TStrings.Move">TStrings.Move</link>
</seealso>
</element>
<element name="TUNBPages.Move.CurIndex`">
<short>Current position for the active page.</short>
</element>
<element name="TUNBPages.Move.NewIndex`">
<short>New position in the page list for the page.</short>
</element>

<element name="TNotebook">
<short>
<var>TNotebook</var> is a container for a group of related pages.
</short>
<descr>
<p>
<var>TNotebook</var> is a control which can hold a series of pages order by 
their position in the list of pages. Only one page is shown at a time.
</p>
<p>
This control is entirely custom drawn, which means that it is available - and 
looks the same - in any widgetset which supports TCustomControl. The pages 
are containers which can hold other controls. The page control does 
<b>not</b> display a tab which indicates the active page. If you are looking 
for a control with tabs representing each of the pages, please see 
<var>TPageControl</var> instead.
</p>
<p>
To use a Notebook, select its icon from the 'Additional' tab of the Component 
Palette and place it on the Form. Adjust its size, position, alignment and 
anchoring as required, by moving the object on the Form or by using the 
Object Inspector.
</p>
<p>
Pages are added to the NoteBook by selecting the control and right-clicking 
with the mouse to get a pop-up menu whose first item is 'Add Page', or by 
using the Pages property editor in the Object Inspector. Pages already in the 
NoteBook can be edited by selecting the appropriate ActivePage in the Object 
Inspector and modifying its properties or adding additional components to the 
Page.
</p>
</descr>
<seealso>
<link id="#lcl.extctrls.TPage">TPage</link>
<link id="#lcl.extctrls.MultiPageControls">Multi-Page Controls</link>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How to use StdCtrls, ComCtrls or ExtCtrls. </link>
</seealso>
</element>

<element name="TNotebook.FPages"/>
<element name="TNotebook.FPageIndex"/>

<element name="TNotebook.GetActivePage">
<short>Gets the value for the ActivePage property.</short>
<descr/>
<seealso>
<link id="TNotebook.ActivePage"/>
</seealso>
</element>
<element name="TNotebook.GetActivePage.Result">
<short>Value for the ActivePage property.</short>
</element>

<element name="TNotebook.GetActivePageComponent">
<short>Gets the value for the ActivePageComponent property.</short>
<descr/>
<seealso>
<link id="TNotebook.ActivePageComponent"/>
</seealso>
</element>
<element name="TNotebook.GetActivePageComponent.Result">
<short>Value for the ActivePageComponent property.</short>
</element>

<element name="TNotebook.GetPage">
<short>Gets the value for the indexed Page property.</short>
<descr/>
<seealso>
<link id="TNotebook.Page"/>
</seealso>
</element>
<element name="TNotebook.GetPage.Result">
<short>Page object at the specified position in the list of pages.</short>
</element>
<element name="TNotebook.GetPage.AIndex">
<short>
Ordinal position for the requested page object in the list of pages.
</short>
</element>

<element name="TNotebook.GetPageCount">
<short>Gets the value for the PageCount property.</short>
<descr/>
<seealso>
<link id="TNotebook.PageCount"/>
</seealso>
</element>
<element name="TNotebook.GetPageCount.Result">
<short>Value for the PageCount property.</short>
</element>

<element name="TNotebook.GetPageIndex">
<short>Gets the value for the PageIndex property.</short>
<descr/>
<seealso>
<link id="TNotebook.PageIndex"/>
</seealso>
</element>
<element name="TNotebook.GetPageIndex.Result">
<short>Value for the PageIndex property.</short>
</element>

<element name="TNotebook.SetPageIndex">
<short>Sets the value for the PageIndex property.</short>
<descr/>
<seealso>
<link id="TNotebook.PageIndex"/>
</seealso>
</element>
<element name="TNotebook.SetPageIndex.AValue">
<short>New value for the PageIndex property.</short>
</element>

<element name="TNotebook.SetPages">
<short>Sets the value for the Pages property.</short>
<descr/>
<seealso>
<link id="TNotebook.Pages"/>
</seealso>
</element>
<element name="TNotebook.SetPages.Items">
<short>New value for the Pages property.</short>
</element>

<element name="TNotebook.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance.
</p>
<p>
Create calls the inherited constructor using <var>TheOwner</var> as the owner 
of the class instance. Create allocates resources needed for members in the 
class instance, and sets the default values for the following properties:
</p>
<dl>
<dt>ControlStyle</dt>
<dd>Set to an empty set (<b>[]</b>).</dd>
<dt>PageIndex</dt>
<dd>Set to -1 to indicate that no page is selected or visible in the 
notebook.</dd>
<dt>Bounds</dt>
<dd>Set to the default size for the class (GetControlClassDefaultSize).</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TNotebook.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TNotebook.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. 
Destroy ensures that resources allocated to the internal page list are freed. 
Destroy calls the inherited destructor prior to exiting from the method.
</p>
</descr>
<seealso/>
</element>

<element name="TNotebook.ShowControl">
<short>Displays the specified control (page object).</short>
<descr>
<p>
<var>ShowControl</var> is an overridden procedure used to display the control 
specified in <var>AControl</var>. ShowControl checks the internal list of 
pages for the value specified in AControl. The ordinal position for the page 
object, when found, is assigned to the <var>PageIndex</var> property and 
causes the page object to become visible.
</p>
<p>
ShowControl calls the inherited method prior to exit.
</p>
<remark>
No actions are performed in the method when AControl is the same as the 
control stored in the <var>ActivePageComponent</var> property.
</remark>
</descr>
<seealso>
<link id="TNotebook.Page"/>
<link id="TNotebook.PageIndex"/>
<link id="TNotebook.ActivePageComponent"/>
</seealso>
</element>
<element name="TNotebook.ShowControl.AControl">
<short>Page object to display in the notebook control.</short>
</element>

<element name="TNotebook.IndexOf">
<short>
Gets the ordinal position in the list of pages for the specified page object.
</short>
<descr/>
<seealso/>
</element>
<element name="TNotebook.IndexOf.Result">
<short>Ordinal position for the requested page object.</short>
</element>
<element name="TNotebook.IndexOf.APage">
<short>Page object to locate in the list of pages.</short>
</element>

<element name="TNotebook.ActivePage">
<short>
Gets the name for the active page object in the notebook control.
</short>
<descr>
<p>
<var>ActivePage</var> is a read-only <var>String</var> property which 
provides the name for the active page object in the notebook control. The 
value in <var>PageIndex</var> is used to access the page object instance in 
the <var>Page</var> property. Its <var>Name</var> property is used as the 
property value.
</p>
<p>
Use <var>ActivePageComponent</var> to get the <var>TPage</var> instance 
representing the active page object.
</p>
<remark>
Should not be published because reading the property value can raise an 
exception.
</remark>
</descr>
<seealso>
<link id="TNotebook.PageIndex"/>
<link id="TNotebook.Page"/>
<link id="TNotebook.ActivePageComponent"/>
<link id="TNotebook.Pages"/>
</seealso>
</element>

<element name="TNotebook.ActivePageComponent">
<short>
Contains the TPage instance representing the active page in the notebook 
control.
</short>
<descr>
<p>
<var>ActivePageComponent</var> is a read-only <var>TPage</var> property which 
represents the active page in the notebook control.
</p>
<remark>
Should not be published because reading the property value can raise an 
exception.
</remark>
</descr>
<seealso/>
</element>

<element name="TNotebook.Page">
<short>
Provides access to a page object in the notebook control by its ordinal 
position in the list of pages.
</short>
<descr>
<p>
Page is an indexed read-only TPage property used to access a page object for 
the notebook control by its ordinal position in the list of pages. TPage 
values in the Page property are maintained when values are added to or 
removed from Pages.
</p>
<p>
Use IndexOf to get the position where a specific TPage instance is stored in 
the Page and Pages properties.
</p>
<p>
Use PageCount to get the number of pages defined in the Pages property. Use 
ActivePageComponent to get the TPage instance at the position in PageIndex. 
Use ActivePage to get the name of the page at the position in PageIndex.
</p>
</descr>
<seealso/>
</element>
<element name="TNotebook.Page.Index">
<short>Ordinal position for the requested page object.</short>
</element>

<element name="TNotebook.PageCount">
<short>
Indicates the number of page objects defined for the notebook control.
</short>
<descr>
<p>
<var>PageCount</var> is a read-only Integer property that indicates the 
number of page objects defined for the notebook control. The value in 
PageCount is determined by the total number of entries stored in the list of 
Pages.
</p>
<p>
Use methods and properties in Pages to maintain the page names used in the 
notebook control.
</p>
</descr>
<seealso/>
</element>

<element name="TNotebook.PageIndex">
<short>Ordinal position for the active page in the notebook control.</short>
<descr>
<p>
<var>PageIndex</var> is an <var>Integer</var> property that indicates the 
ordinal position for the active page in the notebook control.
</p>
<remark>
A value assigned to the property must must be in the range -1 to the number 
of defined <var>Pages</var> - 1. No actions are performed in the method when 
the new value for PageIndex is not in the required range.
</remark>
<p>
Setting the value in the property causes the active page object to be hidden; 
it is hidden at run-time and design-time using the <var>Visible</var> and 
<var>ControlStyle</var> properties. The <var>OnBeforeShow</var> event handler 
in the newly selected page object is signalled (when assigned). The page 
object is displayed by updating its Visible, ControlStyle, and 
<var>Align</var> properties.
</p>
<p>
The default value for the property is <b>-1</b>, and indicates that a page is 
not currently selected or available.
</p>
</descr>
<seealso/>
</element>

<element name="TNotebook.Pages">
<short>
Contains the page names and TPage instances defined for the notebook control.
</short>
<descr>
<p>
<var>Pages</var> is a <var>TStrings</var> property which contains the page 
names and associated TPage instances for the pages defined for the notebook 
control.
</p>
<p>
When the component is created, a TUNPages instance is created and assigned to 
the property member. It provides overridden methods which maintain the TPage 
instance associated with a given page name. You can use the Pages property 
editor in the Object Inspector to maintain the page names and their TPage 
instances.
</p>
<p>
To add a page to Pages at run-time:
</p>
<code>
procedure TForm1.AddButtonClick(Sender: TObject);
var
  NewPageIndex: integer;
  NewPage: TPage;
  PageLabel: TLabel;
begin
  NewPageIndex := Notebook1.Pages.Add(Format('[Page %d]', [Notebook1.Pages.Count]));
  NewPage := Notebook1.Page[NewPageIndex];
  NewPage.Color := RgbToColor(Random(128)+127, Random(128)+127, Random(128)+127);
  PageLabel := TLabel.Create(Self);
  with PageLabel do
  begin
    Left := 20;
    Top := 10 + NewPageIndex * 20;
    Width := 500;
    Height := 20;
    Caption := Format('This is page [%d]',[NewPageIndex]);
    Parent := NewPage;
  end;
  Label1.Caption := IntToStr(Notebook1.PageCount)+ ' pages total';
end;
</code>
<p>
Use the indexed Page property to access the TPage instance for a given page 
by its ordinal position. Use PageIndex to set the active page in the notebook 
control by its ordinal position in Pages. For example:
</p>
<code>
procedure TForm1.PrevButtonClick(Sender: TObject);
begin
  if Notebook1.PageIndex &gt; 0 then
    Notebook1.PageIndex := Notebook1.PageIndex - 1;
end;

procedure TForm1.NextButtonClick(Sender: TObject);
begin
  if Notebook1.PageIndex &lt; Notebook1.PageCount-1 then
    Notebook1.PageIndex := Notebook1.PageIndex + 1;
end;
</code>
<p>
Assigning a new TStrings value to Pages causes the new page names to be 
compared to the existing internal page objects (TPage) in the notebook. New 
or altered pages are added or replaced in the notebook as needed. An existing 
page object not present in the new page names is deleted. The Application 
singleton is notified that the page object is being released and allowed to 
process the message.
</p>
<p>
A new value assigned to Pages is not stored at design-time. Use the Object 
Inspector to maintain the values in the property.
</p>
</descr>
<seealso>
<link id="TPage"/>
<link id="TUNBPages"/>
<link id="#rtl.classes.TStrings">TStrings</link>
</seealso>
</element>

<element name="TNotebook.Align" link="#lcl.controls.TControl.Align"/>
<element name="TNotebook.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TNotebook.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TNotebook.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TNotebook.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TNotebook.Color" link="#lcl.controls.TControl.Color"/>
<element name="TNotebook.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TNotebook.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TNotebook.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TNotebook.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TNotebook.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TNotebook.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TNotebook.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TNotebook.TabStop" link="#lcl.control.TWinControl.TabStop"/>
<element name="TNotebook.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TNotebook.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TNotebook.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TNotebook.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TNotebook.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TNotebook.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TNotebook.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TNotebook.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TNotebook.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TNotebook.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TNotebook.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TNotebook.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TNotebook.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TNotebook.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TNotebook.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TNotebook.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TNotebook.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

<element name="TTimer">
<short>
<var>TTimer</var> is an elapsed timer useful in many applications.
</short>
<descr>
<p>
<var>TTimer</var> is a <var>TCustomTimer</var> descendant which implements an
elapsed timer useful in many applications. It inherits most of its properties 
from <link id="#lcl.CustomTimer.TCustomTimer">TCustomTimer</link>.
</p>
</descr>
</element>

<element name="TTimer.Enabled" link="#lcl.customtimer.TCustomTimer.Enabled"/>
<element name="TTimer.Interval" link="#lcl.customtimer.TCustomTimer.Interval"/>
<element name="TTimer.OnTimer" link="#lcl.customtimer.TCustomTimer.OnTimer"/>
<element name="TTimer.OnStartTimer" link="#lcl.customtimer.TCustomTimer.OnStartTimer"/>
<element name="TTimer.OnStopTimer" link="#lcl.customtimer.TCustomTimer.OnStopTimer"/>

<element name="TIdleTimerAutoEvent">
<short>
<var>TIdleTimerAutoEvent</var> is an enumerated type containing the events 
relevant to a timer.
</short>
<descr>
<p>
<var>TIdleTimerAutoEvent</var> is an enumerated type containing the events 
relevant to a timer. TIdleTimerAutoEvent is the type used for the 
<var>AutoStartEvent</var> and <var>AutoEndEvent</var> properties in 
<var>TCustomIdleTimer</var>. Values in the enumeration are used when a timer 
executes its <var>DoOnIdle</var>, <var>DoOnIdleEnd</var>, and 
<var>DoOnUserInput</var> methods.
</p>
</descr>
<seealso>
<link id="TCustomIdleTimer.AutoStartEvent"/>
<link id="TCustomIdleTimer.AutoEndEvent"/>
<link id="TCustomIdleTimer.DoOnIdle"/>
<link id="TCustomIdleTimer.DoOnIdleEnd"/>
<link id="TCustomIdleTimer.DoOnUserInput"/>
</seealso>
</element>
<element name="TIdleTimerAutoEvent.itaOnIdle">
<short>Timer responds to idle start events.</short>
</element>
<element name="TIdleTimerAutoEvent.itaOnIdleEnd">
<short>Time responds to idle end events.</short>
</element>
<element name="TIdleTimerAutoEvent.itaOnUserInput">
<short>Time responds to user input events.</short>
</element>

<element name="TIdleTimerAutoEvents">
<short>
<var>TIdleTimerAutoEvents</var> is set type used to store 
<var>TIdleTimerAutoEvent</var> values.
</short>
<descr>
<remark>Not used in the current LCL version.</remark>
</descr>
<seealso/>
</element>

<element name="TCustomIdleTimer">
<short>Implements the base class for TIdleTimer.</short>
<descr>
<p>
<var>TCustomIdleTimer</var> is a <var>TCustomTimer</var> descendant which 
implements the base class for <var>TIdleTimer</var>. TCustomIdleTimer extends 
the ancestor class to use events which toggle the timer state. In addition, 
support is provided for adding and removing its event handlers in the global 
TApplication instance.
</p>
</descr>
<seealso>
<link id="TCustomTimer"/>
<link id="TIdleTimer"/>
<link id="TApplication.AddOnIdleHandler"/>
<link id="TApplication.AddOnIdleEndHandler"/>
<link id="TApplication.AddOnUserInputHandler"/>
<link id="TApplication.RemoveOnIdleHandler"/>
<link id="TApplication.RemoveOnIdleEndHandler"/>
<link id="TApplication.RemoveOnUserInputHandler"/>
</seealso>
</element>

<element name="TCustomIdleTimer.FAutoEnabled"/>
<element name="TCustomIdleTimer.FAutoEndEvent"/>
<element name="TCustomIdleTimer.FAutoStartEvent"/>
<element name="TCustomIdleTimer.FFireOnIdle"/>
<element name="TCustomIdleTimer.FHandlersConnected"/>

<element name="TCustomIdleTimer.UpdateHandlers">
<short>
Updates the event handlers used in the Application singleton.
</short>
<descr>
<p>
<var>UpdateHandlers</var> is a procedure used to update the event handler 
assignments in the <var>Application</var> singleton based on the value in the 
<var>AutoEnabled</var> property. When AutoEnabled is <b>True</b>, the 
following methods are assigned as event handler:
</p>
<dl>
<dt>DoOnIdle</dt>
<dd>Assigned using Application.AddOnIdleHandler</dd>
<dt>DoOnIdleEnd</dt>
<dd>Assigned using Application.AddOnIdleEndHandler</dd>
<dt>DoOnUserInput</dt>
<dd>Assigned using Application.AddOnUserInputHandler</dd>
</dl>
<remark>
No assignments are made to the Application singleton at design-time, or when 
the component is being loaded or destroyed.
</remark>
<p>
When AutoEnabled is <b>False</b>, the event handler routines are disconnected 
from the Application singleton.
</p>
<remark>
No actions are performed when handlers have not been previously assigned to 
Application, or Application has not been assigned (contains <b>Nil</b>).
</remark>
</descr>
<seealso/>
</element>

<element name="TCustomIdleTimer.SetAutoEnabled">
<short>Sets the value for the AutoEnabled property.</short>
<descr>
<p>
Calls UpdateHandlers to add or remove event handlers assigned in the 
Application singleton.
</p>
</descr>
<seealso>
<link id="#lcl.forms.Application">Application</link>
</seealso>
</element>
<element name="TCustomIdleTimer.SetAutoEnabled.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomIdleTimer.DoOnIdle">
<short>
Performs actions which execute the idle timer.
</short>
<descr>
<p>
<var>DoOnIdle</var> is a procedure which performs the actions needed to 
execute the idle timer. The value in <var>FireOnIdle</var> is used to 
determine whether the timer can be executed for the idle state. When 
FireOnIdle is <b>True</b>, the <var>DoOnTimer</var> method is called to 
signal the <var>OnTimer</var> event handler (when assigned) and the value in 
the <var>Done</var> argument is set to <b>False</b>.
</p>
<p>
The <var>AutoEnabled</var> property is checked to determine if the value in 
the <var>Enabled</var> property can be updated to reflect the state needed 
for the <var>AutoEndEvent</var> and <var>AutoStartEvent</var> properties. If 
AutoEndEvent contains <var>itaOnIdle</var>, the value in Enabled is set to 
<b>False</b>. If <var>AutoStartEvent</var> contains <var>itaOnIdle</var>, the 
value in Enabled is set to <b>True</b>.
</p>
<remark>
The Enabled property is not modified when AutoEnabled contains <b>False</b>.
</remark>
<p>
DoOnIdle is assigned as a handler for the <var>Application</var> singleton in 
the <var>UpdateHandlers</var> method.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomIdleTimer.DoOnIdle.Sender">
<short>Object for the event notification.</short>
</element>
<element name="TCustomIdleTimer.DoOnIdle.Done">
<short>
<b>True</b> if the idle timer has already executed its OnTimer event handler.
</short>
</element>

<element name="TCustomIdleTimer.DoOnIdleEnd">
<short>
<var>DoOnIdleEnd</var> performs actions when the idle state ends for the 
timer.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomIdleTimer.DoOnIdleEnd.Sender">
<short>Object for the event notification.</short>
</element>

<element name="TCustomIdleTimer.DoOnUserInput">
<short>
<var>DoOnUserInput</var> performs the code for responding to user input.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomIdleTimer.DoOnUserInput.Sender">
<short>Object for the event notification.</short>
</element>
<element name="TCustomIdleTimer.DoOnUserInput.Msg">
<short>Message examined in the method.</short>
</element>

<element name="TCustomIdleTimer.Loaded">
<short>
Performs actions needed when the component has finished loading during LCL 
component streaming.
</short>
<descr>
<p>
<var>Loaded</var> is an overridden procedure used to perform actions needed 
when the component has finished loading in the <b>LCL</b> component streaming 
mechanism. Loaded calls the inherited method, and calls 
<var>UpdateHandlers</var> to connect/disconnect event handlers in the 
Application singleton.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent">TComponent</link>
</seealso>
</element>

<element name="TCustomIdleTimer.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance. 
Create calls the inherited constructor using <var>TheOwner</var> as the owner 
of the class instance. Create sets the default values for the following 
properties:
</p>
<dl>
<dt>AutoEnabled</dt>
<dd>Set to <b>False</b></dd>
<dt>AutoStartEvent</dt>
<dd>Set to itaOnIdle</dd>
<dt>AutoEndEvent</dt>
<dd>Set to itaOnUserInput</dd>
</dl>
</descr>
<seealso>
<link id="#lcl.customtimer.TCustomTimer.Create">TCustomTimer.Create</link>
</seealso>
</element>
<element name="TCustomIdleTimer.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomIdleTimer.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> sets the value in <var>AutoEnabled</var> to <b>False</b>, 
and calls the inherited destructor.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomIdleTimer.AutoEnabled">
<short>
Controls whether the idle timer can be automatically enabled or disabled.
</short>
<descr>
<p>
<var>AutoEnabled</var> is a <var>Boolean</var> property which controls 
whether the idle timer can be automatically Enabled (or disabled) in event 
handler routines. The default value for the property is <b>False</b>, and 
indicates that event handlers in the timer are not assigned to the 
<var>Application</var> singleton in the <var>UpdateHandlers</var> method.
</p>
<p>
The value in AutoEnabled is used in the <var>DoOnIdle</var>, 
<var>DoOnIdleEnd</var>, and <var>DoOnUserInput</var> methods. When 
AutoEnabled contains <b>False</b>, these routines do not perform actions 
which toggle the value in the <var>Enabled</var> property.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomIdleTimer.AutoStartEvent">
<short>
<var>AutoStartEvent</var> - the event that triggers auto-start (either idle 
time-out or user input).
</short>
<descr>
<p>
AutoStartEvent defines, when Enabled is automatically set to <b>True</b>. 
This is one of the following events:
</p>
<ul>
<li>on application becomes idle</li>
<li>on application stops being idle (e.g. user input or some timer fired)</li>
<li>user input, e.g. key press, mouse move</li>
</ul>
<p>
The default value for the property is <var>itaOnIdle</var>.
</p>
</descr>
</element>

<element name="TCustomIdleTimer.AutoEndEvent">
<short>
<var>AutoEndEvent</var> - the event that stops the timer by setting Enabled 
to <b>False</b>.
</short>
<descr>
<p>
AutoEndEvent defines, when Enabled is automatically set to <b>False</b>. This 
is one of the following events:
</p>
<ul>
<li>on application becomes idle</li>
<li>on application stops being idle (e.g. user input or some timer fired)</li>
<li>user input, e.g. key press, mouse move</li>
</ul>
<p>
The default value for the property is <var>itaOnUserInput</var>.
</p>
</descr>
</element>

<element name="TCustomIdleTimer.FireOnIdle">
<short>
<var>FireOnIdle</var> - Boolean property determining whether the timer should 
fire when idle.
</short>
<descr>
<p>
The default value for the property is <b>False</b>.
</p>
</descr>
</element>

<element name="TIdleTimer">
<short>
Implements a timer to measure idle time between processes.
</short>
<descr>
<p>
<var>TIdleTimer</var> is a timer used to measure idle time between processes.
</p>
</descr>
</element>

<element name="TIdleTimer.AutoEnabled" link="#lcl.extctrls.TCustomIdleTimer.AutoEnabled"/>
<element name="TIdleTimer.AutoEndEvent" link="#lcl.extctrls.TCustomIdleTimer.AutoEndEvent"/>
<element name="TIdleTimer.AutoStartEvent" link="#lcl.extctrls.TCustomIdleTimer.AutoStartEvent"/>
<element name="TIdleTimer.Enabled" link="#lcl.customtimer.TCustomTimer.Enabled"/>
<element name="TIdleTimer.Interval" link="#lcl.customtimer.TCustomTimer.Interval"/>
<element name="TIdleTimer.OnTimer" link="#lcl.customtimer.TCustomTimer.OnTimer"/>
<element name="TIdleTimer.OnStartTimer" link="#lcl.customtimer.TCustomTimer.OnStartTimer"/>
<element name="TIdleTimer.OnStopTimer" link="#lcl.customtimer.TCustomTimer.OnStopTimer"/>

<element name="TShapeType">
<short>
<var>TShapeType</var> is an enumerated type with values representing standard 
geometric shapes.
</short>
<descr>
<p>
<var>TShapeType</var> is an enumerated type with values that represent 
standard geometric shapes. TShapeType is the type used to implement the 
<var>Shape</var> property in <var>TShape</var>.
</p>
</descr>
<seealso>
<link id="TCustomShape.Shape"/>
</seealso>
</element>
<element name="TShapeType.stRectangle">
<short>
Draws a rectangle shape in the client area for a TShape control.
</short>
</element>
<element name="TShapeType.stSquare">
<short>Draws a square shape in the client area for a TShape control.</short>
</element>
<element name="TShapeType.stRoundRect">
<short>
Draws a rectangle shape with radiused corners in the client area for a TShape 
control.
</short>
</element>
<element name="TShapeType.stRoundSquare">
<short>
Draws a square shape with radiused corners in the client area for a TShape 
control.
</short>
</element>
<element name="TShapeType.stEllipse">
<short>
Draws a ellipse shape that fits in the client area for a TShape control.
</short>
</element>
<element name="TShapeType.stCircle">
<short>
Draws a circle shape that fits in the client area for a TShape control.
</short>
</element>
<element name="TShapeType.stSquaredDiamond">
<short>
Draws a four point polygon in the client area for a TShape control. Same as 
stDiamond.
</short>
</element>
<element name="TShapeType.stDiamond">
<short>
Draws a four point polygon in the client area for a TShape control. Same as 
stSquaredDiamond.
</short>
</element>
<element name="TShapeType.stTriangle">
<short>
Draws an upward pointing triangle in the client area for a TShape control.
</short>
</element>
<element name="TShapeType.stTriangleLeft">
<short>
Draws a triangle pointing to the left in the client area for a TShape control.
</short>
</element>
<element name="TShapeType.stTriangleRight">
<short>
Draws a triangle pointing to the right in the client area for a TShape 
control.
</short>
</element>
<element name="TShapeType.stTriangleDown">
<short>
Draws a downward-pointing triangle in the client area for a TShape control.
</short>
</element>
<element name="TShapeType.stStar">
<short>
Draws a five-point star shape in the client area for a TShape control.
</short>
</element>
<element name="TShapeType.stStarDown">
<short>
Draws a five-point star shape (center angle points down) in the client area 
for a TShape control.
</short>
</element>
<element name="TShapeType.stPolygon">
<short>
Draws a shape with user-specified vertices in the client area for a TShape 
control.
</short>
</element>

<element name="TShapePointsEvent">
<short>
Specifies an event handler used to get an array of user-specified vertices for 
a polygonal shape in TShape,
</short>
<descr/>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomShape.OnShapePoints"/>
<link id="#lazutils.graphtype.TPointArray">TPointArray</link>
</seealso>
</element>
<element name=" TShapePointsEvent.Sender">
<short>
Object instance (TShape) for the event notification.
</short>
</element>
<element name="TShapePointsEvent.Points">
<short>
Returns the TPoint instances for the vertices on a polygonal shape.
</short>
</element>
<element name="TShapePointsEvent.Winding">
<short>
Returns <b>True</b> if Winding order was used for the TPoint instances in 
Points.
</short>
</element>

<element name="TCustomShape">
<short>
Defines a shaped control with an arbitrary geometric shape.
</short>
<descr>
<p>
<var>TCustomShape</var> is a <var>TGraphicControl</var> descendant used to draw 
the control with an arbitrary geometric shape. The Shape property determines 
which geometric shape is displayed, and can be one of a series of standard 
shapes defined in the <var>TShapeType</var> enumeration. The Brush and Pen 
properties control the fill and line attributes for the shaped control.
</p>
<p>
TCustomShape is the base class for TShape. Do not create instances of 
TCustomShape; use TShape instead.
</p>
</descr>
<version>
Added in LCL version 4.0 as the base class for TShape.
</version>
<seealso>
<link id="TShape"/>
<link id="TShapeType"/>
<link id="#lcl.controls.TGraphicControl">TGraphicControl</link>
</seealso>
</element>

<!-- private -->
<element name="TCustomShape.FPen"/>
<element name="TCustomShape.FBrush"/>
<element name="TCustomShape.FShape"/>
<element name="TCustomShape.FBitmapCopy"/>
<element name="TCustomShape.FOnShapeClick"/>
<element name="TCustomShape.FOnShapePoints"/>

<element name="TCustomShape.SetBrush">
<short>Sets the value for the Brush property.</short>
<descr/>
<seealso>
<link id="TCustomShape.Brush"/>
</seealso>
</element>
<element name="TCustomShape.SetBrush.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomShape.SetPen">
<short>Sets the value for the Pen property.</short>
<descr/>
<seealso>
<link id="TCustomShape.Pen"/>
</seealso>
</element>
<element name="TCustomShape.SetPen.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomShape.SetShape">
<short>Sets the value for the Shape property.</short>
<descr/>
<seealso>
<link id="TCustomShape.Shape"/>
</seealso>
</element>
<element name="TCustomShape.SetShape.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomShape.SetOnShapePoints">
<short>
Updates the shaped control when a new value is assigned to the OnShapePoints 
event handler.
</short>
<descr/>
<seealso>
<link id="TCustomShape.OnShapePoints"/>
<link id="TShapePointsEvent"/>
</seealso>

</element>
<element name="TCustomShape.SetOnShapePoints.Value">
<short>
New value for the OnShapePoints event handler.
</short>
</element>

<!-- protected -->
<element name="TCustomShape.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomShape.GetControlClassDefaultSize">
<short>Gets the default size for instances of the control.</short>
<descr>
<p>
<var>GetControlClassDefaultSize</var> is an overridden <var>TSize</var> class 
function which provides the default size for instances of the control. The 
return value is updated in the method to use dimensions of 65 x 65 pixels.
</p>
<p>
GetControlClassDefaultSize is called from the <var>Create</var> method, and 
used to set the initial value in the <var>Bounds</var> for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>
<element name="TCustomShape.GetControlClassDefaultSize.Result">
<short>
TSize instance with the dimensions for instances of the control class.
</short>
</element>

<element name="TCustomShape.Click">
<short>
Performs actions needed when a mouse click event occurs on the shaped control.
</short>
<descr>
<p>
<var>Click</var> is an overridden method in <var>TShape</var>. It calls the 
inherited method (in TControl) to signal an assigned OnClick event handler, and/
or execute and assigned Action when the control has been clicked. It extends 
the method to signal the OnShapeClick event handler (when assigned) if the 
mouse was positioned within the interior for the Shape on the control. 
</p>
<p>
Click is activated (in the ancestor class) when the left mouse button is 
released.
</p>
</descr>
<seealso>
<link id="TCustomShape.OnShapeClick"/>
<link id="#lcl.controls.TControl.Click">TControl.Click</link>
<link id="#lcl.controls.TControl.OnClick">TControl.OnClick</link>
</seealso>
</element>

<element name="TCustomShape.CMShapeHitTest">
<short>
Handles a CM_MASKHITTEST message for the control.
</short>
<descr>
<p>
Converts the parent screen coordinates in <var>Message</var> to client 
coordinates for the control. It calls PtInShape and updates the Result member 
in Message to indicate whether the mouse click occurred on the interior of the 
shape on the control. 0 indicates that the mouse event was inside or on the 
Shape. 1 indicates that the event was outside of the area for the Shape.
</p>
</descr>
<seealso>
<link id="TCustomShape.PtInShape"/>
<link id="#lcl.controls.TControl.ParentToClient">TControl.ParentToClient</link>
<link id="#lcl.controls.TCMHitTest">TCMHitTest</link>
</seealso>
</element>
<element name="TCustomShape.CMShapeHitTest.Message">
<short>
Control message with the parent screen coordinates for the mouse event.
</short>
</element>

<element name="TCustomShape.DrawToCanvas">
<short>
Draws the Shape for the control on the specified canvas.
</short>
<descr>
<p>
<var>DrawToCanvas</var> is a method used to draw the shaped control on the 
TCanvas instance specified in the <var>ACanvas</var> argument. It calculates 
the drawing area (TRect) needed using the control Width and Height, the width 
of the Pen on the canvas, and the Shape for the control.
</p>
<p>
The Brush style and color for the canvas are set in the calling routine. This 
allows the same method to be used to draw either the content for the shaped 
control or its Monochrome mask - depending on the settings in the canvas.
</p>
<p>
DrawToCanvas calls methods in ACanvas to perform drawing operations needed for 
the value in Shape. For example:
</p>
<dl>
<dt>stRectangle, stSquare</dt>
<dd>
Calls the Rectangle method.
</dd>
<dt>stRoundRect, stRoundSquare</dt>
<dd>
Calls the RoundRect method.
</dd>
<dt>stCircle, stEllipse</dt>
<dd>
Calls the Ellipse method.
</dd>
<dt>stSquaredDiamond, stDiamond</dt>
<dd>
Allocates TPoint instances with the four (4) vertices needed for the shape and 
calls the Polygon method.
</dd>
<dt>stTriangle, stTriangleDown, stTriangleLeft, stTriangleRight</dt>
<dd>
Allocates TPoint instances with the three (3) vertices needed for the shape and 
calls the Polygon method.
</dd>
<dt>stStar, stStarDown</dt>
<dd>
Calculates the center point and radii needed to scale the width or height for 
the shape. Allocates the eleven (11) vertices needed for the shape and calls 
the Polyon method.
</dd>
<dt>stPolygon</dt>
<dd>
Signals the OnShapePoints event handler (when assigned) to get the vertices and 
polygon winding for a user-specified or irregular polygonal shape. If the event 
handler returns more than 2 vertices, the Polygon method is called using the 
points. No actions are performed if 2 (or fewer points) are returned as 
vertices for the polygon. Please note that the Shape is not drawn on the 
control canvas at design-time; a rectangle with a dashed border and a red 'X' 
are drawn to the corners of the designer surface.
</dd>
</dl>
<p>
DrawToCanvas is called from the UpdateMask and Paint methods.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomShape.Shape"/>
<link id="TCustomShape.Pen"/>
<link id="TCustomShape.OnShapePoints"/>
<link id="TCustomShape.UpdateMask"/>
<link id="TCustomShape.Paint"/>
<link id="#lcl.graphics.TCanvas">TCanvas</link>
<link id="#lcl.controls.TControl.Width">TControl.Width</link>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
<link id="#rtl.classes.TRect">TRect</link>
<link id="#rtl.classes.TPoint">TPoint</link>
</seealso>
</element>
<element name="`TShape.DrawToCanvas.ACanvas">
<short>
TCanvas instance where the shaped control is drawn.
</short>
</element>

<element name="TCustomShape.UpdateMask">
<short>
Updates the internal Monochrome bitmap used as a mask to detect mouse click 
events on the shaped control.
</short>
<descr>
<p>
<var>UpdateMask</var> ensures that the internal TBitmap instance used in the 
class is allocated and configured (when not already assigned). It is configured 
as a Monochrome image where pixels outside of the area for the Shape use the 
color clWhite. Pixels which are inside of (or on an edge) for the Shape use the 
color clBlack.
</p>
<p>
UpdateMask calls the DrawToCanvas method to draw the image for the shaped 
control on the canvas for the bitmap.
</p>
<p>
UpdateMask is called from the PtInShape method prior to checking where the 
mouse pointer was located when a click event occurred.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomShape.DrawToCanvas"/>
<link id="TCustomShape.PtInShape"/>
<link id="TCustomShape.Pen"/>
<link id="#lcl.graphics.TCanvas">TCanvas</link>
<link id="#lcl.graphics.TBitmap">TBitmap</link>
<link id="#lcl.controls.TControl.Width">TControl.Width</link>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
</seealso>
</element>

<!-- public -->
<element name="TCustomShape.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance. It 
calls the inherited constructor on entry to instantiate and configure the 
control including its Canvas. It sets the initial bounds for the control using 
the default size for the class type. Create allocates resources needed for the 
Pen and Brush in the control, and assigns the OnChange handlers notified when 
the members have been changed.
</p>
</descr>
<seealso>
<link id="TCustomShape.Brush"/>
<link id="TCustomShape.Pen"/>
<link id="TCustomShape.GetControlClassDefaultSize"/>
<link id="#lcl.controls.TGraphicControl.Canvas">TGraphicControl.Canvas</link>
<link id="#lcl.controls.TGraphicControl.Create">TGraphicControl.Create</link>
<link id="#lcl.controls.TControl.ControlStyle">TControl.ControlStyle</link>
</seealso>
</element>
<element name="TCustomShape.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomShape.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. It 
ensures that resources allocated in the class instance, including the Pen and 
Brush, are freed. It calls the inherited destructor prior to exit to free the 
Canvas and other resources allocated in ancestor classes.
</p>
</descr>
<seealso>
<link id="TCustomShape.Brush"/>
<link id="TCustomShape.Pen"/>
<link id="#lcl.controls.TGraphicControl.Canvas">TGraphicControl.Canvas</link>
<link id="#lcl.controls.TGraphicControl.Destroy">TGraphicControl.Destroy</link>
<link id="#lcl.controls.TControl.Destroy">TControl.Destroy</link>
</seealso>
</element>

<element name="TCustomShape.PtInShape">
<short>
Determines whether the coordinates for the specified Point are within the area 
for the shaped control.
</short>
<descr>
<p>
<var>PtInShape</var> uses a temporary TBitmap instance to determine whether the 
coordinates in P are within the interior of the shaped control. The Bitmap 
contains a monochrome variant of the filled shape where the pixels inside the 
shape have the color clBlack. Pixels outside of the filled interior area have 
the mask color for the monochrome bitmap.
</p>
<p>
The return value is <b>True</b> if the pixel located at the X and Y coordinates 
in <var>P</var> has the color clBlack. False indicates that the parent control 
(or a partially obstructed sibling control) was the target under the specified 
mouse position.
</p>
<p>
PtInShape is used in the Click method to determine whether an assigned 
OnShapeClick event handler is signalled for the mouse position on the control. 
It is also called when CMShapeHitTest handles a TCMHittest message received for 
the control design surface.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomShape.Click"/>
<link id="TCustomShape.OnShapeClick"/>
<link id="TCustomShape.CMShapeHitTest"/>
<link id="#lcl.graphics.TBitmap">TBitmap</link>
<link id="#rtl.classes.TPoint">TPoint</link>
</seealso>
</element>
<element name="TCustomShape.PtInShape.Result">
<short>
Returns <b>True</b> if the specified coordinates are within the interior of the 
shape.
</short>
</element>
<element name="TCustomShape.PtInShape.P">
<short>
TPoint instance with the horizontal (X) and vertical (Y) coordinates tested in 
the method.
</short>
</element>

<element name="TCustomShape.Paint">
<short>Draws the shape for the control on its Canvas.</short>
<descr>
<p>
<var>Paint</var> is an overridden procedure used to draw the shape for the 
control on its <var>Canvas</var>. Paint uses the <var>Pen</var>, 
<var>Brush</var>, and <var>Shape</var> defined in the control. Drawing 
methods in Canvas are called to render the desired Shape to a rectangle using 
the Width and Height defined in the component.
</p>
<p>
Paint calls the inherited Paint method to signal an OnPaint event handler 
assigned in the class instance.
</p>
</descr>
<seealso>
<link id="TCustomShape.Pen"/>
<link id="TCustomShape.Brush"/>
<link id="TGraphicControl.Canvas"/>
<link id="TShapeType"/>
<link id="#lcl.controls.TGraphicControl.Paint">TGraphicControl.Paint</link>
</seealso>
</element>

<element name="TCustomShape.StyleChanged">
<short>
Implements an OnChange event handler signalled when the Brush or the Pen on the 
control has been changed.
</short>
<descr>
<p>
<var>StyleChanged</var> is a method used to perform actions needed when the 
Brush or Pen for the shaped control has been changed. StyleChanged is assigned 
to the OnChanged event handler (in both Brush and Pen) in the Create 
constructor.
</p>
<p>
<var>Sender</var> contains the object instance for the event notification, but 
it is not used in the implementation.
</p>
<p>
StyleChanged ensures that the control has an assigned Parent with a valid 
Handle before calling Invalidate to redraw the control. No actions are 
performed in the handler if Parent is <b>Nil</b>, when the control is not 
Visible, or at design-time.
</p>
</descr>
<seealso>
<link id="TCustomShape.Brush"/>
<link id="TCustomShape.Pen"/>
<link id="TCustomShape.Create"/>
<link id="#lcl.graphics.TBrush">TBrush</link>
<link id="#lcl.graphics.TPen">TPen</link>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
<link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
<link id="#lcl.controls.TControl.Invalidate">TControl.Invalidate</link>
<link id="#rtl.classes.TComponent.ComponentState">TComponent.ComponentState</link>
</seealso>
</element>
<element name="TCustomShape.StyleChanged.Sender">
<short>Object for the event notification.</short>
</element>

<element name="TCustomShape.Brush">
<short>
The Brush used to fill the shaped control.
</short>
<descr>
<p>
<var>Brush</var> is a <var>TBrush</var> property which contains the attributes 
used to fill the shaped control. Its Color property can be used to control the 
fill color for the shaped control. Its Style property determines whether the 
fill Color is opaque or transparent.
</p>
<p>
Resources allocated to Brush are managed by the class instance in the Create 
and Destroy methods. Setting a new value for the property causes Invalidate to 
be called to redraw the control.
</p>
<p>
Brush and Pen are used in the DrawToCanvas method, and in UpdateMask when the 
internal mask image is created for the shaped control.
</p>
<p>
Use Pen to set attributes applied to the lines drawn for the Shape on the 
control.
</p>
</descr>
<seealso>
<link id="TCustomShape.Pen"/>
<link id="TCustomShape.Create"/>
<link id="TCustomShape.Destroy"/>
<link id="TCustomShape.DrawToCanvas"/>
<link id="TCustomShape.UpdateMask"/>
<link id="#lcl.graphics.TBrush">TBrush</link>
<link id="#lcl.controls.TControl.Invalidate">TControl.Invalidate</link>
</seealso>
</element>

<element name="TCustomShape.Pen">
<short>
The Pen used to draw lines on the shaped control.
</short>
<descr>
<p>
Pen is a TPen property which contains the attributes used to draw lines for the 
shape on the control. Its Color property can be used to control the fill color 
for the lines. Its Style property determines the line drawing style like solid, 
dotted, or dashed.
</p>
<p>
Resources allocated to Pen are managed by the class instance in the Create 
and Destroy methods. Setting a new value for the property causes Invalidate to 
be called to redraw the control.
</p>
<p>
Brush and Pen are used in the DrawToCanvas method, and in UpdateMask when the 
internal mask image is created for the shaped control.
</p>
<p>
Use Brush to set attributes like the fill color and opacity for the Shape on 
the control.
</p>
</descr>
<seealso>
<link id="TCustomShape.Brush"/>
<link id="TCustomShape.Create"/>
<link id="TCustomShape.Destroy"/>
<link id="TCustomShape.DrawToCanvas"/>
<link id="TCustomShape.UpdateMask"/>
<link id="#lcl.graphics.TPen">TPen</link>
<link id="#lcl.controls.TControl.Invalidate">TControl.Invalidate</link>
</seealso>
</element>

<element name="TCustomShape.Shape">
<short>
Indicates the geometric shape drawn on the shaped control.
</short>
<descr>
<p>
<var>Shape</var> is a <var>TShapeType</var> property that specifies the 
geometric shape drawn on the control. Shape is used in the DrawToCanvas method. 
It and determines the number of vertices needed for the shape, and their 
locations on the control. It also determines the drawing operations performed 
to draw the Shape on the control Canvas. For example:
</p>
<dl>
<dt>stRectangle, stSquare</dt>
<dd>
Calls the Rectangle method for the canvas.
</dd>
<dt>stRoundRect, stRoundSquare</dt>
<dd>
Calls the RoundRect method for the canvas.
</dd>
<dt>stCircle, stEllipse</dt>
<dd>
Calls the Ellipse method for the canvas.
</dd>
<dt>stSquaredDiamond, stDiamond</dt>
<dd>
Allocates TPoint instances with the four (4) vertices needed for the shape and 
calls the Polygon method for the canvas.
</dd>
<dt>stTriangle, stTriangleDown, stTriangleLeft, stTriangleRight</dt>
<dd>
Allocates TPoint instances with the three (3) vertices needed for the shape and 
calls the Polygon method for the canvas.
</dd>
<dt>stStar, stStarDown</dt>
<dd>
Calculates the center point and radii needed to scale the width or height for 
the shape. Allocates the elevent (11) vertices needed for the shape and calls 
the Polyon method for the canvas.
</dd>
<dt>stPolygon</dt>
<dd>
Signals the OnShapePoints event handler (when assigned) to get the vertices and 
polygon winding for a user-specified or irregular polygonal shape. Line 
segments are drawn betwwen the vertices to render the shape for the control.
</dd>
</dl>
<p>
Use Brush and Pen to control the color and drawing style for the background and 
lines on the shaped control.
</p>
</descr>
<seealso>
<link id="TCustomShape.DrawToCanvas"/>
<link id="TCustomShape.OnShapePoints"/>
<link id="TCustomShape.Brush"/>
<link id="TCustomShape.Pen"/>
<link id="TShapeType"/>
<link id="#lcl.graphics.TCanvas">TCanvas</link>
</seealso>
</element>

<element name="TCustomShape.OnShapeClick">
<short>
Event handler signalled for a mouse click within the shaped control.
</short>
<descr>
<p>
<var>OnShapeClick</var> is a <var>TNotifyEvent</var> property with the event 
handler signalled if a mouse click occurs on the shaped control.
</p>
<p>
OnShapeClick is signalled (when assigned) from the Click method, and occurs 
after the OnClick handler has been signalled and an optional Action assigned to 
the control has been executed. The event handler is <b>not</b> signalled if 
PtInShape indicates that the mouse click did not occur within the interior
of the shape on the control.
</p>
<p>
An application must implement and assign a routine to the handler to respond to 
the event notification.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomShape.Click"/>
<link id="TCustomShape.PtInShape"/>
<link id="#lcl.controls.TControl.OnClick">TControl.OnClick</link>
<link id="#lcl.controls.TControl.Action">TControl.Action</link>
<link id="#rtl.classes.TNotifyEvent">TNotifyEvent</link>
</seealso>
</element>

<element name="TCustomShape.OnShapePoints">
<short>
Event handler signalled to get a custom vertices for the shape drawn on the 
control.
</short>
<descr>
<p>
<var>OnShapePoints</var> is a <var>TShapePointsEvent</var> property with the 
event handler signalled to get user-specified vertices for a polygonal Shape on 
the control. It allows a custom shape to be defined for the control, or an 
irregular variant of one of the predefined values in TShapeType. For example: a 
parallelogram, an isocoles triangle, or an octagon.
</p>
<p>
An application can implement and assign a handler routine using the signature 
in TShapePointsEvent to respond to the event notification. The handler can 
populate its array with the number of TPoint instances needed for the vertices 
on the polygon. It can also indicate whether Winding order was used for the 
returned vertices.
</p>
<p>
Changing the routine assigned to the handler causes the control to be redrawn.
</p>
<p>
OnShapePoints is signalled (when assigned) from the DrawToCanvas method when 
the Shape property is set to stPolygon.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomShape.Shape"/>
<link id="TCustomShape.DrawToCanvas"/>
<link id="TShapePointsEvent"/>
<link id="TShapeType"/>
<link id="#lazutils.graphtype.TPointArray">TPointArray</link>
</seealso>
</element>

<element name="TShape">
<short>
Implements a shaped control with an arbitrary geometric shape.
</short>
<descr>
<p>
<var>TShape</var> is a <var>TCustomShape</var> descendant 
used to draw the control with an arbitrary geometric shape. The Shape property 
determines which geometric shape is displayed, and can be one of a series of 
standard shapes defined in the <var>TShapeType</var> enumeration. The Brush and 
Pen properties control the fill and line attributes for the shaped control.
</p>
</descr>
<version>
Modified in LCL version 4.0 to be a TCustomShape descendant.
</version>
<seealso>
<link id="TCustomShape"/>
<link id="TShapeType"/>
</seealso>
</element>

<!-- published -->
<element name="TShape.Align" link="#lcl.controls.TControl.Align"/>
<element name="TShape.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TShape.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TShape.Brush" link="#lcl.extctrls.TCustomShape.Brush"/>
<element name="TShape.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TShape.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TShape.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TShape.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TShape.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TShape.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TShape.Pen" link="#lcl.extctrls.TCustomShape.Pen"/>
<element name="TShape.Shape" link="#lcl.extctrls.TCustomShape.Shape"/>
<element name="TShape.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TShape.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TShape.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TShape.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TShape.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TShape.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TShape.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TShape.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TShape.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TShape.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TShape.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TShape.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TShape.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TShape.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TShape.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TShape.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TShape.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="TShape.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="TShape.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
<element name="TShape.OnPaint" link="#lcl.controls.TGraphicControl.OnPaint"/>
<element name="TShape.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TShape.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TShape.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TShape.OnShapeClick" link="#lcl.extctrls.TCustomShape.OnShapeClick"/>
<element name="TShape.OnShapePoints" link="#lcl.extctrls.TCustomShape.OnShapePoints"/>

<element name="TResizeStyle">
<short>
Enumerated type with the drawing styles available when resizing using a 
splitter.
</short>
<descr>
<p>
<var>TResizeStyle</var> is an enumerated type with the drawing styles and 
actions available when resizing using a splitter. TResizeStyle is the type 
used to implement the <var>ResizeStyle</var> property in 
<var>TCustomSplitter</var>.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.ResizeStyle"/>
</seealso>
</element>
<element name="TResizeStyle.rsLine">
<short>
Draw a line, but don't update splitter position during movement.
</short>
</element>
<element name="TResizeStyle.rsNone">
<short>
Draw nothing and don't update splitter position during movement.
</short>
</element>
<element name="TResizeStyle.rsPattern">
<short>
draw a dot pattern, but don't update splitter position during movement.
</short>
</element>
<element name="TResizeStyle.rsUpdate">
<short>Draw nothing, but update splitter position during movement </short>
</element>

<element name="TCanOffsetEvent">
<short>
Specifies an event handler signalled to determine if the given offset is 
valid for a splitter control.
</short>
<descr>
<p>
<var>TCanOffsetEvent</var> is the type used to implement the 
<var>OnCanOffset</var> property in <var>TCustomSplitter</var>. It is 
signalled from the <var>CheckOffset</var> method when the splitter is moved.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.OnCanOffset"/>
<link id="TCustomSplitter.CheckOffset"/>
<link id="TCustomSplitter.MoveSplitter"/>
</seealso>
</element>
<element name="TCanOffsetEvent.Sender">
<short>Object for the event notification.</short>
</element>
<element name="TCanOffsetEvent.NewOffset">
<short>Offset value examined in the routine.</short>
</element>
<element name="TCanOffsetEvent.Accept">
<short><b>True</b> if the offset value is valid.</short>
</element>

<element name="TCanResizeEvent">
<short>
<var>TCanResizeEvent</var> - generic event handling method for resizing using 
splitter.
</short>
<descr>
<p>
<var>TCanResizeEvent</var> specifies an event handler signalled when a 
control is resized. Use to the arguments to the event handler to access the 
new size for the control and to set a flag that indicates if the new value is 
acceptable.
</p>
<p>
TCanResizeEvent is the type used to implement the <var>OnCanResize</var> 
event handler in <var>TCustomSplitter</var> and <var>TCustomControlBar</var>.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.OnCanResize"/>
<link id="TCustomControlBar.OnCanResize"/>
</seealso>
</element>
<element name="TCanResizeEvent.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TCanResizeEvent.NewSize">
<short>New size for the resize operation.</short>
</element>
<element name="TCanResizeEvent.Accept">
<short>Indicates if the new value is accepted.</short>
</element>

<element name="TCustomSplitter">
<short>
<var>TCustomSplitter</var> is the base type for <var>TSplitter</var>.
</short>
<descr>
<p>
<var>TCustomSplitter</var> is a <var>TCustomControl</var> descendant which 
implements a control used to resize, position and align a control to which it 
is anchored. TCustomSplitter displays a vertical or a horizontal bar anchored 
to the side of another control. Use the <var>Align</var> property to specify 
the orientation for the splitter control, and the adjacent control to which 
it is attached. When the splitter is moved with the mouse, the adjacent 
control with the same Align value will be resized.
</p>
<p>
This class defines many of the basic properties for the children classes, 
such as positioning, sizing and alignment.
</p>
<p>
Another usage scenario allows setting the Align property to 
<var>alNone</var>, and using <var>AnchorSides</var> and 
<var>ResizeAnchor</var>.
</p>
<p>
<var>TCustomSplitter</var> is the base type for <var>TSplitter</var>.
</p>
</descr>
<seealso>
<link id="TSplitter"/>
</seealso>
</element>

<element name="TCustomSplitter.FAutoSnap"/>
<element name="TCustomSplitter.FBeveled"/>
<element name="TCustomSplitter.FMinSize"/>
<element name="TCustomSplitter.FMouseInControl"/>
<element name="TCustomSplitter.FOnCanOffset"/>
<element name="TCustomSplitter.FOnCanResize"/>
<element name="TCustomSplitter.FOnMoved"/>
<element name="TCustomSplitter.FResizeAnchor"/>
<element name="TCustomSplitter.FResizeStyle"/>
<element name="TCustomSplitter.FSplitDragging"/>
<element name="TCustomSplitter.FSplitterStartMouseXY"/>
<element name="TCustomSplitter.FSplitterStartLeftTop"/>
<element name="TCustomSplitter.FSplitterWindow"/>

<element name="TCustomSplitter.GetResizeControl">
<short>Gets the value for the ResizeControl property.</short>
<descr/>
<seealso>
<link id="TCustomSplitter.ResizeControl"/>
</seealso>
</element>
<element name="TCustomSplitter.GetResizeControl.Result">
<short>Value for the ResizeControl property.</short>
</element>

<element name="TCustomSplitter.SetBeveled">
<short>Sets the value for the Beveled property.</short>
<descr/>
<seealso>
<link id="TCustomSplitter.Beveled"/>
</seealso>
</element>
<element name="TCustomSplitter.SetBeveled.AValue">
<short>New value for the Beveled property.</short>
</element>

<element name="TCustomSplitter.SetMinSize">
<short>Sets the value for the MinSize property.</short>
<descr/>
<seealso>
<link id="TCustomSplitter.MinSize"/>
</seealso>
</element>
<element name="TCustomSplitter.SetMinSize.AValue">
<short>New value for the MinSize property.</short>
</element>

<element name="TCustomSplitter.CMEnabledChanged">
<short>Handles the CM_ENABLEDCHANGED message.</short>
<descr>
<p>
Calls the inherited method, and performs the UpdateCursor method to apply the 
cursor shape needed for the value in ResizeAnchor.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.CMEnabledChanged">TWinControl.CMEnabledChanged</link>
</seealso>
</element>
<element name="TCustomSplitter.CMEnabledChanged.Message">
<short>Message with parameters handled in the method.</short>
</element>

<element name="TCustomSplitter.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomSplitter.AdaptAnchors">
<short>
Adjust anchor settings to reflect the value in the Align property.
</short>
<descr>
<p>
<var>AdaptAnchors</var> is a <var>TAnchors</var> function used to adjust the 
anchor settings for the control to reflect the value in the <var>Align</var> 
property. <var>a</var> contains the initial anchors used in the method, and 
is assigned as the default return value.
</p>
<p>
The Align property is used to determine the correct <var>TAnchorKind</var> 
values used in the return value for the method. The following TAnchorKind 
values are included/excluded from the result based on the value in 
<var>Align</var>:
</p>
<dl>
<dt>alLeft</dt>
<dd>Includes akLeft. Excludes akRight.</dd>
<dt>alTop</dt>
<dd>Includes akTop. Excludes akBottom.</dd>
<dt>alRight</dt>
<dd>Includes akRight. Excludes akLeft.</dd>
<dt>alBottom</dt>
<dd>Includes akBottom. Excludes akTop.</dd>
</dl>
<p>
AdaptAnchors is called when a new value is assigned to the Align or Anchors 
properties.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomSplitter.AdaptAnchors.Result">
<short>TAnchors settings derived in the method.</short>
</element>
<element name="TCustomSplitter.AdaptAnchors.a">
<short>Initial TAnchors values used in the method.</short>
</element>

<element name="TCustomSplitter.CheckNewSize">
<short>
Ensures the new size is acceptable for the aligned control on the splitter.
</short>
<descr>
<p>
<var>CheckNewSize</var> signals the OnCanResize event handler (when assigned) 
to validate the value in <var>NewSize</var>. The values in <var>NewSize</var> 
and <var>Result</var> can be updated in the event handler as needed. Setting 
the return value to <b>True</b> indicates that the value in NewSize is 
acceptable.
</p>
<p>
CheckNewSize is used in the implementation of the <var>MoveSplitter</var> 
method.
</p>
</descr>
<errors/>
<seealso>
<link id="TCustomSplitter.OnCanResize"/>
<link id="TCustomSplitter.MoveSplitter"/>
<link id="TCustomSplitter.ResizeControl"/>
</seealso>
</element>
<element name="TCustomSplitter.CheckNewSize.Result">
<short>
<b>True</b> when NewSize is an acceptable size for the aligned control.
</short>
</element>
<element name="TCustomSplitter.CheckNewSize.NewSize">
<short>New size for the aligned control in ResizeControl.</short>
</element>

<element name="TCustomSplitter.CheckOffset">
<short>
Signals the OnCanOffset event handler to determine the offset used when 
aligning the control, and the success or failure of the calculation.
</short>
<descr>
<p>
The return value is <b>True</b> by default, but it can be modified in the 
OnCanOffset event handler.
</p>
<p>
Used in the implementation of the MoveSplitter method.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.OnCanOffset"/>
<link id="TCustomSplitter.MoveSplitter"/>
</seealso>
</element>
<element name="TCustomSplitter.CheckOffset.Result">
<short>
<b>True</b> if the offset was successfully determined for the splitter control.
</short>
</element>
<element name="TCustomSplitter.CheckOffset.NewOffset">
<short>Offset value to check and optionally update in the method.</short>
</element>

<element name="TCustomSplitter.FindAlignControl">
<short>
<var>FindAlignControl</var> returns the main alignment control for the 
splitter.
</short>
<descr>
<p>
<var>FindAlignControl</var> is a <var>TControl</var> function used to get the 
control to which the splitter is aligned.
</p>
<p>
Called from the GetResizeControl method which gets the value for the 
ResizeControl property.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.FindAlignOtherControl"/>
<link id="TCustomSplitter.ResizeControl"/>
<link id="TCustomSplitter.Align"/>
</seealso>
</element>
<element name="TCustomSplitter.FindAlignControl.Result">
<short>
TControl instance to which the splitter is aligned, or <b>Nil</b> when a 
sibling control is not found.
</short>
</element>

<element name="TCustomSplitter.FindAlignOtherControl">
<short>
<var>FindAlignOtherControl</var> returns the other (secondary) alignment 
control for the splitter.
</short>
<descr>
<p>
<var>FindAlignOtherControl</var> is a <var>TControl</var> function used to 
get the other (secondary) control which is resized when the size for the 
primary control is changed.
</p>
<p>
Called from the GetOtherResizeControl and MoveSplitter methods when the 
position for the splitter control has been changed.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.GetOtherResizeControl"/>
<link id="TCustomSplitter.MoveSplitter"/>
<link id="TCustomSplitter.FindAlignControl"/>
<link id="TCustomSplitter.Align"/>
</seealso>
</element>
<element name="TCustomSplitter.FindAlignOtherControl.Result">
<short>
The adjacent control which is resized when the splitter control s moved.
</short>
</element>

<element name="TCustomSplitter.MouseDown">
<short>Initiates the splitter movement operation.</short>
<descr>
<p>
<var>MouseDown</var> is overridden in <var>TCustomSplitter</var>. It calls 
the inherited method, and ensures that the absolute mouse position is used 
when the left mouse button is depressed; The X and Y arguments are not valid 
during a resize operation.
</p>
<p>
Calls GetCursorPos to capture the mouse position, and calls StartSplitterMove 
to initiate the splitter movement operation.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseDown">TControl.MouseDown</link>
</seealso>
</element>
<element name="TCustomSplitter.MouseDown.Button">
<short>Button examined in the method.</short>
</element>
<element name="TCustomSplitter.MouseDown.Shift">
<short>Modifier for the mouse button.</short>
</element>
<element name="TCustomSplitter.MouseDown.X">
<short>Horizontal coordinate for the mouse event.</short>
</element>
<element name="TCustomSplitter.MouseDown.Y">
<short>Vertical coordinate for the mouse event.</short>
</element>

<element name="TCustomSplitter.MouseEnter">
<short>Starts mouse capture and tracking for the control.</short>
<descr>
<p>
Calls the inherited method. No additional actions are performed in the method 
at design-time, or when mouse capture has already been enabled for the 
control. Ensures that the internal flag used to track mouse entry into the 
control is set, and the control is refreshed by calling Invalidate.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseEnter">TControl.MouseEnter</link>
</seealso>
</element>

<element name="TCustomSplitter.MouseLeave">
<short>Perform actions when the mouse pointer exits the control.</short>
<descr>
<p>
<var>MouseLeave</var> is an overridden method used to perform actions when 
the mouse pointer exits the control. MouseLeave calls the inherited method on 
entry.
</p>
<p>
No additional actions are performed in the method at design-time.
</p>
<p>
At run-time, the internal flag that indicates if the control is hovered is 
reset. The <var>Invalidate</var> method is called to force the control to be 
redrawn.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseLeave">TControl.MouseLeave</link>
</seealso>
</element>

<element name="TCustomSplitter.MouseMove">
<short>
Applies a Shift+Drag operation for the splitter as a relative offset to the 
anchored control.
</short>
<descr>
<p>
<var>MouseMove</var> is an overridden method in <var>TCustomSplitter</var>. 
It calls the inherited method on entry to update the DragManager and signal 
the OnMouseMove event handler (when assigned).
</p>
<p>
It extends the ancestor method by calculating the offset needed to move the 
splitter relative to its anchor control. MouseMove calls the MoveSplitter 
method to apply the calculated offset to the Alignment edge for the splitter 
and resize the anchored control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseMove"/>
</seealso>
</element>
<element name="TCustomSplitter.MouseMove.Shift">
<short>
Shift, Ctrl, or Alt modified for the mouse event.
</short>
</element>
<element name="TCustomSplitter.MouseMove.X">
<short>
Horizontal coordinate for the mouse event.
</short>
</element>
<element name="TCustomSplitter.MouseMove.Y">
<short>
Vertical coordinate for the mouse event.
</short>
</element>

<element name="TCustomSplitter.MouseUp">
<short>
Handles a mouse up event for the splitter control.
</short>
<descr>
<p>
<var>MouseUp</var> is an overridden method in <var>TCustomSplitter</var>. It 
calls the inherited method on entry to signal the OnMouseUp event handler 
(when assigned). It ensures that the mouse pointer position is updated in the 
widgetset class, and calls StopSplitterMove to end the active splitter drag 
operation and signal the OnMove event handler (when assigned).
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseUp"/>
</seealso>
</element>
<element name="TCustomSplitter.MouseUp.Button">
<short>
Mouse button for the mouse event.
</short>
</element>
<element name="TCustomSplitter.MouseUp.Shift">
<short>
Shift, Ctrl, or Alt modifier for the mouse event.
</short>
</element>
<element name="TCustomSplitter.MouseUp.X">
<short>
Horizontal coordinate for the mouse event.
</short>
</element>
<element name="TCustomSplitter.MouseUp.Y">
<short>
Vertical coordinate for the mouse event.
</short>
</element>

<element name="TCustomSplitter.Paint">
<short>Draws the splitter control.</short>
<descr>
<p>
<var>Paint</var> is an overridden procedure used to draw the splitter 
control. Paint calls the inherited Paint method, and adds additional logic to 
handle drawing the splitter control.
</p>
<p>
The <var>OnPaint</var> event handler is signalled (when assigned) to draw the 
splitter control.
</p>
<p>
When OnPaint is unassigned (contains Nil), an internal routine is used to 
paint the gripper bar using the <var>TThemedRebar</var> settings in 
<var>ThemeServices</var>. The control is drawn using the theme settings 
needed for the state in the <var>Enabled</var> and <var>Beveled</var> 
properties, and the internal <var>MouseInControl</var> member.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.Beveled"/>
<link id="#lcl.controls.TCustomControl.Paint">TCustomControl.Paint</link>
<link id="#lcl.controls.TCustomControl.OnPaint">TCustomControl.OnPaint</link>
<link id="#lcl.controls.TControl.Enabled">TControl.Enabled</link>
</seealso>
</element>

<element name="TCustomSplitter.SetAlign">
<short>Sets the value for the Align property.</short>
<descr>
<p>
<var>SetAlign</var> is an overridden method in <var>TCustomSplitter</var> 
which sets the value for the Align property. It ensures that ResizeAnchor is 
updated to reflect the new value for the property. Values in Anchors are also 
updated to reflect the new alignment value in the property.
</p>
<p>
When Align has a value other than clClient and Anchors is not modified, the 
bounds for the control are adjusted to keep the existing Width or Height for 
the Align value.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.Align"/>
<link id="TCustomSplitter.ResizeAnchor"/>
<link id="#lcl.controls.TWinControl.SetBounds">TWinControl.SetBounds</link>
<link id="#lcl.controls.TControl.SetAlign">TControl.SetAlign</link>
<link id="#lcl.controls.TControl.Anchors">TControl.Anchors</link>
<link id="#lcl.controls.TControl.Width">TControl.Width</link>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
<link id="#lcl.controls.TAnchorKind">TAnchorKind</link>
<link id="#lcl.controls.TAnchors">TAnchors</link>
</seealso>
</element>
<element name="TCustomSplitter.SetAlign.Value">
<short>New value for the Align property.</short>
</element>

<element name="TCustomSplitter.SetAnchors">
<short>Sets the value for the Anchors property.</short>
<descr>
<p>
<var>SetAnchors</var> is an overridden procedure used to implement the write 
access specifier for the Anchors property. SetAnchors calls 
<var>AdaptAnchors</var> to ensure that the new value for the property 
reflects the setting in the <var>Align</var> property. SetAnchors calls the 
inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Anchors">TControl.Anchors</link>
</seealso>
</element>
<element name="TCustomSplitter.SetAnchors.AValue">
<short>New value for the Anchors property.</short>
</element>

<element name="TCustomSplitter.SetResizeAnchor">
<short>Sets the value for the ResizeAnchor property.</short>
<descr>
<p>
<var>SetResizeAnchor</var> calls UpdateCursor to change the resize cursor to 
the value needed for the ResizeAnchor enabled for the control. The Align 
property is changed to alNone to allow the splitter control to be dragged 
when the MoveSplitter method is called.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.ResizeAnchor"/>
<link id="TCustomSplitter.UpdateCursor"/>
<link id="TCustomSplitter.Align"/>
<link id="TCustomSplitter.MoveSplitter"/>
</seealso>
</element>
<element name="TCustomSplitter.SetResizeAnchor.AValue">
<short>New value for the ResizeAnchor property.</short>
</element>

<element name="TCustomSplitter.SetResizeControl">
<short>Sets the value for the ResizeControl property.</short>
<descr>
<p>
<var>SetResizeControl</var> ensures that the splitter control is repositioned 
so that it is guaranteed to be closest to the new control in AValue. It 
updates the Left or Top coordinate in the splitter based on the following 
values in the Align property:
</p>
<dl>
<dt>alLeft</dt>
<dd>Adjusts Left to be one pixel larger than the value in AValue.</dd>
<dt>alRight</dt>
<dd>Adjusts Left to be one pixel smaller than the value in AValue.</dd>
<dt>alTop</dt>
<dd>Adjusts Top to be one pixel larger than the value in AValue.</dd>
<dt>alBottom</dt>
<dd>Adjusts Top to be one pixel smaller than the value in AValue.</dd>
<dt>alClient</dt>
<dd>
No changes are made to Left or Top. AValue is assigned as the control for the 
AnchorSide at the position in ResizeAnchor.
</dd>
</dl>
</descr>
<seealso>
<link id="TCustomSplitter.ResizeControl"/>
<link id="TCustomSplitter.ResizeAnchor"/>
<link id="TCustomSplitter.Align"/>
<link id="#lcl.controls.TControl.AnchorSide">TControl.AnchorSide</link>
<link id="#lcl.controls.TControl.Left">TControl.Left</link>
<link id="#lcl.controls.TControl.Top">TControl.Top</link>
</seealso>
</element>
<element name="TCustomSplitter.SetResizeControl.AValue">
<short>New value for the ResizeControl property.</short>
</element>

<element name="TCustomSplitter.StartSplitterMove">
<short>
Method used to start a move operation for the splitter using the mouse 
position in <var>MouseXY</var>.
</short>
<descr>
<p>
No actions are performed in the method if a splitter drag operation has 
already been started but has not been completed.
</p>
<p>
StartSplitterMove ensures that a brush is created to represent the 
ResizeStyle used for the control. The brush is applied to the rubberband 
drawn around the splitter control when ResizeStyle contains rsLine or 
RsPattern.
</p>
<p>
StartSplitterMove is called from the MouseDown method when the left mouse 
button is used to drag the splitter control.
</p>
<p>
See StopSplitterMove for the actions performed when the move operation for 
the splitter control is completed.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.ResizeStyle"/>
<link id="TCustomSplitter.MouseDown"/>
<link id="TCustomSplitter.StopSplitterMove"/>
<link id="TCustomSplitter.Cursor"/>
</seealso>
</element>
<element name="TCustomSplitter.StartSplitterMove.MouseXY">
<short>
TPoint instance with the mouse coordinates when the move operation is started.
</short>
</element>

<element name="TCustomSplitter.StopSplitterMove">
<short>
Performs actions when splitter movement is stopped at the specified mouse 
position.
</short>
<descr>
<p>
<var>StopSplitterMove</var> calculates the offset for the mouse position 
relative to the position where the drag operation was started, and calls 
MoveSplitter to apply the changed position. The OnMoved event handler is 
signalled (when assigned).
</p>
<p>
No actions are performed in method if a drag operation has not been started 
using StartSplitterMove.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomSplitter.StopSplitterMove.MouseXY">
<short>
TPoint instance with the coordinates for the mouse pointer.
</short>
</element>

<element name="TCustomSplitter.UpdateCursor">
<short>
Updates the cursor shape to reflect the ResizeAnchor for the splitter.
</short>
<descr>
<p>
When the splitter is <var>Enabled</var>, the value in <var>Cursor</var> is 
changed. crHSplit is used when ResizeAnchor contains akLeft or akRight. For 
other values, crVSpit is used.
</p>
<p>
If the splitter is not Enabled, Cursor is set to the crDefault cursor shape.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.Cursor"/>
<link id="#lcl.controls.TControl.Enabled">TControl.Enabled</link>
<link id="#lcl.controls.TCursor">TCursor</link>
</seealso>
</element>

<element name="TCustomSplitter.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance, and 
calls the inherited method on entry.
</p>
<p>
Create sets the default values for properties, including:
</p>
<ul>
<li>Align</li>
<li>AutoSnap</li>
<li>Beveled</li>
<li>MinSize</li>
<li>ResizeAnchor</li>
<li>ResizeStyle</li>
<li>Width</li>
<li>AccessibleRole</li>
<li>AccessibleDescription</li>
</ul>
</descr>
<seealso>
<link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
</seealso>
</element>
<element name="TCustomSplitter.Create.TheOwner">
<short>Owner for the class instance.</short>
</element>

<element name="TCustomSplitter.AnchorSplitter">
<short>
<var>AnchorSplitter</var> anchors the splitter to <var>AControl</var> using 
the specified <var>Kind</var> of anchor.
</short>
<descr>
<p>
Updates values in <var>ResizeAnchor</var>, <var>Anchors</var> and 
<var>AnchorSide</var> to reflect the value in <var>Kind</var>. Calls 
<var>UpdateCursor</var> to set the cursor shape for the anchor kind. Resizes 
the splitter to reflect the new value in ResizeAnchor.
</p>
</descr>
</element>
<element name="TCustomSplitter.AnchorSplitter.Kind">
<short>
Indicates the edge of the splitter aligned to the opposite edge on the 
control.
</short>
</element>
<element name="TCustomSplitter.AnchorSplitter.AControl">
<short>
The control to which the splitter is anchored.
</short>
</element>

<element name="TCustomSplitter.ResizeControl">
<short>
Contains the aligned control that is resized when the splitter is moved.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomSplitter.GetOtherResizeControl">
<short>
Gets the adjacent anchored control that is resized when the splitter is moved.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomSplitter.GetOtherResizeControl.Result">
<short>TControl instance opposite of the anchor side.</short>
</element>

<element name="TCustomSplitter.MoveSplitter">
<short>
Moves the splitter by an amount specified in <var>Offset</var>.
</short>
<descr>
<p>
<var>MoveSplitter</var> is a method used to reposition the splitter control 
by the amount specified in the <var>Offset</var> parameter. Offset is the 
distance in pixels between the current and new splitter positions.
</p>
<p>
The values in Align, ResizeAnchor, and AnchoredControls are used to determine 
the direction that the splitter is moved and the controls affected. 
ResizeControl is the control which is resized by the specified amount, and 
the adjacent resized control(s) are updated with the converse of the offset 
value.
</p>
<p>
No actions are performed in the method when Offset contains 0 (zero) or a 
control has not been assigned to the ResizeControl property.
</p>
<p>
MoveSplitter ensures that size constraints for both the ResizeControl and the 
adjacent control(s) are respected when the splitter is repositioned. 
</p>
<p>
MoveSplitter is called from the SetSplitterPosition abd StopSplitterMove 
methods.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.Align"/>
<link id="TCustomSplitter.AutoSnap"/>
<link id="TCustomSplitter.ResizeControl"/>
<link id="TCustomSplitter.ResizeAnchor"/>
<link id="TCustomSplitter.GetOtherResizeControl"/>
<link id="TCustomSplitter.SetSplitterPosition"/>
<link id="TCustomSplitter.StopSplitterMove"/>
<link id="#lcl.controls.TControl.AnchoredControls">TControl.AnchoredControls</link>
</seealso>
</element>
<element name="TCustomSplitter.MoveSplitter.Offset">
<short>
Integer value with the requested distance that the splitter is moved.
</short>
</element>

<element name="TCustomSplitter.SetSplitterPosition">
<short>
Changes the position for the splitter to the specified <var>NewPosition</var>.
</short>
<descr>
<p>
<var>SetSplitterPosition</var> is a method used to change the position for 
the splitter control in program code (as opposed to a drag action). It calls 
the MoveSplitter method using the difference between NewPosition and the 
current splitter position relative to ResizeAnchor as an argument.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.MoveSplitter"/>
<link id="TCustomSplitter.GetSplitterPosition"/>
<link id="TCustomSplitter.ResizeAnchor"/>
</seealso>
</element>
<element name="TCustomSplitter.SetSplitterPosition.NewPosition">
<short>
Coordinate where the splitter is moved relative to the ResizeAnchor.
</short>
</element>

<element name="TCustomSplitter.GetSplitterPosition">
<short>
<var>GetSplitterPosition</var> returns the current position of the splitter.
</short>
<descr>
<p>
GetSplitterPosition uses the value in ResizeAnchor to determine the return 
value for the method. For example:
</p>
<dl>
<dt>akLeft, akRight</dt>
<dd>The value in the Left property is used as the return value.</dd>
<dt>akTop, akBottom</dt>
<dd>The value in the Top property is used as the return value.</dd>
</dl>
</descr>
</element>
<element name="TCustomSplitter.GetSplitterPosition.Result">
<short>Current position for the splitter.</short>
</element>

<element name="TCustomSplitter.Align">
<short>
Specifies the aligned edge for the splitter within its Parent and relative to 
ResizeControl.
</short>
<descr>
<p>
Align is a TAlign property which specifies how the splitter is aligned to the 
control in ResizeControl. The default value for the property is 
<var>alLeft</var> in TCustomSplitter, and causes the left edge of the 
splitter to align to the opposite edge for the ResizeControl.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.ResizeControl"/>
<link id="TCustomSplitter.ResizeStyle"/>
<link id="#lcl.controls.TControl.Align">TControl.Align</link>
</seealso>
</element>

<element name="TCustomSplitter.AutoSnap">
<short>
AutoSnap automatically moves the splitter to the zero position when split 
size becomes smaller than the value in MinSize.
</short>
<descr>
<p>
<var>AutoSnap</var> is a Boolean property. AutoSnap automatically moves the 
splitter to the zero position when split size becomes smaller than the value 
in <var>MinSize</var>. Contains <b>True</b> when snapping to grid positions.
</p>
</descr>
</element>

<element name="TCustomSplitter.Beveled">
<short>Indicates whether the edges of the splitter bar are beveled.</short>
<descr>
<p>
<var>Beveled</var> is a <var>Boolean</var> property which controls whether 
the splitter is drawn with a beveled appearance. The default value for the 
property is <b>False</b>. Changing the value for the property causes the 
control to be redrawn.
</p>
<p>
Beveled is used in the Paint method. When set to <b>True</b>, the DrawEdge 
method in ThemeServices is used to render a raised outer edge on the splitter 
control. When set to <b>False</b>, a bevel is not drawn on the splitter 
control.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.Paint"/>
<link id="#lcl.themes.ThemeServices">ThemeServices</link>
<link id="#lcl.themes.TThemeServices.DrawEdge">TThemeServices.DrawEdge</link>
</seealso>
</element>

<element name="TCustomSplitter.Cursor">
<short>
The shape for the mouse pointer when the control is dragged.
</short>
<descr>
<p>
<var>Cursor</var> is a <var>TCursor</var> property with the cursor resource 
constant displayed when the splitter control is dragged. The default value 
for the property is <var>crHSplit</var> in <var>TCustomSplitter</var>. The 
value is updated in the UpdateCursor method to reflect the ResizeAnchor for 
the control.
</p>
<dl>
<dt>crHSplit</dt>
<dd>Used when ResizeAnchor contains akLeft or akRight.</dd>
<dt>crVSplit</dt>
<dd>Used when ResizeAnchor contains akRight or akBottom.</dd>
<dt>crDefault</dt>
<dd>Used when the splitter control is not Enabled.</dd>
</dl>
</descr>
<seealso>
<link id="TCustomSplitter.UpdateCursor"/>
<link id="TCustomSplitter.ResizeAnchor"/>
<link id="#lcl.controls.TControl.Enabled">TControl.Enabled</link>
<link id="#lcl.controls.TControl.Cursor">TControl.Cursor</link>
<link id="#lcl.controls.TAnchorKind">TAnchorKind</link>
</seealso>
</element>

<element name="TCustomSplitter.MinSize">
<short>
Minimum size for either of the anchored controls on opposing sides of the 
splitter.
</short>
<descr>
<p>
<var>MinSize</var> indicates the smallest size allowed for either of the 
anchored controls on opposing sides of the splitter. MinSize is used in the 
<var>MoveSplitter</var> method to prevent adjacent controls from becoming too 
small when the splitter is dragged. The default value for the property is 30 
(pixels).
</p>
<p>
MinSize does not accept zero (0) or negative Integer values in the property. 
Setting MinSize to zero (0) would allow an adjacent control to be resized 
until it is no longer visible - so these values are not accepted in the setter 
for the property. This is compatible with the TSplitter implementation in the 
Delphi VCL where the property is defined using an Integer type in the range 
1..High(Integer).
</p>
</descr>
<seealso>
<link id="TCustomSplitter.ResizeAnchor"/>
<link id="TCustomSplitter.MoveSplitter"/>
<link id="TCustomSplitter.Align"/>
</seealso>
</element>

<element name="TCustomSplitter.OnCanOffset">
<short>
Event handler signalled to calculate the offset when the splitter is dragged, 
and to accept or reject the offset value.
</short>
<descr>
<p>
Signalled from the CheckOffset method when the splitter control is dragged. 
The Accept argument can be set to <b>False</b> to reject the offset value for 
the splitter, and prevent the resize operation.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.ResizeAnchor"/>
<link id="TCustomSplitter.MoveSplitter"/>
<link id="TCustomSplitter.Align"/>
<link id="TCanOffsetEvent"/>
</seealso>
</element>

<element name="TCustomSplitter.OnCanResize">
<short>
Event handler signalled to determine if the splitter control can be resized / 
dragged / moved.
</short>
<descr>
<p>
<var>OnCanResize</var> is a <var>TCanResizeEvent</var> property with the 
event handler signalled to determine if the splitter control can be resized. 
OnCanResise is signalled (when assigned) from the <var>CheckNewSize</var> 
method using the splitter control and the new size for the anchored control 
as arguments. The <var>Accept</var> argument can be updated in the event 
handler to indicate whether the new size is acceptable (True) or rejected 
(False).
</p>
</descr>
<seealso>
<link id="TCustomSplitter.MoveSplitter"/>
<link id="TCustomSplitter.CheckNewSize"/>
<link id="TCanResizeEvent"/>
</seealso>
</element>

<element name="TCustomSplitter.OnMoved">
<short>
Event handler signalled when the splitter has been dragged / moved.
</short>
<descr>
<p>
<var>OnMoved</var> is a <var>TNotifyEvent</var> property with the event 
handler signalled when the splitter control has been dragged / moved. It is 
signalled (when assigned) from the <var>StopSplitterMove</var> method when 
the mouse button is released to end the drag operation. It occurs after the 
splitter has been moved using the <var>MoveSplitter</var> method.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.MoveSplitter"/>
<link id="TCustomSplitter.StopSplitterMove"/>
<link id="TCustomSplitter.StartSplitterMove"/>
</seealso>
</element>

<element name="TCustomSplitter.ResizeAnchor">
<short>
Indicates the orientation and alignment for the splitter control.
</short>
<descr>
<p>
<var>ResizeAnchor</var> is a <var>TAnchorKind</var> property which indicates 
the <var>AnchorSide</var> (and the associated Control) used to align the 
splitter. The default value for the property is <var>akLeft</var>, and causes 
the splitter to align to the control for the corresponding position in 
AnchorSide. akLeft and akRight allow the splitter to be moved along the 
horizontal axis. akTop and akBottom allow the splitter to be moved along the 
vertical axis.
</p>
<p>
Changing the value for the property causes the UpdateCursor method to be 
called to set the cursor shape displayed when the splitter control is dragged.
</p>
<p>
ResizeAnchor is linked to the Align property in TCustomSplitter. Changing the 
value in Align causes ResizeAnchor (and Cursor) to be updated with 
corresponding values as needed.
</p>
<p>
ResizeAnchor is used in the MoveSplitter method to determine the size for the 
splitter control and the limits for the resize operation. It is used in 
MouseMove to determine the starting position and offset used when the control 
is dragged.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.Align"/>
<link id="TCustomSplitter.Cursor"/>
<link id="TCustomSplitter.UpdateCursor"/>
<link id="TCustomSplitter.MoveSplitter"/>
<link id="TCustomSplitter.MouseMove"/>
<link id="TAnchorKind"/>
<link id="#lcl.controls.TControl.AnchorSide">TControl.AnchorSide</link>
</seealso>
</element>

<element name="TCustomSplitter.ResizeStyle">
<short>Display style used when the splitter control is moved.</short>
<descr>
<p>
<var>ResizeStyle</var> is a <var>TResizeStyle</var> property with the display 
style used when the splitter control is moved. The default value for the 
property is <var>rsUpdate</var>, and causes anchored control(s) and the 
splitter position to be updated when the position is changed. 
<var>rsLine</var> and <var>rsPattern</var> indicate the splitter position in 
the corresponding style, but do not update the sizes for the anchored 
controls until the resize operation is completed. <var>rsNone</var> does not 
update the splitter position (or anchored controls) when moved; the update 
occurs when the resize operation is completed.
</p>
<p>
The value in ResizeStyle is used in the MoveSplitter, StartSplitterMove, and 
StopSplitterMove methods.
</p>
</descr>
<seealso>
<link id="TCustomSplitter.MoveSplitter"/>
<link id="TCustomSplitter.StartSplitterMove"/>
<link id="TCustomSplitter.StopSplitterMove"/>
<link id="TResizeStyle"/>
</seealso>
</element>

<element name="TSplitter">
<short>
<var>TSplitter</var> is a vertical or horizontal bar placed on a panel or 
form to separate sub-panels functionally.
</short>
<descr>
<p>
<var>TSplitter</var> is a vertical or horizontal bar that can be placed on a 
panel or form, to separate sub-panels functionally and allow re-sizing of the 
sub-panels.
</p>
<p>
The splitter extends for the full height (if vertical) or full width (if 
horizontal) of the parent control (form or panel) and is anchored to the 
edges; its position along the length or height of the parent is determined by 
the programmer or user by moving the whole control with the mouse, and its 
size can be adjusted using the sizing bars and with the 
<var>ResizeAnchor</var> property.
</p>
</descr>
<seealso>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How to use StdCtrls, ComCtrls or ExtCtrls. </link>
</seealso>
</element>

<element name="TSplitter.Align" link="#lcl.extctrls.TCustomSplitter.Align"/>
<element name="TSplitter.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TSplitter.AutoSnap" link="#lcl.extctrls.TCustomSplitter.AutoSnap"/>
<element name="TSplitter.Beveled" link="#lcl.extctrls.TCustomSplitter.Beveled"/>
<element name="TSplitter.Color" link="#lcl.controls.TControl.Color"/>
<element name="TSplitter.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TSplitter.Cursor" link="#lcl.extctrls.TCustomSplitter.Cursor"/>
<element name="TSplitter.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
<element name="TSplitter.Height" link="#lcl.controls.TControl.Height"/>
<element name="TSplitter.MinSize" link="#lcl.extctrls.TCustomSplitter.MinSize"/>
<element name="TSplitter.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TSplitter.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered"/>
<element name="TSplitter.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TSplitter.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TSplitter.ResizeAnchor" link="#lcl.extctrls.TCustomSplitter.ResizeAnchor"/>
<element name="TSplitter.ResizeStyle" link="#lcl.extctrls.TCustomSplitter.ResizeStyle"/>
<element name="TSplitter.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TSplitter.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TSplitter.Width" link="#lcl.controls.TControl.Width"/>
<element name="TSplitter.OnCanOffset" link="#lcl.extctrls.TCustomSplitter.OnCanOffset"/>
<element name="TSplitter.OnCanResize" link="#lcl.extctrls.TCustomSplitter.OnCanResize"/>
<element name="TSplitter.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TSplitter.OnMoved" link="#lcl.extctrls.TCustomSplitter.OnMoved"/>
<element name="TSplitter.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TSplitter.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TSplitter.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TSplitter.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="TSplitter.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="TSplitter.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
<element name="TSplitter.OnPaint" link="#lcl.controls.TCustomControl.OnPaint"/>

<element name="TPaintBox">
<short>
Implements a control with a rectangular drawing area using a given Font and 
Color.
</short>
<descr>
<p>
<var>TPaintBox</var> is a <var>TGraphicControl</var> descendant which 
implements a control with a rectangular drawing area using a given 
<var>Font</var> and <var>Color</var>. Like its ancestor, TPaintBox provides a 
<var>Canvas</var> which is used to draw on the control surface. It provides 
an overridden <var>Paint</var> method to configure the Pen, Brush, and Font 
for the Canvas prior to calling the inherited Paint method. Use the 
<var>OnPaint</var> event handler to perform drawing operations needed for the 
control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TGraphicControl">TGraphicControl</link>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How to use StdCtrls, ComCtrls or ExtCtrls. </link>
</seealso>
</element>

<element name="TPaintBox.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TPaintBox.Paint">
<short>Draws the content for the control.</short>
<descr>
<p>
<var>Paint</var> is an overridden procedure used to draw the control.
</p>
<p>
At design-time, a dashed black line is drawn around the area for the control 
and across its opposing corners. Color is used to paint the background for the 
control. No other actions are performed in the method at design-time.
</p>
<p>
At run-time, the <var>OnPaint</var> event handler is used to render the 
content for the control using the <var>Font</var> and <var>Color</var> 
properties. Their values are assigned to the Canvas for the control, and the 
inherited <var>Paint</var> method is called to signal the event handler.
</p>
</descr>
<seealso>
<link id="TPaintBox.OnPaint"/>
<link id="TPaintBox.Font"/>
<link id="TPaintBox.Color"/>
<link id="TPaintBox.Canvas"/>
<link id="#lcl.controls.TGraphicControl.Paint">TGraphicControl.Paint</link>
</seealso>
</element>

<element name="TPaintBox.GetControlClassDefaultSize">
<short>Gets the default size used for new instances of the class.</short>
<descr>
<p>
The default dimensions used in <var>TPaintBox</var> are 105 pixels wide x 105 
pixels high.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>
<element name="TPaintBox.GetControlClassDefaultSize.Result">
<short>
TSize instance with the default dimensions for a new TPaintBox control.
</short>
</element>

<element name="TPaintBox.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TPaintBox</var>. It calls the 
inherited <var>Create</var> method, and sets the initial bounds and style for 
the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TGraphicControl.Create">TGraphicControl.Create</link>
</seealso>
</element>
<element name="TPaintBox.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TPaintBox.Canvas" link="#lcl.controls.TGraphicControl.Canvas"/>
<element name="TPaintBox.Align" link="#lcl.controls.TControl.Align"/>
<element name="TPaintBox.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TPaintBox.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TPaintBox.Color" link="#lcl.controls.TControl.Color"/>
<element name="TPaintBox.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TPaintBox.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TPaintBox.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TPaintBox.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TPaintBox.Font" link="#lcl.controls.TControl.Font"/>
<element name="TPaintBox.Hint" link="#lcl.controls.TControl.Hint"/>
<element name="TPaintBox.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TPaintBox.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TPaintBox.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TPaintBox.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TPaintBox.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TPaintBox.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TPaintBox.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TPaintBox.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TPaintBox.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TPaintBox.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TPaintBox.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TPaintBox.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TPaintBox.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TPaintBox.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TPaintBox.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TPaintBox.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TPaintBox.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TPaintBox.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TPaintBox.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TPaintBox.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TPaintBox.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TPaintBox.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="TPaintBox.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="TPaintBox.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
<element name="TPaintBox.OnPaint" link="#lcl.controls.TGraphicControl.OnPaint"/>
<element name="TPaintBox.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TPaintBox.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

<element name="TCustomImage">
<short>
Implements the base class for <var>TImage</var>.
</short>
<descr>
<p>
<var>TCustomImage</var> is a <var>TGraphicControl</var> descendent, and the 
base class for <var>TImage</var>. It is a lightweight and fast class used to 
display a graphic image using one of the image formats supported in the LCL. 
This includes:
</p>
<ul>
<li>Bitmap</li>
<li>Pixmap</li>
<li>PNG</li>
<li>JPEG</li>
<li>GIF</li>
<li>TIFF</li>
<li>Icon</li>
</ul>
<p>
Use the Picture property to assign, load or save an image using one of the 
supported formats.
</p>
<p>
The Canvas property is used to render the graphic image in Picture, or to 
perform custom drawing operations on the image.
</p>
<p>
Use properties in the class instance to control how the image is rendered, 
including: <var>AntialiasingMode</var>, <var>Center</var>, 
<var>Stretch</var>, <var>Transparent</var>, and <var>Proportional</var>.
</p>
<p>
Do not create instances of TCustomImage; use the TImage descendant instead.
</p>
<p>
Use TImageList when a list of images with scaling capabilities is needed.
</p>
</descr>
<seealso>
<link id="TImage"/>
<link id="#lcl.controls.TGraphicControl">TGraphicControl</link>
<link id="#lcl.graphics.TPicture">TPicture</link>
<link id="#lcl.graphics.TGraphic">TGraphic</link>
<link id="#lcl.graphics.TCanvas">TCanvas</link>
<link id="#lcl.controls.TImageList">TImageList</link>
</seealso>
</element>

<element name="TCustomImage.FAntialiasingMode"/>
<element name="TCustomImage.FOnPictureChanged"/>
<element name="TCustomImage.FOnPaintBackground"/>
<element name="TCustomImage.FPicture"/>
<element name="TCustomImage.FCenter"/>
<element name="TCustomImage.FKeepOriginXWhenClipped"/>
<element name="TCustomImage.FKeepOriginYWhenClipped"/>
<element name="TCustomImage.FProportional"/>
<element name="TCustomImage.FTransparent"/>
<element name="TCustomImage.FStretch"/>
<element name="TCustomImage.FStretchOutEnabled"/>
<element name="TCustomImage.FStretchInEnabled"/>
<element name="TCustomImage.FUseAncestorCanvas"/>
<element name="TCustomImage.FPainting"/>

<element name="TCustomImage.GetCanvas">
<short>Gets the value for the Canvas property.</short>
<descr/>
<seealso>
<link id="TCustomImage.Canvas"/>
</seealso>
</element>
<element name="TCustomImage.GetCanvas.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomImage.SetAntialiasingMode">
<short>Sets the value for the AntialiasingMode property.</short>
<descr/>
<seealso>
<link id="TCustomImage.AntialiasingMode"/>
</seealso>
</element>
<element name="TCustomImage.SetAntialiasingMode.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.SetPicture">
<short>Sets the value for the Picture property.</short>
<descr/>
<seealso>
<link id="TCustomImage.Picture"/>
</seealso>
</element>
<element name="TCustomImage.SetPicture.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.SetCenter">
<short>Sets the value for the Center property.</short>
<descr/>
<seealso>
<link id="TCustomImage.Center"/>
</seealso>
</element>
<element name="TCustomImage.SetCenter.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.SetKeepOriginX">
<short>Sets the value for the KeepOriginXWhenClipped property.</short>
<descr/>
<seealso>
<link id="TCustomImage.KeepOriginXWhenClipped"/>
</seealso>
</element>
<element name="TCustomImage.SetKeepOriginX.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.SetKeepOriginY">
<short>Sets the value for the KeepOriginYWhenClipped property.</short>
<descr/>
<seealso>
<link id="TCustomImage.KeepOriginYWhenClipped"/>
</seealso>
</element>
<element name="TCustomImage.SetKeepOriginY.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.SetProportional">
<short>Sets the value for the Proportional property.</short>
<descr/>
<seealso>
<link id="TCustomImage.Proportional"/>
</seealso>
</element>
<element name="TCustomImage.SetProportional.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.SetStretch">
<short>Sets the value for the Stretch property.</short>
<descr/>
<seealso>
<link id="TCustomImage.Stretch"/>
</seealso>
</element>
<element name="TCustomImage.SetStretch.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.SetStretchInEnabled">
<short>Sets the value for the StretchInEnabled property.</short>
<descr/>
<seealso>
<link id="TCustomImage.StretchInEnabled"/>
</seealso>
</element>
<element name="TCustomImage.SetStretchInEnabled.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.SetStretchOutEnabled">
<short>Sets the value for the StretchOutEnabled property.</short>
<descr/>
<seealso>
<link id="TCustomImage.StretchOutEnabled"/>
</seealso>
</element>
<element name="TCustomImage.SetStretchOutEnabled.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.SetTransparent">
<short>Sets the value for the Transparent property.</short>
<descr/>
<seealso>
<link id="TCustomImage.Transparent"/>
</seealso>
</element>
<element name="TCustomImage.SetTransparent.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomImage.WSRegisterClass">
<short>Registers the class with the widgetset.</short>
<descr>
<p>
Calls the RegisterCustomImage method in the widgetset class.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TGraphicControl.WSRegisterClass">TGraphicControl.WSRegisterClass</link>
</seealso>
</element>

<element name="TCustomImage.PictureChanged">
<short>
Performs actions needed when the Picture property has been changed.
</short>
<descr>
<p>
<var>PictureChanged</var> is a procedure used to perform actions needed when 
the <var>Picture</var> property has been changed. PictureChanged adjusts the 
size for an assigned bitmap in Picture, and sets its bitmap transparency to 
the value in the <var>Transparent</var> property. PictureChanged calls 
<var>Invalidate</var> to cause the image to be repainted. The 
<var>OnPictureChanged</var> event handler is signalled (when assigned) prior 
to exiting from the method.
</p>
<p>
PictureChanged is assigned as the <var>OnChange</var> event handler for the 
Picture property in the constructor for the class instance.
</p>
</descr>
<seealso>
<link id="TCustomImage.Picture"/>
<link id="TCustomImage.Transparent"/>
<link id="TCustomImage.Invalidate"/>
<link id="TCustomImage.OnPictureChanged"/>
</seealso>
</element>
<element name="TCustomImage.PictureChanged.Sender">
<short>Object instance for the change notification.</short>
</element>

<element name="TCustomImage.CalculatePreferredSize">
<short>
Gets the preferred width and height used as the default size for the control.
</short>
<descr>
<p>
<var>CalculatePreferredSize</var> is an overridden method in 
<var>TCustomImage</var>. It calculates the preferred width and height for the 
control, which is used by the LCL auto-sizing algorithms as the default size. 
In TCustomImage, the values in the PreferredWidth and PreferredHeight 
arguments are set to the Width and Height used in the <var>Picture</var> 
property. The WithThemeSpace argument is not used in the method.
</p>
<p>
CalculatePreferredSize does <b>not</b> call the inherited method.
</p>
</descr>
<seealso>
<link id="TCustomImage.Picture"/>
<link id="#lcl.graphics.TPicture">TPicture</link>
<link id="#lcl.controls.TControl.CalculatePreferredSize">TControl.CalculatePreferredSize</link>
</seealso>
</element>
<element name="TCustomImage.CalculatePreferredSize.PreferredWidth">
<short>Preferred width for the control instance.</short>
</element>
<element name="TCustomImage.CalculatePreferredSize.PreferredHeight">
<short>Preferred height for the control instance.</short>
</element>
<element name="TCustomImage.CalculatePreferredSize.WithThemeSpace">
<short>
Indicates if additional space is reserved for theme element details. Not used 
in TCustomImage.
</short>
</element>

<element name="TCustomImage.GetControlClassDefaultSize">
<short>Gets the default size for a new instance of the class type.</short>
<descr>
<p>
<var>GetControlClassDefaultSize</var> is an overridden method in 
TCustomImage. It sets the Width and Height in the <var>TSize</var> return 
value to 90 x 90 pixels. It does <b>not</b> call the inherited method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>
<element name="TCustomImage.GetControlClassDefaultSize.Result">
<short>Dimensions used for a new instance of the class type.</short>
</element>

<element name="TCustomImage.Paint">
<short>
Draws the image to the control canvas.
</short>
<descr>
<p>
<var>Paint</var> is an overridden procedure used to draw the image to the 
control <var>Canvas</var>. At design-time, a dashed black line is drawn 
around the image as a frame to mark the dimensions for its content.
</p>
<p>
Paint uses the Canvas from the ancestor class as the target for the drawing 
operation. The value in <var>AntialiasingMode</var> is assigned to the 
corresponding property in the Canvas. The rectangle returned from    
<var>DestRect</var> is used as the drawing area.
</p>
<remark>
No actions are performed in the method when a <var>TGraphic</var> 
instance has not been assigned to the <var>Graphic</var> property in 
<var>Picture</var>, or the ancestor class does not have an assigned Canvas.
</remark>
<p>
Paint signals the <var>OnPaintBackground</var> event handler (when assigned) 
using the canvas and drawing rectangle to render the background for the 
image. 
</p>
<p>
If the image is loaded using Images and ImageIndex, the canvas scaling factor 
is applied (when needed) to the width and height for the bitmap image. The 
<var>StretchDraw</var> method in the Canvas is used to render the image 
content to the display rectangle on the canvas.
</p>
<p>
Paint calls the inherited Paint method to ensure that the <var>OnPaint</var> 
event handler is signalled (when assigned).
</p>
</descr>
<version>
Modified in LCL version 4.4 to perform image scaling (when needed) using the 
canvas scaling factor for the widgetset.
</version>
<seealso>
<link id="TCustomImage.Canvas"/>
<link id="TCustomImage.DestRect"/>
<link id="TCustomImage.AntialiasingMode"/>
<link id="TCustomImage.Transparent"/>
<link id="TCustomImage.Stretch"/>
<link id="TCustomImage.Images"/>
<link id="TCustomImage.ImageIndex"/>
<link id="TCustomImage.ImageWidth"/>
<link id="TCustomImage.OnPaintBackground"/>
<link id="#lcl.graphics.TCanvas">TCanvas</link>
<link id="#lcl.graphics.TCanvas.StretchDraw">TCanvas.StretchDraw</link>
<link id="#lcl.controls.TGraphicControl.Paint">TGraphicControl.Paint</link>
<link id="#lcl.controls.TGraphicControl.OnPaint">TGraphicControl.OnPaint</link>
</seealso>
</element>

<element name="TCustomImage.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TCustomImage</var>, and calls 
the inherited <var>Create</var> method. It then sets the default values for 
the style, bounds and other local variables. Creates allocates resources for 
the <var>Picture</var> property.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TGraphicControl.Create">TGraphicControl.Create</link>
</seealso>
</element>
<element name="TCustomImage.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomImage.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the destructor for <var>TCustomImage</var>. It free 
resources allocated to the <var>Picture</var> property, and then calls the 
inherited <var>Destroy</var> method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TGraphicControl.Destroy">TGraphicControl.Destroy</link>
</seealso>
</element>

<element name="TCustomImage.Canvas">
<short>Canvas used to draw the image.</short>
<descr>
<p>
<var>TCustomImage</var> re-implements the read access specifier for the 
property to ensure that a drawing surface is available in Picture. When not 
assigned, a temporary TBitmap instance is created and used as the image class 
in the Picture property. The Canvas for the bitmap is used as the property 
value. If the TCanvas has already been assigned, the inherited Canvas 
property (from TGraphicControl) is used.
</p>
</descr>
<seealso>
<link id="TCustomImage.Picture"/>
<link id="#lcl.graphics.TPicture">TPicture</link>
<link id="#lcl.controls.TGraphicControl.Canvas">TGraphicControl.Canvas</link>
</seealso>
</element>

<element name="TCustomImage.DestRect">
<short>
Gets the rectangle where the image is painted.
</short>
<descr>
<p>
<var>DestRect</var> is a TRect function used to get the rectangle where the 
image is drawn.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomImage.DestRect.Result">
<short>Rectangle where the image is drawn in the Paint method.</short>
</element>

<element name="TCustomImage.Invalidate">
<short>Causes the control to be repainted.</short>
<descr>
<p>
<var>Invalidate</var> is an overridden procedure which causes the control to 
be repainted. Invalidate is called when the content or dimensions for the 
image have been changed.
</p>
<p>
Invalidate extends the ancestor method to include logic that reduces the 
number of calls to the <var>Paint</var> method, and avoids flicker caused by 
the redundant calls. It uses an internal flag in the class to determine if 
the Paint method has already been called, but has not yet been completed. If 
the flag has not been set, the inherited Invalidate method is called to 
refresh the control using its visibility and control style settings.
</p>
<remark>
No actions are performed in the method when Paint is already active.
</remark>
</descr>
<seealso>
<link id="TCustomImage.Paint"/>
<link id="#lcl.controls.TControl.IsVisible">TControl.IsVisible</link>
<link id="#lcl.controls.TControl.ControlStyle">TControl.ControlStyle</link>
<link id="#lcl.controls.TControl.Invalidate">TControl.Invalidate</link>
</seealso>
</element>

<element name="TCustomImage.AntialiasingMode">
<short>Indicates if anti-aliasing is used when rendering the image.</short>
<descr>
<p>
<var>AntialiasingMode</var> is a <var>TAntialiasingMode</var> property which 
indicates if anti-aliasing is used when rendering the image. The value in 
AntialiasingMode is assigned to the <var>TCanvas</var> instance used in the 
<var>Paint</var> method. Changing the value in the property causes the 
<var>PictureChanged</var> method to be called to invalidate and repaint the 
image to its canvas.
</p>
<p>
The default value for the property is <var>amDontCare</var>, and indicates 
that the default anti-aliasing mode for the platform, OS, or widget set is 
used.
</p>
</descr>
<seealso>
<link id="TCustomImage.PictureChanged"/>
<link id="TCustomImage.Paint"/>
<link id="TAntialiasingMode"/>
<link id="TCanvas"/>
</seealso>
</element>

<element name="TCustomImage.Align" link="#lcl.controls.TControl.Align"/>
<element name="TCustomImage.AutoSize" link="#lcl.controls.TControl.AutoSize"/>

<element name="TCustomImage.Center">
<short>Indicates if the image should be centered.</short>
<descr>
<p>
<var>Center</var> is a <var>Boolean</var> property which indicates if the 
image is drawn aligned to the center of the client area for the control. 
Center is used in the <var>DestRect</var> method to find the horizontal and 
vertical coordinates for the <var>Picture</var> aligned to the 
<var>ClientWidth</var> and <var>ClientHeight</var> for the control.
</p>
<p>
Changing the value for the property causes the <var>PictureChanged</var> 
method to be called to invalidate and repaint the image.
</p>
<p>
The default value for the property is <b>False</b>.
</p>
</descr>
<seealso>
<link id="TCustomImage.Picture"/>
<link id="TCustomImage.PictureChanged"/>
<link id="TCustomImage.DestRect"/>
</seealso>
</element>

<element name="TCustomImage.KeepOriginXWhenClipped">
<short>Preserves the Left coordinate when a clipped image is centered.</short>
<descr>
<p>
The default value for the property is <b>False</b>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomImage.KeepOriginYWhenClipped">
<short>Preserves the Top coordinate when a clipped image is centered.</short>
<descr>
<p>
The default value for the property is <b>False</b>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomImage.Constraints" link="#lcl.controls.TControl.Constraints"/>

<element name="TCustomImage.Picture">
<short>Contains the image displayed in the control.</short>
<descr>
<p>
<var>Picture</var> is a <var>TPicture</var> property which contains the 
dimensions, format, and data for the image displayed in the control. 
Resources are allocated for Picture in the constructor; this includes use of 
the      <var>PictureChanged</var> method as the <var>OnChange</var> event 
handler for the property.
</p>
<p>
<var>Picture</var> is used when the control needs to access its canvas for 
drawing operations. Drawing operations use the bitmap for the Picture when 
possible instead of the canvas for the form. It is also examined/updated when 
<var>PictureChanged</var> is called after values for properties like 
<var>Proportional</var>, <var>Stretch</var>, <var>Centered</var>, 
<var>Transparent</var>. and <var>AntialiasingMode</var> are changed.
</p>
</descr>
<seealso>
<link id="#lcl.graphics.TPicture">TPicture</link>
<link id="#lcl.graphics.TPicture.OnChange">TPicture.OnChange</link>
<link id="TCustomImage.PictureChanged"/>
<link id="TCustomImage.Canvas"/>
</seealso>
</element>

<element name="TCustomImage.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TCustomImage.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TCustomImage.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TCustomImage.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TCustomImage.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TCustomImage.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TCustomImage.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TCustomImage.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TCustomImage.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TCustomImage.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>

<element name="TCustomImage.Stretch">
<short>
Indicates if the image is resized to the client area for the control.
</short>
<descr>
<p>
<var>Stretch</var> is a <var>Boolean</var> property which indicates if the 
image content is resized to the client area for the control. It is used in 
the <var>DestRect</var> method (along with <var>Proportional</var>) to 
calculate the rectangle needed to render the image content.
</p>
<p>
Changing the value in Stretch causes the <var>PictureChanged</var> method to 
be called.
</p>
<p>
The default value for the property is <b>False</b>.
</p>
</descr>
<seealso>
<link id="TCustomImage.Proportional"/>
<link id="TCustomImage.DestRect"/>
<link id="TCustomImage.PictureChanged"/>
</seealso>
</element>

<element name="TCustomImage.StretchOutEnabled">
<short>
Allows the image to be resized proportionally when the image drawing area is 
expanded.
</short>
<descr>
<p>
The default value for the property is <b>True</b>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomImage.StretchInEnabled">
<short>
Allows the image to be resized proportionally when the image drawing area is 
shrunk.
</short>
<descr>
<p>
The default value for the property is <b>True</b>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomImage.Transparent">
<short>Indicates if the image has a clear, non-opaque background.</short>
<descr>
<p>
<var>Transparent</var> is a <var>Boolean</var> property which indicates if 
the image uses a clear, non-opaque background. The value for the property is 
used in the <var>PictureChanged</var> method to set the transparency for the 
bitmap in <var>Picture</var>. Changing the value for the property causes 
PictureChanged to be called to update the image data assigned to Picture and 
to repaint the control.
</p>
<p>
The default value for the property is <b>False</b>.
</p>
<p>
Use AntialiasingMode to enable or disable use of the rendering technique. Use 
the OnPaintBackground event handler to render a custom background for the 
image.
</p>
</descr>
<seealso>
<link id="TCustomImage.Picture"/>
<link id="TCustomImage.PictureChanged"/>
<link id="TCustomImage.AntialiasingMode"/>
<link id="TCustomImage.OnPaintBackground"/>
</seealso>
</element>

<element name="TCustomImage.Proportional">
<short><b>True</b> if image is proportional.</short>
<descr>
<p>
<var>Proportional</var> is a <var>Boolean</var> property which indicates if 
the proportions (the ratio of width to height) for an image are maintained 
when it is resized. When set to <b>True</b>, a change to the image size 
maintains the ratio of width to height for the original image. Proportional 
is used (along with <var>Stretch</var>) in the <var>DestRect</var> method to 
determine the rectangle needed to render the image in the control.
</p>
<p>
Changing the value for the property causes the <var>PictureChanged</var> 
method to be called.
</p>
<p>
The default value for the property is <b>False</b>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomImage.OnPictureChanged">
<short>Event handler signalled when Picture is changed.</short>
<descr>
<p>
<var>OnPictureChanged</var> is a <var>TNotifyEvent</var> property which 
contains the event handler signalled then the <var>Picture</var> property is 
changed. <var>OnPictureChanged</var> is signalled from the 
<var>PictureChanged</var> method, and allows actions to be performed after 
updates to image properties and the <var>Invalidate</var> method has been 
called.
</p>
</descr>
<seealso>
<link id="TCustomImage.Picture"/>
<link id="TCustomImage.Transparent"/>
<link id="TCustomImage.PictureChanged"/>
<link id="TCustomImage.Invalidate"/>
</seealso>
</element>

<element name="TCustomImage.OnPaintBackground">
<short>Event handler signalled to draw the background for the image.</short>
<descr>
<p>
<var>OnPaintBackground</var> is a <var>TImagePaintBackgroundEvent</var> 
property which implements an event handler signalled to paint the background 
for an image. OnPaintBackground is signalled from the <var>Paint</var> method 
using the <var>Canvas</var> and <var>DestRect</var> for the image as 
arguments. The event occurs immediately prior to the image being drawn using 
its canvas handle.
</p>
</descr>
<seealso>
<link id="TCustomImage.Paint"/>
<link id="TCustomImage.Canvas"/>
<link id="TCustomImage.DestRect"/>
</seealso>
</element>

<element name="TImage">
<short>
Implements a graphic image placed on a form, and usually loaded from a 
picture file.
</short>
<descr>
<p>
<var>TImage</var> is a <var>TCustomImage</var> descendent which implements a 
lightweight and fast class used to display a graphic image using one of the 
image formats supported in the LCL. This includes:
</p>
<ul>
<li>Bitmap</li>
<li>Pixmap</li>
<li>PNG</li>
<li>JPEG</li>
<li>GIF</li>
<li>TIFF</li>
<li>Icon</li>
</ul>
<p>
Use the Picture property to assign, load or save an image using one of the 
supported formats.
</p>
<p>
Use the Canvas property to render the graphic image in Picture, or to perform 
custom drawing operations.
</p>
<p>
Use properties in the class instance to control how the image is rendered, 
including: <var>AntialiasingMode</var>, <var>Center</var>, 
<var>Stretch</var>, <var>Transparent</var>, and <var>Proportional</var>.
</p>
<p>
TImage inherits most of its properties from its ancestors, <link 
id="#lcl.ExtCtrls.TCustomImage">TCustomImage</link>, <link 
id="#lcl.Controls.TGraphicControl">TGraphicControl</link> and <link 
id="#lcl.Controls.TControl">TControl</link>
</p>
<p>
Use TImageList when a list of images with scaling capabilities is needed.
</p>
</descr>
<seealso>
<link id="TImage"/>
<link id="#lcl.controls.TGraphicControl">TGraphicControl</link>
<link id="#lcl.graphics.TPicture">TPicture</link>
<link id="#lcl.graphics.TGraphic">TGraphic</link>
<link id="#lcl.graphics.TCanvas">TCanvas</link>
<link id="#lcl.controls.TImageList">TImageList</link>
</seealso>
</element>

<element name="TImage.AntialiasingMode" link="#lcl.extctrls.TCustomImage.AntialiasingMode"/>
<element name="TImage.Align" link="#lcl.controls.TControl.Align"/>
<element name="TImage.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TImage.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TImage.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TImage.Center" link="#lcl.extctrls.TCustomImage.Center"/>
<element name="TImage.KeepOriginXWhenClipped" link="#lcl.extctrls.TCustomImage.KeepOriginXWhenClipped"/>
<element name="TImage.KeepOriginYWhenClipped" link="#lcl.extctrls.TCustomImage.KeepOriginYWhenClipped"/>
<element name="TImage.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TImage.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TImage.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TImage.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TImage.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TImage.Picture" link="#lcl.extctrls.TCustomImage.Picture"/>
<element name="TImage.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TImage.Proportional" link="#lcl.extctrls.TCustomImage.Proportional"/>
<element name="TImage.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TImage.Stretch" link="#lcl.extctrls.TCustomImage.Stretch"/>
<element name="TImage.StretchOutEnabled" link="#lcl.extctrls.TCustomImage.StretchOutEnabled"/>
<element name="TImage.StretchInEnabled" link="#lcl.extctrls.TCustomImage.StretchInEnabled"/>
<element name="TImage.Transparent" link="#lcl.extctrls.TCustomImage.Transparent"/>
<element name="TImage.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TImage.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TImage.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TImage.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TImage.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TImage.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TImage.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TImage.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TImage.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TImage.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TImage.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TImage.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TImage.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TImage.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TImage.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TImage.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TImage.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="TImage.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="TImage.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
<element name="TImage.OnPaint" link="#lcl.controls.TGraphicControl.OnPaint"/>
<element name="TImage.OnPictureChanged" link="#lcl.extctrls.TCustomImage.OnPictureChanged"/>
<element name="TImage.OnPaintBackground" link="#lcl.extctrls.TCustomImage.OnPaintBackground"/>
<element name="TImage.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TImage.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

<element name="TBevelStyle">
<short>
<var>TBevelStyle</var> is an enumerated type with bevel style values: lowered 
or raised.
</short>
<descr/>
<seealso/>
</element>
<element name="TBevelStyle.bsLowered">
<short>
Draws the bevel so it appears lower than the surface for the control.
</short>
</element>
<element name="TBevelStyle.bsRaised">
<short>
Draws the bevel so it appears higher than the surface for the control.
</short>
</element>

<element name="TBevelShape">
<short>
<var>TBevelShape</var> is an enumerated type for shapes used in a bevel.
</short>
<descr>
<p>
<var>TBevelShape</var> is an enumerated type representing the shapes 
available for a bevel.
</p>
<ul>
<li>bsBox</li>
<li>bsFrame</li>
<li>bsTopLine</li>
<li>bsBottomLine</li>
<li>bsLeftLine</li>
<li>bsRightLine</li>
</ul>
</descr>
<seealso/>
</element>
<element name="TBevelShape.bsBox">
<short>Uses a raised or lowered box for the bevel.</short>
</element>
<element name="TBevelShape.bsFrame">
<short>Uses a raised or lowered outline around a control.</short>
</element>
<element name="TBevelShape.bsTopLine">
<short>Draws a solid line at the top of a control.</short>
</element>
<element name="TBevelShape.bsBottomLine">
<short>Draws a solid line at the bottom of a control.</short>
</element>
<element name="TBevelShape.bsLeftLine">
<short>Draws a solid line on the left edge of a control.</short>
</element>
<element name="TBevelShape.bsRightLine">
<short>Draws a solid line on the right edge of a control.</short>
</element>
<element name="TBevelShape.bsSpacer">
<short>Draws an empty space as the bevel around a control.</short>
</element>

<element name="TBevel">
<short>A bevel placed around the edge of buttons and other components.</short>
<descr>
<p>
The appearance of the Bevel is governed by <link id="TBevelShape"/> and <link 
id="TBevelStyle"/>.
</p>
</descr>
</element>

<element name="TBevel.FStyle"/>
<element name="TBevel.FShape"/>

<element name="TBevel.SetStyle">
<short>Sets the value for the Style property.</short>
<descr/>
<seealso>
<link id="TBevel.Style"/>
</seealso>
</element>
<element name="TBevel.SetStyle.aStyle">
<short>New value for the property.</short>
</element>

<element name="TBevel.SetShape">
<short>Sets the value for the Shape property.</short>
<descr/>
<seealso>
<link id="TBevel.Shape"/>
</seealso>
</element>
<element name="TBevel.SetShape.aShape">
<short>New value for the property.</short>
</element>

<element name="TBevel.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TBevel.GetControlClassDefaultSize">
<short>Gets the default size for new instances of the class.</short>
<descr>
<p>
<var>GetControlClassDefaultSize</var> is an overridden <var>TSize</var> class 
function used to get the default size for new instances of the class. 
GetControlClassDefaultSize sets the dimensions in the return value to 50 
pixels x 50 pixels.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>
<element name="TBevel.GetControlClassDefaultSize.Result">
<short>Default size for a new instance of the class.</short>
</element>

<element name="TBevel.Paint">
<short>Handles paint requests received from the parent control.</short>
<descr>
<p>
<var>Paint</var> is an overridden procedure used to perform paint requests 
received by the parent control.
</p>
<p>
Paint checks the value in <var>Style</var> to determine the <var>Pen</var> 
colors used to draw the bevel. The <var>Shape</var> property determines the 
drawing primitives used to render the bevel to its <var>Canvas</var>.
</p>
<remark>
No actions are performed in the method when Shape contains the value 
<var>bsSpacer</var>.
</remark>
<p>
Paint calls the inherited method to trigger the <var>OnPaint</var> event 
handler (when assigned).
</p>
</descr>
<seealso>
<link id="TBevel.Shape"/>
<link id="TBevel.Style"/>
<link id="#lcl.controls.TGraphicControl.Canvas">TGraphicControl.Canvas</link>
<link id="#lcl.controls.TGraphicControl.Paint">TGraphicControl.Paint</link>
<link id="#lcl.controls.TGraphicControl.OnPaint">TGraphicControl.OnPaint</link>
</seealso>
</element>

<element name="TBevel.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for <var>TBevel</var>. Create 
calls the inherited <var>Create</var> method, and sets the initial values 
used in the <var>ControlStyle</var>, <var>Style</var>, <var>Shape</var>, and 
<var>Bounds</var> properties.
</p>
<dl>
<dt>ControlStyle</dt>
<dd>Removes csSetCaption and csOpaque from existing values in 
ControlStyle.</dd>
<dt>Style</dt>
<dd>Set to the value bsLowered.</dd>
<dt>Shape</dt>
<dd>Set to the value bsBox.</dd>
<dt>Bounds</dt>
<dd>
Calls SetInitialBounds to store the values from GetControlClassDefaultSize in 
Bounds.
</dd>
</dl>
</descr>
<seealso>
<link id="#lcl.controls.TGraphicControl.Create">TGraphicControl.Create</link>
</seealso>
</element>
<element name="TBevel.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TBevel.Destroy">
<short>Destructor for the class instance.</short>
<descr>Calls the inherited destructor.</descr>
<seealso>
<link id="#lcl.controls.TGraphicControl.Destroy">TGraphicControl.Destroy</link>
</seealso>
</element>

<element name="TBevel.Assign">
<short>
Copies property values from Source to the current class instance.
</short>
<descr>
<p>
<var>Assign</var> copies the contents of <var>Source</var> to 
<var>Self</var>, if the classes of the destination and source classes are 
compatible.
</p>
<p>
The <var>TPersistent</var> implementation of <var>Assign</var> does nothing 
but call the <link id="#rtl.Classes.TPersistent">AssignTo</link> method for 
the source. This means that if the destination class does not know how to 
assign the contents of the source class, the source class instance is asked 
to assign itself to the destination class. This means that it is necessary to 
implement only one of the two methods so that two classes can be assigned to 
one another.
</p>
<remark>
<p>In general, a statement of the form:</p>
<code>
Destination:=Source;
</code>
<p>
(where <var>Destination</var> and <var>Source</var> are classes) does not 
achieve the same as a statement of the form.
</p>
<code>
Destination.Assign(Source);
</code>
<p>
After the former statement, both <var>Source</var> and <var>Destination</var> 
will point to the same object. The latter statement will copy the 
<var>contents</var> of the <var>Source</var> class to the 
<var>Destination</var> class.
</p>
</remark>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>

<element name="TBevel.Align" link="#lcl.controls.TControl.Align"/>
<element name="TBevel.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TBevel.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TBevel.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TBevel.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>

<element name="TBevel.Shape">
<short>
<var>Shape</var> - whether a box, a frame or a line along one of the edges.
</short>
<descr>
<p>
<var>Shape</var> is a <var>TBevelShape</var> property which indicates the 
shape drawn as the bevel on the control. The default value for the property 
is <var>bsBox</var>, and causes a simple box to be drawn to represent the 
bevel. Changing the value for the property causes the control to be redrawn.
</p>
<p>
Use <var>Style</var> to indicate whether the shape is drawn as a raised or 
lowered area on the control surface.
</p>
<p>
Shape and Style are used in the <var>Paint</var> method to draw the control 
on its <var>Canvas</var>.
</p>
</descr>
<seealso>
<link id="TBevelShape"/>
</seealso>
</element>

<element name="TBevel.ShowHint" link="#lcl.controls.TControl.ShowHint"/>

<element name="TBevel.Style">
<short>
Indicates whether the bevel is drawn using a raised or a lowered style.
</short>
<descr>
<p>
<var>Style</var> is a <var>TBevelStyle</var> property which indicates whether 
the bevel is drawn as a raised or a lowered area on the control surface. The 
default value for the property is <var>bsLowered</var>. Changing the value 
for the property causes the control to be redrawn.
</p>
<p>
Shape and Style are used in the <var>Paint</var> method to draw the control 
on its <var>Canvas</var>.
</p>
<p>
The relief in Style is achieved by drawing the opposite edges of the bevel 
Shape using contrasting colors. <var>bsLowered</var> uses 
<var>cl3DHighlight</var> and <var>cl3DShadow</var> for the color combination. 
<var>bsRaised</var> uses the same colors - but on the opposite edges.
</p>
</descr>
<seealso>
<link id="#lcl.extctrls.TBevelStyle">TBevelStyle</link>
</seealso>
</element>

<element name="TBevel.Visible">
<short>Makes the control visible or hidden.</short>
<descr>
<p>
The <var>Visible</var> property represents the ability to see a visual 
control. If Visible is <b>True</b> the control is shown, otherwise it is 
hidden. Calling <var>Show</var> sets Visible to <b>True</b>. Setting Visible 
to <b>False</b> is equivalent to calling <var>Hide</var> method.
</p>
<remark>
The Visible property does not depend on control's parent visibility. Use the 
<var>IsVisible</var> method to consider this and get the real visibility for 
the control.
</remark>
</descr>
<seealso>
<link id="#lcl.controls.TControl.IsVisible">TControl.IsVisible</link>
<link id="#lcl.controls.TControl.Hide">TControl.Hide</link>
<link id="#lcl.controls.TControl.Show">TControl.Show</link>
</seealso>
</element>

<element name="TBevel.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TBevel.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TBevel.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TBevel.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TBevel.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TBevel.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TBevel.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TBevel.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TBevel.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TBevel.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TBevel.OnPaint" link="#lcl.controls.TGraphicControl.OnPaint"/>

<element name="TColumnLayout">
<short>
<var>TColumnLayout</var> is an enumerated type which determines the layout 
direction used to arranged data in columns.
</short>
<descr>
<p>
<var>TColumnLayout</var> is an enumerated type which determines the layout 
direction used to arranged data in columns. TColumnLayout is the type used to 
implement the <var>ColumnLayout</var> property in 
<var>TCustomRadioGroup</var> and <var>TCustomCheckGroup</var>.
</p>
</descr>
<seealso>
<link id="TCustomRadioGroup.ColumnLayout"/>
<link id="TCustomCheckGroup.ColumnLayout"/>
</seealso>
</element>
<element name="TColumnLayout.clHorizontalThenVertical">
<short>Items are arranged horizontally, and advances vertically.</short>
</element>
<element name="TColumnLayout.clVerticalThenHorizontal">
<short>Items are arranged vertically, and advances horizontally.</short>
</element>

<element name="TCustomRadioGroup">
<short>
<var>TCustomRadioGroup</var> is the base type for <var>TRadioGroup</var>.
</short>
<descr>
<p>
A group of related but mutually exclusive radio buttons, selectable by the 
user.
</p>
<p>
This class defines <var>Items</var>, where the captions of the individual 
radio boxes are stored, <var>Rows</var> and <var>Columns</var> for arranging 
the radio boxes. The ColumnLayout property is used to determine whether the 
data are arranged down the columns first, or across the rows first.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomRadioGroup.FAutoFill"/>
<element name="TCustomRadioGroup.FButtonList"/>
<element name="TCustomRadioGroup.FColumnLayout"/>
<element name="TCustomRadioGroup.FColumns"/>
<element name="TCustomRadioGroup.FCreatingWnd"/>
<element name="TCustomRadioGroup.FHiddenButton"/>
<element name="TCustomRadioGroup.FIgnoreClicks"/>
<element name="TCustomRadioGroup.FItemIndex"/>
<element name="TCustomRadioGroup.FItems"/>
<element name="TCustomRadioGroup.FLastClickedItemIndex"/>
<element name="TCustomRadioGroup.FOnClick"/>
<element name="TCustomRadioGroup.FOnItemEnter"/>
<element name="TCustomRadioGroup.FOnItemExit"/>
<element name="TCustomRadioGroup.FOnSelectionChanged"/>
<element name="TCustomRadioGroup.FReading"/>
<element name="TCustomRadioGroup.FUpdatingItems"/>

<element name="TCustomRadioGroup.Changed" link="#lcl.controls.TControl.Changed"/>
<element name="TCustomRadioGroup.Changed.Sender"/>

<element name="TCustomRadioGroup.Clicked">
<short>
Performs actions needed when a radio button in the group is clicked.
</short>
<descr>
<p>
<var>Clicked</var> is a procedure used to perform actions needed when a radio 
button in the group is clicked. Clicked calls the 
<var>CheckItemIndexChanged</var> method to update the state for the radio 
buttons in the group, and to signal the <var>OnClicked</var> and 
<var>OnSelection</var> event handlers (when assigned).
</p>
<p>
Clicked is assigned to the <var>OnClick</var> event handler for each 
<var>TRadioButton</var> in the group. Use the <var>Items</var> property to 
specify the radio buttons required for the grouped control.
</p>
</descr>
<seealso>
<link id="TCustomRadioGroup.CheckItemIndexChanged"/>
<link id="TCustomRadioGroup.UpdateItems"/>
<link id="TCustomRadioGroup.OnClicked"/>
<link id="TCustomRadioGroup.OnSelectionChanged"/>
<link id="TCustomRadioGroup.Items"/>
<link id="#lcl.stdctrls.TRadioButton">TRadioButton</link>
<link id="#lcl.stdctrls.TRadioButton.OnClick">TRadioButton.OnClick</link>
</seealso>
</element>
<element name="TCustomRadioGroup.Clicked.Sender">
<short>Object instance for the event notification.</short>
</element>

<element name="TCustomRadioGroup.GetButton"/>
<element name="TCustomRadioGroup.GetButton.Result"/>
<element name="TCustomRadioGroup.GetButton.Index"/>

<element name="TCustomRadioGroup.ItemEnter">
<short>
Implements the OnEnter event handler for radio buttons in the group.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomRadioGroup.ItemEnter.Sender">
<short>Object for the event notification.</short>
</element>

<element name="TCustomRadioGroup.ItemExit">
<short>
Implements the OnExit event handler assigned to radio buttons in the group.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomRadioGroup.ItemExit.Sender">
<short>Object for the event notification.</short>
</element>

<element name="TCustomRadioGroup.ItemKeyDown">
<short>
Performs actions needed to handle key down messages for radio buttons in the 
group.
</short>
<descr>
<p>
ItemKeyDown handles the following unshifted virtual key codes:
</p>
<dl>
<dt>VK_LEFT</dt>
<dd>Moves the selection to the prior radio button, with wrapping.</dd>
<dt>VK_RIGHT</dt>
<dd>Moves the selection to the next radio button, with wrapping.</dd>
<dt>VK_UP</dt>
<dd>Moves the selection to the radio button in the prior row, with 
wrapping.</dd>
<dt>VK_DOWN</dt>
<dd>Moves the selection to the radio button in the next row, with 
wrapping.</dd>
</dl>
<p>
If Shift contains a key modifier, or Key has not been handled, the KeyDown 
method from the ancestor class is called to handle the values in Key and 
Shift.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.KeyDown">TWinControl.KeyDown</link>
</seealso>
</element>
<element name="TCustomRadioGroup.ItemKeyDown.Sender">
<short>Object for the key down event.</short>
</element>
<element name="TCustomRadioGroup.ItemKeyDown.Key">
<short>Key code for the key down event.</short>
</element>
<element name="TCustomRadioGroup.ItemKeyDown.Shift">
<short>Shift, Alt, or Ctrl modifier for the key down event.</short>
</element>

<element name="TCustomRadioGroup.ItemKeyUp">
<short>Handles key up messages for radio buttons in the group.</short>
<descr>
<p>
Calls the KeyUp method in the ancestor class to handle the values in Key and 
Shift.
</p>
</descr>
<errors/>
<seealso/>
</element>
<element name="TCustomRadioGroup.ItemKeyUp.Sender">
<short>Object for the key event.</short>
</element>
<element name="TCustomRadioGroup.ItemKeyUp.Key">
<short>Key code for the event.</short>
</element>
<element name="TCustomRadioGroup.ItemKeyUp.Shift">
<short>Shift, Alt, Ctrl modifier for the key up event.</short>
</element>

<element name="TCustomRadioGroup.ItemKeyPress">
<short>Handles key press characters for radio buttons in the group.</short>
<descr>
<p>
Calls the <var>KeyPress</var> method from the ancestor class to handle the 
character value in <var>Key</var>.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomRadioGroup.ItemKeyPress.Sender">
<short>Object for the key press event.</short>
</element>
<element name="TCustomRadioGroup.ItemKeyPress.Key">
<short>Character code for the key press event.</short>
</element>

<element name="TCustomRadioGroup.ItemUTF8KeyPress">
<short>
Handles UTF-8 key press characters for radio buttons in the group.
</short>
<descr>
<p>
Calls the <var>OnUTF8KeyPress</var> method in the ancestor class to handle 
the UTF-8-encoded character in <var>UTF8Key</var>.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomRadioGroup.ItemUTF8KeyPress.Sender">
<short>Object for the key press event.</short>
</element>
<element name="TCustomRadioGroup.ItemUTF8KeyPress.UTF8Key">
<short>Character code for the event.</short>
</element>

<element name="TCustomRadioGroup.ItemResize">
<short>
Implements the OnResize event handler assigned to radio buttons in the group.
</short>
<descr>
<remark>
<var>ItemResize</var> is an empty implementation in the current LCL version.
</remark>
</descr>
<seealso/>
</element>
<element name="TCustomRadioGroup.ItemResize.Sender">
<short>Object for the event notification.</short>
</element>

<element name="TCustomRadioGroup.SetAutoFill">
<short>Sets the value for the AutoFill property.</short>
<descr/>
<seealso>
<link id="TCustomRadioGroup.AutoFill"/>
</seealso>
</element>
<element name="TCustomRadioGroup.SetAutoFill.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomRadioGroup.Buttons">
<short>
Provides indexed access to the radio buttons on the group box control.
</short>
<descr>
<p>
<var>Buttons</var> is a <var>TRadioButton</var> property which allows access to 
a radio button on the group box by its ordinal position in Items.
</p>
<p>
Use ItemIndex to get the currently selected radio button on the group box.
</p>
<p>
For example:
</p>
<code>
AChecked := (AGroupBox.ItemIndex &lt;&gt; -1) and 
  AGroupBox.Buttons[AGroupBox.ItemIndex].Checked;
</code>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomRadioGroup.ItemIndex"/>
<link id="TCustomRadioGroup.Items"/>
<link id="#lcl.stdctrls.TRadioButton">TRadioButton</link>
</seealso>
</element>
<element name="TCustomRadioGroup.Buttons.Index">
<short>
Ordinal position for the radio button returned as the property value. Must be in the range 0..Items.Count-1.
</short>
</element>

<element name="TCustomRadioGroup.SetColumnLayout">
<short>Sets the value for the ColumnLayout property.</short>
<descr/>
<seealso>
<link id="TCustomRadioGroup.ColumnLayout"/>
</seealso>
</element>
<element name="TCustomRadioGroup.SetColumnLayout.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomRadioGroup.UpdateControlsPerLine">
<short>
Updates the number of radio buttons displayed on each line based on the 
layout policy for child controls.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomRadioGroup.UpdateItems">
<short>
Adds or removes radio buttons to match the names defined in Items.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomRadioGroup.UpdateTabStops">
<short>
Ensures that checked radio buttons have their TabStop property set to 
<b>True</b>.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomRadioGroup.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomRadioGroup.UpdateInternalObjectList">
<short>
Calls the private UpdateItems method to add or remove radio buttons for the 
grouped control.
</short>
<descr>
<p>
Called from the Changed method in Items when a string value is added to or 
removed from the property and EndUpdate has been called for the string list.
</p>
</descr>
<seealso>
<link id="TCustomRadioGroup.Items"/>
<link id="TCustomRadioGroup.UpdateAll"/>
</seealso>
</element>

<element name="TCustomRadioGroup.UpdateAll">
<short>
Updates the radio buttons and the number of radio buttons per line for the 
control.
</short>
<descr>
<p>
Called from the Changed method in Items when EndUpdate has been called and 
the update count reaches 0.
</p>
</descr>
<seealso>
<link id="TCustomRadioGroup.Items"/>
<link id="TCustomRadioGroup.UpdateInternalObjectList"/>
</seealso>
</element>

<element name="TCustomRadioGroup.InitializeWnd">
<short>
Creates the visual components used in the radio group.
</short>
<descr>
<p>
<var>InitializeWnd</var> is an overridden method in 
<var>TCustomRadioGroup</var> used to initialize the TRadioButton instances 
which represent the Items on the control. A catchable debugger exception is 
raised, and no actions are performed, if InitializeWnd has already been 
called but has not yet been completed.
</p>
<p>
InitializeWnd recreates the TRadioButton instances in the internal storage 
for the class and configures their event handlers, Fonts, BorderSpacing, 
ControlStyle flags, TabStop and TabOrder settings, Caption, and Parent 
control. This includes the hidden radio button used (when needed for a 
widgetset) to allow all items in the group to become unchecked. The radio 
button representing the value in ItemIndex has its Checked property set to 
<b>True</b>, or the hidden radio button when ItemIndex is -1.
</p>
<p>
The inherited method is called to initial handles, window flags, text, and 
the enable state for the controls.
</p>
<p>
InitializeWnd is called from the CreateWnd method in the ancestor class.
</p>
</descr>
<seealso>
<link id="TCustomRadioGroup.Items"/>
<link id="TCustomRadioGroup.ItemIndex"/>
<link id="#lcl.stdctrls.TRadioButton">TRadioButton</link>
<link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
<link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
</seealso>
</element>

<element name="TCustomRadioGroup.UpdateRadioButtonStates">
<short>
<var>UpdateRadioButtonStates</var> including any pending changes.
</short>
<descr>
<p>
Updates the value in ItemIndex, and the tabs stop settings for all checked 
radio buttons in the control. ItemIndex is set to -1 when none of the radio 
buttons in the control have their Checked property set to <b>True</b>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomRadioGroup.ReadState">
<short>
Reads the values for the control and checks whether ItemIndex is valid.
</short>
<descr>
<p>
<var>ReadState</var> is used when the component is read using the LCL 
component streaming mechanism. ReadState ensures that <var>ItemIndex</var> 
contains a value that is valid for the defined <var>Items</var> in the 
grouped control.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent">TComponent</link>
</seealso>
</element>
<element name="TCustomRadioGroup.ReadState.Reader">
<short>TFiler instance used to read the values for the control.</short>
</element>

<element name="TCustomRadioGroup.SetItems">
<short>Sets the value for the Items property.</short>
<descr/>
<seealso>
<link id="TCustomRadioGroup.Items"/>
</seealso>
</element>
<element name="TCustomRadioGroup.SetItems.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomRadioGroup.SetColumns">
<short>Sets the value for the Columns property.</short>
<descr/>
<seealso>
<link id="TCustomRadioGroup.Columns"/>
</seealso>
</element>
<element name="TCustomRadioGroup.SetColumns.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomRadioGroup.SetItemIndex">
<short>Sets the value for the ItemIndex property.</short>
<descr/>
<seealso>
<link id="TCustomRadioGroup.ItemIndex"/>
</seealso>
</element>
<element name="TCustomRadioGroup.SetItemIndex.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomRadioGroup.GetItemIndex">
<short>Gets the value for the ItemIndex property.</short>
<descr/>
<seealso>
<link id="TCustomRadioGroup.ItemIndex"/>
</seealso>
</element>
<element name="TCustomRadioGroup.GetItemIndex.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomRadioGroup.CheckItemIndexChanged">
<short>
Checks whether ItemIndex has been changed since the previous call to the 
method.
</short>
<descr>
<p>
No actions are performed in the method for the following conditions:
</p>
<ul>
<li>The control has called, but not completed, the InitializeWnd method.</li>
<li>csDesigning or csDestroying is present in ComponentState.</li>
<li>ItemIndex has the same as the previous call to the method.</li>
</ul>
<p>
CheckItemIndexChanged calls UpdateRadioButtonStates to set the values in the 
Checked, TabStop, and TabOrder properties for the TRadioButton instances in 
the control. EditingDone is called to signal the OnEditingDone event handler 
(when assigned).
</p>
<p>
To maintain Delphi VCL compatibility, the OnClick event handler is signalled 
(when assigned) even when the change results from a direct assignment to 
ItemIndex. The more aptly named LCL event, OnSelectionChanged, is also 
signalled (when assigned).
</p>
<p>
CheckItemIndexChanged is called from the Clicked and Changed methods, and 
when a new value is assigned to the ItemIndex property.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomRadioGroup.Notification">
<short>
Handles the notification for a components inserted into or deleted from the 
control.
</short>
<descr>
<p>
<var>Notification</var> is an overridden method in 
<var>TCustomRadioGroup</var>. It calls the inherited method on entry to handle 
notifications for pop-up menus, actions, or control references in AnchorSides. 
In TCustomRadioGroup, it maintains the internal list of TRadioButton instances 
when a radio button is removed from the control.
</p>
</descr>
<version>
Added in LCL version 3.0.0.
</version>
<seealso>
<link id="#lcl.controls.TControl.Notification"/>
</seealso>
</element>
<element name="TCustomRadioGroup.Notification.AComponent">
<short>
Component added to or removed from the control instance.
</short>
</element>
<element name="TCustomRadioGroup.Notification.Operation">
<short>
Operation performed for the component.
</short>
</element>

<element name="TCustomRadioGroup.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TCustomRadioGroup</var>.It 
calls the inherited <var>Create</var> method, then sets the list of radio 
buttons, and initializes layout and sizing properties.
</p>
</descr>
<seealso>
<link id="#lcl.stdctrls.TCustomGroupBox.Create">TCustomGroupBox.Create</link>
</seealso>
</element>
<element name="TCustomRadioGroup.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomRadioGroup.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the destructor for <var>TCustomRadioGroup</var>. It 
frees the Items and radio buttons allocated in the class, and calls the 
inherited <var>Destroy</var> method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
</seealso>
</element>

<element name="TCustomRadioGroup.CanModify">
<short>Indicates if modification of the RadioGroup is permitted.</short>
<descr>
<p>
<var>CanModify</var> is a <var>Boolean</var> function which indicates if 
modification of the RadioGroup is permitted. CanModify always returns 
<b>True</b> in <var>TCustomRadioGroup</var>.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomRadioGroup.CanModify.Result">
<short><b>True</b> when the control can be modified.</short>
</element>

<element name="TCustomRadioGroup.FlipChildren">
<short>Flips the horizontal display order for child controls.</short>
<descr>
<remark>
FlipChildren is an empty implementation in TCustomRadioGroup.
</remark>
</descr>
<seealso/>
</element>
<element name="TCustomRadioGroup.FlipChildren.AllLevels">
<short>
<b>True</b> if all descendent child controls are affected in the method.
</short>
</element>

<element name="TCustomRadioGroup.Rows">
<short>
Indicates the number of rows in which Items (radio buttons) are held.
</short>
<descr>
<p>
<var>Rows</var> is an <var>Integer</var> function which returns the number of 
rows needed to represents the radio buttons defined in the grouped control. 
The return value is the result of dividing the total number of 
<var>Items</var> by the number of <var>Columns</var>. The return value is 
zero (<b>0</b>) when no Items have been defined in the control.
</p>
</descr>
<seealso>
<link id="TCustomRadioGroup.Items"/>
<link id="TCustomRadioGroup.Columns"/>
</seealso>
</element>
<element name="TCustomRadioGroup.Rows.Result">
<short>Number of rows.</short>
</element>

<element name="TCustomRadioGroup.AutoFill">
<short>
Indicates if radio buttons are resized to fill the available space in the 
control.
</short>
<descr>
<p>
<var>AutoFill</var> is a <var>Boolean</var> property which indicates whether 
child controls (radio buttons) are resized to fill the available space in the 
control. When AutoFill is set to <b>True</b>, child controls are resized by 
setting the <var>EnlargeHorizontal</var> and <var>EnlargeVertical</var> 
properties in <var>ChildSizing</var> to the value 
<var>crsHomogenousChildResize</var>. When AutoFill is set to <b>False</b>, 
the properties in ChildSizing are set to the value 
<var>crsAnchorAligning</var>.
</p>
<remark>
<var>DisableAlign</var> is called on entry to the method, and 
<var>EnableAlign</var> is called prior to exiting from the method.
</remark>
<p>
AutoFill is set to <b>True</b> in the <var>Create</var> constructor.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomRadioGroup.ItemIndex">
<short>
The ordinal position in Items for the selected radio button in the group.
</short>
<descr>
<p>
<var>ItemIndex</var> is an <var>Integer</var> property with the ordinal 
position for the selected radio button in the group. It refers to the 
position in <var>Items</var> with the caption for the radio button. The 
default value for the property is <b>-1</b>, and indicates that a radio 
button is not selected for the group.
</p>
<p>
ItemIndex must be in the range <b>-1..<var>Items.Count</var>-1</b>. An 
Exception is raised with the message in rsIndexOutOfBounds if an invalid 
value is used.
</p>
<p>
When the value for the property is changed, the OnClick event handler is 
signalled (when assigned). In addition, the OnSelectionChanged is signalled 
(when assigned). Both events occur even if the Handle has not been allocated 
in the widgetset class. This is Delphi compatible.
</p>
<p>
Use the OnItemEnter and OnItemExit event handlers to perform actions when the 
focus or selection for a radio button is changed, as opposed to a change in 
the properties for the group control.
</p>
<remark>
Some widgetsets do not allow a radio button group to be unselected, or have 
no selected radio button. For this reason, a hidden radio button exists in 
TCustomRadioGroup and is selected when ItemIndex is set to -1.
</remark>
</descr>
<seealso>
<link id="TCustomRadioGroup.Items"/>
<link id="TCustomRadioGroup.OnClick"/>
<link id="TCustomRadioGroup.OnSelectionChanged"/>
<link id="TCustomRadioGroup.OnItemEnter"/>
<link id="TCustomRadioGroup.OnItemExit"/>
</seealso>
</element>

<element name="TCustomRadioGroup.Items">
<short>
Contains the captions for the radio button displayed in the control.
</short>
<descr>
<p>
<var>Items</var> is a <var>TStrings</var> property which contains the 
captions for the radio buttons displayed in the grouped control. Changing the 
value in Items causes the <var>UpdateItems</var> and 
<var>UpdateControlsPerLine</var> methods to be called to add or remove radio 
buttons (when needed) and to adjust Rows for the number of <var>Columns</var> 
in the control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomRadioGroup.Columns">
<short>Number of columns used to display radio buttons in the control.</short>
<descr>
<p>
<var>Columns</var> is an Integer property that indicates the number of 
columns used to display the radio buttons in the control. Columns must 
contain a positive non-zero value; use of an invalid value causes an 
Exception to be raised.
</p>
<p>
Changing the value in Columns causes the UpdateControlsPerLine to be called.
</p>
<p>
The default value for the property is 1.
</p>
</descr>
<errors>
Raises an exception when the property value is less than 1. Raised with the 
message 'TCustomRadioGroup: Columns must be &gt;= 1'.
</errors>
<seealso/>
</element>

<element name="TCustomRadioGroup.ColumnLayout">
<short>Fill direction for columns on the grouped control.</short>
<descr>
<p>
<var>ColumnLayout</var> is a <var>TColumnLayout</var> property which 
indicates the direction used to fill columns in the group control. The 
default value for the property is <var>clHorizontalThenVertical</var>, and 
causes columns to filled horizontally before advancing to the next row.
</p>
<p>
Use <var>Columns</var> to specify the number of columns displayed for the 
Items on the grouped control.
</p>
</descr>
<seealso>
<link id="TCustomRadioGroup.Columns"/>
<link id="TCustomRadioGroup.Items"/>
<link id="TColumnLayout"/>
</seealso>
</element>

<element name="TCustomRadioGroup.OnClick">
<short>Event called when the selected item is changed.</short>
<descr>
<p>
<var>OnClick</var> is different from the usual event 
<var>TControl.OnClick</var>. Instead of occurring on a mouse click on the 
control, this event is occurs when the currently selected item changes. It 
will not occur if a click does not make the selection change, will not occur 
upon clicking a already selected item and will occur if one changes the 
selection via the keyboard. It also occurs when the item is changed 
programmatically. This is done for Delphi compatibility.
</p>
<p>
Note that Lazarus also offers another event for the same task with a better 
name:  see <var>OnSelectionChanged</var> for more details.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.OnClick">TControl.OnClick</link>
<link id="TCustomRadioGroup.OnSelectionChanged"/>
</seealso>
</element>

<element name="TCustomRadioGroup.OnItemEnter">
<short>
Event handler signalled when a radio button in the group receives focus.
</short>
<descr>
<p>
<var>OnItemEnter</var> is a <var>TNotifyEvent</var> property that implements 
the event handler signalled when a radio button in the group receives focus. 
It occurs when the value in ItemIndex has been changed. An application must 
implement and assign an object procedure to the property to respond to the 
event notification. The Sender argument contains the radio button which is 
selected in the control.
</p>
<p>
OnItemEnter is signalled  (when assigned) from the <var>ItemEnter</var> 
method.
</p>
<remark>
OnItemEnter was added in LCL version 2.2, and should be used in place of the 
OnEnter event handler. This change is Delphi compatible.
</remark>
</descr>
<version>
Added in LCL version 2.2.0.
</version>
<seealso>
<link id="#lcl.stdctrls.TRadioButton.OnEnter">TRadioButton.OnEnter</link>
</seealso>
</element>

<element name="TCustomRadioGroup.OnItemExit">
<short>
Event handler signalled when a radio button in the group loses focus.
</short>
<descr>
<p>
<var>OnItemExit</var> is a <var>TNotifyEvent</var> property which implements 
an event handler signalled when a radio button in the group loses focus. It 
occurs when the value in ItemIndex is changed. The Sender argument contains 
the radio button which has been de-selected in the control. An application 
must implement and assign an object procedure to the property to respond to 
the event notification.
</p>
<p>
OnItemExit is signalled from the <var>ItemExit</var> method (when assigned).
</p>
<remark>
OnItemExit was added in LCL version 2.2, and should be used in place of the 
OnExit event handler. This change is Delphi compatible.
</remark>
</descr>
<version>
Added in LCL version 2.2.0.
</version>
<seealso>
<link id="#lcl.stdctrls.TRadioButton.OnExit">TRadioButton.OnExit</link>
</seealso>
</element>

<element name="TCustomRadioGroup.OnSelectionChanged">
<short>Event called when the selected item changes.</short>
<descr>
<p>
This event was introduced in Lazarus 0.9.31, and is called when the selected 
item is changed. It is triggered when changed using the mouse or the 
keyboard, and is triggered when the selected item is changed programmatically.
</p>
</descr>
<seealso>
<link id="TCustomRadioGroup.OnClick"/>
</seealso>
<version>Introduced in Lazarus 0.9.31</version>
</element>

<element name="TRadioGroup">
<short>
<var>TRadioGroup</var> is a group of related but mutually exclusive radio 
buttons, requiring the user to select one of a set of alternatives.
</short>
<descr>
<p>
<var>TRadioGroup</var>: A group of related but mutually exclusive radio 
buttons, requiring the user to select one of a set of alternatives. As one 
button becomes selected, the remaining buttons in the group become 
automatically deselected.
</p>
<p>
To use this control, place it in the required position on the form, then in 
the Object Inspector select <var>Items</var> and click on the ellipsis (...) 
to open the string editor. Type in the captions to accompany each check box, 
then close the string editor and you will see a series of Radio Boxes with 
their captions displayed beside them. (Note - unlike <link 
id="#lcl.ExtCtrls.TCheckGroup">TCheckGroup</link>, there is no special 
RadioGroup editor).
</p>
<p>
Inherits properties from <link 
id="#lcl.ExtCtrls.TCustomRadioGroup">TCustomRadioGroup</link> and <link 
id="#lcl.StdCtrls.TCustomGroupBox">TCustomGroupBox</link>.
</p>
<p>
<var>TRadioGroup</var> behaves differently from a group of 
<var>TRadioButton</var> controls placed arbitrarily around a form.
</p>
<p>
In the case of <var>TRadioButton</var>, the mutual exclusivity is a feature 
that applies to any <var>RadioButton</var> anywhere in the Form, and the 
<var>RadioButtons</var> can be rearranged in any order or placed anywhere 
within the containing <var>Form</var>, while in <var>TRadioGroup</var> the 
exclusivity applies only to buttons within the Group, which are ordered 
strictly according to their <var>ItemIndex</var> within the <var>Items</var> 
for the control.
</p>
<p>
<var>TRadioButton</var> is an entity unto itself with a number of additional 
properties. In contrast, the buttons within <var>TRadioGroup</var> are not 
separate entities, but rather are simply entries in a list of strings, each 
of which is associated with the on-screen image of a <var>RadioButton</var>.
</p>
<p>
The example shows the difference between the use of <var>TRadioButton</var> 
and <var>TRadioGroup</var>.
</p>
</descr>
<seealso>
<link id="#lcl.StdCtrls.TRadioButton">TRadioButton</link>
<link id="#lcl.StdCtrls.HowToUseStdCtrls">How To Use Standard Controls</link>
</seealso>
<example file="extctrls/radiobutton.pas"/>
</element>

<element name="TRadioGroup.Align" link="#lcl.controls.TControl.Align"/>
<element name="TRadioGroup.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TRadioGroup.AutoFill" link="#lcl.extctrls.TCustomRadioGroup.AutoFill"/>
<element name="TRadioGroup.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TRadioGroup.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TRadioGroup.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TRadioGroup.Caption" link="#lcl.controls.TControl.Caption"/>
<element name="TRadioGroup.ChildSizing" link="#lcl.controls.TWinControl.ChildSizing"/>
<element name="TRadioGroup.ClientHeight" link="#lcl.controls.TControl.ClientHeight"/>
<element name="TRadioGroup.ClientWidth" link="#lcl.controls.TControl.ClientWidth"/>
<element name="TRadioGroup.Color" link="#lcl.controls.TControl.Color"/>
<element name="TRadioGroup.ColumnLayout" link="#lcl.extctrls.TCustomRadioGroup.ColumnLayout"/>
<element name="TRadioGroup.Columns" link="#lcl.extctrls.TCustomRadioGroup.Columns"/>
<element name="TRadioGroup.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TRadioGroup.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
<element name="TRadioGroup.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TRadioGroup.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TRadioGroup.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TRadioGroup.Font" link="#lcl.controls.TControl.Font"/>
<element name="TRadioGroup.ItemIndex" link="#lcl.extctrls.TCustomRadioGroup.ItemIndex"/>

<element name="TRadioGroup.Items">
<short>
<var>Items</var> - a string list containing the captions of the radio boxes.
</short>
<descr>
<p>
<var>Items</var> - a string list containing the captions of the radio boxes.
</p>
<p>
Use the String List editor, opened by selecting <var>Items</var> and the 
ellipsis (...) in the Object Inspector, to insert the captions for the radio 
boxes, and determine their order and layout using the <var>Rows</var>, 
<var>Columns</var> and <var>ColumnLayout</var> properties.
</p>
</descr>
<seealso>
<link id="TCustomRadioGroup.Items"/>
</seealso>
</element>

<element name="TRadioGroup.ParentBackground" link="#lcl.controls.TWinControl.ParentBackground"/>
<element name="TRadioGroup.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TRadioGroup.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TRadioGroup.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TRadioGroup.ParentDoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
<element name="TRadioGroup.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TRadioGroup.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TRadioGroup.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TRadioGroup.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TRadioGroup.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TRadioGroup.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TRadioGroup.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TRadioGroup.OnClick" link="#lcl.extctrls.TCustomRadioGroup.OnClick"/>
<element name="TRadioGroup.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TRadioGroup.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TRadioGroup.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TRadioGroup.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TRadioGroup.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TRadioGroup.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TRadioGroup.OnItemEnter" link="#lcl.extctrls.TCustomRadioGroup.OnItemEnter"/>
<element name="TRadioGroup.OnItemExit" link="#lcl.extctrls.TCustomRadioGroup.OnItemExit"/>
<element name="TRadioGroup.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TRadioGroup.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TRadioGroup.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TRadioGroup.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TRadioGroup.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TRadioGroup.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TRadioGroup.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TRadioGroup.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TRadioGroup.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TRadioGroup.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TRadioGroup.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TRadioGroup.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TRadioGroup.OnSelectionChanged" link="#lcl.extctrls.TCustomRadioGroup.OnSelectionChanged"/>
<element name="TRadioGroup.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TRadioGroup.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TCheckGroupClicked">
<short>
<var>TCheckGroupClicked</var> specifies a generic event handler method for a 
click in a check group.
</short>
<descr/>
<seealso/>
</element>
<element name="TCheckGroupClicked.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TCheckGroupClicked.Index">
<short>Ordinal position for the check box Item clicked in the control.</short>
</element>

<element name="TCustomCheckGroup">
<short>
<var>TCustomCheckGroup</var> is the base type for <var>TCheckGroup</var>.
</short>
<descr>
<p>
<var>TCustomCheckGroup</var> is the base type for <var>TCheckGroup</var>. 
This class defines <var>Items</var>, where the captions for individual check 
boxes are stored, <var>Rows</var> and <var>Columns</var> for arranging the 
check boxes, and ColumnLayout to determine whether the data are arranged down 
the columns first, or across the rows first.
</p>
</descr>
<seealso>
<link id="#lcl.StdCtrls.TCustomGroupBox">TCustomGroupBox</link>
</seealso>
</element>

<element name="TCustomCheckGroup.FAutoFill"/>
<element name="TCustomCheckGroup.FButtonList"/>
<element name="TCustomCheckGroup.FColumnLayout"/>
<element name="TCustomCheckGroup.FCreatingWnd"/>
<element name="TCustomCheckGroup.FItems"/>
<element name="TCustomCheckGroup.FColumns"/>
<element name="TCustomCheckGroup.FOnItemClick"/>
<element name="TCustomCheckGroup.FUpdatingItems"/>

<element name="TCustomCheckGroup.GetButton"/>
<element name="TCustomCheckGroup.GetButton.Result"/>
<element name="TCustomCheckGroup.GetButton.Index"/>

<element name="TCustomCheckGroup.GetChecked">
<short>Gets the value for the indexed Checked property.</short>
<descr/>
<seealso>
<link id="TCustomCheckGroup.Checked"/>
</seealso>
</element>
<element name="TCustomCheckGroup.GetChecked.Result">
<short>Value for the property.</short>
</element>
<element name="TCustomCheckGroup.GetChecked.Index">
<short>Ordinal position for the check box examined in the method.</short>
</element>

<element name="TCustomCheckGroup.GetCheckEnabled">
<short>Gets the value for the indexed CheckEnabled property.</short>
<descr/>
<seealso>
<link id="TCustomCheckGroup.CheckEnabled"/>
</seealso>
</element>
<element name="TCustomCheckGroup.GetCheckEnabled.Result">
<short>Value for the property.</short>
</element>
<element name="TCustomCheckGroup.GetCheckEnabled.Index">
<short>Ordinal position for the check box examined in the method.</short>
</element>

<element name="TCustomCheckGroup.Clicked">
<short>
Performs actions needed when a check box in the grouped control is clicked.
</short>
<descr>
<p>
<var>Clicked</var> is a procedure which performs actions needed when a check 
box in the grouped control is clicked. <var>Sender</var> contains the 
<var>TCheckBox</var> instance generating the click notification. Clicked 
checks the internal list of check boxes to find the ordinal position for the 
control in Sender, and calls <var>DoClick</var> to trigger the 
<var>OnItemClick</var> event handler.
</p>
<remark>
No actions are performed in the method if Sender is not found in the list of 
check boxes for the grouped control.
</remark>
<p>
Clicked is used as the <var>OnClick</var> event handler in the 
<var>TCheckBox</var> instances created in <var>UpdateItems</var>.
</p>
</descr>
<seealso>
<link id="TCustomCheckGroup.Items"/>
<link id="TCustomCheckGroup.OnItemClick"/>
<link id="#lcl.stdctrls.TCheckBox.OnClick">TCheckBox.OnClick</link>
</seealso>
</element>
<element name="TCustomCheckGroup.Clicked.Sender">
<short>Check box generating the click notification.</short>
</element>

<element name="TCustomCheckGroup.DoClick">
<short>
Signals the OnItemClick event handler when a check box in the control is 
clicked.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCheckGroup.DoClick.Index">
<short>
Ordinal position for the check box clicked in the grouped control.
</short>
</element>

<element name="TCustomCheckGroup.ItemKeyDown">
<short>
Implements the OnKeyDown event handler assigned to check boxes in the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCheckGroup.ItemKeyDown.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TCustomCheckGroup.ItemKeyDown.Key">
<short>Key examined in the method.</short>
</element>
<element name="TCustomCheckGroup.ItemKeyDown.Shift">
<short>Key modifier examined in the method.</short>
</element>

<element name="TCustomCheckGroup.ItemKeyUp">
<short>
Implements the OnKeyUp event handler assigned to check boxes in the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCheckGroup.ItemKeyUp.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TCustomCheckGroup.ItemKeyUp.Key">
<short>Key examined in the method.</short>
</element>
<element name="TCustomCheckGroup.ItemKeyUp.Shift">
<short>Key modifier examined in the method.</short>
</element>

<element name="TCustomCheckGroup.ItemKeyPress">
<short>
Implements the OnKeyPress event handler assigned to check boxes in the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCheckGroup.ItemKeyPress.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TCustomCheckGroup.ItemKeyPress.Key">
<short>Key examined in the method.</short>
</element>

<element name="TCustomCheckGroup.ItemUTF8KeyPress">
<short>
Implements the OnUTF8KeyPress event handler assigned to check boxes in the 
control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCheckGroup.ItemUTF8KeyPress.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TCustomCheckGroup.ItemUTF8KeyPress.UTF8Key">
<short>UTF code point examined in the method.</short>
</element>

<element name="TCustomCheckGroup.RaiseIndexOutOfBounds">
<short>
Raises an exception when the specified Index is not valid for the number of 
Items in the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCheckGroup.RaiseIndexOutOfBounds.Index">
<short>Ordinal position examined in the method.</short>
</element>

<element name="TCustomCheckGroup.SetAutoFill">
<short>Sets the value for the AutoFill property.</short>
<descr/>
<seealso>
<link id="TCustomCheckGroup.AutoFill"/>
</seealso>
</element>
<element name="TCustomCheckGroup.SetAutoFill.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomCheckGroup.SetChecked">
<short>Sets the value for the indexed Checked property.</short>
<descr/>
<seealso>
<link id="TCustomCheckGroup.Checked"/>
</seealso>
</element>
<element name="TCustomCheckGroup.SetChecked.Index">
<short>Ordinal position for the check box updated in the method.</short>
</element>
<element name="TCustomCheckGroup.SetChecked.AValue">
<short>New value for the check box.</short>
</element>

<element name="TCustomCheckGroup.SetCheckEnabled">
<short>Sets the value for the indexed CheckEnabled property.</short>
<descr/>
<seealso>
<link id="TCustomCheckGroup.CheckEnabled"/>
</seealso>
</element>
<element name="TCustomCheckGroup.SetCheckEnabled.Index">
<short>Ordinal position for the check box updated in the method.</short>
</element>
<element name="TCustomCheckGroup.SetCheckEnabled.AValue">
<short>New value for the enable state in the check box.</short>
</element>

<element name="TCustomCheckGroup.SetColumnLayout">
<short>Sets the value for the ColumnLayout property.</short>
<descr/>
<seealso>
<link id="TCustomCheckGroup.ColumnLayout"/>
</seealso>
</element>
<element name="TCustomCheckGroup.SetColumnLayout.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomCheckGroup.UpdateItems">
<short>
Adds or removes check boxes for the Items defined for the control.
</short>
<descr/>
<seealso>
<link id="TCustomCheckGroup.Items"/>
</seealso>
</element>

<element name="TCustomCheckGroup.UpdateControlsPerLine">
<short>
Updates the ChildSizing property to use the number of Columns defined in the 
control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCheckGroup.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomCheckGroup.UpdateInternalObjectList">
<short>
Updates the control when the Items property is changed.
</short>
<descr>
<p>
Calls the private <var>UpdateItems</var> method to refresh the check boxes 
displayed for the grouped edit control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomCheckGroup.UpdateAll">
<short>Updates both the Items and the number of controls per line.</short>
<descr>
<p>
Calls <var>OwnerFormDesignerModified</var> to notify the owner form when the 
control has been modified at design-time.
</p>
</descr>
<seealso>
<link id="#lcl.lclproc.OwnerFormDesignerModified">OwnerFormDesignerModified</link>
</seealso>
</element>

<element name="TCustomCheckGroup.SetItems">
<short>Sets the value for the Items property.</short>
<descr>
<p>
Calls the Assign method in Items to store the specified Value. Updates the 
group by re-creating the check-box controls needed for the values in Items. 
Re-displays the control using the required number of Columns.
</p>
</descr>
<seealso>
<link id="TCustomCheckGroup.Items"/>
<link id="TCustomCheckGroup.Columns"/>
<link id="TCustomCheckGroup.UpdateAll"/>
</seealso>
</element>
<element name="TCustomCheckGroup.SetItems.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomCheckGroup.SetColumns">
<short>Sets the value for the Columns property.</short>
<descr>
<p>
Raises an <var>Exception</var> if the new property value is less than 1. At 
minimum, a single column is required.
</p>
<p>
Re-displays the control using the required number of <var>Columns</var>.
</p>
</descr>
<seealso>
<link id="TCustomCheckGroup.Columns"/>
</seealso>
</element>
<element name="TCustomCheckGroup.SetColumns.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomCheckGroup.DefineProperties">
<short>
<var>DefineProperties</var> - overrides the method inherited from TComponent, 
defines the top, left properties.
</short>
<descr/>
<seealso>
<link id="#rtl.Classes.TComponent">TComponent</link>
</seealso>
</element>
<element name="TCustomCheckGroup.DefineProperties.Filer">
<short>
TFiler instance used to read and write the content for the control.
</short>
</element>

<element name="TCustomCheckGroup.ReadData">
<short>Reads LCL component streaming data from a stream.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCheckGroup.ReadData.Stream">
<short>TStream instance with values read in the method.</short>
</element>

<element name="TCustomCheckGroup.WriteData">
<short>Writes LCL component streaming data to a stream.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCheckGroup.WriteData.Stream">
<short>TStream instance where values are written in the method.</short>
</element>

<element name="TCustomCheckGroup.Loaded">
<short>
Performs actions needed when the component has finished loading from the LCL 
component streaming mechanism.
</short>
<descr>
<p>
Overridden in <var>TCustomCheckGroup</var> to call the <var>UpdateItems</var> 
method when the component has finished loading from the LCL streaming 
mechanism.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent">TComponent</link>
</seealso>
</element>

<element name="TCustomCheckGroup.DoOnResize" link="#lcl.controls.TControl.DoOnResize"/>

<element name="TCustomCheckGroup.Notification">
<short>
Handles the notification for a components inserted into or deleted from the 
control.
</short>
<descr>
<p>
<var>Notification</var> is an overridden method in 
<var>TCustomCheckGroup</var>. It calls the inherited method on entry to handle 
notifications for pop-up menus, actions, or control references in AnchorSides. 
In TCustomCheckGroup, it maintains the internal list of TCheckBox instances 
when a check box is removed from the control.
</p>
</descr>
<version>
Added in LCL version 3.0.0.
</version>
<seealso>
<link id="#lcl.controls.TControl.Notification"/>
</seealso>
</element>
<element name="TCustomCheckGroup.Notification.AComponent">
<short>
Component added to or removed from the control instance.
</short>
</element>
<element name="TCustomCheckGroup.Notification.Operation">
<short>
Operation performed for the component.
</short>
</element>

<element name="TCustomCheckGroup.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for 
<var>TCustomCheckGroup</var>. It calls the inherited <var>Create</var> 
method. It also sets styles, creates lists, and initializes sizing and layout 
properties in the control.
</p>
</descr>
<seealso>
<link id="#lcl.stdctrls.TCustomGroupBox.Create">TCustomGroupBox.Create</link>
</seealso>
</element>
<element name="TCustomCheckGroup.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomCheckGroup.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for 
<var>TCustomCheckGroup</var>. It frees items and check boxes in the control, 
and calls the inherited <var>Destroy</var> method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
</seealso>
</element>

<element name="TCustomCheckGroup.FlipChildren">
<short>Flips child controls horizontally.</short>
<descr>
<p>
Child controls arranged in left-to-right order appear in right-to-left order 
after flipping. Any anchors are adjusted accordingly.
</p>
<p>
<var>FlipChildren</var> is an empty implementation in 
<var>TCustomCheckGroup</var>; no flipping is performed for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.FlipChildren">TWinControl.FlipChildren</link>
</seealso>
</element>
<element name="TCustomCheckGroup.FlipChildren.AllLevels">
<short>
<b>True</b> all child controls and their descendants are flipped.
</short>
</element>

<element name="TCustomCheckGroup.Rows">
<short>
Number of rows need to display Items (check boxes ) defined in the control.
</short>
<descr>
<p>
<var>Rows</var> is an <var>Integer</var> function which returns the number of 
rows needed to represents the check boxes defined in <var>Items</var>. The 
return value is the result of dividing the total number of <var>Items</var> 
by the number of <var>Columns</var>. The return value is zero (<b>0</b>) when 
no Items have been defined in the control.
</p>
</descr>
<seealso>
<link id="TCustomCheckGroup.Items"/>
<link id="TCustomCheckGroup.Columns"/>
</seealso>
</element>
<element name="TCustomCheckGroup.Rows.Result">
<short>The number of rows used for the Items.</short>
</element>

<element name="TCustomCheckGroup.AutoFill">
<short>
Indicates if check boxes are resized to fill the available space in the 
control.
</short>
<descr>
<p>
<var>AutoFill</var> is a <var>Boolean</var> property which indicates whether 
child controls (check boxes) are resized to fill the available space in the 
control. When AutoFill is set to <b>True</b>, child controls are resized by 
setting the <var>EnlargeHorizontal</var> and <var>EnlargeVertical</var> 
properties in <var>ChildSizing</var> to the value 
<var>crsHomogenousChildResize</var>. When AutoFill is set to <b>False</b>, 
the properties in ChildSizing are set to the value 
<var>crsAnchorAligning</var>.
</p>
<remark>
<var>DisableAlign</var> is called on entry to the method, and 
<var>EnableAlign</var> is called prior to exiting from the method.
</remark>
<p>
AutoFill is set to <b>True</b> in the <var>Create</var> constructor.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomCheckGroup.Buttons">
<short>
Provides indexed access to the check boxes on the group box control.
</short>
<descr>
<p>
<var>Buttons</var> a <var>TCheckBox</var> property which provides indexed 
access to the check boxes on the group box control. Values in the property are 
accessed by their ordinal position in the Items.
</p>
<p>
Use Items to access the captions displayed on each of the check box controls.
</p>
<p>
Use Checked to access the Boolean state for each of the Items.
</p>
<p>
Use CheckEnabled to read or write the value for the Enabled property in each of 
the check box controls.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomCheckGroup.Items"/>
<link id="TCustomCheckGroup.Checked"/>
<link id="TCustomCheckGroup.CheckEnabled"/>
<link id="#lcl.stdctrls.TCheckBox">TCheckBox</link>
</seealso>
</element>
<element name="TCustomCheckGroup.Buttons.Index">
<short>
Ordinal position for the check box returned as the property value.
</short>
</element>

<element name="TCustomCheckGroup.Items">
<short>
String list with the captions for the check boxes in the grouped edit control.
</short>
<descr>
<p>
<var>Items</var> is a <var>TStrings</var> property which stores the captions 
for the check boxes on the grouped edit control. Items also determines the 
number of <var>TCheckBox</var> controls created and displayed for the 
control. Setting a new value for the property causes the list of check boxes 
and the columns in the control to be updated.
</p>
<p>
When the class instance is created, a <var>TCheckGroupStringList</var> 
instance is assigned to the member variable for the <var>Items</var> 
property. The implementation type contains a reference to the class instance, 
and provides access to values in <var>Checked</var> and 
<var>CheckEnabled</var> when adding or removing entries in Items.
</p>
</descr>
<seealso>
<link id="TCustomCheckGroup.Checked"/>
<link id="TCustomCheckGroup.CheckEnabled"/>
</seealso>
</element>

<element name="TCustomCheckGroup.Checked">
<short>
Controls whether an individual check box in the group is in the checked state.
</short>
<descr>
<p>
<var>Checked</var> is an indexed <var>Boolean</var> property used to read or 
write the state for a check box at the ordinal position specified in 
<var>Index</var>. Index must be in the range <b>0..Count-1</b>. An exception is 
raised if an invalid index position is specified.
</p>
<p>
The value is True if the Checked property for the specified item is set. The 
OnClick event handler for the check box is not signalled when the checked state 
is changed using the property.
</p>
<p>
Use CheckEnabled to control whether a specific check box is enabled, and can 
toggle the value in its Checked property.
</p>
<p>
Use Buttons to access the TCheckBox controls for the captions in Items.
</p>
</descr>
<errors>
Raises an exception with the message <var>rsIndexOutOfBounds</var> if an 
invalid index position is specified.
</errors><seealso>
<link id="TCustomCheckGroup.CheckEnabled"/>
<link id="TCustomCheckGroup.Buttons"/>
<link id="TCustomCheckGroup.Items"/>
<link id="TCustomCheckGroup.OnItemClick"/>
<link id="#lcl.stdctrls.TCheckBox.OnClick">TCheckBox.OnClick</link>
</seealso>
</element>
<element name="TCustomCheckGroup.Checked.Index">
<short>
Ordinal position in Items for the requested check box.
</short>
</element>

<element name="TCustomCheckGroup.CheckEnabled">
<short>
Indicates whether a check box control in the group is enabled or disabled.
</short>
<descr>
<p>
<var>CheckEnabled</var> is an indexed <var>Boolean</var> property used to 
maintain the <var>Enabled</var> property for the check box at the position 
specified in <var>Index</var>. Index contains the ordinal position in the 
list of check boxes for the control, and must be in the range 
<b>0..Items.Count-1</b>. An exception is raised when Index is not within the 
required range.
</p>
<p>
Use the <var>Checked</var> property to determine if a check box has its 
<var>Checked</var> property set to <b>True</b>.
</p>
<p>
Use <var>Items</var> to maintain the Captions for the check boxes displayed 
in the grouped edit control.
</p>
<p>
Use Buttons to access the TCheckBox controls for the captions in Items.
</p>
</descr>
<errors>
Raises an exception with the message <var>rsIndexOutOfBounds</var> if an 
invalid index position is specified.
</errors>
<seealso>
<link id="TCustomCheckGroup.Checked"/>
<link id="TCustomCheckGroup.Buttons"/>
<link id="TCustomCheckGroup.Items"/>
</seealso>
</element>
<element name="TCustomCheckGroup.CheckEnabled.Index">
<short>Ordinal position for the check box accessed in the method.</short>
</element>

<element name="TCustomCheckGroup.Columns">
<short>
<var>Columns</var> is the number of columns in which the <var>Items</var> 
(check boxes) are arranged.
</short>
<descr>
<p>
<var>Columns</var> is an <var>Integer</var> property which specifies the 
number of columns used to display the check boxes for the grouped edit 
control. Changing the value in the property causes the 
<var>UpdateControlsPerLine</var> method to be called. The new value for the 
property must be a positive non-zero value or an exception is raised.
</p>
<p>
The value in <var>Columns</var> is used as the number of controls displayed 
per line in the <var>ChildSizing</var> property.
</p>
<p>
The default value for the property is <b>1</b>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.ChildSizing">TWinControl.ChildSizing</link>
<link id="TCheckGroup.ChildSizing"/>
</seealso>
</element>

<element name="TCustomCheckGroup.ColumnLayout">
<short>
<var>ColumnLayout</var> - <var>HorizontalThenVertical</var> or vice versa.
</short>
<descr>
<p>
<var>ColumnLayout</var> is a <var>TColumnLayout</var> property which 
specifies the layout strategy used when rendering the <var>Items</var> in the 
grouped edit control. The default value for the property is 
<var>clHorizontalThenVertical</var>, and causes check boxes to be drawn 
horizontally for the required number of <var>Columns</var> before advancing.
</p>
<p>
Assigning a new value for the property causes <var>ChildSizing</var> to be 
updated to use the corresponding value in its <var>Layout</var> property.
</p>
</descr>
<seealso>
<link id="TCustomCheckGroup.Items"/>
<link id="TCustomCheckGroup.Columns"/>
<link id="TColumnLayout"/>
<link id="TCheckGroup.ChildSizing"/>
<link id="#lcl.controls.TWinControl.ChildSizing">TWinControl.ChildSizing</link>
</seealso>
</element>

<element name="TCustomCheckGroup.OnItemClick">
<short>
<var>OnItemClick</var> - event handler signalled when the mouse is clicked on 
one of the Items in the control.
</short>
<descr>
<p>
<var>OnItemClick</var> is a <var>TCheckGroupClicked</var> property used as 
the event handler signalled when a check box is clicked for the grouped edit 
control. Applications must implement and assign an object procedure using the 
signature in TCheckGroupClicked to respond to the input event.
</p>
</descr>
<seealso>
<link id="TCheckGroupClicked"/>
</seealso>
</element>

<element name="TCheckGroup">
<short>
<var>TCheckGroup</var> is a group of Check Boxes physically and logically 
grouped together on a form.
</short>
<descr>
<p>
<var>TCheckGroup</var> is a group of Check Boxes physically and logically 
grouped together on a form.
</p>
<p>
To use this control, place it in the required position on the form, then 
either right-click on the control to see the pop-up CheckGroup editor, or in 
the Object Inspector select <var>Items</var> and click on the ellipsis (...) 
to open the string editor. In either case, type in the captions to accompany 
each check box, then close the string or CheckGroup editor and you will see a 
series of boxes with their captions displayed beside them.
</p>
<p>
Inherits properties from <link 
id="#lcl.ExtCtrls.TCustomCheckGroup">TCustomCheckGroup</link> and <link 
id="#lcl.StdCtrls.TCustomGroupBox">TCustomGroupBox</link>.
</p>
</descr>
<seealso>
<link id="#lcl.ExtCtrls.TRadioGroup">TRadioGroup</link>
<link id="#lcl.StdCtrls.HowToUseStdCtrls">How To Use Standard Controls</link>
</seealso>
</element>

<element name="TCheckGroup.Align" link="#lcl.controls.TControl.Align"/>
<element name="TCheckGroup.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TCheckGroup.AutoFill" link="#lcl.extctrls.TCustomCheckGroup.AutoFill"/>
<element name="TCheckGroup.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TCheckGroup.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TCheckGroup.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>

<element name="TCheckGroup.Caption">
<short>
String which appears at the top of the grouped edit control.
</short>
<descr>
<p>
<var>Caption</var> is the string which appears as a caption at the top of the 
grouped edit control to describe the function of the Check Group as a whole.
</p>
</descr>
</element>

<element name="TCheckGroup.ChildSizing" link="#lcl.controls.TWinControl.ChildSizing"/>
<element name="TCheckGroup.ClientHeight" link="#lcl.controls.TControl.ClientHeight"/>
<element name="TCheckGroup.ClientWidth" link="#lcl.controls.TControl.ClientWidth"/>
<element name="TCheckGroup.Color" link="#lcl.controls.TControl.Color"/>
<element name="TCheckGroup.ColumnLayout" link="#lcl.extctrls.TCustomCheckGroup.ColumnLayout"/>
<element name="TCheckGroup.Columns" link="#lcl.extctrls.TCustomCheckGroup.Columns"/>
<element name="TCheckGroup.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TCheckGroup.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
<element name="TCheckGroup.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TCheckGroup.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TCheckGroup.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TCheckGroup.Font" link="#lcl.controls.TControl.Font"/>

<element name="TCheckGroup.Items">
<short>
<var>Items</var> - a string list containing the captions of the check boxes.
</short>
<descr>
<p>
<var>Items</var> is a string list containing the captions for the check boxes 
displayed in the grouped edit control.
</p>
<p>
Use the String List editor or the CheckGroup editor (opened by right-clicking 
on the control in the Form) to insert the captions for the check boxes, and 
determine their order and layout.
</p>
</descr>
</element>

<element name="TCheckGroup.ParentBackground" link="#lcl.controls.TWinControl.ParentBackground"/>
<element name="TCheckGroup.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TCheckGroup.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TCheckGroup.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TCheckGroup.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered"/>
<element name="TCheckGroup.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TCheckGroup.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TCheckGroup.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TCheckGroup.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TCheckGroup.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TCheckGroup.Visible" link="#lcl.controls.TControl.Visible"/>

<element name="TCheckGroup.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TCheckGroup.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TCheckGroup.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TCheckGroup.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TCheckGroup.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TCheckGroup.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TCheckGroup.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TCheckGroup.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TCheckGroup.OnItemClick" link="#lcl.extctrls.TCustomCheckGroup.OnItemClick"/>
<element name="TCheckGroup.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TCheckGroup.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TCheckGroup.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TCheckGroup.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TCheckGroup.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TCheckGroup.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TCheckGroup.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TCheckGroup.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TCheckGroup.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TCheckGroup.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TCheckGroup.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TCheckGroup.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TCheckGroup.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TCheckGroup.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TBoundLabel">
<short>
Implements a label bound to another control.
</short>
<descr>
<p>
<var>TBoundLabel</var> is a <var>TCustomLabel</var> descendant which 
implements a label bound to another control. TBoundLabel is the type used to 
implement the <var>EditLabel</var> property in <var>TCustomLabeledEdit</var> 
and <var>TLabeledEdit</var>.
</p>
<p>
Use <var>Caption</var> to assign the text displayed in the label. An 
accelerator key can be specified in Caption to activate the control to which it 
is bound.
</p>
<p>
The <var>FocusControl</var> property specifies the control given focus when a 
Dialog accelerator key or other input event in the class is handled. The 
<b>AnchorSide*</b> properties indicate the edge anchored to the FocusControl.
</p>
<p>
Use <var>Alignment</var> and <var>Layout</var> to specify the horizontal and 
vertical alignment used for the label Caption. Values in these properties may 
be ignored (in the implementing control) if they do not apply to the position 
for the bound label relative to its associated control. Alignment does not 
apply when the label is positioned on the left or right of its associated 
control. Layout does not apply when the label is positioned above or below its 
associated control.
</p>
</descr>
<version>
Modified in LCL version 4.0 to include the Alignment and Layout properties.
</version>
<seealso>
<link id="TBoundLabel.Alignment"/>
<link id="TBoundLabel.Layout"/>
<link id="TBoundLabel.FocusControl"/>
<link id="TBoundLabel.Caption"/>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TLabeledEdit"/>
<link id="#lcl.stdctrls.TCustomLabel">TCustomLabel</link>
</seealso>
</element>

<element name="TBoundLabel.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TBoundLabel</var>. It calls the 
inherited <var>Create</var> method, and makes itself a SubComponent of the 
Owner. The default values for the following properties are set:
</p>
<dl>
<dt>Alignment</dt>
<dd>
Set to taLeftJustify to align text to the left in the label.
</dd>
<dt>Layout</dt>
<dd>
Set to tlCenter to center the text vertically on the label. The top of the 
label is determined using the height for the control to which it is bound.
</dd>
</dl>
<p>
The Caption for the label is changed to the value from the Name property in the 
Owner control.
</p>
</descr>
<version>
Modified in LCL version 4.0 to set default values for the Alignment and Layout 
properties.
</version>
<seealso>
<link id="TBoundLabel.Alignment"/>
<link id="TBoundLabel.Caption"/>
<link id="TBoundLabel.Layout"/>
<link id="#lcl.stdctrls.TCustomLabel.Create">TCustomLabel.Create</link>
<link id="#rtl.classes.TComponent.SetSubComponent">TComponent.SetSubComponent</link>
</seealso>
</element>
<element name="TBoundLabel.Create.TheOwner">
<short>Owner for the class instance.</short>
</element>

<element name="TBoundLabel.FocusControl">
<short>
Control focused when the accelerator key for the label is detected.
</short>
<descr>
<p>
<var>FocusControl</var> is a public <var>TWinControl</var> property in 
<var>TBoundLabel</var>. A label control cannot receive the input focus (it is 
read-only), but can display an accelerator key indicator, just like a menu 
entries. A windowed control (Edit...) can receive focus, but cannot indicate an 
accelerator key.
</p>
<p>
An accelerator key is designated using an Ampersand '&amp;' in the label 
Caption, immediately preceding the character to be used as the accelerator key. 
The marked character appears with an underline on the screen when ShowAccelChar 
is set to <b>True</b>.
</p>
<p> 
FocusControl receives key messages in the DialogChar method.
</p>
</descr>
<seealso>
<link id="#lcl.stdctrls.TCustomLabel.DialogChar">TCustomLabel.DialogChar</link>
<link id="#lcl.stdctrls.TCustomLabel.FocusControl">TCustomLabel.FocusControl</link>
<link id="#lcl.stdctrls.TCustomLabel.ShowAccelChar">TCustomLabel.ShowAccelChar</link>
</seealso>
</element>

<element name="TBoundLabel.Alignment">
<short>
Horizontal alignment for the Caption displayed on the bound label.
</short>
<descr>
<p>
<var>Alignment</var> is a published <var>TAlignment</var> property in 
<var>TBoundLabel</var> which controls how Caption text is aligned horizontally 
on the label.
</p>
<p>
The default value for Alignment is taCenter as assigned in the Create 
constructor. Please note that this is different than the default property value 
(taLeftJustify) used in the TCustomLabel ancestor.
</p>
<p>
See <link id="#rtl.classes.TAlignment">TAlignment</link> for the values 
allowed in the property and their meanings.
</p>
<p>
The property value is used when it is relevant to the position for the bound 
label relative to its FocusControl. In short, when the bound label appears 
above or below the FocusControl. The property value is not used when the bound 
label is positioned to the left or right of the FocusControl; the label width 
is auto-sized in this use case. See 
<link id="TCustomLabeledEdit.LabelPosition"/> for more information.
</p>
<p>
Use the Layout property to control the vertical alignment for the Caption text 
displayed on the label.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TBoundLabel.Caption"/>
<link id="TBoundLabel.Layout"/>
<link id="TBoundLabel.FocusControl"/>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TCustomLabeledEdit.LabelSpacing"/>
<link id="#lcl.stdctrls.TCustomLabel.Alignment">TCustomLabel.Alignment</link>
<link id="#rtl.classes.TAlignment">TAlignment</link>
</seealso>
</element>

<element name="TBoundLabel.AnchorSideLeft" link="#lcl.controls.TControl.AnchorSideLeft"/>
<element name="TBoundLabel.AnchorSideTop" link="#lcl.controls.TControl.AnchorSideTop"/>
<element name="TBoundLabel.AnchorSideRight" link="#lcl.controls.TControl.AnchorSideRight"/>
<element name="TBoundLabel.AnchorSideBottom" link="#lcl.controls.TControl.AnchorSideBottom"/>

<element name="TBoundLabel.Left" link="#lcl.controls.TControl.Left"/>
<element name="TBoundLabel.Top" link="#lcl.controls.TControl.Top"/>
<element name="TBoundLabel.Caption" link="#lcl.controls.TControl.Caption"/>
<element name="TBoundLabel.Color" link="#lcl.controls.TControl.Color"/>
<element name="TBoundLabel.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TBoundLabel.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TBoundLabel.Height" link="#lcl.controls.TControl.Height"/>
<element name="TBoundLabel.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TBoundLabel.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TBoundLabel.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TBoundLabel.Font" link="#lcl.controls.TControl.Font"/>
<element name="TBoundLabel.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TBoundLabel.ShowAccelChar" link="#lcl.stdctrls.TCustomLabel.ShowAccelChar"/>
<element name="TBoundLabel.ShowHint" link="#lcl.controls.TControl.ShowHint"/>

<element name="TBoundLabel.Layout">
<short>
Specifies the vertical alignment for the Caption text on the label.
</short>
<descr>
<p>
<var>Layout</var> is a published <var>TTextLayout</var> property in <var>
TBoundLabel</var>. The default value for the property is tlCenter in 
TBoundLabel, and causes the Caption to be centered vertically using the Height 
for the label. Please note that the default value differs from the default used 
in the TCustomLabel ancestor (tlTop).
</p>
<p>
See <link id="#lcl.graphics.TTextLayout">TTextLayout</link> for the values 
allowed in the property and their meanings.
</p>
<p>
The property value is used when it is relevant to the position for the bound 
label relative to its FocusControl. In short, when the bound label appears to 
the left or right of the FocusControl. The property value is not used when the 
bound label is positioned above or below the FocusControl; the label height is 
auto-sized in this use case. See <link id="TCustomLabeledEdit.LabelPosition"/> 
for more information.
</p>
<p>
Use Alignment to control the horizontal alignment used for the Caption text.
</p>
</descr>
<seealso>
<link id="TBoundLabel.Alignment"/>
<link id="TBoundLabel.Caption"/>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TCustomLabeledEdit.LabelSpacing"/>
<link id="#lcl.stdctrls.TCustomLabel.Layout">TCustomLabel.Layout</link>
</seealso>
</element>

<element name="TBoundLabel.WordWrap" link="#lcl.stdctrls.TCustomLabel.WordWrap"/>
<element name="TBoundLabel.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TBoundLabel.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TBoundLabel.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TBoundLabel.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TBoundLabel.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TBoundLabel.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TBoundLabel.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TBoundLabel.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TBoundLabel.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TBoundLabel.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TBoundLabel.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TBoundLabel.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TBoundLabel.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TBoundLabel.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

<element name="TLabelPosition">
<short>
Specifies the position for a label relative to an associated control.
</short>
<descr>
<p>
<var>TLabelPosition</var> is an enumerated type with values that represent 
the position of a label relative to an associated control: i. e. above, 
below, left, or right.
</p>
<p>
TLabelPosition is the type used for the LabelPosition property in 
TCustomLabeledEdit and descendent classes. It is used in the DoPositionLabel 
method to position and anchor the EditLabel to its companion control.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TCustomLabeledEdit.LabelSpacing"/>
<link id="TCustomLabeledEdit.DoPositionLabel"/>
<link id="TBoundLabel.FocusControl"/>
</seealso>
</element>
<element name="TLabelPosition.lpAbove">
<short>Label is displayed above the control.</short>
</element>
<element name="TLabelPosition.lpBelow">
<short>Label is displayed below the control.</short>
</element>
<element name="TLabelPosition.lpLeft">
<short>Label is displayed to the left of the control.</short>
</element>
<element name="TLabelPosition.lpRight">
<short>Label is displayed to the right of the control.</short>
</element>

<element name="TCustomLabeledEdit">
<short>
Defines an edit control with a label bound to the control.
</short>
<descr>
<p>
<var>TCustomLabeledEdit</var> is a <var>TCustomEdit</var> descendant which 
defines an edit control with a label bound to the control. TCustomLabeledEdit 
is the base type for <var>TLabeledEdit</var>.
</p>
<p>
Note particularly the <link 
id="#lcl.ExtCtrls.TCustomLabeledEdit.EditLabel">EditLabel</link> property 
(see <link id="#lcl.Extctrls.TBoundLabel">TBoundLabel</link>), which contains 
the label attached to the Edit control.
</p>
<p>
Use LabelPosition to specify the location where EditLabel is displayed 
relative to the edit box in the control. Use LabelSpacing to set the spacing 
between EditLabel and the edit control.
</p>
<p>
<b>About TCustomLabeledEdit / TLabeledEdit</b>
</p>
<p>
<var>TCustomLabeledEdit</var> and <var>TLabeledEdit</var> are based on the 
similarly named controls from the Delphi VCL. While they offer code 
compatibility with the VCL class, they have some drawbacks when used in the 
LCL. For instance:
</p>
<ul>
<li>
They do not work very well with the positioning and anchoring mechanisms 
used in LCL. They do not have an Align property used to position, align, and 
stack controls towards one of the edges on the parent control.
</li>
<li>
There are also shortcomings when using BorderSpacing; the extra spacing is 
inserted between the bound label and the edit box on the control instead around 
the composite control.
</li>
<li>
Labels with long captions are not ellipsified or aligned properly when longer 
than the associated edit control. 
</li>
<li>
Multi-line captions on a label are not positioned as expected; the label often 
overlaps (or is obscured by) adjacent controls.
</li>
<li>
When EditLabel is placed above or below the Edit control, and its caption is 
wider than the Edit, the text will be clipped at the Edit's left/right sides. 
Likewise, when the EditLabel is placed at the left or right of the Edit control 
and is taller than the Edit, it will be clipped at the top and bottom edges of 
the Edit control.
</li>
</ul>
<p>
Despite the convenience of TCustomLabeledEdit / TLabeledEdit, most will elect 
to use separate label and edit controls to avoid the shortcomings in the align 
and anchoring mechanisms for the composite control.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TCustomLabeledEdit.LabelSpacing"/>
<link id="TBoundLabel"/>
<link id="TLabelPosition"/>
<link id="#lcl.StdCtrls.TCustomEdit">TCustomEdit</link>
<link id="#lcl.StdCtrls.TCustomLabel">TCustomLabel</link>
</seealso>
</element>

<element name="TCustomLabeledEdit.FEditLabel"/>
<element name="TCustomLabeledEdit.FLabelPosition"/>
<element name="TCustomLabeledEdit.FLabelSpacing"/>

<element name="TCustomLabeledEdit.SetLabelPosition">
<short>Sets the value for the LabelPosition property.</short>
<descr/>
<seealso>
<link id="TCustomLabeledEdit.LabelPosition"/>
</seealso>
</element>
<element name="TCustomLabeledEdit.SetLabelPosition.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomLabeledEdit.SetLabelSpacing">
<short>Sets the value for the LabelSpacing property.</short>
<descr/>
<seealso>
<link id="TCustomLabeledEdit.LabelSpacing"/>
</seealso>
</element>
<element name="TCustomLabeledEdit.SetLabelSpacing.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomLabeledEdit.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomLabeledEdit.SetParent">
<short>Sets the value for the Parent property.</short>
<descr>
<p>
<var>SetParent</var> is overridden in TCustomLabeledEdit to ensure that the 
EditLabel for the control is properly aligned after the value in Parent is 
changed. Calls DoPositionLabel to set the label visibility and position the 
label using the value in LabelPosition and LabelSpacing.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TCustomLabeledEdit.LabelSpacing"/>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
<link id="#lcl.controls.TControl.SetParent">TControl.SetParent</link>
</seealso>
</element>
<element name="TCustomLabeledEdit.SetParent.AParent">
<short>New parent for the control.</short>
</element>

<element name="TCustomLabeledEdit.SetName">
<short>
Sets the value for the Name property and the Caption in the label.
</short>
<descr>
<p>
<var>SetName</var> is overridden in <var>TCustomLabeledEdit</var> to assign 
the new value for the property to the Caption in <var>EditLabel</var> at 
design-time. SetName calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="#lcl.controls.TControl.SetName">TControl.SetName</link>
</seealso>
</element>
<element name="TCustomLabeledEdit.SetName.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomLabeledEdit.Loaded">
<short>
Performs actions needed when the component has finished loading in the LCL 
streaming mechanism.
</short>
<descr>
<p>
Loaded is overridden in TCustomLabeledEdit to position the EditLabel by 
calling the DoPositionLabel method. Loaded calls the inherited method.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.DoPositionLabel"/>
<link id="#rtl.classes.TComponent">TComponent</link>
</seealso>
</element>

<element name="TCustomLabeledEdit.DoPositionLabel">
<short>
<var>DoPositionLabel</var> - perform the code for positioning the label.
</short>
<descr>
<p>
<var>DoPositionLabel</var> is a procedure used to place the 
<var>EditLabel</var> relative to the companion control. No actions are 
performed in the method when EditLabel is unassigned (contains Nil).
</p>
<p>
DoPositionLabel ensures that <var>DisableAlign</var> is called in the 
<var>Parent</var> control (when assigned). <var>EnableAlign</var> is called 
for the Parent control prior to exiting from the method.
</p>
<p>
DoPositionLabel updates EditLabel to use the values assigned to the Parent 
and <var>Visibility</var> properties. The values in <var>LabelPosition</var> 
and <var>LabelSpacing</var> are used to set the anchor position for the 
EditLabel and the spacing between EditLabel and the edit box on the control.
</p>
</descr>
<version>
Modified in LCL version 4.0 to use the Layout property in the TBoundLabel 
instance to determine vertical alignment for the label caption.
</version>
<seealso>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TCustomLabeledEdit.LabelSpacing"/>
<link id="TBoundLabel.Layout"/>
<link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
<link id="#lcl.controls.TWinControl.DisableAlign">TWinControl.DisableAlign</link>
<link id="#lcl.controls.TWinControl.EnableAlign">TWinControl.EnableAlign</link>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
</seealso>
</element>

<element name="TCustomLabeledEdit.Notification">
<short>
Handles a notification when a component is added to or removed from the 
control.
</short>
<descr>
<p>
<var>Notification</var> is overridden in <var>TCustomLabeledEdit</var> to 
ensure that a reference to the <var>EditLabel</var> property is released when 
<var>Operation</var> contains the value <var>opRemove</var>. Notification 
calls the inherited method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
</seealso>
</element>
<element name="TCustomLabeledEdit.Notification.AComponent">
<short>Component for the event notification.</short>
</element>
<element name="TCustomLabeledEdit.Notification.Operation">
<short>Operation for the event notification.</short>
</element>

<element name="TCustomLabeledEdit.CMBiDiModeChanged">
<short>Handles the CM_BIDIMODECHANGED control message for the control.</short>
<descr>
<p>
Ensures that an assigned <var>EditLabel</var> uses the value stored in the 
<var>BiDiMode</var> property. Calls <var>DoPositionLabel</var> to update the 
control layout and position, and calls <var>Invalidate</var> to force the 
control to be redrawn.
</p>
<p>
Calls the inherited CMBiDiModeChanged method.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TCustomLabeledEdit.DoPositionLabel"/>
<link id="#lcl.controls.TWinControl.Invalidate">TWinControl.Invalidate</link>
<link id="#lcl.controls.TWinControl.CMBiDiModeChanged">TWinControl.CMBiDiModeChanged</link>
<link id="#lcl.controls.TControl.BiDiMode">TControl.BiDiMode</link>
</seealso>
</element>
<element name="TCustomLabeledEdit.CMBiDiModeChanged.Msg">
<short>Message handled in the method.</short>
</element>

<element name="TCustomLabeledEdit.CMVisibleChanged" link="#lcl.controls.TWinControl.CMVisibleChanged"/>
<element name="TCustomLabeledEdit.CMVisibleChanged.Msg"/>

<element name="TCustomLabeledEdit.CMEnabledChanged" link="#lcl.controls.TWinControl.CMEnabledChanged"/>
<element name="TCustomLabeledEdit.CMEnabledChanged.Msg"/>

<element name="TCustomLabeledEdit.CreateInternalLabel">
<short>
<var>CreateInternalLabel</var> - method for internally creating label.
</short>
<descr>
<p>
<var>CreateInternalLabel</var> is a method used to allocate resources for the 
<var>EditLabel</var> property in the class instance. TCustomLabeledEdit 
creates the <var>TBoundLabel</var> class instance used in EditLabel, and 
updates its <var>ControlStyle</var> property to prevent selection at 
design-time (<var>csNoDesignSelectable</var>). The current class instance is 
used as the <var>FocusControl</var> in EditLabel.
</p>
<p>
No actions are performed in the method if EditLabel has already been assigned 
in the class instance.
</p>
<p>
CreateInternalLabel is used in the implementation of the <var>Create</var> 
constructor.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TBoundLabel"/>
<link id="TBoundLabel.FocusControl"/>
</seealso>
</element>

<element name="TCustomLabeledEdit.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance, and 
calls the inherited method on entry. Create sets the default values for 
properties, including:
</p>
<dl>
<dt>LabelPosition</dt>
<dd>
<var>lpAbove</var> to align the bound label above the edit control.
</dd>
<dt>LabelSpacing</dt>
<dd>
<var>3</var> for the number of pixels between the bound label and the edit 
control.
</dd>
</dl>
<p>
Create calls CreateInternalLabel to allocate and configure the TBoundLabel 
instance used in the EditLabel property.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TCustomLabeledEdit.LabelSpacing"/>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TCustomLabeledEdit.CreateInternalLabel"/>
<link id="#lcl.stdctrls.TCustomEdit.Create">TCustomEdit.Create</link>
<link id="#lcl.extctrls.TBoundLabel.Create">TBoundLabel.Create</link>
</seealso>
</element>
<element name="TCustomLabeledEdit.Create.TheOwner">
<short>Component which is the Owner of the class instance.</short>
</element>

<element name="TCustomLabeledEdit.EditLabel">
<short>
<var>EditLabel</var> - the label attached to the edit box.
</short>
<descr>
<p>
<var>EditLabel</var> is a read-only <var>TBoundLabel</var> property which 
contains the bound label displayed for the edit control.
</p>
<p>
Use LabelPosition to specify the edge on the edit control to which the label 
is aligned. Use LabelSpacing to set the number of pixels used as a spacer 
between the edit control and the bound label.
</p>
<p>
Values can be assigned to properties in the label at design-time using the 
Object Inspector, or at run-time in program code. For example:
</p>
<p>
Use Text to read or write the value for the control.
</p>
<code>
LabeledEdit1.EditLabel.Caption := 'Unit Measure';
LabeledEdit1.Text := 'Volts DC';
</code>
</descr>
<seealso/>
</element>

<element name="TCustomLabeledEdit.LabelPosition">
<short>
Edge on the edge control where the bound label is aligned.
</short>
<descr>
<p>
<var>LabelPosition</var> is a <var>TLabelPosition</var> property which 
indicates the edge of the edit control where the bound label in EditLabel is 
aligned. The default value for the property is lpAbove.
</p>
<p>
Use one of the other TLabelPosition enumeration values to reposition the label 
relative to the edit control.
</p>
<dl>
<dt>lpAbove</dt>
<dd>Positions the label above the edit control.</dd>
<dt>lpBelow</dt>
<dd>Positions the label below the edit control.</dd>
<dt>lpLeft</dt>
<dd>Positions the label on the left-hand edge of the edit control.</dd>
<dt>lpRight</dt>
<dd>Positions the label on the right-hand edge of the edit control.</dd>
</dl>
<p>
Changing the value for the property causes EditLabel to be repositioned and 
anchored to the edit control.
</p>
<p>
Use LabelSpacing to specify the number of pixels used as a spacer between the 
edit control and the bound label in Editlabel.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TCustomLabeledEdit.LabelSpacing"/>
<link id="TLabelPosition"/>
</seealso>
</element>

<element name="TCustomLabeledEdit.LabelSpacing">
<short>
Number of pixels between the control and its bound label.
</short>
<descr>
<p>
<var>LabelSpacing</var> is an <var>Integer</var> property with the number of 
pixels used as a spacer between the edit control and its bound label in 
EditLabel. The default value for the property is 3.
</p>
<p>
Changing the value for the property causes EditLabel to be repositioned and 
anchored to the edit control. The value is added as border spacing for the 
anchored control in the DoPositionLabel method.
</p>
<p>
Use LabelPosition to specify the edge on the control where EditLabel is 
aligned.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TCustomLabeledEdit.DoPositionLabel"/>
<link id="TBoundLabel"/>
</seealso>
</element>

<element name="TLabeledEdit">
<short>
Implements an edit control with a label bound to the control.
</short>
<descr>
<p>
<var>TLabeledEdit</var> is a <var>TCustomLabeledEdit</var> descendant which 
implements an edit control with a label bound to the control. It saves time 
and effort over placing separate Label and Edit Box on Form. The properties 
are described in the parent component, 
<link id="#lcl.ExtCtrls.TCustomLabeledEdit">TCustomLabeledEdit</link> from which most of the properties are inherited.
</p>
<p>
Note particularly the 
<link id="#lcl.ExtCtrls.TCustomLabeledEdit.EditLabel">EditLabel</link> 
property (see <link id="#lcl.Extctrls.TBoundLabel">TBoundLabel</link>), which 
contains the label attached to the Edit control.
</p>
<p>
Use LabelPosition to specify the location where EditLabel is displayed 
relative to the edit box in the control. Use LabelSpacing to set the spacing 
(in pixels) between EditLabel and the edit control.
</p>
<p>
<b>About TCustomLabeledEdit / TLabeledEdit</b>
</p>
<p>
<var>TCustomLabeledEdit</var> and <var>TLabeledEdit</var> are based on the 
similarly named controls from the Delphi VCL. While they offer code 
compatibility with the VCL class, they have some drawbacks when used in the 
LCL. For instance:
</p>
<ul>
<li>
They do not work very well with the positioning and anchoring mechanisms 
used in LCL. They do not have an Align property used to position, align, and 
stack controls towards one of the edges on the parent control.
</li>
<li>
There are also shortcomings when using BorderSpacing; the extra spacing is 
inserted between the bound label and the edit box on the control instead around 
the composite control.
</li>
<li>
Labels with long captions are not ellipsified or aligned properly when longer 
than the associated edit control. 
</li>
<li>
Multi-line captions on a label are not positioned as expected; the label often 
overlaps (or is obscured by) adjacent controls.
</li>
<li>
When EditLabel is placed above or below the Edit control, and its caption is 
wider than the Edit, the text will be clipped at the Edit's left/right sides. 
Likewise, when the EditLabel is placed at the left or right of the Edit control 
and is taller than the Edit, it will be clipped at the top and bottom edges of 
the Edit control.
</li>
</ul>
<p>
Despite the convenience of TCustomLabeledEdit / TLabeledEdit, most will elect 
to use separate label and edit controls to avoid the shortcomings in the align 
and anchoring mechanisms for the composite control.
</p>
</descr>
<seealso>
<link id="TCustomLabeledEdit.EditLabel"/>
<link id="TCustomLabeledEdit.LabelPosition"/>
<link id="TCustomLabeledEdit.LabelSpacing"/>
<link id="TBoundLabel"/>
<link id="TLabelPosition"/>
<link id="#lcl.stdctrls.TCustomEdit">TCustomEdit</link>
<link id="#lcl.stdctrls.TCustomLabel">TCustomLabel</link>
</seealso>
</element>

<element name="TLabeledEdit.Alignment" link="#lcl.stdctrls.TCustomEdit.Alignment"/>
<element name="TLabeledEdit.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TLabeledEdit.AutoSelect" link="#lcl.stdctrls.TCustomEdit.AutoSelect"/>
<element name="TLabeledEdit.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TLabeledEdit.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TLabeledEdit.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TLabeledEdit.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TLabeledEdit.CharCase" link="#lcl.stdctrls.TCustomEdit.CharCase"/>
<element name="TLabeledEdit.Color" link="#lcl.controls.TControl.Color"/>
<element name="TLabeledEdit.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TLabeledEdit.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
<element name="TLabeledEdit.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TLabeledEdit.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TLabeledEdit.EchoMode" link="#lcl.stdctrls.TCustomEdit.EchoMode"/>
<element name="TLabeledEdit.EditLabel" link="#lcl.extctrls.TCustomLabeledEdit.EditLabel"/>
<element name="TLabeledEdit.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TLabeledEdit.Font" link="#lcl.controls.TControl.Font"/>
<element name="TLabeledEdit.LabelPosition" link="#lcl.extctrls.TCustomLabeledEdit.LabelPosition"/>
<element name="TLabeledEdit.LabelSpacing" link="#lcl.extctrls.TCustomLabeledEdit.LabelSpacing"/>
<element name="TLabeledEdit.MaxLength" link="#lcl.stdctrls.TCustomEdit.MaxLength"/>
<element name="TLabeledEdit.NumbersOnly" link="#lcl.stdctrls.TCustomEdit.NumbersOnly"/>
<element name="TLabeledEdit.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TLabeledEdit.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TLabeledEdit.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered"/>
<element name="TLabeledEdit.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TLabeledEdit.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TLabeledEdit.PasswordChar" link="#lcl.stdctrls.TCustomEdit.PasswordChar"/>
<element name="TLabeledEdit.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TLabeledEdit.ReadOnly" link="#lcl.stdctrls.TCustomEdit.ReadOnly"/>
<element name="TLabeledEdit.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TLabeledEdit.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TLabeledEdit.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TLabeledEdit.Text" link="#lcl.stdctrls.TCustomEdit.Text"/>
<element name="TLabeledEdit.TextHint" link="#lcl.stdctrls.TCustomEdit.TextHint"/>
<element name="TLabeledEdit.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TLabeledEdit.OnChange" link="#lcl.stdctrls.TCustomEdit.OnChange"/>
<element name="TLabeledEdit.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TLabeledEdit.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TLabeledEdit.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TLabeledEdit.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TLabeledEdit.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TLabeledEdit.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
<element name="TLabeledEdit.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TLabeledEdit.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TLabeledEdit.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TLabeledEdit.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TLabeledEdit.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TLabeledEdit.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TLabeledEdit.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TLabeledEdit.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TLabeledEdit.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TLabeledEdit.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TLabeledEdit.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TLabeledEdit.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TLabeledEdit.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TLabeledEdit.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TLabeledEdit.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TLabeledEdit.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TPanelBevel">
<short>Alias for the TBevelCut type.</short>
<descr>
<p>
<var>TPanelBevel</var> is an alias to the <var>TBevelCut</var> type. 
TPanelBevel is the type used to implement the <var>BevelInner</var> and 
<var>BevelOuter</var> properties in <var>TCustomPanel</var>.
</p>
</descr>
<seealso>
<link id="TCustomPanel.BevelInner"/>
<link id="TCustomPanel.BevelOuter"/>
<link id="#lcl.controls.TBevelCut">TBevelCut</link>
</seealso>
</element>

<element name="TBevelWidth">
<short>Defines the range of values allowed in a bevel width.</short>
<descr>
<p>
<var>TBevelWidth</var> is an Integer range type which defines the range of 
values allowed in properties using the type. TBevelWidth is the type used to 
implement the <var>BevelWidth</var> property in <var>TCustomPanel</var>.
</p>
</descr>
<seealso>
<link id="TCustomPanel.BevelWidth"/>
</seealso>
</element>

<element name="TCustomPanel">
<short>
The base class for a general container which can hold other objects. It has a 
customizable border and a central text.
</short>
<descr>
<p>
<var>TCustomPanel</var> is the base type for <var>TPanel</var>.
</p>
<p>
A Panel is a defined rectangular area on a form into which other components 
can be placed to group them functionally and geographically. 
<var>TCustomPanel</var> defines the positioning and beveling properties of
any descendent classes, and provides methods for painting and writing text to 
the panel.
</p>
</descr>
</element>

<element name="TCustomPanel.FBevelColor"/>
<element name="TCustomPanel.FBevelInner"/>
<element name="TCustomPanel.FBevelOuter"/>
<element name="TCustomPanel.FBevelWidth"/>
<element name="TCustomPanel.FAlignment"/>
<element name="TCustomPanel.FVertAlignment"/>
<element name="TCustomPanel.FFullRepaint"/>
<element name="TCustomPanel.FShowAccelChar"/>
<element name="TCustomPanel.FWordWrap"/>

<element name="TCustomPanel.PaintBevel">
<short>Draws a bevel using the color and width defined for the panel.</short>
<descr>
<p>
<var>PaintBevel</var> is a procedure used to draw the bevel for the panel 
using the values in the <var>BevelColor</var> and <var>BevelWidth</var> 
properties. <var>ARect</var> is the rectangle with the coordinates where the 
bevel is drawn. <var>ABevel</var> contains the style used to draw the bevel.
</p>
<remark>
No actions are performed in the method when <var>ABevel</var> contains the 
value <var>bvNone</var>.
</remark>
<p>
PaintBevel uses the <var>Canvas</var> for the control as the target for the 
drawing operation. The <var>Frame3D</var> method in the Canvas is used to 
draw the bevel with the required color, width, and style for the panel.
</p>
<p>
PaintBevel is used in the implementation of the <var>Paint</var> method to 
draw using both the <var>BevelInner</var> and <var>BevelOuter</var> styles.
</p>
</descr>
<seealso>
<link id="TCustomPanel.Paint"/>
<link id="TCustomPanel.Paint"/>
<link id="TCustomPanel.BevelColor"/>
<link id="TCustomPanel.BevelWidth"/>
<link id="TCustomPanel.BevelInner"/>
<link id="TCustomPanel.BevelOuter"/>
<link id="#lcl.controls.TCustomControl.Canvas">TCustomControl.Canvas</link>
</seealso>
</element>
<element name="TCustomPanel.PaintBevel.ARect">
<short>Rectangle with the coordinates where the bevel is drawn.</short>
</element>
<element name="TCustomPanel.PaintBevel.ABevel">
<short>Drawing style for the bevel.</short>
</element>

<element name="TCustomPanel.SetAlignment">
<short>Sets the value for the Alignment property.</short>
<descr/>
<seealso>
<link id="TCustomPanel.Alignment"/>
</seealso>
</element>
<element name="TCustomPanel.SetAlignment.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomPanel.SetBevelColor">
<short>Sets the value for the BevelColor property.</short>
<descr/>
<seealso>
<link id="TCustomPanel.BevelColor"/>
</seealso>
</element>
<element name="TCustomPanel.SetBevelColor.AColor">
<short>New value for the property.</short>
</element>

<element name="TCustomPanel.SetBevelInner">
<short>Sets the value for the BevelInner property.</short>
<descr/>
<seealso>
<link id="TCustomPanel.BevelInner"/>
</seealso>
</element>
<element name="TCustomPanel.SetBevelInner.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomPanel.SetBevelOuter">
<short>Sets the value for the BevelOuter property.</short>
<descr/>
<seealso>
<link id="TCustomPanel.BevelOuter"/>
</seealso>
</element>
<element name="TCustomPanel.SetBevelOuter.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomPanel.SetBevelWidth">
<short>Sets the value for the BevelWidth property.</short>
<descr/>
<seealso>
<link id="TCustomPanel.BevelWidth"/>
</seealso>
</element>
<element name="TCustomPanel.SetBevelWidth.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomPanel.SetShowAccelChar">
<short>
Sets the value for the ShowAccelChar property.
</short>
</element>
<element name="TCustomPanel.SetShowAccelChar.Value">
<short>
New value for the ShowAccelChar property.
</short>
</element>

<element name="TCustomPanel.SetVertAlignment">
<short>Sets the value for the VerticalAlignment property.</short>
<descr/>
<seealso>
<link id="TCustomPanel.VerticalAlignment"/>
</seealso>
</element>
<element name="TCustomPanel.SetVertAlignment.Value">
<short>
New value for the VerticalAlignment property.
</short>
</element>

<element name="TCustomPanel.SetWordWrap">
<short>Sets the value for the WordWrap property.</short>
<descr/>
<seealso>
<link id="TCustomPanel.WordWrap"/>
</seealso>
</element>
<element name="TCustomPanel.SetWordWrap.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomPanel.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomPanel.AdjustClientRect">
<short>
Adjusts the specified rectangle to account for borders and bevels used on the 
control.
</short>
<descr>
<p>
<var>AdjustClientRect</var> is an overridden procedure used to adjust the 
drawing rectangle in <var>ARect</var> to account for borders and bevels used 
on the panel. AdjustClientRect calls the inherited method, and calculates the 
number of pixels required for the settings in <var>BorderWidth</var>, 
<var>BevelInner</var>, and <var>BevelOuter</var>. AdjustClientRect calls 
<var>InflateRect</var> to adjust ARect by the calculated border and bevel 
widths.
</p>
<p>
AdjustClientRect is called when the control is autosize or aligned.
</p>
</descr>
<seealso>
<link id="TCustomPanel.BevelInner"/>
<link id="TCustomPanel.BevelOuter"/>
<link id="#lcl.controls.TWinControl.BorderWidth">TWinControl.BorderWidth</link>
<link id="#lcl.controls.TWinControl.AdjustClientRect">TWinControl.AdjustClientRect</link>
</seealso>
</element>
<element name="TCustomPanel.AdjustClientRect.Rect">
<short>Drawing rectangle adjusted in the method.</short>
</element>

<element name="TCustomPanel.GetControlClassDefaultSize">
<short>Gets the size used for a new instance of the class type.</short>
<descr>
<p>
<var>GetControlClassDefaultSize</var> is overridden to provide the default 
size for new instances of the class type. The return value is a 
<var>TSize</var> type which contains the dimensions for the new control. The 
CX member contains the Width for the panel, and defaults to 170 pixels. The 
CY member contains the Height for the panel, and defaults to 50 pixels.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>
<element name="TCustomPanel.GetControlClassDefaultSize.Result">
<short>
TSize value with the default dimensions for new class instances.
</short>
</element>

<element name="TCustomPanel.CMParentColorChanged" link="#lcl.controls.TControl.CMParentColorChanged"/>
<element name="TCustomPanel.CMParentColorChanged.Message"/>

<element name="TCustomPanel.GetDefaultDockCaption" link="#lcl.controls.TControl.GetDefaultDockCaption"/>
<element name="TCustomPanel.GetDefaultDockCaption.Result"/>

<element name="TCustomPanel.Loaded">
<short>
Performs actions needed when the component has finished loading in the LCL 
streaming mechanism.
</short>
<descr>
<p>
<var>Loaded</var> is an overridden procedure used to perform actions needed 
when the component has finished loading in the LCL component streaming 
mechanism. Loaded calls the inherited method, and calls 
<var>UpdateParentColorChange</var> to adjust the <var>ControlStyle</var> when 
<var>ParentColor</var> is in use.
</p>
</descr>
<seealso>
<link id="TCustomPanel.UpdateParentColorChange"/>
<link id="TCustomPanel.ParentColor"/>
<link id="#lcl.controls.TControl.ControlStyle">TControl.ControlStyle</link>
<link id="#rtl.classes.TComponent">TComponent</link>
</seealso>
</element>

<element name="TCustomPanel.RealSetText">
<short>Stores the specified value as the Caption for the control.</short>
<descr>
<p>
<var>RealSetText</var> is an overridden procedure used to store the specified 
value as the <var>Caption</var> for the control. RealSetText calls the 
inherited method to store the text, and then calls the <var>Invalidate</var> 
method to repaint the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.RealSetText">TControl.RealSetText</link>
</seealso>
</element>
<element name="TCustomPanel.RealSetText.Value">
<short>New text value used as the caption for the control.</short>
</element>

<element name="TCustomPanel.Paint">
<short>
Paints the panel including the bevels and caption defined for the control.
</short>
<descr>
<p>
<var>Paint</var> is an overridden procedure which draws the panel including 
the bevels and caption defined for the control. Paint calls 
<var>GetClientRect</var> to get the rectangle used to draw the control. 
PaintBevel is called to draw both the inner and outer bevels for the control 
(when used).
</p>
<p>
When Caption contains a String value (other than an empty string), the Canvas 
for the control is used to render the text. Values in the Alignment, 
VerticalAlignment, UseRightToLeft, and WordWrap properties are applied to the 
Canvas properties as needed. The font color on the canvas is updated for the 
Enabled state in the control and use of theme services. The TextRect method 
in Canvas is called to output the Caption text to the client rectangle for 
the control.
</p>
<p>
Paint calls the inherited method prior to exit to signal the OnPaint event 
handler (when assigned).
</p>
</descr>
<seealso>
<link id="#lcl.controls.TCustomControl.Paint">TCustomControl.Paint</link>
</seealso>
</element>

<element name="TCustomPanel.SetParentBackground">
<short>
Sets the value for the ParentBackground property.
</short>
<descr>
<p>
<var>SetParentBackground</var> is an overridden method used to set the 
value for the ParentBackground property. SetParentBackground ensures that the 
<var>ControlStyle</var> property is updated to include or omit the values 
which control the opacity for the control. When AParentBackground contains 
<b>True</b>, the value csParentBackground is included in ControlStyle. When 
AParentBackground contains <b>False</b>, csParentBackground is excluded from 
ControlStyle.
</p>
<p>
The UpdateParentColorChange method is called to update ControlStyle to reflect 
the values in the ParentColor or ParentBackground properties. If either 
ParentColor or ParentBackground are set to <b>True</b>, csOpaque is excluded 
from ControlStyle and the control becomes transparent. When both properties 
are set to <b>False</b>, csOpaque is included in ControlStyle and the control 
is drawn using the value in Color as the background color.
</p>
</descr>
<seealso>
<link id="TCustomPanel.UpdateParentColorChange"/>
<link id="TCustomPanel.ParentColor"/>
<link id="TCustomPanel.ParentBackground"/>
<link id="#lcl.controls.TControl.SetParentBackground">TControl.SetParentBackground</link>
<link id="#lcl.controls.TControl.ControlStyle">TControl.COntrolStyle</link>
<link id="#lcl.controls.TControlStyleType">TControlStyleType</link>
</seealso>
</element>
<element name="TCustomPanel.SetParentBackground.AParentBackground">
<short>When <b>True</b>, the panel is drawn with transparency.</short>
</element>

<element name="TCustomPanel.UpdateParentColorChange">
<short>
Updates the control to reflect changes to the ParentColor property.
</short>
<descr>
<p>
<var>UpdateParentColorChange</var> updates the control to use the opacity 
needed for the values in the <var>ParentColor</var> or 
<var>ParentBackground</var> properties.
</p>
<p>
If either ParentColor or ParentBackground is <b>True</b>, the value 
<var>csOpaque</var> is excluded from the <var>ControlStyle</var> property. 
If both properties are <b>False</b>, csOpaque is included in the ControlStyle 
property.
</p>
<p>
UpdateParentColorChange is called from the <var>Loaded</var> method when the 
component has finished loading using the LCL component streaming mechanism. 
It is called from the <var>CMParentColorChanged</var> method when the 
change message is handled for the control. It is also called when a new value 
is assigned to the ParentColor or ParentBackground properties.
</p>
</descr>
<seealso>
<link id="TCustomPanel.ParentColor"/>
<link id="TCustomPanel.ParentBackground"/>
<link id="TCustomPanel.Loaded"/>
<link id="TCustomPanel.CMParentColorChanged"/>
</seealso>
</element>

<element name="TCustomPanel.ShowAccelChar">
<short>
Controls the display of accelerator or hot keys in the Caption for the panel.
</short>
<descr>
<p>
<var>ShowAccelChar</var> is a <var>Boolean</var> property which indicates 
whether accelerator keys in the Caption property are drawn when the panel is 
displayed. The default value for the property is <b>False</b>, and causes an 
Ampersand character (&amp;) in Caption to be rendered using its character 
value instead of as an accelerator.
</p>
<p>
When set to <b>True</b>, an Ampersand character indicates that the following 
character is an accelerator or hot key. The Ampersand character is removed 
from the rendered value and an underline is drawn beneath the accelerator 
key. In this case, double Ampersand characters (&amp;&amp;) can be used to 
renderer a single Ampersand on the panel.
</p>
<p>
ShowAccelChar allows Caption rendering to behave like the panel 
implementation in the Delphi VCL.
</p>
<p>
ShowAccelChar is used in the Paint method, and controls the ShowPrefix value 
in the text style used to render the Caption on the control.
</p>
</descr>
<seealso>
<link id="TCustomPanel.Paint"/>
<link id="#lcl.controls.TControl.Caption">TControl.Caption</link>
</seealso>
<version>
Added in LCL version 3.0.
</version>
</element>

<element name="TCustomPanel.VerticalAlignment">
<short>
Vertical alignment for the caption text displayed on the panel.
</short>
<descr>
<p>
<var>VerticalAlignment</var> is a <var>TVerticalAlignment</var> property 
which controls the vertical alignment for the Caption displayed on the panel. 
The default value for the property is taVerticalCenter, and causes the 
caption text to be centered vertically on the panel. Use taAlignTop to align 
caption text to the top of the panel. Use taAlignBottom to align caption text 
to the bottom of the panel.
</p>
<p>
Changing the value for the property causes the Invalidate method to be 
called, and the panel is redrawn.
</p>
<p>
VerticalAlignment is used in the Paint method to determine the text 
layout/style applied when the value in Caption is drawn on the Canvas for the 
control.
</p>
<p>
Use Alignment to control the horizontal alignment for the Caption text 
displayed for the panel.
</p>
<p>
Use Align to position the panel along one of the edges on the parent control 
or form.
</p>
</descr>
<seealso>
<link id="TCustomPanel.Align"/>
<link id="TCustomPanel.Alignment"/>
<link id="TCustomPanel.Paint"/>
<link id="#lcl.controls.TControl.Caption">TControl.Caption</link>
<link id="#rtl.classes.TVerticalAlignment">TVerticalAlignment</link>
</seealso>
<version>
Added in LCL version 2.3, and available since LCL version 3.0.
</version>
</element>

<element name="TCustomPanel.WordWrap">
<short>Indicates if the Caption can be word wrapped when painted.</short>
<descr>
<p>
<var>WordWrap</var> is a <var>Boolean</var> property which indicates if the 
text in the <var>Caption</var> property can be word wrapped into multiple 
lines when painting the control. The default value for the property is 
<b>False</b>, and indicates that word wrapping is not used for the caption. 
Changing the value in WordWrap causes the <var>Invalidate</var> method to be 
called to repaint the control.
</p>
<p>
WordWrap is used in the <var>Paint</var> method to initialize properties in 
the <var>TTextStyle</var> argument used to render the text rectangle for the 
caption to its <var>Canvas</var>.
</p>
</descr>
<seealso>
<link id="TCustomPanel.Paint"/>
<link id="#lcl.graphics.TTextStyle">TTextStyle</link>
<link id="#lcl.controls.TControl.Invalidate">TControl.Invalidate</link>
</seealso>
</element>

<element name="TCustomPanel.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TCustomPanel</var>. It calls 
the inherited <var>Create</var> method, and sets the initial style, bevel, 
color, alignment and bounds for the control.
</p>
</descr>
<errors/>
<seealso>
<link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
</seealso>
</element>
<element name="TCustomPanel.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomPanel.Align">
<short>
Specifies the placement of the control inside its Parent.
</short>
<descr>
<p>
Align is a TAlign property which specifies how the control is aligned to its 
parent control. The default value for the property is alNone.
</p>
<dl>
<dt>alNone</dt>
<dd>
The control is not aligned. It uses it Top, Left, Height, and Width to place 
the control in the parent.
</dd>
<dt>alTop</dt>
<dd>
Aligns the control to the top of the parent control, and adjusts it Width to 
fill the parent control.
</dd>
<dt>alBottom</dt>
<dd>
Aligns the control to the bottom of the parent control, and adjusts its Width 
to fill the parent control.
</dd>
<dt>alLeft</dt>
<dd>
Aligns the control to the left edge of the parent control, and adjusts its 
Height to fill the parent control.
</dd>
<dt>alRight</dt>
<dd>
Aligns the control to the right edge of the parent control, and adjusts its 
Height to fill the parent control.
</dd>
<dt>alClient</dt>
<dd>
Aligns the control fill the unused Height and Width for the parent control.
</dd>
<dt>alCustom</dt>
<dd>
Aligns the control by calling the OnAlignInsertBefore or OnAlignPosition 
event handlers in the parent control.
</dd>
</dl>
</descr>
<seealso/>
</element>

<element name="TCustomPanel.Alignment">
<short>
<var>Alignment</var> - whether text is left or right justified, or centered.
</short>
<descr>
<p>
<var>Alignment</var> is a <var>TAlignment</var> property that indicates how 
the text (or Caption) is aligned on the panel. The default value for the 
property is <var>taCenter</var>, and causes text to be aligned to the center 
of the panel. Changing the value in Alignment causes the 
<var>Invalidate</var> method to be called to repaint the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Invalidate">TControl.Invalidate</link>
<link id="#lcl.stdctrls.TCustomEdit.Alignment">TCustomEdit.Alignment</link>
<link id="#rtl.classes.TAlignment">TAlignment</link>
</seealso>
</element>

<element name="TCustomPanel.BevelColor">
<short>Color used to draw bevels for the panel.</short>
<descr>
<p>
<var>BevelColor</var> is a <var>TColor</var> property that specifies the 
color used to draw bevels for the panel. BevelColor is used in the 
<var>PaintBevel</var> method; it is passed as an argument to Canvas drawing 
routines when BevelColor contains a value other than <var>clDefault</var>.
</p>
<p>
The default value for the property is <var>clDefault</var>. Changing the 
value in BevelColor causes the <var>Invalidate</var> to be called to repaint 
the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Invalidate">TWinControl.Invalidate</link>
</seealso>
</element>

<element name="TCustomPanel.BevelInner">
<short>
Determines the appearance of the Inner Bevel for the panel (whether raised, 
lowered, etc.).
</short>
<descr>
<p>
<var>BevelInner</var> is a <var>TPanelBevel</var> property which indicates the 
drawing style used to render the inner bevel for the panel. The default value 
for the property is bvNone and indicates that the inner bevel is not drawn.
</p>
<p>
Other values from TPanelBevel can be used to draw the bevel with a raised or 
lowered appearance, or as reserved space.
</p>
<p>
Changing the value for the property causes a CM_BORDERCHANGED control message 
to be performed for the control.
</p>
<remark>
For the macOS Carbon widgetset, the values bvLowered and bvSpace are not 
supported for the BevelInner property.
</remark>
</descr>
<seealso>
<link id="TCustomPanel.BevelOuter"/>
<link id="TPanelBevel"/>
</seealso>
</element>

<element name="TCustomPanel.BevelOuter">
<short>
Determines the appearance of the Outer Bevel for the panel (whether raised, 
lowered, etc.).
</short>
<descr>
<p>
<var>BevelOuter</var> is a <var>TPanelBevel</var> property which indicates the 
drawing style used to render the outer bevel for the panel. The default value 
for the property is bvRaised and indicates that the inner bevel is drawn with 
a raise or outset appearance.
</p>
<p>
Other values from TPanelBevel can be used to draw the bevel with a 
lowered appearance, as reserved space, or not drawn at all.
</p>
<p>
Changing the value for the property causes a CM_BORDERCHANGED control message 
to be performed for the control.
</p>
<remark>
For the macOS Carbon widgetset, the values bvLowered and bvSpace are not 
supported for the BevelOuter property.
</remark>
</descr>
<seealso>
<link id="TCustomPanel.BevelInner"/>
<link id="TPanelBevel"/>
</seealso>
</element>

<element name="TCustomPanel.BevelWidth">
<short>
Width for a bevel on the panel in pixels.
</short>
<descr>
<p>
<var>BevelWidth</var> is a <var>TBevelWidth</var> property which indicates the 
width for bevels draw around the panel in pixels. The default value for the 
property is 1.
</p>
<p>
Changing the value for the property causes a CM_BORDERCHANGED control message 
to be performed for the control.
</p>
<p>
BevelWidth is used when the Paint method is called to redraw the control. The 
value in BevelWidth is used to draw both the outer bevel (using the style in 
BevelOuter) and the inner bevel (using the style in BevelInner). Each bevel is 
drawn by calling the Frame3D method in Canvas with BevelWidth and BevelColor 
passed as arguments.
</p>
<remark>
For the macOS Carbon widgetset, the values bvLowered and bvSpace are not 
supported for the BevelInner property.
</remark>
</descr>
<seealso>
<link id="TCustomPanel.Paint"/>
<link id="TCustomPanel.BevelInner"/>
<link id="TCustomPanel.BevelOuter"/>
<link id="TCustomPanel.BevelColor"/>
<link id="#lcl.controls.TWinControl.BorderWidth">TWinControl.BorderWidth</link>
</seealso>
</element>

<element name="TCustomPanel.Color">
<short>Contains the background color for the panel.</short>
<descr>
<p>
<var>Color</var> is a <var>TColor</var> property with the background color 
for the panel.
</p>
<p>
The default value for Color is determined by the UseCLDefault compiler define. 
When UseCLDefault is defined, the default value is clDefault, and the color 
will need to be resolved using the <var>GetDefaultColor</var> method. 
Convenience routines which obtain the color by resolving clDefault and 
ParentColor are also provided in <var>TControl.GetColorResolvingParent</var> 
and <var>TControl.GetRGBColorResolvingParent</var>. If UseCLDefault is not 
defined, the default value is clWindow. 
</p>
<p>
Setting an explicit value in Color causes both ParentColor and 
ParentBackground to be set to <b>False</b>, and the control is redrawn.
</p>
<p>
Set ParentBackground or ParentColor to <b>True</b> to use the background color 
from the Parent control, making the panel transparent when drawn.
</p>
</descr>
<seealso>
<link id="TCustomPanel.ParentBackground"/>
<link id="TCustomPanel.ParentColor"/>
<link id="#lcl.controls.TControl.Color">TControl.Color</link>
</seealso>
</element>

<element name="TCustomPanel.FullRepaint">
<short>
<var>FullRepaint</var> - if <b>True</b>, the panel needs to be fully 
repainted after each change.
</short>
<descr>
<p>
Exists only for Delphi compatibility; it has no effect in LCL.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomPanel.ParentBackground">
<short>
Indicates if the background from the parent control is used to draw the 
background for the control.
</short>
<descr>
<p>
When <var>ParentBackground</var> is <b>True</b>, the control uses the 
background from the parent color (including any theme drawing features from 
ThemeServices).
</p>
<p>
ParentBackground is used in conjunction with the <var>ControlStyle</var> 
property. Changing the value in ParentBackground causes the ControlStyle 
property to be updated to reflect the property setting. When the property is 
set to <b>True</b>, the value <var>csOpaque</var> is excluded from 
ControlStyle to allow the default background to be drawn. When the property 
is set to <b>False</b>, the value <var>csOpaque</var> is included in the 
ControlStyle property.
</p>
<p>
The default value for the property is <b>True</b>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.ControlStyle">TControl.ControlStyle</link>
<link id="#lcl.controls.TControl.ParentBackground">TControl.ParentBackground</link>
</seealso>
</element>

<element name="TCustomPanel.ParentColor">
<short>
Indicates if the control is drawn using the color in the parent control.
</short>
<descr>
<p>
When <var>ParentColor</var> is <b>True</b>, the control is drawn using the 
<var>Color</var> from the parent control. When <var>ParentColor</var> is 
<b>False</b>, the <var>Color</var> property is used to draw the control.
</p>
<p>
The default value for the property is <b>True</b>.
</p>
<p>
Changing the value for the property causes the 
<var>UpdateParentColorChange</var> method to be executed.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.ParentColor">TControl.ParentColor</link>
<link id="TCustomPanel.UpdateParentColorChange"/>
<link id="TCustomPanel.Color"/>
</seealso>
</element>

<element name="TCustomPanel.TabStop">
<short>Enables or disables navigation using the Tab key.</short>
<descr>
<p>
The default value for the property is <b>False</b> in TCustomPanel.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
</seealso>
</element>

<element name="TPanel">
<short>
Implements a general purpose container which can hold other components.
</short>
<descr>
<p>
<var>TPanel</var> is a <var>TCustomPanel</var> descendant which defines a 
rectangular area on a form into which components can be placed to group them 
functionally and geographically. TPanel is a general container for other 
components, and has a customizable border and caption.
</p>
</descr>
<seealso>
<link id="TCustomPanel"/>
</seealso>
</element>

<element name="TPanel.Align" link="#lcl.extctrls.TCustomPanel.Align"/>
<element name="TPanel.Alignment" link="#lcl.extctrls.TCustomPanel.Alignment"/>
<element name="TPanel.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TPanel.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TPanel.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TPanel.BevelColor" link="#lcl.extctrls.TCustomPanel.BevelColor"/>
<element name="TPanel.BevelInner" link="#lcl.extctrls.TCustomPanel.BevelInner"/>
<element name="TPanel.BevelOuter" link="#lcl.extctrls.TCustomPanel.BevelOuter"/>
<element name="TPanel.BevelWidth" link="#lcl.extctrls.TCustomPanel.BevelWidth"/>
<element name="TPanel.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TPanel.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
<element name="TPanel.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TPanel.Caption" link="#lcl.controls.TControl.Caption"/>
<element name="TPanel.ChildSizing" link="#lcl.controls.TWinControl.ChildSizing"/>
<element name="TPanel.ClientHeight" link="#lcl.controls.TControl.ClientHeight"/>
<element name="TPanel.ClientWidth" link="#lcl.controls.TControl.ClientWidth"/>
<element name="TPanel.Color" link="#lcl.extctrls.TCustomPanel.Color"/>
<element name="TPanel.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TPanel.DockSite" link="#lcl.controls.TWinControl.DockSite"/>
<element name="TPanel.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
<element name="TPanel.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TPanel.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TPanel.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TPanel.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TPanel.Font" link="#lcl.controls.TControl.Font"/>
<element name="TPanel.FullRepaint" link="#lcl.extctrls.TCustomPanel.FullRepaint"/>
<element name="TPanel.ParentBackground" link="#lcl.extctrls.TCustomPanel.ParentBackground"/>
<element name="TPanel.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TPanel.ParentColor" link="#lcl.extctrls.TCustomPanel.ParentColor"/>
<element name="TPanel.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered"/>
<element name="TPanel.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TPanel.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TPanel.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TPanel.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TPanel.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TPanel.TabStop" link="#lcl.extctrls.TCustomPanel.TabStop"/>

<element name="TPanel.UseDockManager">
<short>Determines whether a DockManager is used for this DockSite.</short>
<descr>
<p>
The default value for the property is <b>True</b> in TPanel.
</p>
<p>
When UseDockManager is set to <b>True</b>, and DockSite is also set to 
<b>True</b>, a DockManager is created automatically. When set to 
<b>False</b>, an existing DockManager is ignored. If you want to use a 
special DockManager, install it before setting UseDockManager to <b>True</b>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.UseDockManager">TWinControl.UseDockManager</link>
</seealso>
</element>

<element name="TPanel.VerticalAlignment" link="#lcl.extctrls.TCustomPanel.VerticalAlignment"/>
<element name="TPanel.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TPanel.WordWrap" link="#lcl.extctrls.TCustomPanel.WordWrap"/>
<element name="TPanel.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TPanel.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TPanel.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TPanel.OnDockDrop" link="#lcl.controls.TWinControl.OnDockDrop"/>
<element name="TPanel.OnDockOver" link="#lcl.controls.TWinControl.OnDockOver"/>
<element name="TPanel.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TPanel.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TPanel.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TPanel.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TPanel.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TPanel.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TPanel.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TPanel.OnGetSiteInfo" link="#lcl.controls.TWinControl.OnGetSiteInfo"/>
<element name="TPanel.OnGetDockCaption" link="#lcl.controls.TWinControl.OnGetDockCaption"/>
<element name="TPanel.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TPanel.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TPanel.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TPanel.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TPanel.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TPanel.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TPanel.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TPanel.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TPanel.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="TPanel.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="TPanel.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
<element name="TPanel.OnPaint" link="#lcl.controls.TCustomControl.OnPaint"/>
<element name="TPanel.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TPanel.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TPanel.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TPanel.OnUnDock" link="#lcl.controls.TWinControl.OnUnDock"/>

<element name="TFlowStyle">
<short>Represents the flow styles used in TCustomFlowPanel.</short>
<descr>
<p>
<var>TFlowStyle</var> is an enumerated type which contains values that 
represent the flow styles available in <var>TCustomFlowPanel</var>. It is the 
type used to implement the <var>FlowStyle</var> property in 
<var>TCustomFlowPanel</var>.
</p>
</descr>
<seealso>
<link id="TCustomFlowPanel.FlowStyle"/>
</seealso>
</element>
<element name="TFlowStyle.fsLeftRightTopBottom">
<short>Controls flow from left to right, then top to bottom.</short>
</element>
<element name="TFlowStyle.fsRightLeftTopBottom">
<short>Controls flow from right to left, then top to bottom.</short>
</element>
<element name="TFlowStyle.fsLeftRightBottomTop">
<short>Controls flow from left to right, then bottom to top.</short>
</element>
<element name="TFlowStyle.fsRightLeftBottomTop">
<short>Controls flow from right to left, then bottom to top.</short>
</element>
<element name="TFlowStyle.fsTopBottomLeftRight">
<short>Controls flow from top to bottom, then left to right.</short>
</element>
<element name="TFlowStyle.fsBottomTopLeftRight">
<short>Controls flow from bottom to top, then left to right.</short>
</element>
<element name="TFlowStyle.fsTopBottomRightLeft">
<short>Controls flow from top to bottom, then right to left.</short>
</element>
<element name="TFlowStyle.fsBottomTopRightLeft">
<short>Controls flow from bottom to top, then right to left.</short>
</element>

<element name="TWrapAfter">
<short>Represents the wrapping strategies used in TCustomFlowPanel.</short>
<descr>
<p>
TWrapAfter is an enumerated type with values that specify the wrapping 
strategy for controls in TCustomFlowPanel.
</p>
</descr>
<seealso/>
</element>
<element name="TWrapAfter.waAuto">
<short>Automatically wrap when the control exceeds the bounds.</short>
</element>
<element name="TWrapAfter.waForce">
<short>Always wrap after this control.</short>
</element>
<element name="TWrapAfter.waAvoid">
<short>
Try not to wrap after this control, if the control is already at the 
beginning.
</short>
</element>
<element name="TWrapAfter.waForbid">
<short>Never wrap after this control.</short>
</element>

<element name="TFlowPanelControl">
<short>
Implements a collection item for the TFlowPanelControlList collection.
</short>
<descr>
<p>
<var>TFlowPanelControl</var> is a <var>TCollectionItem</var> descendant which 
implements a collection item maintained in <var>TFlowPanelControlList</var>. 
TFlowPanelControl provides properties and methods need to represent a flowed 
control in the collection, and provides support for the IObjInspInterface 
used in the Lazarus Object Inspector.
</p>
</descr>
<seealso>
<link id="TFlowPanelControlList.Items"/>
</seealso>
</element>

<element name="TFlowPanelControl.FControl"/>
<element name="TFlowPanelControl.FWrapAfter"/>

<element name="TFlowPanelControl.SetControl">
<short>Sets the value for the Control property.</short>
<descr/>
<seealso>
<link id="TFlowPanelControl.Control"/>
</seealso>
</element>
<element name="TFlowPanelControl.SetControl.aControl">
<short>New value for the property.</short>
</element>

<element name="TFlowPanelControl.SetWrapAfter">
<short>Sets the value for the WrapAfter property.</short>
<descr/>
<seealso>
<link id="TFlowPanelControl.WrapAfter"/>
</seealso>
</element>
<element name="TFlowPanelControl.SetWrapAfter.AWrapAfter">
<short>New value for the property.</short>
</element>

<element name="TFlowPanelControl.GetDisplayName">
<short>Gets the value for the DisplayName property.</short>
<descr/>
<seealso>
<link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
</seealso>
</element>
<element name="TFlowPanelControl.GetDisplayName.Result">
<short>Value for the property.</short>
</element>

<element name="TFlowPanelControl.SetIndex">
<short>Sets the value for the Index property.</short>
<descr/>
<seealso>
<link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
</seealso>
</element>
<element name="TFlowPanelControl.SetIndex.Value">
<short>New value for the Index property.</short>
</element>

<element name="TFlowPanelControl.AssignTo">
<short>implement persistence in the control.</short>
<descr>
<p>
<var>AssignTo</var> is an overridden method used to implement persistence in 
the control. AssignTo provides support for storing property values from the 
current class instance into the <var>Dest</var> argument when it is derived 
from <var>TFlowPanelControl</var>. Otherwise, the inherited AssignTo method 
is called.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>
<element name="TFlowPanelControl.AssignTo.Dest">
<short>Persistent object where property values are stored.</short>
</element>

<element name="TFlowPanelControl.FPCollection">
<short>
Gets the TFlowPanelControlList instance that owns the collection item.
</short>
<descr/>
<seealso>
<link id="TFlowPanelControlList"/>
</seealso>
</element>
<element name="TFlowPanelControl.FPCollection.Result">
<short>TFlowPanelControlList instance that owns the collection item.</short>
</element>

<element name="TFlowPanelControl.FPOwner">
<short>
Gets the TCustomFlowPanel instance that owns the collection and its items.
</short>
<descr/>
<seealso/>
</element>
<element name="TFlowPanelControl.FPOwner.Result">
<short>
TCustomFlowPanel instance that owns the collection and its items.
</short>
</element>

<element name="TFlowPanelControl.AllowAdd">
<short>
Implements the AllowAdd method from the IObjInspInterface interface.
</short>
<descr>Used by the Lazarus object inspector.</descr>
<seealso/>
</element>
<element name="TFlowPanelControl.AllowAdd.Result">
<short>
Always return <b>False</b>.
</short>
</element>

<element name="TFlowPanelControl.AllowDelete">
<short>
Implements the AllowDelete method from the IObjInspInterface interface.
</short>
<descr>Used by the Lazarus object inspector.</descr>
<seealso/>
</element>
<element name="TFlowPanelControl.AllowDelete.Result">
<short>
Always return <b>False</b>.
</short>
</element>

<element name="TFlowPanelControl.Control">
<short>The associated control to the flow panel control item.</short>
<descr>
Don't set the Control property manually. It is used internally by the 
designer.
</descr>
</element>

<element name="TFlowPanelControl.WrapAfter">
<short>Determines the wrap policy after this control.</short>
<descr>
</descr>
</element>

<element name="TFlowPanelControl.Index">
<short>
Ordinal position for the flowed control in the TFlowPanelControlList 
collection.
</short>
<descr>
<p>
<var>Index</var> is a published property in <var>TFlowPanelControl</var>. 
Changing the value in Index causes the owner panel to call its 
<var>ReAlign</var> method when it is not being loaded, updated, or destroyed.
</p>
</descr>
<seealso>
<link id="TFlowPanelControlList"/>
<link id="#lcl.controls.TWinControl.Realign">TWinControl.Realign</link>
<link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
<link id="#rtl.classes.TComponent.ComponentState">TComponent.ComponentState</link>
</seealso>
</element>

<element name="TFlowPanelControlList">
<short>Implements a collection for TCustomFlowPanel collection items.</short>
<descr>
<p>
<var>TFlowPanelControlList</var> is a <var>TOwnedCollection</var> descendant. 
TFlowPanelControlList implements the <var>IObjInspInterface</var> interface 
which allows the collection to be used in the Lazarus Object Inspector.
</p>
</descr>
<seealso>
<link id="TCustomFlowPanel"/>
</seealso>
</element>

<element name="TFlowPanelControlList.GetItem">
<short>Gets the value for the indexed Items property.</short>
<descr/>
<seealso/>
</element>
<element name="TFlowPanelControlList.GetItem.Result">
<short>Value for the property.</short>
</element>
<element name="TFlowPanelControlList.GetItem.Index">
<short>Ordinal position in the collection for the requested item.</short>
</element>

<element name="TFlowPanelControlList.SetItem">
<short>Sets the value for the indexed Items property.</short>
<descr/>
<seealso>
<link id="TFlowPanelControlList.Items"/>
</seealso>
</element>
<element name="TFlowPanelControlList.SetItem.Index">
<short>Ordinal position in the collection for the specified item.</short>
</element>
<element name="TFlowPanelControlList.SetItem.AItem">
<short>New value for the property.</short>
</element>

<element name="TFlowPanelControlList.FPOwner">
<short>
Gets the owner of the collection as a TCustomFlowPanel instance.
</short>
<descr/>
<seealso/>
</element>
<element name="TFlowPanelControlList.FPOwner.Result">
<short>The flow panel which owns the collection and its items.</short>
</element>

<element name="TFlowPanelControlList.Add">
<short>Adds a TFlowPanelControl instance to the owned collection.</short>
<descr/>
<seealso/>
</element>
<element name="TFlowPanelControlList.Add.Result">
<short>TFlowPanelControl instance created in the method.</short>
</element>

<element name="TFlowPanelControlList.AddControl">
<short>
Adds the specified control to the Items for the collection.
</short>
<descr/>
<seealso/>
</element>
<element name="TFlowPanelControlList.AddControl.AControl">
<short>Control to locate and optionally add in the method.</short>
</element>
<element name="TFlowPanelControlList.AddControl.AIndex">
<short>
Position in Items where the control is stored, or <b>-1</b> to add the item.
</short>
</element>

<element name="TFlowPanelControlList.RemoveControl">
<short>Removes the collection item with the specified control.</short>
<descr/>
<seealso/>
</element>
<element name="TFlowPanelControlList.RemoveControl.AControl">
<short>
Control used to locate the collection item deleted in the method.
</short>
</element>

<element name="TFlowPanelControlList.Create">
<short>Constructor for the class instance.</short>
<descr/>
<seealso/>
</element>
<element name="TFlowPanelControlList.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TFlowPanelControlList.IndexOf">
<short>
Gets the ordinal position of the specified control in the list of controls.
</short>
<descr/>
<seealso/>
</element>
<element name="TFlowPanelControlList.IndexOf.Result">
<short>Ordinal position in the list for the control.</short>
</element>
<element name="TFlowPanelControlList.IndexOf.AControl">
<short>Control to locate in the list.</short>
</element>

<element name="TFlowPanelControlList.Items">
<short>Provides indexed access to controls stored in the container.</short>
<descr>
<p>
<var>Items</var> is an indexed <var>TFlowPanelControl</var> property which 
provides access to the flow panel controls in the container. Items is the 
default property for the collection.
</p>
<p>
Use the <var>Add</var> or the <var>AddControl</var> method to add a flow 
panel control to the collection.
</p>
<p>
Use <var>RemoveControl</var> to remove a flow panel control from the 
collection.
</p>
</descr>
<seealso>
<link id="TFlowPanelControl"/>
<link id="TFlowPanelControlList.Add"/>
<link id="TFlowPanelControlList.AddControl"/>
<link id="TFlowPanelControlList.RemoveControl"/>
</seealso>
</element>
<element name="TFlowPanelControlList.Items.Index">
<short>Ordinal position for the requested control.</short>
</element>

<element name="TFlowPanelControlList.AllowAdd">
<short>
Implements the AllowAdd method in the IObjInspInterface interface.
</short>
<descr>
<p>
Used in the Lazarus object inspector.
</p>
</descr>
<seealso/>
</element>
<element name="TFlowPanelControlList.AllowAdd.Result">
<short>
Always return <b>False</b>.
</short>
</element>

<element name="TFlowPanelControlList.AllowDelete">
<short>
Implements the AllowDelete method in the IObjInspInterface interface.
</short>
<descr>
<p>
Used in the Lazarus object inspector.
</p>
</descr>
<seealso/>
</element>
<element name="TFlowPanelControlList.AllowDelete.Result">
<short>
Always return <b>False</b>.
</short>
</element>

<element name="TCustomFlowPanel">
<short>
The base class for TFlowPanel.
</short>
<descr>
<p>
TCustomFlowPanel is a TCustomPanel descendant used to automatically position 
controls added to the panel in a grid-like layout.
</p>
<p>
The FlowStyle property determines layout direction for controls added to the 
panel.
</p>
<p>
FlowLayout controls the vertical positioning for controls in given row on the 
panel.
</p>
<p>
The ControlList property provides a list of wrapper classes maintained for 
each of the controls on the panel. Its items maintain the position and 
wrapping options for each control using the FlowStyle and FlowLayout 
algorithms.
</p>
<p>
Adding a control to the panel causes it to be positioned at the next cell in 
the layout. The Left and Top coordinates for each control are adjusted to 
position the control within a cell using the FlowStyle and FlowLayout 
properties for the panel. The Anchors and Align properties for child controls 
are ignored. The BorderSpacing setting for the controls is used, however.
</p>
<p>
AutoWrap indicates whether the controls are automatically flowed into rows 
based on their settings in ControlList.
</p>
</descr>
<seealso>
<link id="TCustomPanel"/>
<link id="TFlowPanel"/>
</seealso>
</element>

<element name="TCustomFlowPanel.FControlList"/>
<element name="TCustomFlowPanel.FAutoWrap"/>
<element name="TCustomFlowPanel.FFlowStyle"/>
<element name="TCustomFlowPanel.FFlowLayout"/>

<element name="TCustomFlowPanel.SetAutoWrap">
<short>Sets the value for the AutoWrap property.</short>
<descr/>
<seealso>
<link id="TCustomFlowPanel.AutoWrap"/>
</seealso>
</element>
<element name="TCustomFlowPanel.SetAutoWrap.AAutoWrap">
<short>New value for the AutoWrap property.</short>
</element>

<element name="TCustomFlowPanel.SetControlList">
<short>Sets the value for the ControlList property.</short>
<descr/>
<seealso>
<link id="TCustomFlowPanel.ControlList"/>
</seealso>
</element>
<element name="TCustomFlowPanel.SetControlList.AControlList">
<short>New value for the ControlList property.</short>
</element>

<element name="TCustomFlowPanel.SetFlowStyle">
<short>Sets the value for the FlowStyle property.</short>
<descr/>
<seealso>
<link id="TCustomFlowPanel.FlowStyle"/>
</seealso>
</element>
<element name="TCustomFlowPanel.SetFlowStyle.AFlowStyle">
<short>New value for the FlowStyle property.</short>
</element>

<element name="TCustomFlowPanel.SetFlowLayout">
<short>Sets the value for the FlowLayout property.</short>
<descr/>
<seealso>
<link id="TCustomFlowPanel.FlowLayout"/>
</seealso>
</element>
<element name="TCustomFlowPanel.SetFlowLayout.aFlowLayout">
<short>New value for the FlowLayout property.</short>
</element>

<element name="TCustomFlowPanel.CMControlChange">
<short>Handles the CM_CONTROLCHANGE message.</short>
<descr>
<p>
Calls DisableAlign prior to adding (inserting) the control in ControlList. 
Calls ReAlign when the control is added, and calls EnableAlign prior to exit.
</p>
<remark>
The CM_CONTROLCHANGE message is ignored when the component is being loaded 
using LCL steaming. No actions are performed in the method when csLoading is 
in the ComponentState property.
</remark>
</descr>
<seealso/>
</element>
<element name="TCustomFlowPanel.CMControlChange.Message">
<short>Message with parameters examined in the method.</short>
</element>

<element name="TCustomFlowPanel.AlignControls">
<short>Performs layout and alignment for flowed controls on the panel.</short>
<descr>
<p>
<var>AlignControls</var> is an overridden procedure used to perform layout 
and alignment for flowed controls which are a child of the control specified 
in AControl. RemainingClientRect contains the unused client area where the 
controls are positioned and aligned.
</p>
<p>
No actions are performed in the method if child controls do not exist for the 
panel (ControlCount is 0).
</p>
<p>
AlignControls ensures space is reserved in the client rectangle for the 
borders on the panel. The value in FlowStyle determines the position in 
RemainingClientRect where alignment and layout for the controls is started. 
Each of the controls in ControlList is visited to adjust the client rectangle 
for the TControl instances based on the FlowStyle for the panel. SetBounds is 
called for the TControl instances to reposition / resize the control.
</p>
<remark>
AlignControls does <b>not</b> call the inherited method.
</remark>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.AlignControls">TWinControl.AlignControls</link>
</seealso>
</element>
<element name="TCustomFlowPanel.AlignControls.AControl">
<short>
Control with the child controls aligned in the method.
</short>
</element>
<element name="TCustomFlowPanel.AlignControls.RemainingClientRect">
<short>
Unused client area where the child controls are aligned.
</short>
</element>

<element name="TCustomFlowPanel.CalculatePreferredSize">
<short>Calculates the preferred size for the control.</short>
<descr>
<p>
<var>CalculatePreferredSize</var> is an overridden procedure used to calculate 
the preferred height and width for the flow panel. The preferred height and 
width are used in the LCL auto-sizing algorithm as the default size for the 
control. CalculatePreferredSize calls the inherited method on entry to 
calculate preferred dimensions for its child Controls.
</p>
<p>
CalculatePreferredSize extends the inherited method to calculate the preferred 
width and height using the FlowStyle for the child Controls. It ensures that 
additional space for bevels on the panel and BorderSpacing for the child 
controls are included in the calculated preferred width and height. Only 
visible child controls are included in the calculated values.
</p>
</descr>
<version>
Modified in LCL 2.2.6+ to exclude hidden child controls from the calculated 
dimensions for the flow panel.
</version>
<seealso>
<link id="TCustomFlowPanel.FlowStyle"/>
<link id="#lcl.controls.TControl.CalculatePreferredSize">TControl.CalculatePreferredSize</link>
</seealso>
</element>
<element name="TCustomFlowPanel.CalculatePreferredSize.PreferredWidth">
<short>
Preferred width for new instances of the control.
</short>
</element>
<element name="TCustomFlowPanel.CalculatePreferredSize.PreferredHeight">
<short>
Preferred height for new instances of the control.
</short>
</element>
<element name="TCustomFlowPanel.CalculatePreferredSize.WithThemeSpace">
<short>
<b>True</b> if additional space is reserved for theme element details.
</short>
</element>

<element name="TCustomFlowPanel.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance, and 
calls the inherited constructor. Create ensures that resources are allocated 
for the <var>ControlList</var> property, and sets the default value for 
<var>AutoWrap</var> to <b>True</b>.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomFlowPanel.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomFlowPanel.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. 
Destroy calls the inherited destructor, and frees resources allocated to the 
<var>ControlList</var> property.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomFlowPanel.GetControlIndex">
<short>
Gets the ordinal position in ControlList for the specified control.
</short>
<descr>
<p>
<var>GetControlIndex</var> is a convenience method used to get the ordinal 
position in <var>ControlList</var> for the specified 
<var>TFlowPanelControl</var>. Calls <var>TFlowPanelControlList.IndexOf</var> 
to get the return value, which can be -1 if <var>AControl</var> is not found 
in ControlList.
</p>
<p>
Use <var>SetControlIndex</var> to set the ordinal position in ControlList for 
the specified flowed control.
</p>
</descr>
<seealso>
<link id="TCustomFlowPanel.ControlList"/>
<link id="TFlowPanelControlList.IndexOf"/>
<link id="TFlowPanelControl.Index"/>
<link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
</seealso>
</element>
<element name="TCustomFlowPanel.GetControlIndex.Result">
<short>
Position in the control list for the specified control, or -1 when not found.
</short>
</element>
<element name="TCustomFlowPanel.GetControlIndex.AControl">
<short>Control to locate in the ControlList container.</short>
</element>

<element name="TCustomFlowPanel.SetControlIndex">
<short>
Sets the Index position in ControlList for the specified control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomFlowPanel.SetControlIndex.AControl">
<short>Control to locate and update in the list of controls.</short>
</element>
<element name="TCustomFlowPanel.SetControlIndex.Index">
<short>Value assigned to the Index property for the specified control.</short>
</element>

<element name="TCustomFlowPanel.AutoWrap">
<short>Determines if controls in TCustomFlowPanel are wrapped.</short>
<descr>
<p>
The default value for the property is <b>True</b> in TCustomFlowPanel.
</p>
</descr>
</element>

<element name="TCustomFlowPanel.ControlList">
<short>
Container used to stored TFlowPanelControl instances on the panel.
</short>
</element>

<element name="TCustomFlowPanel.FlowStyle">
<short>
Contains the flow direction used to position controls on the panel.
</short>
</element>

<element name="TCustomFlowPanel.FlowLayout">
<short>
Use FlowLayout to set the layout (alignment) for the non-flowed coordinate. 
The default value is tlTop.
</short>
<descr>
<p>
In case of horizontal/vertical flow style: tlTop: top/left alignment in 
row/column tlCenter: center tlBottom: bottom/right.
</p>
</descr>
</element>

<element name="TFlowPanel">
<short>Implements a panel with flowed layout for its controls.</short>
<descr>
<p>
<var>TFlowPanel</var> is a TCustomFlowPanel descendant which implements a 
panel used to automatically position controls added to the panel in a 
grid-like layout.
</p>
<p>
The FlowStyle property determines layout direction for controls added to the 
panel.
</p>
<p>
FlowLayout controls the vertical positioning for controls in given row on the 
panel.
</p>
<p>
The ControlList property provides a list of wrapper classes maintained for 
each of the controls on the panel. Its items maintain the position and 
wrapping options for each control using the FlowStyle and FlowLayout 
algorithms.
</p>
<p>
Adding a control to the panel causes it to be positioned at the next cell in 
the layout. The Left and Top coordinates for each control are adjusted to 
position the control within a cell using the FlowStyle and FlowLayout 
properties for the panel. The Anchors and Align properties for child controls 
are ignored. The BorderSpacing setting for the controls is used, however.
</p>
<p>
AutoWrap indicates whether the controls are automatically flowed into rows 
based on their settings in ControlList.
</p>
</descr>
<seealso>
<link id="TCustomFlowPanel"/>
</seealso>
</element>

<element name="TFlowPanel.Align" link="#lcl.extctrls.TCustomPanel.Align"/>
<element name="TFlowPanel.Alignment" link="#lcl.extctrls.TCustomPanel.Alignment"/>
<element name="TFlowPanel.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TFlowPanel.AutoSize" link="#lcl.controls.TControl.AutoSize"/>

<element name="TFlowPanel.AutoWrap">
<short>
Determines if child controls are automatically wrapped to a new row when 
needed.
</short>
<descr>
<p>
The default value for the property is <b>True</b> in TFlowPanel.
</p>
</descr>
<seealso>
<link id="#lcl.extctrls.TCustomFlowPanel.AutoWrap">TCustomFlowPanel.AutoWrap</link>
</seealso>
</element>

<element name="TFlowPanel.BevelInner" link="#lcl.extctrls.TCustomPanel.BevelInner"/>
<element name="TFlowPanel.BevelOuter" link="#lcl.extctrls.TCustomPanel.BevelOuter"/>
<element name="TFlowPanel.BevelWidth" link="#lcl.extctrls.TCustomPanel.BevelWidth"/>
<element name="TFlowPanel.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TFlowPanel.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
<element name="TFlowPanel.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TFlowPanel.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TFlowPanel.Caption" link="#lcl.controls.TControl.Caption"/>
<element name="TFlowPanel.Color" link="#lcl.extctrls.TCustomPanel.Color"/>
<element name="TFlowPanel.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TFlowPanel.ControlList" link="#lcl.extctrls.TCustomFlowPanel.ControlList"/>

<element name="TFlowPanel.UseDockManager">
<short>Determines whether a DockManager is used for this DockSite.</short>
<descr>
<p>
The default value for the property is <b>True</b> in TFlowPanel.
</p>
<p>
When UseDockManager is set to <b>True</b>, and DockSite is also set to 
<b>True</b>, a DockManager is created automatically. When set to 
<b>False</b>, an existing DockManager is ignored. If you want to use a 
special DockManager, install it before setting UseDockManager to <b>True</b>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.UseDockManager">TWinControl.UseDockManager</link>
</seealso>
</element>

<element name="TFlowPanel.DockSite" link="#lcl.controls.TWinControl.DockSite"/>
<element name="TFlowPanel.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
<element name="TFlowPanel.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TFlowPanel.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TFlowPanel.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TFlowPanel.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TFlowPanel.FlowLayout" link="#lcl.extctrls.TCustomFlowPanel.FlowLayout"/>
<element name="TFlowPanel.FlowStyle" link="#lcl.extctrls.TCustomFlowPanel.FlowStyle"/>
<element name="TFlowPanel.FullRepaint" link="#lcl.extctrls.TCustomPanel.FullRepaint"/>
<element name="TFlowPanel.Font" link="#lcl.controls.TControl.Font"/>
<element name="TFlowPanel.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TFlowPanel.ParentColor" link="#lcl.extctrls.TCustomPanel.ParentColor"/>
<element name="TFlowPanel.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered"/>
<element name="TFlowPanel.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TFlowPanel.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TFlowPanel.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TFlowPanel.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TFlowPanel.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TFlowPanel.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TFlowPanel.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TFlowPanel.OnAlignInsertBefore" link="#lcl.controls.TWinControl.OnAlignInsertBefore"/>
<element name="TFlowPanel.OnAlignPosition" link="#lcl.controls.TWinControl.OnAlignPosition"/>
<element name="TFlowPanel.OnClick" link="#lcl.controls.TControl.OnClick"/>

<element name="TFlowPanel.OnConstrainedResize" link="#lcl.controls.TControl.OnConstrainedResize"/>
<element name="TFlowPanel.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TFlowPanel.OnDockDrop" link="#lcl.controls.TWinControl.OnDockDrop"/>
<element name="TFlowPanel.OnDockOver" link="#lcl.controls.TWinControl.OnDockOver"/>
<element name="TFlowPanel.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TFlowPanel.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TFlowPanel.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TFlowPanel.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TFlowPanel.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TFlowPanel.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TFlowPanel.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TFlowPanel.OnGetSiteInfo" link="#lcl.controls.TWinControl.OnGetSiteInfo"/>
<element name="TFlowPanel.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TFlowPanel.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TFlowPanel.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TFlowPanel.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TFlowPanel.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TFlowPanel.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TFlowPanel.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TFlowPanel.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TFlowPanel.OnUnDock" link="#lcl.controls.TWinControl.OnUnDock"/>

<element name="TBalloonFlags">
<short>
<var>TBalloonFlags</var> enumerated type for flags used in Tray Icon balloons.
</short>
<descr>
<p>
<var>TBalloonFlags</var> is an enumerated type with values representing flags 
used in Tray Icon balloon hints. It is the type used to implement the 
<var>BalloonFlags</var> property in <var>TCustomTrayIcon</var>.
</p>
</descr>
</element>
<element name="TBalloonFlags.bfNone">
<short>No icon is displayed on a balloon hint.</short>
</element>
<element name="TBalloonFlags.bfInfo">
<short>Displays an Information icon on a balloon hint.</short>
</element>
<element name="TBalloonFlags.bfWarning">
<short>Displays a Warning icon on a balloon hint.</short>
</element>
<element name="TBalloonFlags.bfError">
<short>Displays an Error icon on a balloon hint.</short>
</element>

<element name="TCustomTrayIcon">
<short>
Defines the base class for a multi-platform system tray icon component.
</short>
<descr>
<p>
<var>TCustomTrayIcon</var> is the base class for <var>TTrayIcon</var>, a 
multi-platform system tray icon component. It allows an icon to be displayed 
in the system tray when the Application or Form is active. TCustomTrayIcon 
provides properties, methods, and events used to configure, display, and 
control the tray icon. The component is supported on multiple platforms, but 
its implementation is platform-specific.
</p>
<p>
On the Windows platform, the system tray is usually located on the 
bottom-right corner of the screen, but it can be located on other edges for 
the physical screen. For other platforms, the position and other features 
varies according to the window or display manager in use.
</p>
<p>
On the GTK2 platform, there are two competing models used in the widgetset 
implementation for the tray icon class: the traditional system tray icon and 
the AppIndicator library. Starting with Lazarus version 3.0, the 
<var>GlobalUseAppInd</var> variable in <file>unitywsctrls,pas</file> can be 
used at run-time to enable, disable, or auto-detect use of the AppIndicator 
library. You <b>MUST</b> use the UnityWSCtrls unit and set the value in 
<var>GlobalUseAppInd</var> <b>BEFORE</b> the tray icon is created, so setting 
the value in the project .LPR file is recommended. Or, create your TrayIcon 
later in the startup process.  The fallback is to use the standard system tray 
icon model in GTK2. This feature applies to the GTK2 platform only, and any 
related code should be wrapped with <b>{$ifdef gtk2}</b>.
</p>
<p>
For an in-depth exploration of using TTrayIcon on GTK2, see the wiki page at:
</p>
<p>
<url href="https://wiki.freepascal.org/How_to_use_a_TrayIcon#UnityWSCtrls.GlobalUseAppInd_GTK2_ONLY">
How to use a TrayIcon
</url>
</p>
<p>
Use Icon to set the icon image type displayed for the control. Use Icons to 
assign a list of images displayed as the animated icon for the control when 
the Show method is called.
</p>
<p>
Use BalloonFlags, BalloonHint, BalloonTimeout and BalloonTitle to format and 
display balloon hints for the tray icon. If balloon hints are not supported 
for the platform, an internal TPopupNotifier is used to display the Hint for 
the control.
</p>
<p>
Use PopUpMenu to set the menu displayed when the icon is right clicked with 
the mouse.
</p>
<p>
Assign routines to the event handlers to perform actions needed when the icon 
is clicked - or when mouse move, up, or down messages are received.
</p>
<remark>
TCustomTrayIcon / TTrayIcon are <b>partially</b> compatible with the Delphi 
VCL component. It adds an OnPaint event handler which does not exist in 
Delphi. It omits properties like IconIndex and OnBalloonClick.
</remark>
</descr>
<seealso>
<link id="TTrayIcon"/>
</seealso>
</element>

<element name="TCustomTrayIcon.FDelayedShowing"/>
<element name="TCustomTrayIcon.FAnimate"/>
<element name="TCustomTrayIcon.FAnimateTimer"/>
<element name="TCustomTrayIcon.FCurAnimationStep"/>
<element name="TCustomTrayIcon.FBalloonFlags"/>
<element name="TCustomTrayIcon.FBalloonHint"/>
<element name="TCustomTrayIcon.FBalloonTimeout"/>
<element name="TCustomTrayIcon.FBalloonTitle"/>
<element name="TCustomTrayIcon.FPopUpMenu"/>
<element name="TCustomTrayIcon.FIcon"/>
<element name="TCustomTrayIcon.FIcons"/>
<element name="TCustomTrayIcon.FHint"/>
<element name="TCustomTrayIcon.FVisible"/>
<element name="TCustomTrayIcon.FNotifier"/>
<element name="TCustomTrayIcon.FTimer"/>
<element name="TCustomTrayIcon.FOnPaint"/>
<element name="TCustomTrayIcon.FOnClick"/>
<element name="TCustomTrayIcon.FOnDblClick"/>
<element name="TCustomTrayIcon.FOnMouseDown"/>
<element name="TCustomTrayIcon.FOnMouseUp"/>
<element name="TCustomTrayIcon.FOnMouseMove"/>

<element name="TCustomTrayIcon.GetAnimateInterval">
<short>Gets the value for the AnimateInterval property.</short>
<descr/>
<seealso>
<link id="TCustomTrayIcon.AnimateInterval"/>
</seealso>
</element>
<element name="TCustomTrayIcon.GetAnimateInterval.Result">
<short>Value for the AnimateInterval property.</short>
</element>

<element name="TCustomTrayIcon.GetCanvas">
<short>Gets the value for the Canvas property.</short>
<descr/>
<seealso>
<link id="TCustomTrayIcon.Canvas"/>
</seealso>
</element>
<element name="TCustomTrayIcon.GetCanvas.Result">
<short>Value for the Canvas property.</short>
</element>

<element name="TCustomTrayIcon.InternalShow">
<short>
Prevents the tray icon from being displayed during component streaming.
</short>
<descr>
<p>
<var>InternalShow</var> is called when the <var>Show</var> method is executed 
during LCL component streaming. InternalShow sets a flag to enable delayed 
display when <var>csLoading</var> is in the <var>ComponentState</var> 
property. No additional actions are performed in the method during LCL 
component streaming.
</p>
<p>
The return value contains the result from the Show method in 
<var>WidgetSetClass</var>. Visible is updated to reflect the state indicated 
in the widget set class. The value in <var>Animate</var> is used to enable or 
disable the animation timer for the class instance.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.Visible"/>
<link id="TCustomTrayIcon.Animate"/>
<link id="#lcl.lclclasses.TLCLComponent.WidgetSetClass">TLCLComponent.WidgetSetClass</link>
<link id="#lcl.wsextctrls.TWSCustomTrayIcon">TWSCustomTrayIcon</link>
</seealso>
</element>
<element name="TCustomTrayIcon.InternalShow.Result">
<short><b>True</b> when the tray icon is enabled and visible.</short>
</element>

<element name="TCustomTrayIcon.SetAnimate">
<short>Sets the value for the Animate property.</short>
<descr/>
<seealso>
<link id="TCustomTrayIcon.Animate"/>
</seealso>
</element>
<element name="TCustomTrayIcon.SetAnimate.AValue">
<short>New value for the Animate property.</short>
</element>

<element name="TCustomTrayIcon.SetAnimateInterval">
<short>Sets the value for the AnimateInterval property.</short>
<descr/>
<seealso>
<link id="TCustomTrayIcon.AnimateInterval"/>
</seealso>
</element>
<element name="TCustomTrayIcon.SetAnimateInterval.AValue">
<short>New value for the AnimateInterval property.</short>
</element>

<element name="TCustomTrayIcon.SetHint">
<short>Sets the value for the Hint property.</short>
<descr/>
<seealso>
<link id="TCustomTrayIcon.Hint"/>
</seealso>
</element>
<element name="TCustomTrayIcon.SetHint.AValue">
<short>New value for the Hint property.</short>
</element>

<element name="TCustomTrayIcon.SetIcon">
<short>Sets the value for the Icon property.</short>
<descr/>
<seealso>
<link id="TCustomTrayIcon.Icon"/>
</seealso>
</element>
<element name="TCustomTrayIcon.SetIcon.AValue">
<short>New value for the Icon property.</short>
</element>

<element name="TCustomTrayIcon.SetIcons">
<short>Sets the value for the Icons property.</short>
<descr/>
<seealso>
<link id="TCustomTrayIcon.Icons"/>
</seealso>
</element>
<element name="TCustomTrayIcon.SetIcons.AValue">
<short>New value for the Icons property.</short>
</element>

<element name="TCustomTrayIcon.SetPopUpMenu">
<short>Sets the value for the PopupMenu property.</short>
<descr/>
<seealso>
<link id="TCustomTrayIcon.PopUpMenu"/>
</seealso>
</element>
<element name="TCustomTrayIcon.SetPopUpMenu.AValue">
<short>New value for the PopUpMenu property.</short>
</element>

<element name="TCustomTrayIcon.SetVisible">
<short>Sets the value for the Visible property.</short>
<descr/>
<seealso>
<link id="TCustomTrayIcon.Visible"/>
</seealso>
</element>
<element name="TCustomTrayIcon.SetVisible.Value">
<short>New value for the Visible property.</short>
</element>

<element name="TCustomTrayIcon.HandleNotifierClose">
<short>Performs actions needed when the pop-up notifier is closed.</short>
<descr>
<p>
<var>HandleNotifierClose</var> ensures that the internal balloon hint timer 
for the tray icon is disabled when the pop-up notifier is closed or 
destroyed. HandleNotifierClose is assigned to the <var>OnClose</var> event 
handler in the internal <var>TPopupNotifier</var> class instance used in the 
tray icon.
</p>
</descr>
<seealso>
<link id="#lcl.popupnotifier.TPopupNotifier.OnClose">TPopupNotifier.OnClose</link>
</seealso>
</element>
<element name="TCustomTrayIcon.HandleNotifierClose.Sender">
<short>Object instance for the event notification.</short>
</element>
<element name="TCustomTrayIcon.HandleNotifierClose.CloseAction">
<short>Action to perform; not used in the method.</short>
</element>

<element name="TCustomTrayIcon.HandleNotifierTimeout">
<short>
Implements the event handler signalled when the timer in the tray icon has 
expired.
</short>
<descr>
<p>
<var>HandleNotifierTimeout</var> is a procedure which implements an event 
handler used to disabled the timer and to close the pop-up notifier for the 
tray icon. HandleNotifierTimeout is used as the <var>OnTimer</var> event 
handler in the <var>TTimer</var> class instance used in the component.
</p>
</descr>
<seealso>
<link id="TTimer.OnTimer"/>
</seealso>
</element>
<element name="TCustomTrayIcon.HandleNotifierTimeout.Sender">
<short>Object instance for the event notification.</short>
</element>

<element name="TCustomTrayIcon.HandleOnAnimateTimer">
<short>
Implements the event handler signalled when the interval for the animation 
timer has elapsed.
</short>
<descr>
<p>
<var>HandleOnAnimateTimer</var> is a procedure used to implement an event 
handler signalled when the interval for the animation timer has elapsed. 
HandleOnAnimateTimer retrieves and displays a bitmap stored in the 
<var>Icons</var> property when the interval for the timer has elapsed. An 
internal counter is incremented in the handler to indicate the next image 
used in the animation sequence. The counter is reset to zero (0) when the 
last bitmap in Icons is used. HandleOnAnimateTimer calls the 
<var>InternalUpdate</var> method to refresh the widget set class for the tray 
icon.
</p>
<p>
HandleOnAnimateTimer is assigned to the <var>OnTImer</var> event handler for 
the internal <var>TTimer</var> instance used as the animation timer.
</p>
<p>
Use <var>Animate</var> to control whether animations are displayed for the 
tray icon.
</p>
<p>
Use <var>AnimateInterval</var> to specify the number of elapsed milliseconds 
allowed before the event handler in the animation timer is signalled.
</p>
</descr>
<seealso>
<link id="TTimer.OnTimer"/>
<link id="TCustomTrayIcon.Icons"/>
<link id="TCustomTrayIcon.Animate"/>
<link id="TCustomTrayIcon.AnimateInterval"/>
</seealso>
</element>
<element name="TCustomTrayIcon.HandleOnAnimateTimer.Sender">
<short>Object instance for the event notification.</short>
</element>

<element name="TCustomTrayIcon.IconChanged">
<short>
Implements an event handler signalled when the Icon is changed for the 
component.
</short>
<descr>
<p>
IconChanged is a procedure which implements an event handler signalled when 
the Icon is changed for the component. IconChanged ensures that the 
WidgetSetClass is notified of the change to the tray icon.
</p>
<remark>
No actions are performed in the event handler if a Handle has already been 
assigned (contains a non-zero value) for the component.
</remark>
<p>
IconChanged is assigned as the OnChange event handler for the Icon property 
in the constructor for the class instance.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.Icon"/>
<link id="#lcl.graphics.TIcon.OnChange">TIcon.OnChange</link>
</seealso>
</element>
<element name="TCustomTrayIcon.IconChanged.Sender">
<short>Object instance for the event notification.</short>
</element>

<element name="TCustomTrayIcon.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomTrayIcon.Notification">
<short>
Performs action when a component is added to or removed from the class 
instance at run-time.
</short>
<descr>
<p>
<var>Notification</var> is an overridden procedure used to perform actions 
when a component is added or removed at run-time. Notification calls the 
inherited method, and ensures that the <var>PopUpMenu</var> for the tray icon 
is set to <b>Nil</b> when the component is removed.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent">TComponent</link>
</seealso>
</element>
<element name="TCustomTrayIcon.Notification.AComponent">
<short>Component for the notification.</short>
</element>
<element name="TCustomTrayIcon.Notification.Operation">
<short>Operation for the notification.</short>
</element>

<element name="TCustomTrayIcon.Loaded">
<short>
Performs actions needed when the component has finished loading from the LCL 
streaming mechanism.
</short>
<descr>
<p>
<var>Loaded</var> is an overridden procedure used to perform actions needed 
when the component has finished loading from the LCL streaming mechanism. 
Loaded calls the inherited method, and calls the <var>InternalShow</var> 
method to display the tray icon.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent">TComponent</link>
</seealso>
</element>

<element name="TCustomTrayIcon.Handle">
<short>Operating system <var>Handle</var> for the Tray Icon.</short>
<descr>
<p>
<var>Handle</var> is a public <var>HWND</var> member that represents the 
operating system handle for the control. Handle has a non-zero value when the 
widgetset class instance for the control has been allocated. The value in 
Handle is used (when assigned) in the private <var>IconChanged</var> event 
handler.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTrayIcon.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance, and 
calls the inherited constructor on entry. If <var>AOwner</var> is not 
<var>Nil</var>, the new component attempts to insert itself in the list of 
owned components in the owner class instance.
</p>
<p>
Creates sets the default values for properties in the class instance, like:
</p>
<ul>
<li>BalloonTimeout (3000ms or 3 seconds)</li>
<li>ShowIcon (True)</li>
<li>BalloonFlags (bfNone)</li>
<li>Visible (False)</li>
</ul>
<p>
Create allocates resources for members which implement the Icon and Icons 
properties, and internal TTimer instances used for animated icons and balloon 
hints. A TPopupNotifier instance is also created for platforms without native 
support for balloon hint display.
</p>
</descr>
<seealso>
<link id="#rtl.Classes.TComponent.Create">TComponent.Create</link>
</seealso>
</element>

<element name="TCustomTrayIcon.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. 
Destroy calls the Hide method at run-time to ensure that the widgetset class 
instance is not visible and its animation timer is disabled. It frees 
resources allocated in the constructor for members in the class instance. 
Destroy calls the inherited method prior to exit. This allows Free 
notifications to be performed for ancestor components, and to free child 
components for the control.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.Hide"/>
<link id="TCustomTrayIcon.Icon"/>
<link id="TCustomTrayIcon.Icons"/>
<link id="#rtl.Classes.TComponent.Destroy">TComponent.Destroy</link>
</seealso>
</element>

<element name="TCustomTrayIcon.Hide">
<short>Removes the icon from the System Tray.</short>
<descr>
<p>
<var>Hide</var> is a <var>Boolean</var> function used to hide the tray icon 
and to remove it from the tray area in the task bar.
</p>
<p>
No actions are performed in the method when <var>Visible</var> is set to 
<b>False</b>, or at design-time, or when the component is loaded from the LCL 
streaming mechanism.
</p>
<p>
Hide sets the value in the <var>Visible</var> property to <b>False</b>, and 
calls the namesake method in the <var>WidgetSetClass</var>. The internal 
animation timer for the tray icon is also disabled in the method.
</p>
<p>
The return value is <b>True</b> when the tray icon is successfully hidden. 
For other conditions, the return value is <b>False</b>.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.Visible"/>
<link id="#rtl.classes.TComponent.ComponentState">TComponent.ComponentState</link>
</seealso>
</element>

<element name="TCustomTrayIcon.Show">
<short>Displays the icon in the System Tray.</short>
<descr>
<p>
<var>Show</var> is a Boolean function used to display the tray icon in the 
system tray. The return value is <b>True</b> if the control is successfully 
displayed in the method, or the control is already visible. No additional 
actions are performed in the method when Visible is already set to 
<b>True</b>.
</p>
<p>
The return value is always <b>False</b> at design-time. At run-time, the 
InternalShow method is called to display the control (with delayed loading) 
and to set the state for the internal animation timer to the value in 
<var>Animate</var>.
</p>
<p>
Show is called when the value for the <var>Visible</var> property is changed 
to <b>True</b>.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.Animate"/>
<link id="TCustomTrayIcon.Visible"/>
</seealso>
</element>

<element name="TCustomTrayIcon.InternalUpdate">
<short>Updates the control for any pending changes.</short>
<descr>
<p>
The behavior of this method depends on the widgetset.It was added to provide 
a way to update items which either cannot be updated automatically when 
changed, or would be too inefficient to be updated on each change.
</p>
<p>
One example of this is the tray icon menu under LCL-Carbon. It is not 
automatically updated when changes are made to it's associated LCL 
TPopUpMenu, but changes are updated when InternalUpdate is called. This 
happens because the tray icon menus are Cocoa menus which don't match the 
Carbon menus from LCL-Carbon.
</p>
<p>
Similar things happen in other widgetsets, so InternalUpdate can be expected 
to update the menu and/or icon of the tray icon, if this is necessary. If 
such an update is not required, for example because it is automatically 
updated on each change, then InternalUpdate will simply do nothing, so it is 
always a safe function to call, regardless of the widgetset.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTrayIcon.ShowBalloonHint">
<short>
Displays a balloon hint window near the tray icon.
</short>
<descr>
<p>
<var>ShowBalloonHint</var> displays a small balloon-like window near the tray 
icon. It can be used to send notifications about the status of an action, or 
notify of a received message or any other event which doesn't require an 
immediate response.
</p>
<p>
The ShowBalloonHint method in the widgetset class is called to display the 
hint window. For platforms which do not provide native balloon hint support, 
an internal <var>TPopupNotifier</var> is used to display the values in 
<var>BalloonTitle</var> and <var>BalloonHint</var>. GetPosition is called to 
determine the coordinates for the balloon hint, and the ShowAtPos method in 
the pop-up notifier is called to display the values.
</p>
<p>
The balloon hint window disappears after the <var>BalloonHintTimeout</var> 
interval has elapsed, or when the user clicks on the close button for the 
balloon hint.
</p>
<p>
Native balloon hints are implemented for the Windows, QT4, and QT5 platforms. 
Other platforms use the pop-up notifier to emulate the capability.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.BalloonHint"/>
<link id="TCustomTrayIcon.BalloonTitle"/>
<link id="TCustomTrayIcon.BalloonTimeout"/>
<link id="TTimer.Interval"/>
<link id="#lcl.popupnotifier.TPopupNotifier">TPopupNotifier</link>
</seealso>
</element>

<element name="TCustomTrayIcon.GetPosition">
<short>
Gets the position for the tray icon on the display.
</short>
<descr>
<p>
<var>GetPosition</var> is a <var>TPoint</var> function used to get the 
position of the tray icon on the display. GetPosition calls the namesake 
method in the <var>WidgetSetClass</var> to get the location for the tray 
icon. The coordinates in the return value are used to determine the location 
for a BalloonHint window for the tray icon.
</p>
<p>
For the Windows platform, an approximate location in the tray area in the 
Windows taskbar is used. For other platforms, the position is dependent on 
the window manager or desktop environment. It may also contain an empty 
rectangle as the position value.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTrayIcon.Animate">
<short>Indicates if animations are displayed on the tray icon.</short>
<descr>
<p>
<var>Animate</var> is a <var>Boolean</var> property that indicates if the 
tray icon is displayed as an animation.
</p>
<p>
The default value for the property is <b>False</b>. Set Animate to 
<b>True</b> to enable the internal animation timer using the interval in 
<var>AnimateInterval</var>, and to start the animation sequence using the 
images stored in the <var>Icons</var> property. Setting Animate to 
<b>True</b> does not enable the animation timer if the control is not 
<var>Visible</var>.
</p>
<p>
Use the <var>Icon</var> property to set the <var>TIcon</var> instance 
displayed when Animate is set to <b>False</b>.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.AnimateInterval"/>
<link id="TCustomTrayIcon.Visible"/>
<link id="TCustomTrayIcon.Icon"/>
<link id="TCustomTrayIcon.Icon"/>
</seealso>
</element>

<element name="TCustomTrayIcon.AnimateInterval">
<short>
Defines the time interval between updates to the image for the tray icon.
</short>
<descr>
<p>
<var>AnimateInterval</var> is a <var>Cardinal</var> property that defines the 
elapsed time interval between updates to the image displayed on the tray 
icon. The default value for the property is 1000 (milliseconds), and causes 
the animation timer to refresh the image on the tray icon every second.
</p>
<p>
Update the <var>Icons</var> property to contain the bitmap images displayed 
in the animation sequence.
</p>
<p>
Set <var>Animate</var> to <b>True</b> to enable the animation timer using the 
value in AnimateInterval when the control is <var>Visible</var>.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.Icons"/>
<link id="TCustomTrayIcon.Visible"/>
<link id="TTimer"/>
</seealso>
</element>

<element name="TCustomTrayIcon.BalloonFlags">
<short>
Defines the balloon flag displayed for the tray icon balloon hint.
</short>
<descr>
<p>
<var>BalloonFlags</var> is a <var>TBalloonFlags</var> property which 
identifies an icon displayed for the content in the balloon hint window. 
BalloonFlags are used when the widget set class displays the balloon hint 
window for the tray icon. The default value for the property is 
<var>bfNone</var>. See <link id="TBalloonFlags"/> for more information about 
the values in the enumeration and their meanings.
</p>
</descr>
<seealso>
<link id="TBalloonFlags"/>
</seealso>
</element>

<element name="TCustomTrayIcon.BalloonHint">
<short>The text displayed in the balloon hint window.</short>
<descr>
<p>
<var>BalloonHint</var> is a <var>String</var> property which contains the 
text displayed in a balloon hint window. It is used along with 
BalloonTimeout, BalloonTitle, and BalloonFlags in the ShowBalloonHint method. 
It is different than the value in the Hint property; Hint is used for mouse 
hover events.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.BalloonTitle"/>
<link id="TCustomTrayIcon.BalloonFlags"/>
<link id="TCustomTrayIcon.BalloonTimeout"/>
<link id="TCustomTrayIcon.ShowBalloonHint"/>
<link id="TCustomTrayIcon.Hint"/>
</seealso>
</element>

<element name="TCustomTrayIcon.BalloonTimeout">
<short>The interval after which the balloon hint disappears.</short>
<descr>
<p>
<var>BalloonTimeout</var> is an <var>Integer</var> property which contains 
the duration that a balloon hint window is visible before it is closed. The 
default value for the property is 3000 (milliseconds) or 3 seconds.
</p>
<p>
The value in BalloonTimeout is assigned as the internal for the internal 
timer activated when the <var>ShowBalloonHint</var> method is called. Set 
values in BalloonHint, BalloonTitle, BalloonFlags, and BalloonTimeout prior 
to calling the ShowBalloonHint method.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.BalloonHint"/>
<link id="TCustomTrayIcon.BalloonTitle"/>
<link id="TCustomTrayIcon.BalloonFlags"/>
<link id="TCustomTrayIcon.ShowBalloonHint"/>
</seealso>
</element>

<element name="TCustomTrayIcon.BalloonTitle">
<short>Title used for the balloon hint window.</short>
<descr>
<p>
<var>BalloonTitle</var> is a <var>String</var> property which contains the 
title used for a balloon hint window displayed for the control. BalloonTitle 
is used - along with BalloonHint, BalloonTimeout, and BalloonFlags - when the 
ShowBalloonHint method is called.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.BalloonHint"/>
<link id="TCustomTrayIcon.BalloonTimeout"/>
<link id="TCustomTrayIcon.BalloonFlags"/>
<link id="TCustomTrayIcon.ShowBalloonHint"/>
</seealso>
</element>

<element name="TCustomTrayIcon.Canvas">
<short>Canvas for the class instance.</short>
<descr>
<p>
Canvas is a read-only TCanvas property which gets the drawing surface for the 
tray icon control. The property value contains the TCanvas instance provided 
by the widgetset class. For some platforms, this is the canvas for the Icon. 
For others, it is the handle for the system tray class instance.
</p>
<p>
TCustomTrayIcon does not use Canvas directly in its implementation.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTrayIcon.PopUpMenu">
<short>
Pop-up menu displayed when right mouse button is clicked over the icon for 
the control.
</short>
<descr>
<p>
<var>PopUpMenu</var> is a <var>TPopupMenu</var> property which contains the 
menu displayed when the Right mouse button is clicked on the Icon for the 
class instance. Setting a new value for the property causes the existing 
pop-up menu instance to be removed from the free notification list for the 
control. The new pop-up menu instance is added to the free notification list. 
It is used when the widgetset class instance detects a Right mouse button 
event over the control.
</p>
<p>
Use the OnMouseDown, OnMouseMove, or OnMouseUp to implement callbacks for 
mouse events in the widgetset class.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.Icon"/>
<link id="TCustomTrayIcon.OnMouseDown"/>
<link id="TCustomTrayIcon.OnMouseMove"/>
<link id="TCustomTrayIcon.OnMouseUp"/>
<link id="#lcl.menus.TPopUpMenu">TPopUpMenu</link>
</seealso>
</element>

<element name="TCustomTrayIcon.Icon">
<short>The Icon or picture that displayed on the tray icon.</short>
<descr>
<p>
<var>Icon</var> is a <var>Icon</var> property with the static icon displayed 
in the system tray for the control.
</p>
<p>
Use <var>Icons</var> to assign the bitmap images displayed as an animation 
sequence when <var>Animate</var> is set to <b>True</b>.
</p>
<p>
Use <var>ShowIcon</var> to indicate whether the Icon is displayed for the 
control. This feature is platform-specific. Use the <var>OnPaint</var> event 
handler and <var>Canvas</var> to perform drawing operations for the tray icon 
when ShowIcon is set to <b>False</b>.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.OnPaint"/>
<link id="TCustomTrayIcon.Canvas"/>
<link id="TCustomTrayIcon.Icons"/>
<link id="TCustomTrayIcon.Animate"/>
<link id="TCustomTrayIcon.ShowIcon"/>
<link id="#lcl.graphics.TIcon">TIcon</link>
</seealso>
</element>

<element name="TCustomTrayIcon.Icons">
<short>Image list with the bitmaps used for an animated icon.</short>
<descr>
<p>
<var>Icons</var> is a <var>TCustomImageList</var> property with the bitmap 
images displayed for an animated icon. Icons is used when the Animate 
property is set to <b>True</b>.
</p>
<p>
Setting a new value for the property causes the widgetset class to be updated 
when the control is Visible. The current animation step (or frame) is reset 
to 0 to prevent an index out-of-bounds exception.
</p>
<p>
Use Icon to set the single image displayed on the tray icon when Animate is 
set to <b>False</b>.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.Icon"/>
<link id="TCustomTrayIcon.ShowIcon"/>
<link id="TCustomTrayIcon.Animate"/>
<link id="TCustomTrayIcon.AnimateInterval"/>
<link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
</seealso>
</element>

<element name="TCustomTrayIcon.Hint">
<short>
Hint text displayed when the mouse is hovered over the tray icon.
</short>
<descr>
<p>
<var>Hint</var> is a <var>String</var> property with the text displayed when 
the mouse is hovered over the tray icon in the system tray. Changing the 
value for the property causes the <var>InternalUpdate</var> method to be 
called when the control is <var>Visible</var>.
</p>
<p>
Hint is separate and distinct from the value in <var>BalloonHint</var>, which 
is displayed (on supported platforms) when the <var>ShowBalloonHint</var> 
method is called.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.InternalUpdate"/>
<link id="TCustomTrayIcon.Visible"/>
<link id="TCustomTrayIcon.BalloonHint"/>
<link id="TCustomTrayIcon.ShowBalloonHint"/>
</seealso>
</element>

<element name="TCustomTrayIcon.ShowIcon">
<short>
Indicates whether the Icon is drawn by the control (in its widgetset class).
</short>
<descr>
<p>
<var>ShowIcon</var> is a <var>Boolean</var> property which indicates if the 
image in Icon is displayed when the control is redrawn. The default value for 
the property is <b>True</b>, and causes the widgetset class for the control 
to draw the image in <var>Icon</var> when the control is <var>Visible</var>. 
When set to <b>False</b>, it is assumed that the <var>OnPaint</var> event 
handler and <var>Canvas</var> are used to draw the Icon in application code.
</p>
<remark>
The OnPaint event handler is not signalled on the Windows platform.
</remark>
</descr>
<seealso>
<link id="TCustomTrayIcon.Canvas"/>
<link id="TCustomTrayIcon.Icon"/>
<link id="TCustomTrayIcon.OnPaint"/>
<link id="TCustomTrayIcon.Visible"/>
</seealso>
</element>

<element name="TCustomTrayIcon.Visible">
<short>
Indicates if the tray icon is displayed in the system tray.
</short>
<descr>
<p>
Visible is a Boolean property which indicates if the control is displayed in 
the system tray. The default value for the property is <b>False</b>.
</p>
<p>
The value for the property is updated in methods where the control is 
displayed or hidden. It is set to <b>True</b> in the private InternalShow 
method, and to <b>False</b> in the Hide method. Setting a new value for the 
property causes the Show or Hide method to be called depending on the new 
property value.
</p>
<remark>
The value in Visible may continue to be <b>False</b> after calling the Show 
method; it must be successfully displayed by the widgetset class before the 
property is set to <b>True</b>.
</remark>
</descr>
<seealso>
<link id="TCustomTrayIcon.Show"/>
<link id="TCustomTrayIcon.Hide"/>
</seealso>
</element>

<element name="TCustomTrayIcon.OnClick">
<short>
Event handler signalled when a mouse button is single-clicked on the tray 
icon.
</short>
<descr>
<p>
OnClick is a TNotifyEvent property with the event handler signalled when the 
Left mouse button is single-clicked on the tray icon. An application can 
implement and assign an object procedure to the event handler to perform any 
actions needed when the tray icon is clicked.
</p>
<p>
Use OnDblClick to perform actions needed when the Left mouse button is 
double-clicked on the tray icon.
</p>
<remark>
When both OnClick and OnDblClick are assigned, OnClick is signalled twice for 
a mouse double-click event. Once before OnDblClick, and once after OnDblClick.
</remark>
<p>
Use OnMouseUp and OnMouseDown if another mouse button (other than mbLeft), 
the keyboard modifier like Shift/Ctrl/Alt, or the mouse coordinates must be 
examined.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.OnDblClick"/>
<link id="TCustomTrayIcon.OnMouseDown"/>
<link id="TCustomTrayIcon.OnMouseUp"/>
</seealso>
</element>

<element name="TCustomTrayIcon.OnDblClick">
<short>
Event handler signalled when a mouse button is double-clicked on the tray 
icon.
</short>
<descr>
<p>
OnDblClick is a TNotifyEvent property with the Event handler signalled when 
the Left mouse button is double-clicked on the tray icon. An application can 
implement and assign an object procedure to the event handler to perform any 
actions needed when the tray icon is double-clicked.
</p>
<p>
Use OnClick to perform actions needed when the Left mouse button is 
single-clicked on the tray icon.
</p>
<remark>
When both OnClick and OnDblClick are assigned, OnClick is signalled twice for 
a mouse double-click event. Once before OnDblClick, and once after OnDblClick.
</remark>
<p>
Use OnMouseUp and OnMouseDown if another mouse button (other than mbLeft), 
the keyboard modifier like Shift/Ctrl/Alt, or the mouse coordinates must be 
examined.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.OnClick"/>
<link id="TCustomTrayIcon.OnMouseDown"/>
<link id="TCustomTrayIcon.OnMouseUp"/>
</seealso>
</element>

<element name="TCustomTrayIcon.OnMouseDown">
<short>
Event handler signalled when a mouse button down event is detected for the 
tray icon.
</short>
<descr>
<p>
<var>OnMouseDown</var> is a <var>TMouseEvent</var> property with the event 
handler signalled when a mouse button down event is detected for the tray 
icon. Arguments passed to the event handler identify:
</p>
<dl>
<dt>
Sender
</dt>
<dd>
The object for the event notification.
</dd>
<dt>
Button
</dt>
<dd>
The mouse button for the event.
</dd>
<dt>
Shift
</dt>
<dd>
The state for the Shift / Ctrl / Alt keys.
</dd>
<dt>
X and Y
</dt>
<dd>
The current coordinates for the mouse pointer.
</dd>
</dl>
<p>
An application must implement and assign an object procedure using the 
signature for the event handler to respond to the notification.
</p>
<p>
Use OnMouseUp to respond to the mouse up event for a mouse button.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.OnMouseUp"/>
<link id="#lcl.controls.TMouseEvent">TMouseEvent</link>
<link id="#lcl.controls.TMouseButton">TMouseButton</link>
<link id="#rtl.classes.TShiftState">TShiftState</link>
</seealso>
</element>

<element name="TCustomTrayIcon.OnMouseUp">
<short>
Event handler signalled when a mouse button up event is detected for the tray 
icon.
</short>
<descr>
<p>
<var>OnMouseUp</var> is a <var>TMouseEvent</var> property with the event 
handler signalled when a mouse button up event is detected for the tray icon. 
Arguments passed to the event handler identify:
</p>
<dl>
<dt>
Sender
</dt>
<dd>
The object for the event notification.
</dd>
<dt>
Button
</dt>
<dd>
The mouse button for the event.
</dd>
<dt>
Shift
</dt>
<dd>
The state for the Shift / Ctrl / Alt keys.
</dd>
<dt>
X and Y
</dt>
<dd>
The current coordinates for the mouse pointer.
</dd>
</dl>
<p>
An application must implement and assign an object procedure using the 
signature for the event handler to respond to the notification.
</p>
<p>
Use OnMouseDown to respond to the mouse down event for a mouse button.
</p>
</descr>
<seealso>
<link id="TCustomTrayIcon.OnMouseDown"/>
<link id="#lcl.controls.TMouseEvent">TMouseEvent</link>
<link id="#lcl.controls.TMouseButton">TMouseButton</link>
<link id="#rtl.classes.TShiftState">TShiftState</link>
</seealso>
</element>

<element name="TCustomTrayIcon.OnMouseMove">
<short>
Event handler signalled when a WM_MOUSEMOVE message is handled for the tray 
icon.
</short>
<descr>
<p>
<var>OnMouseMove</var> is a <var>TMouseMoveEvent</var> property with the 
event handler signalled when a mouse move message is handled in the message 
processing loop for the task bar / system tray. It is signalled (when 
assigned) when the WM_MOUSEMOVE message is detected in the WndProc routine 
for the system tray. Arguments for the event handler include the Application 
for the event notification, the Ctrl/Alt/Shift state for the mouse event, and 
the current coordinates for the mouse pointer.
</p>
<p>
OnMouseMove is a callback routine provided for the widgetset class instance.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTrayIcon.OnPaint">
<short>
Event handler signalled to implement custom drawing for the tray icon.
</short>
<descr>
<p>
OnPaint is a TNotifyEvent property with the event handler used to implement 
custom drawing for the tray icon. It is signalled when the widgetset class 
executes its internal paint routine. The handle in Canvas is valid when 
OnPaint is executed, and can be used to perform drawing operations for the 
control Icon.
</p>
<remark>
OnPaint is <b>not</b> implemented for the Win32 platform.
</remark>
</descr>
<seealso>
<link id="TCustomTrayIcon.Canvas"/>
<link id="TCustomTrayIcon.Icon"/>
<link id="TCustomTrayIcon.Icons"/>
<link id="#rtl.classes.TNotifyEvent">TNotifyEvent</link>
</seealso>
<notes>
<note>
This needs help. Behavior is widgetset-specific. QT has already drawn the 
clipping rectangle and the icon. What about GTK and Mac?
</note>
</notes>
</element>

<element name="TTrayIcon">
<short>
Implements a multi-platform system tray component.
</short>
<descr>
<p>
<var>TTrayIcon</var> is a <var>TCustomTrayIcon</var> descendant which 
implements a multi-platform System Tray component. It allows an icon to be 
displayed in the system tray when the Application or Form is active. 
TTrayIcon provides properties, methods, and events used to configure, 
display, and control the tray icon. It sets the visibility for properties 
from ancestor classes. The component is supported on multiple platforms, but 
its implementation is platform-specific.
</p>
<p>
On the Windows platform, the system tray is usually located on the 
bottom-right corner of the screen, but it can be located on other edges for 
the physical screen. For other platforms, the position and other features 
varies according to the window or display manager in use.
</p>
<p>
On the GTK2 platform, there are two competing models used in the widgetset 
implementation for the tray icon class: the traditional system tray icon and 
the AppIndicator library. Starting with Lazarus version 3.0, the 
<var>GlobalUseAppInd</var> variable in <file>unitywsctrls,pas</file> can be 
used at run-time to enable, disable, or auto-detect use of the AppIndicator 
library. You <b>MUST</b> use the UnityWSCtrls unit and set the value in 
<var>GlobalUseAppInd</var> <b>BEFORE</b> the tray icon is created, so setting 
the value in the project .LPR file is recommended. Or, create your TrayIcon 
later in the startup process.  The fallback is to use the standard system tray 
icon model in GTK2. This feature applies to the GTK2 platform only, and any 
related code should be wrapped with <b>{$ifdef gtk2}</b>.
</p>
<p>
For an in-depth exploration of using TTrayIcon on GTK2, see the wiki page at:
</p>
<p>
<url href="https://wiki.freepascal.org/How_to_use_a_TrayIcon#UnityWSCtrls.GlobalUseAppInd_GTK2_ONLY">
How to use a TrayIcon
</url>
</p>
<p>
Use Icon to set the icon image type displayed for the control. Use Icons to 
assign a list of images displayed as the animated icon for the control when 
the Show method is called.
</p>
<p>
Use BalloonFlags, BalloonHint, BalloonTimeout and BalloonTitle to format and 
display balloon hints for the tray icon. If balloon hints are not supported 
for the platform, an internal TPopupNotifier is used to display the Hint for 
the control.
</p>
<p>
Use PopUpMenu to set the menu displayed when the icon is right clicked with 
the mouse.
</p>
<p>
Assign routines to the event handlers to perform actions needed when the icon 
is clicked - or when mouse move, up, or down messages are received.
</p>
<remark>
TCustomTrayIcon / TTrayIcon are <b>partially</b> compatible with the Delphi 
VCL component. It adds an OnPaint event handler which does not exist in 
Delphi. It omits properties like IconIndex and OnBalloonClick.
</remark>
</descr>
<seealso>
<link id="TCustomTrayIcon"/>
</seealso>
</element>

<element name="TTrayIcon.BalloonFlags" link="#lcl.extctrls.TCustomTrayIcon.BalloonFlags"/>
<element name="TTrayIcon.BalloonHint" link="#lcl.extctrls.TCustomTrayIcon.BalloonHint"/>
<element name="TTrayIcon.BalloonTimeout" link="#lcl.extctrls.TCustomTrayIcon.BalloonTimeout"/>
<element name="TTrayIcon.BalloonTitle" link="#lcl.extctrls.TCustomTrayIcon.BalloonTitle"/>
<element name="TTrayIcon.PopUpMenu" link="#lcl.extctrls.TCustomTrayIcon.PopUpMenu"/>
<element name="TTrayIcon.Icon" link="#lcl.extctrls.TCustomTrayIcon.Icon"/>
<element name="TTrayIcon.Hint" link="#lcl.extctrls.TCustomTrayIcon.Hint"/>
<element name="TTrayIcon.Visible" link="#lcl.extctrls.TCustomTrayIcon.Visible"/>
<element name="TTrayIcon.OnClick" link="#lcl.extctrls.TCustomTrayIcon.OnClick"/>
<element name="TTrayIcon.OnDblClick" link="#lcl.extctrls.TCustomTrayIcon.OnDblClick"/>
<element name="TTrayIcon.OnMouseDown" link="#lcl.extctrls.TCustomTrayIcon.OnMouseDown"/>
<element name="TTrayIcon.OnMouseUp" link="#lcl.extctrls.TCustomTrayIcon.OnMouseUp"/>
<element name="TTrayIcon.OnMouseMove" link="#lcl.extctrls.TCustomTrayIcon.OnMouseMove"/>
<element name="TTrayIcon.OnPaint" link="#lcl.extctrls.TCustomTrayIcon.OnPaint"/>

<element name="TBandDrawingStyle">
<short>Represents the drawing styles available for tool bar bands.</short>
<descr>
<p>
<var>TBandDrawingStyle</var> is an enumeration type with values representing 
the drawing styles available for tool bar bands. TBandDrawingStyle is the 
type used for the <var>DrawingStyle</var> property in 
<var>TCustomControlBar</var>.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.DrawingStyle"/>
</seealso>
</element>
<element name="TBandDrawingStyle.dsNormal">
<short>
Bands are drawn normally using the color for the control bar.
</short>
</element>
<element name="TBandDrawingStyle.dsGradient">
<short>Bands are drawn using a gradient for the background colors.</short>
</element>

<element name="TBandPaintOption">
<short>
Represents the paint options enabled when drawing a TControlBar.
</short>
<descr>
<p>
<var>TBandPaintOption</var> is an enumerated type with values that represent 
the paint options enabled when drawing a <var>TControlBar</var> instance. 
Values from TBandPaintOption are stored in the <var>TBandPaintOptions</var> 
type, and passed as an argument to a <var>TBandPaintEvent</var> event handler.
</p>
</descr>
<seealso/>
</element>
<element name="TBandPaintOption.bpoGrabber">
<short>Band is drawn with a grabber or gripper.</short>
</element>
<element name="TBandPaintOption.bpoFrame">
<short>Band is drawn with a frame around the outer edges.</short>
</element>
<element name="TBandPaintOption.bpoGradient">
<short>Band is drawn using a gradient in the background color.</short>
</element>
<element name="TBandPaintOption.bpoRoundRect">
<short>
Not used internally, but available to the OnBandPaint event in TControlBar.
</short>
</element>

<element name="TBandPaintOptions">
<short>
Set type used to store values from the TBandPaintOption enumeration.
</short>
<descr>
<p>
<var>TBandPaintOptions</var> is the type passed as an argument in a 
<var>TBandPaintEvent</var> event handler. Values in the set determine the 
drawing style used to display a band on a TControlBar instance.
</p>
</descr>
<seealso>
<link id="TBandPaintOption"/>
<link id="TBandPaintEvent"/>
<link id="TCustomControlBar.DoBandPaint"/>
<link id="TCustomControlBar.Paint"/>
</seealso>
</element>

<element name="TBandDragEvent">
<short>
Specifies an event handler signalled when a control on a band is dragged.
</short>
<descr>
<p>
TBandDragEvent is the type used to implement the OnBandDrag property in 
TCustomControlBar.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.OnBandDrag"/>
<link id="TCustomControlBar.DragControl"/>
</seealso>
</element>
<element name="TBandDragEvent.Sender">
<short>Object (TCustomControlBar) for the event notification.</short>
</element>
<element name="TBandDragEvent.Control">
<short>Control for the drag event.</short>
</element>
<element name="TBandDragEvent.Drag">
<short>
<b>True</b> if the control can be dragged and the DragManager can be used to 
start the drag operation.
</short>
</element>

<element name="TBandInfoEvent">
<short>
Specifies an event handler used to get layout and positioning information for 
a control on a band in TControlBar.
</short>
<descr>
<p>
TBandInfo is the type used to implement the OnBandInfo event handler in 
TCustomControlBar.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.OnBandInfo"/>
<link id="TCustomControlBar.GetControlInfo"/>
<link id="TCustomControlBar.InsertControl"/>
</seealso>
</element>
<element name="TBandInfoEvent.Sender">
<short>Object (TCustomControlBar) for the notification event.</short>
</element>
<element name="TBandInfoEvent.Control">
<short>Control for the event notification.</short>
</element>
<element name="TBandInfoEvent.Insets">
<short>Bounds rectangle for the specified control.</short>
</element>
<element name="TBandInfoEvent.PreferredSize">
<short>
Default width for the control on entry. Can be updated in the handler routine.
</short>
</element>
<element name="TBandInfoEvent.RowCount">
<short>
Number of rows that can be displayed based on the Height and RowSize for the 
control bar.
</short>
</element>

<element name="TBandMoveEvent">
<short>
Specifies an event handler signalled when a control band is moved.
</short>
<descr>
<p>
<var>TBandMoveEvent</var> is the type used to implement the OnBandMove 
property in TCustomControlBar.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.OnBandMove"/>
<link id="TCustomControlBar.DoBandMove"/>
<link id="TCustomControlBar.MoveBand"/>
<link id="TCustomControlBar.InitializeBand"/>
</seealso>
</element>
<element name="TBandMoveEvent.Sender">
<short>Object (TCustomControlBar) for the event notification.</short>
</element>
<element name="TBandMoveEvent.Control">
<short>Control for the event notification.</short>
</element>
<element name="TBandMoveEvent.ARect">
<short>
Updated display rectangle for the control returned from the handler.
</short>
</element>

<element name="TBandPaintEvent">
<short>
Specifies an event handler used to perform actions needed when a band in 
TCustomControlBar is painted.
</short>
<descr>
<p>
<var>TBandPaintEvent</var> specifies an object procedure used to perform 
actions needed when a band in <var>TCustomControlBar</var> control is 
painted. TBandPaintEvent is the type used to implement the 
<var>OnBandPaint</var> event handler in <var>TCustomControlBar</var>.
</p>
<p>
Arguments passed to the procedure identify the TCustomControlBar drawn in the 
band, and the <var>Canvas</var> and drawing rectangle used in the drawing 
operation. <var>Options</var> define the drawing features enabled for the 
band.
</p>
</descr>
<seealso>
<link id="TCustomControlBar"/>
<link id="TCustomControlBar.Paint"/>
<link id="TCustomControlBar.OnBandPaint"/>
<link id="TCustomControlBar.DoBandPaint"/>
</seealso>
</element>
<element name="TBandPaintEvent.Sender">
<short>Object for the notification.</short>
</element>
<element name="TBandPaintEvent.Control">
<short>Control which owns the control band for the notification.</short>
</element>
<element name="TBandPaintEvent.ACanvas">
<short>
Canvas for the control bar where the handler draws the control band.
</short>
</element>
<element name="TBandPaintEvent.ARect">
<short>Dimensions for the control bar band.</short>
</element>
<element name="TBandPaintEvent.Options">
<short>Paint options for the control bar.</short>
</element>

<element name="TRowSize">
<short>
Defines the range of values available for the RowSize property in 
TCustomControlBar.
</short>
<descr>
<p>
TRowSize a range type which defines the range of values available for the 
RowSize property in TCustomControlBar. Essentially, any positive non-zero 
Integer value. TRowSize is the type used to implement the RowSize property in 
TCustomControlBar.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.RowSize"/>
</seealso>
</element>

<element name="TBandMove">
<short>Represents band move states in TCtrlBand.</short>
<descr>
<p>
Used in the implementation of MouseUp, MouseMove, and MouseDown methods in 
TCustomControlBar.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.MouseDown"/>
<link id="TCustomControlBar.MouseMove"/>
<link id="TCustomControlBar.MouseUp"/>
</seealso>
</element>
<element name="TBandMove.bmNone">
<short>A control band cannot be dragged.</short>
</element>
<element name="TBandMove.bmReady">
<short>A control band is ready for a drag operation.</short>
</element>
<element name="TBandMove.bmMoving">
<short>A control band is being dragged after a mouse down event.</short>
</element>

<element name="TCursorDesign">
<short>
Represents cursor shapes displayed when the mouse hovers over different areas 
in a control band.
</short>
<descr/>
<seealso/>
</element>
<element name="TCursorDesign.cdDefault">
<short>Uses the default cursor shape.</short>
</element>
<element name="TCursorDesign.cdGrabber">
<short>Uses the grabber cursor shape.</short>
</element>
<element name="TCursorDesign.cdRestricted">
<short>Uses the "not available" cursor shape.</short>
</element>

<element name="TCtrlBand">
<short>Represents a band and control displayed by TControlBar.</short>
<descr>
<p>
<var>TCtrlBand</var> is a class used to represent a band displayed on 
TCustomControlBar / TControlBar. It provides properties needed for the 
Control drawn on the band, its visibility, and position and size information.
</p>
<p>
<var>TCtrlBand</var> is the type created and stored in the 
<var>TCtrlBands</var> container.
</p>
</descr>
<seealso>
<link id="TCtrlBands"/>
</seealso>
</element>

<element name="TCtrlBand.FControl"/>
<element name="TCtrlBand.FControlHeight"/>
<element name="TCtrlBand.FControlLeft"/>
<element name="TCtrlBand.FControlTop"/>
<element name="TCtrlBand.FControlVisible"/>
<element name="TCtrlBand.FControlWidth"/>
<element name="TCtrlBand.FHeight"/>
<element name="TCtrlBand.FInitLeft"/>
<element name="TCtrlBand.FInitTop"/>
<element name="TCtrlBand.FLeft"/>
<element name="TCtrlBand.FTop"/>
<element name="TCtrlBand.FVisible"/>
<element name="TCtrlBand.FWidth"/>

<element name="TCtrlBand.GetBandRect">
<short>Gets the value for the BandRect property.</short>
<descr/>
<seealso>
<link id="TCtrlBand.BandRect"/>
</seealso>
</element>
<element name="TCtrlBand.GetBandRect.Result">
<short>Value for the BandRect property.</short>
</element>

<element name="TCtrlBand.GetBottom">
<short>Gets the value for the Bottom property.</short>
<descr/>
<seealso>
<link id="TCtrlBand.Bottom"/>
</seealso>
</element>
<element name="TCtrlBand.GetBottom.Result">
<short>Value for the Bottom property.</short>
</element>

<element name="TCtrlBand.GetRight">
<short>Gets the value for the Right property.</short>
<descr/>
<seealso>
<link id="TCtrlBand.Right"/>
</seealso>
</element>
<element name="TCtrlBand.GetRight.Result">
<short>Value for the Right property.</short>
</element>

<element name="TCtrlBand.SetBandRect">
<short>Sets the value for the BandRect property.</short>
<descr/>
<seealso>
<link id="TCtrlBand.BandRect"/>
</seealso>
</element>
<element name="TCtrlBand.SetBandRect.AValue">
<short>New value for the BandRect property.</short>
</element>

<element name="TCtrlBand.SetRight">
<short>Sets the value for the Right property.</short>
<descr/>
<seealso>
<link id="TCtrlBand.Right"/>
</seealso>
</element>
<element name="TCtrlBand.SetRight.AValue">
<short>New value for the Right property.</short>
</element>

<element name="TCtrlBand.BandRect">
<short>Contains the bounds for the band control.</short>
<descr>
<p>
<var>BandRect</var> is a <var>TRect</var> property which contains the bounds 
for the band control. BandRect is used in methods which set the layout and 
placement for the band control, like <var>InitializeBand</var> and 
<var>MoveBand</var>.
</p>
<p>
Values in BandRect are read from the Left, Right, Width, and Height 
properties in the control. When setting the value for the property, the Left, 
Right, Width, and Height properties are updated using the values provided in 
the rectangle.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.Bottom">
<short>Position of the bottom of the band control.</short>
<descr>
<p>
<var>Bottom</var> is a read-only <var>Integer</var> property which contains 
the vertical position that is the bottom of the band control. The value in 
Bottom is derived using the Top and Height properties, which are updated when 
a value is assigned to the <var>BandRect</var> property.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.Control">
<short>Contains the control displayed on the band.</short>
<descr>
<p>
<var>Control</var> is a <var>TControl</var> property which contains the 
<var>TToolBar</var> or <var>TToolButton</var> displayed in the band control. 
The value in Control is assigned in either the <var>Loaded</var> or the 
<var>InsertControl</var> methods in <var>TCustomControlBar</var>.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.ControlHeight">
<short>
Stored Height for the Control used during resizing.
</short>
<descr>
<p>
<var>ControlHeight</var> is an <var>Integer</var> property which represents 
the height for the <var>TWinControl</var> in the <var>Control</var> property. 
The value in ControlHeight is assigned when a <var>TCustomControlBar</var> is 
aligned to the band control.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.ControlLeft">
<short>
Stored Left position for the Control used in comparisons during resizing.
</short>
<descr>
<p>
The value is updated in the AlignControlToBand method in TCustomControlBar, 
and provides convenient access to the property value in Control.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.ControlTop">
<short>
Stored Top position for the Control used in comparisons during resizing.
</short>
<descr>
<p>
The value is updated in the AlignControlToBand method in TCustomControlBar, 
and provides convenient access to the property value in Control.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.ControlWidth">
<short>
Stored Width for the Control used in comparisons during resizing.
</short>
<descr>
<p>
The value is updated in the AlignControlToBand method in TCustomControlBar, 
and provides convenient access to the property value in Control.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.ControlVisible">
<short>
Stores the visibility for the Control.
</short>
<descr>
<p>
Updated and used in the CheckBandsSizeAndVisibility method in 
TCustomControlBar.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.Height">
<short>
Stored Height for the band used in comparisons during resizing.
</short>
<descr>
<p>
The value is updated in the AlignControlToBand method in TCustomControlBar, 
and provides convenient access to the property value in Control.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.InitLeft">
<short>
Stores the initial Left position for the band during a move operation.
</short>
<descr>
<p>
Updated in the InitializeMove method in TCustomControlBar.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.InitTop">
<short>
Stores the initial Top position for the band during a move operation.
</short>
<descr>
<p>
Updated in the InitializeMove method in TCustomControlBar.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.Left">
<short>Contains the Left position for the band.</short>
<descr>
<p>
Updated when a value is assigned to the BandRect property, and in the 
AlignControlToBand method in TCustomControlBar.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.Right">
<short>Contains the Right position for the band.</short>
<descr>
<p>
Updated when a value is assigned to the BandRect property, and in the 
AlignControlToBand method in TCustomControlBar.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.Top">
<short>Contains the Top position for the band.</short>
<descr>
<p>
Updated when a value is assigned to the BandRect property, and in the 
AlignControlToBand method in TCustomControlBar.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.Visible">
<short>Indicates if the band and its Control are visible.</short>
<descr>
</descr>
<seealso/>
</element>

<element name="TCtrlBand.Width">
<short>Contains the dimensions for the band.</short>
<descr>
<p>
Updated when a value is assigned to the BandRect property, and in the 
AlignControlToBand method in TCustomControlBar.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBands">
<short>Container used to store TCtrlBand instances.</short>
<descr>
<p>
<var>TCtrlBands</var> is a container for <var>TCtrlBand</var> instances. 
TCtrlBands provides a GetIndex method used to access TCtrlBand items stored 
in the container by their ordinal positions.
</p>
</descr>
<seealso/>
</element>

<element name="TCtrlBands.GetIndex">
<short>
Gets the ordinal position for the specified control in the container.
</short>
<descr/>
<seealso/>
</element>
<element name="TCtrlBands.GetIndex.Result">
<short>
Ordinal position for the requested control, or -1 when not found in the 
container.
</short>
</element>
<element name="TCtrlBands.GetIndex.AControl">
<short>The control to locate in the TCtrlBand items in the container.</short>
</element>

<element name="TCustomControlBar">
<short>
Implements a panel used to maintain and manage tool bars and tool buttons on 
a form.
</short>
<descr>
<p>
<var>TCustomControlBar</var> is a <var>TCustomPanel</var> descendant used to 
maintain and manage tool bars and tool buttons added to the container.
</p>
<p>
Internally, it uses a TCtrlBands member to represent the <var>TToolBar</var>, 
<var>TToolButton</var>, or <var>TCoolBar</var> classes added to the 
container. Use <var>InsertControl</var> and <var>RemoveControl</var> to 
maintain items in the container at run-time, or use the design-time support 
provided in the Lazarus Form Designer.
</p>
</descr>
<seealso>
<link id="TCustomPanel"/>
<link id="TCtrlBands"/>
<link id="#lcl.comctrls.TToolBar">TToolBar</link>
<link id="#lcl.comctrls.TCoolBar">TCoolBar</link>
<link id="#lcl.comctrls.TToolButton">TToolButton</link>
</seealso>
</element>

<element name="TCustomControlBar.FAutoDrag"/>
<element name="TCustomControlBar.FAutoDock"/>
<element name="TCustomControlBar.FDrawingStyle"/>
<element name="TCustomControlBar.FGradientDirection"/>
<element name="TCustomControlBar.FGradientEndColor"/>
<element name="TCustomControlBar.FGradientStartColor"/>
<element name="TCustomControlBar.FPicture"/>
<element name="TCustomControlBar.FRowSize"/>
<element name="TCustomControlBar.FRowSnap"/>
<element name="TCustomControlBar.FOnBandDrag"/>
<element name="TCustomControlBar.FOnBandInfo"/>
<element name="TCustomControlBar.FOnBandMove"/>
<element name="TCustomControlBar.FOnBandPaint"/>
<element name="TCustomControlBar.FOnCanResize"/>
<element name="TCustomControlBar.FOnPaint"/>

<element name="TCustomControlBar.SetDrawingStyle">
<short>Sets the value for the DrawingStyle property.</short>
<descr/>
<seealso>
<link id="TCustomControlBar.DrawingStyle"/>
</seealso>
</element>
<element name="TCustomControlBar.SetDrawingStyle.AValue">
<short>New value for the DrawingStyle property.</short>
</element>

<element name="TCustomControlBar.SetGradientDirection">
<short>Sets the value for the GradientDirection property.</short>
<descr/>
<seealso>
<link id="TCustomControlBar.GradientDirection"/>
</seealso>
</element>
<element name="TCustomControlBar.SetGradientDirection.AValue">
<short>New value for the GradientDirection property.</short>
</element>

<element name="TCustomControlBar.SetGradientEndColor">
<short>Sets the value for the GradientEndColor property.</short>
<descr/>
<seealso>
<link id="TCustomControlBar.GradientEndColor"/>
</seealso>
</element>
<element name="TCustomControlBar.SetGradientEndColor.AValue">
<short>New value for the GradientEndColor property.</short>
</element>

<element name="TCustomControlBar.SetGradientStartColor">
<short>Sets the value for the GradientStartColor property.</short>
<descr/>
<seealso>
<link id="TCustomControlBar.GradientStartColor"/>
</seealso>
</element>
<element name="TCustomControlBar.SetGradientStartColor.AValue">
<short>New value for the GradientStartColor property.</short>
</element>

<element name="TCustomControlBar.SetPicture">
<short>Sets the value for the Picture property.</short>
<descr/>
<seealso>
<link id="TCustomControlBar.Picture"/>
</seealso>
</element>
<element name="TCustomControlBar.SetPicture.aValue">
<short>New value for the Picture property.</short>
</element>

<element name="TCustomControlBar.SetRowSize">
<short>Sets the value for the RowSize property.</short>
<descr/>
<seealso>
<link id="TCustomControlBar.RowSize"/>
</seealso>
</element>
<element name="TCustomControlBar.SetRowSize.AValue">
<short>New value for the RowSize property.</short>
</element>

<element name="TCustomControlBar.cBandBorderH">
<short>Space reserved for the horizontal border in a control bar.</short>
</element>

<element name="TCustomControlBar.cBandBorderV">
<short>Space reserved for the vertical border in a control bar </short>
</element>

<element name="TCustomControlBar.cGrabWidth">
<short>Space reserved as the width of the grabber in a control bar.</short>
</element>

<element name="TCustomControlBar.cFullGrabber">
<short>
Space needed for the width of the grabber including the control bar and its 
border.
</short>
</element>

<element name="TCustomControlBar.FBands">
<short>
Member with the list of TCtrlBand instances for the control bar.
</short>
</element>

<element name="TCustomControlBar.FBandMove">
<short>Member with the band move status flag for the control bar.</short>
</element>

<element name="TCustomControlBar.FCursorLock">
<short>
Member with the cursor lock flag set when ChangeCursor is called.
</short>
</element>

<element name="TCustomControlBar.FDefCursor">
<short>Member with the default cursor shape for the control bar.</short>
</element>

<element name="TCustomControlBar.FHoveredBand">
<short>
Member with the band under the mouse cursor during a drag operation.
</short>
</element>

<element name="TCustomControlBar.FInitDrag">
<short>
Member with the initial coordinates for the band being dragged on the control 
bar.
</short>
</element>

<element name="TCustomControlBar.FInnerBevelWidth">
<short>
Member with the width for inner bevels following a CM_BORDERCHANGED control 
message.
</short>
</element>

<element name="TCustomControlBar.FLockResize">
<short>
Member with a flag set to prevent resizing while the row size is updated for 
the control bar.
</short>
</element>

<element name="TCustomControlBar.FPrevWidth">
<short>
Member with the Width for the control bar after its Handle is created.
</short>
</element>

<element name="TCustomControlBar.FVisiBands">
<short>Member with the visible bands for the control bar.</short>
</element>

<element name="TCustomControlBar.FVisiBandsEx">
<short>
Member with the visible bands on the control bar excluding a band being 
dragged.
</short>
</element>

<element name="TCustomControlBar.AlignControlToBand">
<short>
Aligns the control for the specified band and updates its coordinates for use 
in subsequent resize operations.
</short>
<descr>
<p>
<var>AlignControlToBand</var> updates values in ABand to ensure that the 
Control for the band is centered vertically within its bounds and positioned 
for the setting in ARightToLeft. Values from the Control are stored in the 
ControlLeft, ControlTop, ControlHeight, and ControlWidth properties in the 
control band. This allows the values to be used in subsequent resize 
operations.
</p>
<p>
AlignControlToBand is called from the AlignControlsToBands and InitializeBand 
methods.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.AlignControlsToBands"/>
<link id="TCustomControlBar.InitializeBand"/>
<link id="TCtrlBand.Control"/>
<link id="TCtrlBand.ControlLeft"/>
<link id="TCtrlBand.ControlTop"/>
<link id="TCtrlBand.ControlWidth"/>
<link id="TCtrlBand.ControlHeight"/>
</seealso>
</element>
<element name="TCustomControlBar.AlignControlToBand.ABand">
<short>
TCtrlBand with the control positioned and aligned in the method.
</short>
</element>
<element name="TCustomControlBar.AlignControlToBand.ARightToLeft">
<short>
<b>True</b> if right-to-left layout is used for the band decorations and 
control.
</short>
</element>

<element name="TCustomControlBar.AlignControlsToBands">
<short>Aligns visible control bands in the container.</short>
<descr>
<p>
AlignControlsToBands calls the AlignControlToBand method to position and 
align the visible bands on the control bar.
</p>
<p>
It temporarily disables auto-sizing during the alignment process. Auto-sizing 
is restored prior to exit.
</p>
<p>
AlignControlsToBands is called from the CMBorderChanged, MoveBand, 
StickControls, and Resize methods. It is also called when a new value is 
assigned to the RowSize property.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.AlignControlToBand"/>
<link id="TCustomControlBar.AutoSize"/>
<link id="TCustomControlBar.Resize"/>
<link id="TCustomControlBar.RowSize"/>
<link id="TCustomControlBar.MoveBand"/>
<link id="TCustomControlBar.StickControls"/>
<link id="TCustomControlBar.CMBorderChanged"/>
</seealso>
</element>

<element name="TCustomControlBar.CalcBandHeight">
<short>
Calculates the vertical space needed for a band the control bar.
</short>
<descr>
<p>
<var>CalcBandHeight</var> is an <var>Integer</var> function used to calculate 
the vertical size for a TCtrlBand instance on the control bar.
</p>
<p>
The return value is normally assigned to the TCtrlBand.Height property when 
the band is created and aligned. When RowSnap is enabled for the control bar, 
the CalcBandHeightSnapped method is called to get the return value. 
Otherwise, the return value is calculated as the Height for the specified 
Control less the space needed for its vertical borders.
</p>
<p>
CalcBandHeight is called from the InitializeBand method and when the control 
is loaded using the LCL streaming mechanism.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.CalcBandHeightSnapped"/>
<link id="TCustomControlBar.InitializeBand"/>
<link id="TCustomControlBar.Loaded"/>
<link id="TCtrlBand.Height"/>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
</seealso>
</element>
<element name="TCustomControlBar.CalcBandHeight.Result">
<short>Number of pixels need for the height of the control bar.</short>
</element>
<element name="TCustomControlBar.CalcBandHeight.AControl">
<short>The band Control examined in the method.</short>
</element>

<element name="TCustomControlBar.CalcBandHeightSnapped">
<short>
Calculates the vertical space needed for a band on the control bar when 
RowSnap is enabled.
</short>
<descr>
<p>
<var>CalcBandHeightSnapped</var> is an <var>Integer</var> function used to 
calculate the height for the bands on the control bar when RowSnap is enabled.
</p>
<p>
The RowSize property contains the height for an individual band, and is used 
as a divisor to determine the number of visible bands given the overall 
height for the Control. Space is reserved for borders on each band using the 
cBandBorderV constant.
</p>
<p>
The return value contains the space required for the number of visible bands 
using the calculated row size.
</p>
<p>
CalcBandHeightSnapped is a called from the CalcBandHeight method when RowSnap 
is enabled for the control. It is also called from 
CheckBandsSizeAndVisibility for each of the visible bands on the control bar.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.RowSize"/>
<link id="TCustomControlBar.RowSnap"/>
<link id="TCustomControlBar.CalcBandHeight"/>
<link id="TCustomControlBar.CheckBandsSizeAndVisibility"/>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
</seealso>
</element>
<element name="TCustomControlBar.CalcBandHeightSnapped.Result">
<short>
Number of pixels needed for the specified band when RowSnap is enabled.
</short>
</element>
<element name="TCustomControlBar.CalcBandHeightSnapped.AControl">
<short>
Control on the TCtrlBand instance with the total height used in the method.
</short>
</element>

<element name="TCustomControlBar.CalcInnerBevelWidth">
<short>
Calculates the cumulative width for all borders and bevels used on the 
control bar.
</short>
<descr>
<p>
Uses values in the BevelInner, BevelOuter, BevelWidth, and BorderWidth 
properties to calculate the return value.
</p>
<p>
Called from the CalculatePreferredSize, CMBorderChanged, and Paint methods.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.CalculatePreferredSize"/>
<link id="TCustomControlBar.CMBorderChanged"/>
<link id="TCustomControlBar.Paint"/>
<link id="TCustomPanel.BevelInner"/>
<link id="TCustomPanel.BevelOuter"/>
<link id="TCustomPanel.BevelWidth"/>
<link id="#lcl.controls.TWinControl.BorderWidth">TWinControl.BorderWidth</link>
</seealso>
</element>
<element name="TCustomControlBar.CalcInnerBevelWidth.Result">
<short>
Number of pixels needed for the bevels and borders on the control bar.
</short>
</element>

<element name="TCustomControlBar.CalcLowestBandBottomPx">
<short>
Gets the largest value in the Bottom property for visible bands on the 
control bar.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomControlBar.CalcLowestBandBottomPx.Result">
<short>Largest value in the Bottom property for bands on the control.</short>
</element>

<element name="TCustomControlBar.CalculatePreferredSize">
<short>
Calculates the preferred height and width used during auto-sizing.
</short>
<descr>
<p>
<var>CalculatePreferredSize</var> is an overridden method in 
<var>TCustomControlBar</var>. It re-implements the method from the ancestor 
class.
</p>
<p>
CheckBandsSizeAndVisibility is called to initialize the TCtrlBand instances 
on the control, and to order the bands which have visible controls by their 
display coordinates.
</p>
<p>
PreferredWidth and PreferredHeight are variable arguments which contain the 
preferred dimensions for a new instance of the control. In TCustomControlBar, 
PreferredWidth is set to 0 to trigger the auto-sizing feature specified in 
ControlStyle. PreferredHeight is set to the value from the 
CalcLowestBandBottomPx method, and actually contains the largest value in the 
Bottom property for the visible controls on the control bands. A positive 
non-zero value in PreferredHeight also includes the space needed for inner 
bevels on the control bands.
</p>
<p>
CalculatePreferredSize is called when LCL auto-sizing algorithms are executed 
for the control.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.CheckBandsSizeAndVisibility"/>
<link id="TCustomControlBar.SortVisibleBands"/>
<link id="#lcl.controls.TWinControl.CalculatePreferredSize">TWinControl.CalculatePreferredSize</link>
</seealso>
</element>
<element name="TCustomControlBar.CalculatePreferredSize.PreferredWidth">
<short>
Preferred width for a new instance of the control, or 0 to enable auto-sizing.
</short>
</element>
<element name="TCustomControlBar.CalculatePreferredSize.PreferredHeight">
<short>
Preferred height for a new instance of the control, or 0 to enable 
auto-sizing.
</short>
</element>
<element name="TCustomControlBar.CalculatePreferredSize.WithThemeSpace">
<short>
Ignored in TCustomControlBar.
</short>
</element>

<element name="TCustomControlBar.ChangeCursor">
<short>Changes the cursor to the specified shape.</short>
<descr>
<p>
ACursor contains the cursor shape requested in the method. The value in 
ACursor is translated into one the following cursor constants, and assigned 
to the Cursor property:
</p>
<dl>
<dt>cdDefault</dt>
<dd>Uses the default Cursor for the control.</dd>
<dt>cdGrabber</dt>
<dd>Uses the crDrag cursor constant as the cursor shape.</dd>
<dt>cdRestricted</dt>
<dd>Uses the crNo cursor constant as the cursor shape.</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TCustomControlBar.ChangeCursor.ACursor">
<short>Cursor shape requested in the method.</short>
</element>

<element name="TCustomControlBar.CheckBandsSizeAndVisibility">
<short>
Updates the size and visibility for TCtrlBand instances defined in the 
control bar.
</short>
<descr>
<p>
Calls InitializeBand (when needed) for a TCtrlBand with a visibility 
different than the value in the control bar. Calls SortVisibleBands when a 
TCtrlBand is hidden. Calls NormalizeRows to display TCtrlBand instances in 
the order defined by their Bottom property. Recalculates the positions and 
dimensions for visible TCtrlBand instances, including the space reserved for 
the Grabber bar and borders.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomControlBar.CMBiDiModeChanged">
<short>Handles the CM_BIDIMODECHANGED message.</short>
<descr>
<p>
CMBiDiModeChanged calls the inherited method on entry to notify child 
controls that the value in BidiMode has been changed. Each of the TCtrlBand 
instances on the control bar are updated so that the Left coordinate for the 
bands is correct for the Width of the control bar and the new value in 
BiDiMode. AutoSize is temporarily disabled while the bands are repositioned. 
</p>
</descr>
<seealso>
<link id="TCtrlBands"/>
<link id="TCtrlBand.Left"/>
<link id="TCtrlBand.Width"/>
<link id="#lcl.controls.TControl.Width">TControl.Width</link>
<link id="#lcl.controls.TControl.DisableAutoSizing">TControl.DisableAutoSizing</link>
<link id="#lcl.controls.TControl.EnableAutoSizing">TControl.EnableAutoSizing</link>
<link id="#lcl.controls.TWinControl.CMBiDiModeChanged">TWinControl.CMBiDiModeChanged</link>
</seealso>
</element>
<element name="TCustomControlBar.CMBiDiModeChanged.Message">
<short>Control message handled in the method.</short>
</element>

<element name="TCustomControlBar.CMBorderChanged">
<short>Handles the CM_BORDERCHANGED message.</short>
<descr>
<p>
<var>CMBorderChanged</var> calls the inherited method on entry to adjust the 
client rectangle and control size when a border is added to or removed from 
the control.
</p>
<p>
CalcInnerBevelWidth is called to get the space reserved for the settings in 
BevelInner and BevelOuter. If the calculated value differs from the previous 
value, the Top coordinate for each of the TCtrlBand instances on the control 
are shifted to their new positions. AlignControlsToBands is called to align 
the controls for the bands to their new positions. If IsRightToLeft returns 
True, the Left coordinate in each of the bands is also shifted.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.CalcInnerBevelWidth"/>
<link id="TCtrlBands"/>
<link id="TCtrlBand.Top"/>
<link id="TCtrlBand.Left"/>
<link id="#lcl.controls.TWinControl.CMBorderChanged">TWinControl.CMBorderChanged</link>
<link id="#lcl.controls.TControl.IsRightToLeft">TControl.IsRightToLeft</link>
</seealso>
</element>
<element name="TCustomControlBar.CMBorderChanged.Message">
<short>Control message handled in the method.</short>
</element>

<element name="TCustomControlBar.CreateWnd">
<short>
Ensures the default values taken from Cursor and Width are assigned when the 
window handle is created.
</short>
<descr>
<p>
<var>CreateWnd</var> is an overridden method in <var>TCustomControlBar</var>. 
It calls the inherited method to update the window control flags and creation 
parameters when the handle is allocated for the control.
</p>
<p>
CreateWnd ensures that existing values in the Cursor and Width properties are 
applied to the internal default values used in the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
<link id="#lcl.controls.TControl.Cursor">TControl.Cursor</link>
<link id="#lcl.controls.TControl.Width">TControl.Width</link>
</seealso>
</element>

<element name="TCustomControlBar.DoBandMove">
<short>
Signals the OnBandMove event handler for the specified control and drawing 
rectangle.
</short>
<descr>
<p>
<var>DoBandMove</var> is a method used to signal the OnBandMove event handler 
(when assigned) using the arguments passed to the method. AControl is the 
control displayed on the TCtrlBand instance moved in the method. ARect 
contains the display area for the control derived from the coordinates for 
the band.
</p>
<p>
DoBandMove is called from the InitializeBand and MoveBand methods.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.OnBandMove"/>
<link id="TCustomControlBar.InitializeBand"/>
<link id="TCustomControlBar.MoveBand"/>
<link id="TCtrlBand"/>
</seealso>
</element>
<element name="TCustomControlBar.DoBandMove.AControl">
<short>
Control on the band moved in the method.
</short>
</element>
<element name="TCustomControlBar.DoBandMove.ARect">
<short>
Display rectangle for the band moved in the method.
</short>
</element>

<element name="TCustomControlBar.DoBandPaint">
<short>
Signals the OnBandPaint event handler using the specified arguments.
</short>
<descr>
<p>
DoBandPaint is a method used to draw the specified control for a visible 
TCtrlBand to the Canvas for the control. It is called from the Paint method 
for each off the visible bands on the control.
</p>
<p>
Use the OnBandPaint event handler to perform actions needed to configure the 
Canvas or render the control instance.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomControlBar.DoBandPaint.AControl">
<short>Control for the band rendered in the method.</short>
</element>
<element name="TCustomControlBar.DoBandPaint.ACanvas">
<short>Canvas where the band (and the control) are drawn.</short>
</element>
<element name="TCustomControlBar.DoBandPaint.ARect">
<short>Display area for the band and control drawn in the method.</short>
</element>
<element name="TCustomControlBar.DoBandPaint.AOptions">
<short>
Set of TBandPaintOption value which control the decorations and drawing style 
for the band.
</short>
</element>

<element name="TCustomControlBar.DragControl">
<short>
Signals an assigned OnBandDrag event handler and starts a drag operation for 
the specified control.
</short>
<descr>
<p>
<var>DragControl</var> is a <var>Boolean</var> function used to start a drag 
operation using the control bar band for the control under the mouse pointer. 
DragControl is called from the MouseMove method, and occurs when a drag 
operation for a band on the control is auto-started.
</p>
<p>
<var>AControl</var> is the optional control on the band to be dragged in the 
method. If the band does not have a control, the argument value is <b>Nil</b>.
</p>
<p>
The <var>X</var> and <var>Y</var> arguments contain the coordinates for the 
mouse pointer when the mouse movement was detected and handled in MouseMove.
</p>
<p>
The return value is set to <b>True</b> on entry.
</p>
<p>
DragControl signals the OnBandDrag event handler (when assigned) to determine 
whether the control bar allows the specified control to the dragged. The 
handler routine can set the return value to <b>False</b> to prevent the drag 
operation from being started.
</p>
<p>
If the return value is <b>True</b>, the DragStart method in DragManager is 
called to start the drag operation for the specified control.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.MouseMove"/>
<link id="TCustomControlBar.OnBandDrag"/>
</seealso>
</element>
<element name="TCustomControlBar.DragControl.Result">
<short>
<b>True</b> if the drag operation was started for the specified control.
</short>
</element>
<element name="TCustomControlBar.DragControl.AControl">
<short>
TControl instance beneath the mouse pointer when an auto-drag operation is 
started for the control bar.
</short>
</element>
<element name="TCustomControlBar.DragControl.X">
<short>
Horizontal position for the mouse pointer when the mouse move event occurred.
</short>
</element>
<element name="TCustomControlBar.DragControl.Y">
<short>
Vertical position for the mouse pointer when the mouse move event occurred.
</short>
</element>
<element name="TCustomControlBar.DragControl.KeepCapture">
<short>
This argument is not used in the current implementation.
</short>
</element>

<element name="TCustomControlBar.DragOver" link="#lcl.controls.TControl.DragOver"/>
<element name="TCustomControlBar.DragOver.Source"/>
<element name="TCustomControlBar.DragOver.X"/>
<element name="TCustomControlBar.DragOver.Y"/>
<element name="TCustomControlBar.DragOver.State"/>
<element name="TCustomControlBar.DragOver.Accept"/>

<element name="TCustomControlBar.GetControlInfo">
<short>
Signals the OnBandInfo event handler to store control information to the 
arguments for the method.
</short>
<descr>
<p>
<var>GetControlInfo</var> is called from the InsertControl method when the 
specified control is positioned, aligned, and added to the internal 
TCtrlBands container for the control bar. GetControlInfo signals the 
OnBandInfo event handler (when assigned) to store information about the 
bounds rectangle, width, and number of rows needed for the control / band. 
Values are returned in the Insets, PreferredSize, and RowCount variable 
arguments.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomControlBar.GetControlInfo.AControl">
<short>Control for the band examined in the method.</short>
</element>
<element name="TCustomControlBar.GetControlInfo.Insets">
<short>Adjusted bounds rectangle for the control.</short>
</element>
<element name="TCustomControlBar.GetControlInfo.PreferredSize">
<short>Adjusted width for the control.</short>
</element>
<element name="TCustomControlBar.GetControlInfo.RowCount">
<short>
Number of rows needed for the band / control using the default row height.
</short>
</element>

<element name="TCustomControlBar.InitializeClass">
<short>Class constructor which initializes class constants.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomControlBar.InitializeBand">
<short>
Configures a control bar band and calculates its row position, order, and 
geometry including client decorations.
</short>
<descr>
</descr>
<seealso/>
</element>
<element name="TCustomControlBar.InitializeBand.ABand">
<short>
TCtrlBand instance configured in the method.
</short>
</element>
<element name="TCustomControlBar.InitializeBand.AKeepPos">
<short>
<b>True</b> to retain the order for the bands (when possible) when sizing the 
bands.
</short>
</element>

<element name="TCustomControlBar.InitializeMove">
<short>
Prepares visible bands on the control bar for a drag and drop operation.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomControlBar.InitializeMove.AMovingBand">
<short>
TCtrlBand instance prepared to be moved in the list of visible bands.
</short>
</element>

<element name="TCustomControlBar.Loaded">
<short>
Performs actions needed when component loading has been completed.
</short>
<descr>
<p>
Calls the inherited method on entry to determine the parent color and opacity 
for the control. Loaded creates, configures, and stores a TCtrlBand instance 
for each of the child Controls on the control bar. CalcBandHeight is called 
to determine the height for the child Controls. Space is reserved on the 
bands for the grabber and borders, and the Width properties for the bands are 
updated. The Top and Left values for the bands are also assigned.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.CalcBandHeight"/>
<link id="TCtrlBand"/>
<link id="TCustomPanel.Loaded"/>
<link id="#lcl.controls.TWinControl.Controls">TWinControl.Controls</link>
</seealso>
</element>

<element name="TCustomControlBar.IsBandOverlap">
<short>
Determines if the display rectangles for two bands overlap.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomControlBar.IsBandOverlap.Result">
<short>
<b>True</b> when the rectangles overlap horizontally or vertically.
</short>
</element>
<element name="TCustomControlBar.IsBandOverlap.ARect">
<short>
Display rectangle for a TCtrlBand instance compared in the method.
</short>
</element>
<element name="TCustomControlBar.IsBandOverlap.BRect">
<short>
Display rectangle for the other TCtrlBand instance compared in the method.
</short>
</element>

<element name="TCustomControlBar.MouseDown">
<short>Handles a mouse down message in the control.</short>
<descr>
<p>
<var>MouseDown</var> is an overridden method in <var>TCustomControlBar</var> 
which provides support for dragging the control band / control under 
the mouse pointer. It calls the inherited method on entry to validate the 
parent form, active control, and drag manager state. The inherited method also 
signals the OnMouseDown event handler (when assigned).
</p>
<p>
MouseDown ensures that the internal flags for band movement are set, and calls 
InitializeMove to prepare the hovered band control to be moved to a new 
position in the list of bands.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.InitializeMove"/>
<link id="#lcl.controls.TControl.MouseDown">TControl.MouseDown</link>
<link id="#lcl.controls.TControl.OnMouseDown">TControl.OnMouseDown</link>
</seealso>
</element>
<element name="TCustomControlBar.MouseDown.Button">
<short>
Mouse button for the mouse down event.
</short>
</element>
<element name="TCustomControlBar.MouseDown.Shift">
<short>
Shift, Ctrl, or Alt modifier active when the mouse down event was detected.
</short>
</element>
<element name="TCustomControlBar.MouseDown.X">
<short>
Horizontal coordinate for the mouse pointer.
</short>
</element>
<element name="TCustomControlBar.MouseDown.Y">
<short>
Vertical coordinate for the mouse pointer.
</short>
</element>

<element name="TCustomControlBar.MouseMove">
<short>Handles a mouse move message including dragging a control band.</short>
<descr>
<p>
MouseMove is an overridden method in TCustomControlBar which handles a mouse 
move message at the specified X and Y position using the specified Shift 
modifier. It calls the inherited method on entry to update the mouse position 
for the DragManager (when active) and to signal the OnMouseMove event handler 
(when assigned).
</p>
<p>
MouseMove calls ChangeCursor to update the cursor shape when a band move 
operation is started. If the operation is already active and handled by the 
DragManager, the MoveBand method is called for the band under the mouse 
pointer. DragControl is called if the DragManager does not handle the action 
for the specified position.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.ChangeCursor"/>
<link id="TCustomControlBar.MoveBand"/>
<link id="TCustomControlBar.DragControl"/>
<link id="#lcl.controls.TControl.OnMouseMove">TControl.OnMouseMove</link>
<link id="#lcl.controls.TControl.MouseMove">TControl.MouseMove</link>
<link id="#lcl.controls.TControl.WMMouseMove">TControl.WMMouseMove</link>
<link id="#lcl.controls.DragManager">DragManager</link>
<link id="#lcl.controls.TDragManager">TDragManager</link>
</seealso>
</element>
<element name="TCustomControlBar.MouseMove.Shift">
<short>Shift, Ctrl, or Alt modifier for the mouse event.</short>
</element>
<element name="TCustomControlBar.MouseMove.X">
<short>Horizontal coordinate for the mouse pointer.</short>
</element>
<element name="TCustomControlBar.MouseMove.Y">
<short>Vertical coordinate for the mouse pointer.</short>
</element>

<element name="TCustomControlBar.MouseUp">
<short>
Handles a mouse up message that ends a drag operation for a control band.
</short>
<descr>
<p>
<var>MouseUp</var> is an overridden method in <var>TCustomControlBar</var>. It 
calls the inherited method on entry to signal the OnMouseUp event handler 
(when assigned). If the control is currently moving one of its bands, the 
internal flag is reset to reflect the end of the drag operation. ChangeCursor 
is called to restore the default cursor shape. SortVisibleBands is called to 
sort the visible bands on the control by their display coordinates (Left and 
Top).
</p>
<p>
MouseUp is called when the LM_LBUTTONUP message is handled for the control.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.ChangeCursor"/>
<link id="TCustomControlBar.SortVisibleBands"/>
<link id="#lcl.controls.TControl.MouseUp">TControl.MouseUp</link>
<link id="#lcl.controls.TControl.OnMouseUp">TControl.OnMouseUp</link>
<link id="#lcl.controls.TControl.DoMouseUp">TControl.DoMouseUp</link>
</seealso>
</element>
<element name="TCustomControlBar.MouseUp.Button">
<short>
Mouse button for the notification.
</short>
</element>
<element name="TCustomControlBar.MouseUp.Shift">
<short>
Shift, Ctrl, or Alt modifier for the mouse event.
</short>
</element>
<element name="TCustomControlBar.MouseUp.X">
<short>
Horizontal coordinate for the mouse pointer.
</short>
</element>
<element name="TCustomControlBar.MouseUp.Y">
<short>
Vertical coordinate for the mouse pointer.
</short>
</element>

<element name="TCustomControlBar.MoveBand">
<short>
Performs actions needed when a band is moved to new position.
</short>
<descr>
<p>
MoveBand determines the new position for a band moved using the mouse or by 
setting its coordinates. Rearranges adjacent bands (and rows) as needed.
The DoBandMove method is called to signal the OnBandMove event handler (when 
assigned).
</p>
<p>
MoveBand is called from the MouseMove method, and occurs after the DragManager 
has started the drag operation for the control. It is also used in the 
CheckBandsSizeAndVisibility method, where it is called after visible bands 
have been sorted and normalized.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.MouseMove"/>
<link id="TCustomControlBar.DoBandMove"/>
<link id="TCustomControlBar.OnBandMove"/>
<link id="TCustomControlBar.ChangeCursor"/>
<link id="TCustomControlBar.CheckBandsSizeAndVisibility"/>
<link id="TCursorDesign"/>
</seealso>
</element>
<element name="TCustomControlBar.MoveBand.AMoveBand">
<short>
TCtrlBand instance moved in the method.
</short>
</element>
<element name="TCustomControlBar.MoveBand.X">
<short>
Horizontal coordinate for the mouse pointer.
</short>
</element>
<element name="TCustomControlBar.MoveBand.Y">
<short>
Vertical coordinate for the mouse pointer.
</short>
</element>
<element name="TCustomControlBar.MoveBand.ByMouse">
<short>
<b>True</b> if the mouse cursor is changed to the cdGrabber shape prior to 
moving the specified band on the control.
</short>
</element>

<element name="TCustomControlBar.NormalizeRows">
<short>
Orders visible bands on the control by their coordinates, and hides empty 
rows.
</short>
<descr>
<p>
<var>Shifts</var> the order of visible bands on the control so the Top 
coordinates in the bands are in ascending order. Blank rows on the control are 
removed so that all band rows are adjacent with no unused space between rows. 
Space is reserved for an inner bevel displayed for the band rows on the 
control.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.RowSize"/>
<link id="TCtrlBand.Top"/>
<link id="TCtrlBand.Bottom"/>
</seealso>
</element>

<element name="TCustomControlBar.Paint">
<short>
Draws the control with its image, decorations, and visible bands.
</short>
<descr>
<p>
<var>Paint</var> is an overridden method in <var>TCustomControlBar</var> used 
to render the control bar and its bands on the Canvas for the control.
</p>
<p>
Paint calls the inherited method (in TCustomPanel) on entry to draw the outer 
bevels and Caption text for the control. It performs additional actions needed 
to draw the image, decorations, and visible bands on the control. These action 
include:
</p>
<ul>
<li>
Adjusts the clipping rectangle on the Canvas to account for the inner bevel on 
the control (when used).
</li>
<li>
Draws the bitmap in Picture (when assigned) with space reserved for the bevels 
on the control.
</li>
<li>
Draws the visible bands on the control using the default TBandPaintOption 
settings for the control ([bpoGrabber, bpoFrame, bpoGradient, bpoRoundRect]).
Calls DoBandPaint to draw the Control on each of the visible TCtrlBand 
instances.
</li>
</ul>
<p>
Use OnBandPaint to perform custom drawing operations needed to draw a specific 
band on the control. Use OnPaint to perform custom drawing operations needed 
for the control bar. The default PaintHandler (in TWinControl) is used when 
the OnPaint has not been assigned.
</p>
<p>
Set DrawingStyle to dsGradient to enable color gradients on the background for 
the bands. Use GradientStartColor and GradientEndColor to specify the colors 
used in the gradient.
</p>
<p>
The grabber for the bands are aligned to the edge indicated by IsRightToLeft.
</p>
<p>
Paint calls DoBandPaint to draw the Control for each of the visible TCtrlBand 
instances. Use OnBandPaint to perform custom drawing operations needed to draw 
a specific band on the control. Use OnPaint to perform custom drawing 
operations needed for the control bar. 
</p>
<p>
Paint is called when the LM_PAINT message is received and handled for the 
control in the WMPaint method. The default PaintHandler (in TWinControl) is 
called when OnPaint has not been assigned.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.DrawingStyle"/>
<link id="TCustomControlBar.GradientStartColor"/>
<link id="TCustomControlBar.GradientEndColor"/>
<link id="TCustomControlBar.Picture"/>
<link id="TCustomControlBar.DoBandPaint"/>
<link id="TCustomControlBar.OnBandPaint"/>
<link id="TCtrlBand.Control"/>
<link id="TBandPaintOptions"/>
<link id="TBandPaintOption"/>
<link id="#lcl.graphics.TCanvas.Draw">TCanvas.Draw</link>
<link id="#lcl.graphics.TCanvas.Frame3D">TCanvas.Frame3D</link>
<link id="#lcl.graphics.TCanvas.GradientFill">TCanvas.GradientFill</link>
<link id="#lcl.extctrls.TCustomPanel.Paint">TCustomPanel.Paint</link>
<link id="#lcl.controls.TCustomControl.Canvas">TCustomControl.Canvas</link>
<link id="#lcl.controls.TControl.IsRightToLeft">TControl.IsRightToLeft</link>
<link id="#lcl.controls.TWinControl.WMPaint">TWinControl.WMPaint</link>
<link id="#lcl.controls.TWinControl.PaintHandler">TWinControl.PaintHandler</link>
</seealso>
</element>

<element name="TCustomControlBar.PictureChanged">
<short>
Redraws the image on the control bar when the Picture property has been 
changed.
</short>
<descr>
<p>
<var>PictureChanged</var> is assigned as the OnChange event handler for the 
Picture property in the Create constructor. It calls the Invalidate method 
when the internal update counter for the control reaches 0.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.Create"/>
<link id="TCustomControlBar.Picture"/>
<link id="#lcl.graphics.TPicture.OnChange">TPicture.OnChange</link>
</seealso>
</element>
<element name="TCustomControlBar.PictureChanged.Sender">
<short>
Object (TPicture) for the event notification.
</short>
</element>

<element name="TCustomControlBar.Resize">
<short>
Signals the OnResize event handler (when assigned) and re-aligns bands and 
their controls.
</short>
<descr>
<p>
<var>Resize</var> is an overridden method in <var>TCustomControlBar</var>. It 
calls the inherited method on entry to handle delayed auto-sizing requests 
and signal the OnResize event handler (when assigned).
</p>
<p>
When AutoSize is <b>False</b>, the visible TCtrlBand instances on the control 
are initialized, aligned, and positioned. The controls on the bands are also 
aligned for each of visible bands. Invalidate is called to force the control 
to be redrawn.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.AutoSize"/>
<link id="TCustomControlBar.CheckBandsSizeAndVisibility"/>
<link id="TCustomControlBar.AlignControlsToBands"/>
<link id="#lcl.controls.TControl.Resize">TControl.Resize</link>
<link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
<link id="#lcl.controls.TWinControl.DoAdjustClientRectChange">TWinControl.DoAdjustClientRectChange</link>
</seealso>
</element>

<element name="TCustomControlBar.SetCursor">
<short>Sets the Cursor to the specified TCursor shape.</short>
<descr>
<p>
<var>SetCursor</var> is an overridden method in <var>TCustomControlBar</var> 
used to set the cursor to the specified cursor shape. It calls the inherited 
method on entry to perform the <var>CM_CURSORCHANGED</var> control message 
for the control. This triggers the <var>ChangeCursor</var> method which 
applies the cursor shape in <var>Value</var>. Value is also stored in the 
<var>FDefCursor</var> member as the default cursor shape.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.ChangeCursor"/>
<link id="#lcl.controls.TControl.SetCursor">TControl.SetCursor</link>
<link id="#lcl.controls.TControl.Cursor">TControl.Cursor</link>
</seealso>
</element>
<element name="TCustomControlBar.SetCursor.Value">
<short>TCursor shape </short>
</element>

<element name="TCustomControlBar.ShiftBands">
<short>
Shifts the positions for a range of bands by the specified amount.
</short>
<descr>
<p>
<var>ShiftBands</var> is a method used to reposition a range of visible bands 
on the control by updating the values in the their Left properties.
</p>
<p>
<var>AFrom</var> and <var>ATo</var> contain the ordinal index positions for 
the bands updated in the method. Their values are used to access the 
pre-sorted visible bands on the control.
</p>
<p>
<var>AShift</var> indicates the number of pixels that each band is shifted. 
IsRightToLeft determines whether the band is moved relative to the left- or 
right-hand edge for each band instance. Right-to-Left layout causes the Left 
property to be decreased by the value in AShift. Otherwise, the Left property 
for each band is increased by the value in AShift.
</p>
<p>
<var>ALimit</var> sets the upper limit for any value in the Left property 
after it has been adjusted in the method.
</p>
</descr>
<seealso>
<link id="TCtrlBand.Left"/>
<link id="#lcl.controls.TControl.IsRightToLeft">TControl.IsRightToLeft</link>
</seealso>
</element>
<element name="TCustomControlBar.ShiftBands.AFrom">
<short>
Ordinal position for the first visible band moved in the method.
</short>
</element>
<element name="TCustomControlBar.ShiftBands.ATo">
<short>
Ordinal position for the last visible band moved in the method.
</short>
</element>
<element name="TCustomControlBar.ShiftBands.AShift">
<short>
Number of pixels that each band is moved in the method.
</short>
</element>
<element name="TCustomControlBar.ShiftBands.ALimit">
<short>
Largest value allowed in the Left property for shifted bands.
</short>
</element>

<element name="TCustomControlBar.SortVisibleBands">
<short>
Calculates the number of visible bands (and controls) and optionally sorts 
visible bands to reflect their Top and Left coordinates.
</short>
<descr>
<p>
Called from the MouseUp and CheckBandsSizeAndVisibility methods.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.MouseUp"/>
<link id="TCustomControlBar.CheckBandsSizeAndVisibility"/>
</seealso>
</element>

<element name="TCustomControlBar.WMSize">
<short>
Handles the LM_SIZE message for the control.
</short>
<descr>
<p>
<var>WMSize</var> is overridden in <var>TCustomControlBar</var> to resize and 
arrange visible bands when the size for the control bar is changed. It calls 
the inherited method on entry to handle changes to the control bounds. it 
extends the inherited method to handle right-to-left alignment when the 
control is resized.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.WMSize">TWinControl.WMSize</link>
<link id="#lcl.controls.TControl.IsRightToLeft">TControl.IsRightToLeft</link>
</seealso>
</element>
<element name="TCustomControlBar.WMSize.Message">
<short>Window message handled in the method.</short>
</element>

<element name="TCustomControlBar.FUpdateCount">
<short>Member with the update counter for the control bar.</short>
</element>

<element name="TCustomControlBar.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance. 
Create allocates resources needed to store the bands for the control bar, and 
calls the inherited constructor. Creates sets the default values for 
properties, including:
</p>
<ul>
<li>ControlStyle</li>
<li>AutoDrag</li>
<li>AutoDock</li>
<li>BevelOuter</li>
<li>BevelInner</li>
<li>DockSite</li>
<li>GradientDirection</li>
<li>GradientStartColor</li>
<li>GradientEndColor</li>
<li>RowSize</li>
<li>RowSnap</li>
</ul>
<p>
Resources are allocated for the <var>Picture</var> property, and its 
<var>OnChange</var> event handler is set to the <var>PictureChanged</var> 
method.
</p>
<p>
Creates set the initial bounds for the class instance using a width of 100 
pixels, and a height of 50 pixels.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomControlBar.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomControlBar.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. 
Destroy frees resources allocated to the <var>Picture</var> property, as well 
as the internal <var>TCtrlBands</var> container. Destroy calls the inherited 
destructor prior to exit.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomControlBar.BeginUpdate">
<short>
Increments the internal counter used to track the number of active update 
requests.
</short>
<descr>
<p>
Used in conjunction with EndUpdate to consolidate redraw requests for the 
control. Various methods check the value in the internal update counter 
before calling Invalidate to ensure that an unfinished update is not in 
progress. Invalidate is called in these methods when the internal counter 
reaches 0 (zero).
</p>
</descr>
<seealso>
<link id="TCustomControlBar.EndUpdate"/>
</seealso>
</element>

<element name="TCustomControlBar.EndUpdate">
<short>
Decrements the internal counter used to track update requests, and calls 
Invalidate when the counter reaches zero (0).
</short>
<descr>
<p>
Used in conjunction with BeginUpdate to consolidate redraw requests for the 
control. Various methods check the value in the internal update counter 
before calling Invalidate to ensure that an unfinished update is not in 
progress. Invalidate is called in these methods when the internal counter 
reaches 0 (zero).
</p>
</descr>
<seealso>
<link id="TCustomControlBar.BeginUpdate"/>
</seealso>
</element>

<element name="TCustomControlBar.FlipChildren">
<short>Flips the horizontal display coordiantes for child controls.</short>
<descr>
<p>
<var>FlipChildren</var> is used to realign child controls when the BiDiMode in 
the application has been changed.
</p>
<remark>
FlipChildren has an empty implementation in TCustomControlBar.
</remark>
</descr>
<seealso/>
</element>
<element name="TCustomControlBar.FlipChildren.AllLevels">
<short>When <b>True</b> all child controls are flipped as well.</short>
</element>

<element name="TCustomControlBar.HitTest">
<short>
Gets the control for the visible band under the specified mouse coordinates.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomControlBar.HitTest.Result">
<short>
The band or control at the specified position, or <b>Nil</b> when a visible 
control is not found.
</short>
</element>
<element name="TCustomControlBar.HitTest.X">
<short>Horizontal position for the test.</short>
</element>
<element name="TCustomControlBar.HitTest.Y">
<short>Vertical position for the test.</short>
</element>

<element name="TCustomControlBar.InsertControl">
<short>
Creates and stores a new band for the specified control.
</short>
<descr>
<p>
<var>InsertControl</var> is an overridden procedure used to create, 
initialize, and store a TCtrlBand instance for the specified control. 
InsertControl calls the inherited method, and creates and stores a new 
TCtrlBand instance for the control in AControl.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.InsertControl">TWinControl.InsertControl</link>
</seealso>
</element>
<element name="TCustomControlBar.InsertControl.AControl">
<short>
Tool bar or tool button added to the new band in the control bar.
</short>
</element>
<element name="TCustomControlBar.InsertControl.Index">
<short>Ordinal position in the bands where the control is inserted.</short>
</element>

<element name="TCustomControlBar.MouseToBandPos">
<short>
Gets the visible band on the control bar at the specified mouse coordinates.
</short>
<descr>
<p>
<var>MouseToBandPos</var> iterates over the visible bands in the control to 
find the TCtrlBand instance which is under the coordinates specified in X and 
Y. The return value is <b>Nil</b> if a band is not found under the specified 
coordinates.
</p>
<p>
<var>AGrabber</var> is a <var>Boolean</var> output argument used to indicate 
whether the coordinates are over the grabber decoration on the control. Its 
value is <b>False</b> if a band was not found, or the value in Y is greater 
than the largest bottom property in the list of visible bands.
</p>
<p>
Perhaps this should have been named MousePosToBand.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.MouseMove"/>
</seealso>
</element>
<element name="TCustomControlBar.MouseToBandPos.Result">
<short>
TCtrlBand instance at the specified coordinates, or <b>Nil</b> when the 
coordinates are not on a visible band.
</short>
</element>
<element name="TCustomControlBar.MouseToBandPos.X">
<short>Horizontal coordinate for the mouse pointer.</short>
</element>
<element name="TCustomControlBar.MouseToBandPos.Y">
<short>Vertical coordinate for the mouse pointer.</short>
</element>
<element name="TCustomControlBar.MouseToBandPos.AGrabber">
<short>
<b>True</b> if the mouse coordinates are over the grabber decoration on the 
band.
</short>
</element>

<element name="TCustomControlBar.RemoveControl">
<short>Removes the band with the specified control.</short>
<descr>
<p>
<var>RemoveControl</var> is an overridden method in 
<var>TCustomControlBar</var>. It performs additional actions when the Parent 
for the control in AControl has been set to Nil.
</p>
<p>
RemoveControl ensures that the TCtrlBand instance for the control is removed 
from the internal TCtrlBands container. When found, the Delete method in the 
list is called to remove the band.
</p>
<p>
RemoveControl calls the inherited method to remove the control specified in 
AControl.
</p>
<p>
If the control bar is not being freed, the Invalidate method is called to 
force the control to be redrawn.
</p>
</descr>
<seealso>
<link id="TCtrlBand"/>
<link id="TCtrlBands"/>
<link id="#lcl.controls.TWinControl.RemoveControl">TWinControl.RemoveControl</link>
<link id="#lcl.controls.TWinControl.Invalidate">TWinControl.Invalidate</link>
</seealso>
</element>
<element name="TCustomControlBar.RemoveControl.AControl">
<short>Control removed from the control bar.</short>
</element>

<element name="TCustomControlBar.StickControls">
<short>Aligns controls to both their bands and the control bar.</short>
<descr>
<p>
Calls the AlignControlsToBands method to align / resize controls on the 
visible bands for the control bar.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.AlignControlsToBands"/>
<link id="TCustomControlBar.AlignControlToBand"/>
</seealso>
</element>

<element name="TCustomControlBar.AutoDock">
<short>Not used in the current LCL implementation.</short>
<descr>
<p>
The default value for the property is <b>True</b>.
</p>
<remark>
Not used in the current LCL implementation.
</remark>
</descr>
<seealso/>
</element>

<element name="TCustomControlBar.AutoDrag">
<short>
Indicates if the control allows a band to be dragged even when DragManager is 
not used.
</short>
<descr>
<p>
Indicates if the control can call DragControl to move a band on the control 
using the mouse. The default value for the property is <b>True</b>.
</p>
<p>
Called from the <var>MouseMove</var> method when <var>DragManager</var> does 
not handle the request.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomControlBar.AutoSize">
<short>
Indicates if bands are automatically sized and positioned on the control bar.
</short>
<descr>
<p>
When AutoSize is <b>False</b>, the CheckBandsSizeAndVisibility method is 
called to Resize the bands on the control bar. When set to <b>False</b>, the 
inherited method is used. In addition, AutoSize determines if 
InvalidatePreferredSize is called when setting the value for the RowSize 
property.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.AutoSize">TControl.AutoSize</link>
</seealso>
</element>

<element name="TCustomControlBar.DockSite">
<short>
Allows drag-docking of controls onto this control.
</short>
<descr>
<p>
A DockSite reacts on controls dragged over this control, signals acceptance 
and where a dragged control would be dropped. The default value for the 
property is <b>True</b> in TCustomControlBar.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.DockSite">TWinControl.DockSite</link>
</seealso>
</element>

<element name="TCustomControlBar.DrawingStyle">
<short>Fill style used for bands on the control bar.</short>
<descr>
<p>
<var>DrawingStyle</var> is a <var>TBandDrawingStyle</var> property which 
indicates the fill style applied to the control bar. The default value for 
the property is dsNormal and causes the default background color for the 
control bar to be used.
</p>
<p>
Set DrawingStyle to dsGradient to draw the control bar using a gradient fill 
defined by the values in GradientDirection, GradientStartColor, and 
GradientEndColor. When clDefault is used in GradientStartColor, it is 
converted to clForm when the Paint method is called to draw the control. When 
clDefault is used in GradientEndColor, it is converted to cl3DHighlight in 
the Paint method.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.GradientDirection"/>
<link id="TCustomControlBar.GradientStartColor"/>
<link id="TCustomControlBar.GradientEndColor"/>
<link id="TCustomControlBar.Paint"/>
<link id="TCustomControlBar.OnBandPaint"/>
<link id="TBandDrawingStyle"/>
<link id="TBandPaintOptions"/>
</seealso>
</element>

<element name="TCustomControlBar.GradientDirection">
<short>Controls the direction for a gradient drawn on the control bar.</short>
<descr>
<p>
GradientDirection is a TGradientDirection property which controls the 
direction for a gradient drawn on the control bar. The default value for the 
property is gdVertical. Changing the value for the property causes the 
Invalidate method to be performed when BeginUpdate has not yet been called.
</p>
<p>
GradientDirection is used when the DrawingStyle property contains the value 
dsGradient. Set the values in GradientStartColor and GradientEndColor to 
define the colors used to draw the gradient.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomControlBar.GradientStartColor">
<short>
Specifies the initial color used in a gradient drawn on the control bar.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomControlBar.GradientEndColor">
<short>
Specifies the ending color used in a gradient drawn on the control bar.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomControlBar.Picture">
<short>
Optional image drawn before the visible bands for the control bar.
</short>
<descr>
<p>
Picture is a TPicture property which contains an optional image drawn on the 
client rectangle for the control bar. The image is tiled to fill the client 
area (if needed) immediately prior to drawing the visible bands for the 
control bar.
</p>
<p>
Picture is used in the Paint method.
</p>
<p>
PictureChanged is assigned as the OnChange event handler for the Picture 
property in the constructor for the class.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomControlBar.RowSize">
<short>
Height used for a band or a row of bands displayed on the control bar.
</short>
<descr>
<p>
RowSize is a TRowSize property which specifies the height for a row or band 
displayed on the control bar. The default value for the property is 26.
</p>
<p>
Changing the value in the property causes the bands for the control bar to be 
resized and realigned. The Invalidate method will be called to repaint the 
control if BeginUpdate is not already active.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomControlBar.RowSnap">
<short>
Indicates if a band or row of bands snaps to the height for the control bar.
</short>
<descr>
<p>
<var>RowSnap</var> is a <var>Boolean</var> property which indicates if a band 
or row of bands snaps to the height for the control bar. The default value 
for the property is <b>True</b>. When set to <b>False</b>, each band on the 
control bar calculates its own height and allocates additional space for 
bevels.
</p>
<p>
Used in the <var>CalcBandHeight</var> method, and when a new value is 
assigned to the <var>RowSize</var> property.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomControlBar.OnBandDrag">
<short>
Event handler signalled when a drag operation is about to begin for a band on 
the control bar.
</short>
<descr>
<p>
<var>OnBandDrag</var> can be used to determine if the <var>TCtrlBand</var> 
instance can be used in a drag and drop operation. The <var>Drag</var> 
argument can be set to <b>False</b> in the event handler to prevent the drag 
and drop operation.
</p>
<p>
Called from the DragControl method before the Drag manager starts the drag 
and drop operation for the band.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.DragControl"/>
<link id="TCtrlBand"/>
<link id="TBandDragEvent"/>
<link id="#lcl.controls.DragManager">DragManager</link>
<link id="#lcl.controls.TDragManager">TDragManager</link>
</seealso>
</element>

<element name="TCustomControlBar.OnBandInfo">
<short>
Event handler signalled to get the insets rectangles, preferred size, and row 
count for the control bar.
</short>
<descr>
<p>
<var>OnBandInfo</var> is a <var>TBandInfoEvent</var> property with the event 
handler signalled to get the insets rectangles, preferred size, and row count 
for the control bar. Called from the <var>GetControlInfo</var> method (if 
assigned) when a new control is added to the control bar.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.GetControlInfo"/>
<link id="TBandInfoEvent"/>
</seealso>
</element>

<element name="TCustomControlBar.OnBandMove">
<short>
Event handler signalled when a control band is moved on the control bar.
</short>
<descr>
<p>
Signalled from the DoBandMove method (when assigned) using the 
TCustomControlBar and TCtrlBand instances as arguments. It is also signalled 
when the visibility and size for bands on the control are updated in 
InitializeBand.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.InitializeBand"/>
<link id="TCustomControlBar.MoveBand"/>
<link id="TCustomControlBar.InsertControl"/>
<link id="TCustomControlBar.CheckBandsSizeAndVisibility"/>
</seealso>
</element>

<element name="TCustomControlBar.OnBandPaint">
<short>
Event handler signalled to render a visible band on the specified control 
with the specified paint options.
</short>
<descr>
<p>
<var>OnBandPaint</var> is a <var>TBandPaintEvent</var> property with the 
event handler signalled to render a band with the specified paint options. 
OnBandPaint is signalled from the <var>DoBandPaint</var> method, and occurs 
when the Paint method draws each of the visible bands for the control bar.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.DoBandPaint"/>
<link id="TCustomControlBar.Paint"/>
<link id="TBandPaintEvent"/>
</seealso>
</element>

<element name="TCustomControlBar.OnCanResize">
<short>
Not used in the current implementation of TCustomControlBar / TControlBar.
</short>
<descr>
<remark>
Not used in the current implementation of <var>TCustomControlBar</var> / 
<var>TControlBar</var>.
</remark>
</descr>
<seealso/>
</element>

<element name="TCustomControlBar.OnPaint">
<short>
Event handler signalled to perform default drawing in the inherited Paint 
method.
</short>
<descr>
<p>
<var>OnPaint</var> is a <var>TNotifyEvent</var> property with the event 
handler signalled to draw the control bar on its <var>Canvas</var>. An object 
procedure which draws all aspects of the control must be implemented and 
assigned to the property.
</p>
<p>
The <var>Sender</var> argument provides access to properties and methods for 
the control instance. It must be cast to <var>TCustomControlBar</var> to 
access members for the class type.
</p>
<p>
Use the Canvas property to render the background for the control in the event 
handler. The values from Font and Color are already applied to the 
corresponding properties in Canvas.
</p>
<p>
OnPaint is signalled from the inherited <var>Paint</var> method, and occurs 
before the <var>OnBandPaint</var> event handler in the control is signalled.
</p>
</descr>
<seealso>
<link id="TCustomControlBar.Paint"/>
<link id="TCustomControlBar.OnBandPaint"/>
<link id="#lcl.controls.TCustomControl.Paint">TCustomControl.Paint</link>
<link id="#lcl.controls.TCustomControl.OnPaint">TCustomControl.OnPaint</link>
</seealso>
</element>

<element name="TControlBar">
<short>
Implements a panel used to maintain and manage tool bars and tool buttons.
</short>
<descr>
<p>
<var>TControlBar</var> implements a panel used to maintain and manage tool 
bars and tool buttons on a form. <var>TControlBar</var> is a 
<var>TCustomControlBar</var> descendant, and sets the visibility for 
properties from the ancestor class.
</p>
<p>
Internally, it uses a TCtrlBands member to represent the <var>TToolBar</var>, 
<var>TToolButton</var>, or <var>TCoolBar</var> classes added to the 
container. Use <var>InsertControl</var> and <var>RemoveControl</var> to 
maintain items in the container at run-time, or use the design-time support 
provided in the Lazarus Form Designer.
</p>
</descr>
<seealso>
<link id="TCustomControlBar"/>
</seealso>
</element>

<element name="TControlBar.Canvas" link="#lcl.controls.TCustomControl.Canvas"/>
<element name="TControlBar.Align" link="#lcl.extctrls.TCustomPanel.Align"/>
<element name="TControlBar.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TControlBar.AutoDock" link="#lcl.extctrls.TCustomControlBar.AutoDock"/>
<element name="TControlBar.AutoDrag" link="#lcl.extctrls.TCustomControlBar.AutoDrag"/>
<element name="TControlBar.AutoSize" link="#lcl.extctrls.TCustomControlBar.AutoSize"/>

<element name="TControlBar.BevelInner">
<short>Drawing style for the inner bevel on the control.</short>
<descr>
<p>
<var>BevelInner</var> is the bevel drawn inside the bounds for the control, 
and causes the control to have a raised or lowered appearance. The default 
value for the property is bvRaised in TControlBar.
</p>
<p>
Use BevelOuter to set the drawing style for the bevel drawn on the bounds for 
the control.
</p>
<p>
Use BevelWidth to set the width for the bevels in pixels.
</p>
</descr>
<seealso>
<link id="#lcl.extctrls.TCustomPanel.BevelOuter">TCustomPanel.BevelOuter</link>
<link id="#lcl.extctrls.TCustomPanel.BevelInner">TCustomPanel.BevelInner</link>
<link id="#lcl.extctrls.TCustomPanel.BevelWidth">TCustomPanel.BevelWidth</link>
</seealso>
</element>

<element name="TControlBar.BevelOuter">
<short>Drawing style for the outer bevel on the control.</short>
<descr>
<p>
<var>BevelOuter</var> is the bevel drawn on the bounds for the control, and 
causes it have an over-all raised or lowered appearance when used. The 
default value for the property is bvLowered in TControlBar.
</p>
<p>
Use BevelInner to set the bevel drawn inside the bounds for the control.
</p>
<p>
Use BevelWidth to set the width for the bevels in pixels.
</p>
</descr>
<seealso>
<link id="#lcl.extctrls.TCustomPanel.BevelOuter">TCustomPanel.BevelOuter</link>
<link id="#lcl.extctrls.TCustomPanel.BevelInner">TCustomPanel.BevelInner</link>
<link id="#lcl.extctrls.TCustomPanel.BevelWidth">TCustomPanel.BevelWidth</link>
</seealso>
</element>

<element name="TControlBar.BevelWidth" link="#lcl.extctrls.TCustomPanel.BevelWidth"/>
<element name="TControlBar.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TControlBar.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
<element name="TControlBar.Color" link="#lcl.extctrls.TCustomPanel.Color"/>
<element name="TControlBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TControlBar.DockSite" link="#lcl.extctrls.TCustomControlBar.DockSite"/>
<element name="TControlBar.DoubleBuffered" link="#lcl.controls.TWinControl.DoubleBuffered"/>
<element name="TControlBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TControlBar.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TControlBar.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TControlBar.DrawingStyle" link="#lcl.extctrls.TCustomControlBar.DrawingStyle"/>
<element name="TControlBar.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TControlBar.GradientDirection" link="#lcl.extctrls.TCustomControlBar.GradientDirection"/>
<element name="TControlBar.GradientEndColor" link="#lcl.extctrls.TCustomControlBar.GradientEndColor"/>
<element name="TControlBar.GradientStartColor" link="#lcl.extctrls.TCustomControlBar.GradientStartColor"/>
<element name="TControlBar.ParentColor" link="#lcl.extctrls.TCustomPanel.ParentColor"/>
<element name="TControlBar.ParentDoubleBuffered" link="#lcl.controls.TWinControl.ParentDoubleBuffered"/>
<element name="TControlBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TControlBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TControlBar.Picture" link="#lcl.extctrls.TCustomControlBar.Picture"/>
<element name="TControlBar.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TControlBar.RowSize" link="#lcl.extctrls.TCustomControlBar.RowSize"/>
<element name="TControlBar.RowSnap" link="#lcl.extctrls.TCustomControlBar.RowSnap"/>
<element name="TControlBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TControlBar.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TControlBar.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TControlBar.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TControlBar.OnBandDrag" link="#lcl.extctrls.TCustomControlBar.OnBandDrag"/>
<element name="TControlBar.OnBandInfo" link="#lcl.extctrls.TCustomControlBar.OnBandInfo"/>
<element name="TControlBar.OnBandMove" link="#lcl.extctrls.TCustomControlBar.OnBandMove"/>
<element name="TControlBar.OnBandPaint" link="#lcl.extctrls.TCustomControlBar.OnBandPaint"/>
<element name="TControlBar.OnCanResize" link="#lcl.extctrls.TCustomControlBar.OnCanResize"/>
<element name="TControlBar.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TControlBar.OnConstrainedResize" link="#lcl.controls.TControl.OnConstrainedResize"/>
<element name="TControlBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TControlBar.OnDockDrop" link="#lcl.controls.TWinControl.OnDockDrop"/>
<element name="TControlBar.OnDockOver" link="#lcl.controls.TWinControl.OnDockOver"/>
<element name="TControlBar.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TControlBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TControlBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TControlBar.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TControlBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TControlBar.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TControlBar.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TControlBar.OnGetSiteInfo" link="#lcl.controls.TWinControl.OnGetSiteInfo"/>
<element name="TControlBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TControlBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TControlBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TControlBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TControlBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TControlBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TControlBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TControlBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TControlBar.OnPaint" link="#lcl.extctrls.TCustomControlBar.OnPaint"/>
<element name="TControlBar.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TControlBar.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TControlBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TControlBar.OnUnDock" link="#lcl.controls.TWinControl.OnUnDock"/>

<element name="Frame3D">
<short>Provides a wrapper for the Frame3D method in TCanvas.</short>
<descr>
<p>
<var>Frame3D</var> is a procedure which provides a wrapper for the 
<var>Frame3D</var> method in <var>TCanvas</var>. <var>ACanvas</var> is the 
TCanvas instance used to perform the Frame3D method with the settings in the 
specified arguments.
</p>
</descr>
<seealso>
<link id="#lcl.graphics.TCanvas.Frame3D">TCanvas.Frame3D</link>
</seealso>
</element>
<element name="Frame3D.ACanvas">
<short>Canvas used to perform the 3D drawing routine.</short>
</element>
<element name="Frame3D.ARect">
<short>Coordinates for the drawing operation.</short>
</element>
<element name="Frame3D.TopColor">
<short>Pen color used to draw left and top lines in the frame.</short>
</element>
<element name="Frame3D.BottomColor">
<short>Pen color used to draw right and bottom lines in the frame.</short>
</element>
<element name="Frame3D.FrameWidth">
<short>Width required for the 3D frame.</short>
</element>

<element name="Register">
<short>
Registers components for use in the Lazarus IDE.
</short>
<descr>
<p>
Registers components for use in the Lazarus IDE.
</p>
<p>
Adds the following components to the Standard tab:
</p>
<ul>
<li>TRadioGroup</li>
<li>TCheckGroup</li>
<li>TPanel</li>
</ul>
<p>
Adds the following components to the Additional tab:
</p>
<ul>
<li>TImage</li>
<li>TShape</li>
<li>TBevel</li>
<li>TPaintBox</li>
<li>TNotebook</li>
<li>TLabeledEdit</li>
<li>TSplitter</li>
<li>TTrayIcon</li>
<li>TControlBar</li>
<li>TFlowPanel</li>
</ul>
<p>
Adds the following components to the System tab:
</p>
<ul>
<li>TTimer</li>
<li>TIdleTimer</li>
</ul>
<p>
Registers the TPage component as a component with no icon in the component 
palette.
</p>
</descr>
<seealso/>
</element>

<topic name="MultiPageControls">
<short>
<var>MultiPageControls</var> - controls that offer a selection of alternative 
pages for display.
</short>
<descr>
<p>
<var>MultiPageControls</var> - controls that offer a selection of alternative 
pages for display.
</p>
<p>
A number of controls, found in Units <var>ExtCtrls</var> and 
<var>ComCtrls</var>, offer the ability to create multi-page forms with a 
series of <var>Tabs</var> along one edge that allow the user to select one of 
the <var>Pages</var> for display and interaction.
</p>
<p>
These include: <var>TPageControl</var>, <var>TNoteBook</var>, 
<var>TTabControl</var> and <var>THeaderControl</var> (the Header Control 
components have a very different structure and function). Icons for all of 
these exist on the <var>Additional</var> or <var>Common Controls</var> tabs 
of the Component Palette in the Lazarus IDE.
</p>
<p>
While the various components may look superficially similar, they differ in 
properties, inheritance, method of adding additional pages, behavior at 
run-time, methods for referencing pages and so on.
</p>
<p>
We have to be very clear when using the various properties, to distinguish 
between the word 'Tab' as referring to a Tab indicating an identifier for a 
page, and 'Tab' as referring to the <b>TAB</b> key on the standard keyboard. 
In common with most Lazarus components, it is possible to enable each control 
to be included in the <var>TabOrder</var> of <var>TabStops</var> for a 
<var>Form</var>, so that the component can be reached by repeated pressing of 
the <b>TAB</b> key, and we must not confuse this use of 'Tab' with the use to 
denote a <var>Page</var>.
</p>
<p>
The properties <var>CanTab</var>, <var>TabStop</var> and <var>TabOrder</var> 
refer to the use of the <b>TAB</b> key to navigate to the relevant control.
</p>
<p>
Properties such as <var>Tabs</var>, <var>TabIndex</var>, 
<var>IndexOfTabAt()</var>, <var>TabIndexAtClientPos()</var>, 
<var>TabPosition</var>, <var>TabHeight</var>, <var>TabWidth</var>, 
<var>TabVisible</var>, <var>OnCloseTabClicked</var> refer to the use for 
<var>Page</var> selection.
</p>
<p>
<var>TTabControl</var> and <var>TPageControl</var> are both descended from 
<var>TCustomNoteBook</var> (which is in turn descended from 
<var>TWinControl</var>) and have many inherited properties in common. 
<var>TPageControl</var> has more advanced features and provides a wrapper for 
the native page control supported for the platform.
</p>
<p>
The following table summarizes the main differences between the two 
components.
</p>
<table>
<th>
<td>
Property or method
</td>
<td>
<var>TNoteBook</var>
</td>
<td>
<var>TPageControl</var>
</td>
</th>
<tr>
<td>Pages, ActivePage</td>
<td>String, <var>TPage</var>
</td>
<td>
<var>TTabSheet</var>, a more advanced version of <var>TPage</var>
</td>
</tr>
<tr>
<td>Drag/Drop/Dock</td>
<td>Drag properties, but minimal Dock or Drop</td>
<td>Full Drag, Drop, Dock properties and methods</td>
</tr>
<tr>
<td>Indexing</td>
<td>
<var>PageIndex</var>
</td>
<td>
<var>ActivePageIndex</var>, <var>TabIndex</var>
</td>
</tr>
<tr>
<td>Showing/Hiding Tabs</td>
<td>
<var>ShowTabs</var>
</td>
<td>
<var>TabVisible</var> in <var>TTabSheet</var>
</td>
</tr>
<tr>
<td>Hints</td>
<td>No Hinting methods</td>
<td>
<var>ShowHint</var>, <var>ParentShowHint</var>
</td>
</tr>
<tr>
<td>Font</td>
<td>No Font properties</td>
<td>
<var>Font</var>, <var>ParentFont</var>
</td>
</tr>
<tr>
<td>Sensing position of Tab</td>
<td>None</td>
<td><var>TabPosition</var>, <var>OnGetSiteInfo</var></td>
</tr>
<tr>
<td>Options</td>
<td>
Published property <var>Options</var>, include 
<var>nboShowCloseButtons</var>, <var>nboMultiLine</var>
</td>
<td>
No published <var>Options</var> property, but inherits <var>Options</var> 
(public property) from <var>TCustomNoteBook</var>, so they could be set 
explicitly in code
</td>
</tr>
</table>
<p>
The individual Pages in both of the above controls (descended from 
<var>TCustomNoteBook</var>) are separate and can have their own specific 
collections of widgets which appear only when the relevant Page is selected 
by its Tab.
</p>
<p>
In contrast, the <var>TTabControl</var> component (descended from 
<var>TCustomTabControl</var>) has only one display area (Protected property 
<var>DisplayRect</var>), but the image displayed in it is determined by which 
tab has been selected. Each Tab has an index value which is used to select 
the appropriate image from an indexed <var>ImageList</var> and display it in 
the Display Rectangle.
</p>
<p>
The properties of the Tabs in <var>TTabControl</var> are very configurable 
compared with those in the controls derived from <var>TCustomNoteBook</var>, 
allowing for instance the creation of multi-line captions, the placement of 
images on Tabs, the possibility of the Owner routine determining the drawing 
of the tab, the configuration of Tab size, the selection of multiple tabs. 
The trade-off is that the display area is restricted in what it can display, 
and is essentially confined to display of images.
</p>
<p>
To use any of the above controls, select them from the relevant tab on the 
IDE Component Palette and drop them on the form in the required position. 
Fill in as many relevant properties as you can in the Object Inspector.
</p>
<p>
To add Tabs or Pages to the controls, select the control with a left mouse 
click or by selecting from the Component menu in the Object Inspector, then 
right-click on the component to get a pop-up menu, whose first item will be 
'Add Page' or 'Add Tab'.
</p>
<p>
The Tabs in <var>TTabControl</var> can be edited by selecting 'Tabs' in the 
Object Inspector, clicking on the ellipsis (...) and using the pop-up string 
editor to maintain the tab/page names.
</p>
<p>
The pages in<var>TNoteBook</var> or <var>TPageControl</var> can be edited by 
selecting the <var>ActivePage</var> in the Object Inspector and then editing 
the properties of the individual page.
</p>
<p>
<var>THeaderControl</var> offers a widget that could be placed along the edge 
of a Panel or Form, allowing a highly customized mechanism for selection. 
However, there are no intrinsically associated display areas, and it is the 
developer's responsibility to supply an index associated with the selection 
from the <var>THeaderControl</var> and determining what action is to occur or 
what is to be displayed in any attached Panel or Form.
</p>
<p>
When the control is first selected from the Component Palette and placed on a 
Form, it consists of an unadorned rectangle. However, selecting the control 
and right-clicking (or selecting the 'Sections' property in the Object 
Inspector) gives access to a Sections editor (a TStringList editor) and 
Sections can be added to the control. The sections are separated by vertical 
lines, and each section can have a string inserted as a label, associated 
with an Index value. The Sections can be rearranged, re-ordered, or be 
individually painted.
</p>
<p>
In a typical application, a <var>THeaderControl</var> and a <var>TPanel</var> 
or <var>TForm</var> would be docked together. Code would be written to find 
which Section of the Header had been selected, then use its index to control 
the display in the other docked control.
</p>
</descr>
</topic>

</module>
</package>
<!-- ExtCtrls -->
</fpdoc-descriptions>
