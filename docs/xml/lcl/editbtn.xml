<?xml version="1.0" encoding="UTF-8"?>
<!--

Documentation for LCL (Lazarus Component Library) and LazUtils (Lazarus 
Utilities) are published under the Creative Commons Attribution-ShareAlike 4.0 
International public license.

https://creativecommons.org/licenses/by-sa/4.0/legalcode.txt
https://gitlab.com/freepascal.org/lazarus/lazarus/-/blob/main/docs/cc-by-sa-4-0.txt

Copyright (c) 1997-2025, by the Lazarus Development Team.

-->
<fpdoc-descriptions>
<package name="lcl">
<!--
====================================================================
EditBtn
====================================================================
-->
<module name="EditBtn">
<short>
Implements specialized edit controls with attached speed buttons.
</short>
<descr>
<p>
<file>editbtn.pas</file> contains specialized edit controls with an attached 
speed button used to perform an action when it is clicked. The following 
components are added to the Lazarus IDE Component Palette:
</p>
<p>
<b>Misc</b> tab
</p>
<ul>
<li>TEditButton</li>
<li>TFileNameEdit</li>
<li>TDirectoryEdit</li>
<li>TDateEdit</li>
<li>TTimeEdit</li>
<li>TCalcEdit</li>
</ul>
<p>
<file>editbtn.pas</file> is part of the LCL (Lazarus Component Library).
</p>
</descr>

<!-- unresolved type references -->
<element name="Classes"/>
<element name="SysUtils"/>
<element name="LCLProc"/>
<element name="LResources"/>
<element name="LCLStrConsts"/>
<element name="Types"/>
<element name="LCLType"/>
<element name="LMessages"/>
<element name="Graphics"/>
<element name="Controls"/>
<element name="Forms"/>
<element name="LazFileUtils"/>
<element name="LazUTF8"/>
<element name="Dialogs"/>
<element name="StdCtrls"/>
<element name="Buttons"/>
<element name="Calendar"/>
<element name="ExtDlgs"/>
<element name="GroupedEdit"/>
<element name="CalendarPopup"/>
<element name="MaskEdit"/>
<element name="Menus"/>
<element name="StrUtils"/>
<element name="DateUtils"/>
<element name="TimePopup"/>
<element name="CalcForm"/>
<element name="ImgList"/>
<element name="Math"/>

<element name="NullDate">
<short>Represents a TDateTime type without date and time values.</short>
<descr>
<p>
<var>NullDate</var> is actually a writeable constant. This is used for 
compatibility reasons. It is however a bad idea to change the value to 
anything that is an actual date that is withing the range for the TDateEdit 
control.
</p>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
</seealso>
<version>
The value was modified in LCL version 3.0.
</version>
</element>

<element name="NullTime">
<short>Represents a TDateTime type without a time value assigned.</short>
<descr/>
<seealso>
<link id="TTimeEdit.Time"/>
</seealso>
<version>
Added in LCL version 3.0.
</version>
</element>

<element name="TEbEdit">
<short>
Implements the embedded edit control used in TCustomEditButton.
</short>
<descr>
<p>
<var>TEbEdit</var> is a <var>TGEEdit</var> descendant which implements the 
embedded edit control used in <var>TCustomEditButton</var>. TEbEdit provides 
overridden methods to alter the behavior of the control when handling 
<var>OnEnter</var> and <var>OnExit</var> notifications.
</p>
</descr>
<seealso>
<link id="#lcl.groupededit.TGEEdit">TGEEdit</link>
</seealso>
</element>

<element name="TEbEdit.DoEnter">
<short>Performs actions needed when the control is entered.</short>
<descr>
<p>
Ensures that the button visibility and spacing for the Owner control are 
handled when the Owner is derived from TCustomEditButton. Calls the inherited 
method prior to exit.
</p>
</descr>
<seealso>
<link id="#lcl.maskedit.TCustomMaskEdit.DoEnter">TCustomMaskEdit.DoEnter</link>
</seealso>
</element>

<element name="TEbEdit.DoExit">
<short>Performs actions needed when the control is exited.</short>
<descr>
<p>
Ensures that the button visibility and spacing for the Owner control are 
handled when the Owner is derived from TCustomEditButton. Calls the inherited 
method prior to exit.
</p>
</descr>
<seealso>
<link id="#lcl.maskedit.TCustomMaskEdit.DoExit">TCustomMaskEdit.DoExit</link>
</seealso>
</element>

<element name="TEditSpeedButton">
<short>Implements a speed button used in TCustomEditButton.</short>
<descr>
<p>
<var>TEditSpeedButton</var> is a <var>TSpeedButton</var> descendant which 
provides support for change notifications for Glyphs used on the Button in 
<var>TCustomEditButton</var>.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.Button"/>
</seealso>
</element>

<element name="TEditSpeedButton.GlyphChanged">
<short>
Performs actions needed when the glyph has changed for the Button.
</short>
<descr>
<p>
Calls the corresponding method in the owner control when it is derived from 
TCustomEditButton.
</p>
</descr>
<seealso>
<link id="#lcl.buttons.TCustomSpeedButton.GlyphChanged">TCustomSpeedButton.GlyphChanged</link>
<link id="TCustomEditButton.GlyphChanged">TCustomEditButton.GlyphChanged</link>
</seealso>
</element>
<element name="TEditSpeedButton.GlyphChanged.Sender">
<short>Object generating the event notification.</short>
</element>

<element name="TCustomEditButton">
<short>
<var>TCustomEditButton</var> - base class for <var>TEditButton</var>, an Edit 
Box with attached Speed Button.
</short>
<descr>
<p>
<var>TCustomEditButton</var> is a <var>TCustomAbstractGroupedEdit</var> 
descendant which implements a composite control with both an <var>Edit</var> 
and a <var>Button</var>. It provides overridden methods which extend or 
re-implement those found in the ancestor classMost of the properties in the 
class are declared as protected, and must be exposed as public or published 
properties in an ancestor class like <var>TEditButton</var>.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.Edit"/>
<link id="TCustomEditButton.Button"/>
<link id="TCustomEditButton.OnButtonClick"/>
<link id="TEditButton"/>
</seealso>
</element>

<element name="TCustomEditButton.FButtonOnlyWhenFocused"/>
<element name="TCustomEditButton.FFlat"/>

<element name="TCustomEditButton.GetFocusOnButtonClick">
<short>Gets the value for the FocusOnButtonClick property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.FocusOnButtonClick"/>
</seealso>
</element>
<element name="TCustomEditButton.GetFocusOnButtonClick.Result">
<short>Value for the FocusOnButtonClick property.</short>
</element>

<element name="TCustomEditButton.GetOnButtonClick">
<short>Gets the value for the OnButtonClick property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.OnButtonClick"/>
</seealso>
</element>
<element name="TCustomEditButton.GetOnButtonClick.Result">
<short>Value for the OnButtonClick property.</short>
</element>

<element name="TCustomEditButton.GetButton">
<short>Gets the value for the Button property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.Button"/>
</seealso>
</element>
<element name="TCustomEditButton.GetButton.Result">
<short>Value for the Button property.</short>
</element>

<element name="TCustomEditButton.GetGlyph">
<short>Gets the value for the Glyph property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.Glyph"/>
</seealso>
</element>
<element name="TCustomEditButton.GetGlyph.Result">
<short>Value for the Glyph property.</short>
</element>

<element name="TCustomEditButton.GetNumGlyphs">
<short>Gets the value for the NumGlyphs property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.NumGlyphs"/>
</seealso>
</element>
<element name="TCustomEditButton.GetNumGlyphs.Result">
<short>Value for the NumGlyphs property.</short>
</element>

<element name="TCustomEditButton.GetEdit">
<short>Gets the value for the Edit property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.Edit"/>
</seealso>
</element>
<element name="TCustomEditButton.GetEdit.Result">
<short>Value for the Edit property.</short>
</element>

<element name="TCustomEditButton.SetFocusOnButtonClick">
<short>Sets the value for the FocusOnButtonClick property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.FocusOnButtonClick"/>
</seealso>
</element>
<element name="TCustomEditButton.SetFocusOnButtonClick.AValue">
<short>New value for the FocusOnButtonClick property.</short>
</element>

<element name="TCustomEditButton.SetOnButtonClick">
<short>Sets the value for the OnButtonClick property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.OnButtonClick"/>
</seealso>
</element>
<element name="TCustomEditButton.SetOnButtonClick.AValue">
<short>New value for the OnButtonClick property.</short>
</element>

<element name="TCustomEditButton.SetButtonOnlyWhenFocused">
<short>Sets the value for the ButtonOnlyWhenFocused property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.ButtonOnlyWhenFocused"/>
</seealso>
</element>
<element name="TCustomEditButton.SetButtonOnlyWhenFocused.AValue">
<short>New value for the ButtonOnlyWhenFocused property.</short>
</element>

<element name="TCustomEditButton.SetFlat">
<short>Sets the value for the Flat property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.Flat"/>
</seealso>
</element>
<element name="TCustomEditButton.SetFlat.AValue">
<short>New value for the Flat property.</short>
</element>

<element name="TCustomEditButton.SetGlyph">
<short>Sets the value for the Glyph property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.Glyph"/>
</seealso>
</element>
<element name="TCustomEditButton.SetGlyph.Pic">
<short>New value for the Glyph property.</short>
</element>

<element name="TCustomEditButton.SetNumGlyphs">
<short>Sets the value for the NumGlyphs property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.NumGlyphs"/>
</seealso>
</element>
<element name="TCustomEditButton.SetNumGlyphs.ANumber">
<short>New value for the NumGlyphs property.</short>
</element>

<element name="TCustomEditButton.GetImages">
<short>Gets the value for the Images property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.GetImages"/>
</seealso>
</element>
<element name="TCustomEditButton.GetImages.Result">
<short>Value for the Images property.</short>
</element>

<element name="TCustomEditButton.SetImages">
<short>Sets the value for the Images property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.Images"/>
</seealso>
</element>
<element name="TCustomEditButton.SetImages.aImages">
<short>New value for the Images property.</short>
</element>

<element name="TCustomEditButton.GetImageIndex">
<short>Gets the value for the ImageIndex property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.ImageIndex"/>
</seealso>
</element>
<element name="TCustomEditButton.GetImageIndex.Result">
<short>Value for the ImageIndex property.</short>
</element>

<element name="TCustomEditButton.SetImageIndex">
<short>Sets the value for the ImageIndex property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.ImageIndex"/>
</seealso>
</element>
<element name="TCustomEditButton.SetImageIndex.AImageIndex">
<short>New value for the ImageIndex property.</short>
</element>

<element name="TCustomEditButton.GetImageWidth">
<short>Gets the value for the ImageWidth property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.ImageWidth"/>
</seealso>
</element>
<element name="TCustomEditButton.GetImageWidth.Result">
<short>Value for the ImageWidth property.</short>
</element>

<element name="TCustomEditButton.SetImageWidth">
<short>Sets the value for the ImageWidth property.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.ImageWidth"/>
</seealso>
</element>
<element name="TCustomEditButton.SetImageWidth.aImageWidth">
<short>New value for the ImageWidth property.</short>
</element>

<element name="TCustomEditButton.ButtonClick">
<short>
Performs actions needed when the button for the control is clicked.
</short>
<descr>
<p>
The <var>ButtonClick</var> it a virtual method in 
<var>TCustomEditButton</var>, and the implementation is empty; use a 
descendent class which re-implements the method with the functionality needed 
for the control.
</p>
</descr>
<seealso>
</seealso>
</element>

<element name="TCustomEditButton.BuddyClick">
<short>
Performs actions needed when the Button for the control is clicked.
</short>
<descr>
<p>
<var>BuddyClick</var> calls the inherited method on entry to signal the 
OnBuddyClick event handler (when assigned), and to perform focus and 
selection changes. It calls the ButtonClick method to forward the click event 
to the Edit control.
</p>
<p>
BuddyClick is called from the private InternalOnBuddyClick method used as the 
OnClick handler for the Button in the grouped edit control.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.Button"/>
<link id="TCustomEditButton.ButtonClick"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.BuddyClick">TCustomAbstractGroupedEdit.BuddyClick</link>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.OnBuddyClick">TCustomAbstractGroupedEdit.OnBuddyClick</link>
</seealso>
</element>

<element name="TCustomEditButton.GetEditorClassType">
<short>
Gets the class type used to create a new edit control instance in the class.
</short>
<descr></descr>
<seealso></seealso>
</element>
<element name="TCustomEditButton.GetEditorClassType.Result">
<short>Class type for the edit control.</short>
</element>

<element name="TCustomEditButton.GetBuddyClassType">
<short>
Gets the class type used to create the associated button control for the 
class.
</short>
<descr></descr>
<seealso></seealso>
</element>
<element name="TCustomEditButton.GetBuddyClassType.Result">
<short>Class type for the button control.</short>
</element>

<element name="TCustomEditButton.GetControlClassDefaultSize">
<short>Gets the default size used for new instances of the class.</short>
<descr>
<p>
The return value is a <var>TSize</var> type with the dimensions for the 
control. The CX member contains the width needed for both the <var>Edit</var> 
and the <var>Button</var> controls in the grouped edit control. The CY member 
contains the height used for the Edit and the Button controls.
</p>
<p>
GetControlClassDefaultSize is called in the constructor for the class 
instance, and used to set the initial bounds for the control.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.Edit"/>
<link id="TCustomEditButton.Button"/>
<link id="TCustomEditButton.Create"/>
<link id="#lcl.controls.TControl.SetInitialBounds">TControl.SetInitialBounds</link>
</seealso>
</element>
<element name="TCustomEditButton.GetControlClassDefaultSize.Result">
<short>TSize value with the dimensions for the new class instance.</short>
</element>

<element name="TCustomEditButton.CalcButtonVisible">
<short>
Determines whether the Button for the control should be visible.
</short>
<descr>
<p>
<var>CalcButtonVisible</var> is a <var>Boolean</var> function used to 
determine whether the <var>Button</var> for the control should be visible. 
The return value is <b>True</b> when the control is Visible and the Edit has 
focus, or the control is not configured to display its button only when 
focused.
</p>
<remark>
The return value is always <b>True</b> at design-time.
</remark>
<p>
CalcButtonVisible is used in the implementation of the 
<var>CheckButtonVisible</var> method.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.Button"/>
<link id="TCustomEditButton.ButtonOnlyWhenFocused"/>
<link id="TCustomEditButton.Edit"/>
<link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
</seealso>
</element>
<element name="TCustomEditButton.CalcButtonVisible.Result">
<short>
<b>True</b> if the control is visible and has focus, or is configured to 
always shows its editor button.
</short>
</element>

<element name="TCustomEditButton.GetDefaultGlyphName">
<short>
Gets the name of the default glyph resource used for the Button on the 
control.
</short>
<descr>
<p>
<var>GetDefaultGlyphName</var> is String function used to get the default 
resource name with the glyph image for the Button on the control. It is used 
in the LoadDefaultGlyph method to assign the LCLGlyphName for the 
TButtonGlyph instance used in the control.
</p>
<p>
GetDefaultGlyphName is a virtual method in TCustomEditButton, and does not 
provide an actual value (other than an empty string). It must be 
re-implemented in a descendant class to return the name for its glyph 
resource. Descendants include:
</p>
<ul>
<li>TCustomControlFilterEdit</li>
<li>TFileNameEdit</li>
<li>TDirectoryEdit</li>
<li>TDateEdit</li>
<li>TTimeEdit</li>
<li>TCalcEdit</li>
</ul>
</descr>
<seealso>
<link id="TCustomControlFilterEdit"/>
<link id="TFileNameEdit"/>
<link id="TDirectoryEdit"/>
<link id="TDateEdit"/>
<link id="TTimeEdit"/>
<link id="TCalcEdit"/>
<link id="#lcl.buttons.TButtonGlyph.LCLGlyphName">TButtonGlyph.LCLGlyphName</link>
</seealso>
</element>
<element name="TCustomEditButton.GetDefaultGlyphName.Result">
<short>
Default resource name for the glyph image on the Button in the control.
</short>
</element>

<element name="TCustomEditButton.CalculatePreferredSize" link="#lcl.groupededit.TCustomAbstractGroupedEdit.CalculatePreferredSize"/>
<element name="TCustomEditButton.CalculatePreferredSize.PreferredWidth"/>
<element name="TCustomEditButton.CalculatePreferredSize.PreferredHeight"/>
<element name="TCustomEditButton.CalculatePreferredSize.WithThemeSpace"/>

<element name="TCustomEditButton.CheckButtonVisible">
<short>
Ensures the Button for the control is configured and its visibility is set.
</short>
<descr>
<p>
<var>CheckButtonVisible</var> is a procedure which ensures that the 
<var>Button</var> in the control is configured and its visibility is set. If 
Button has not been assigned (contains Nil), no actions are performed in the 
method.
</p>
<p>
Otherwise, the <var>Visible</var> property in <var>Button</var> is set to the 
value returned by <var>CalcButtonVisible</var>. <var>UpdateSpacing</var> is 
called to adjust the space between <var>Edit</var> and <var>Button</var> as 
needed for its visibility and <var>Layout</var>.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.Button"/>
<link id="TCustomEditButton.Edit"/>
<link id="TCustomEditButton.CalcButtonVisible"/>
<link id="TCustomAbstractGroupedEdit.UpdateSpacing"/>
</seealso>
</element>

<element name="TCustomEditButton.LoadDefaultGlyph">
<short>
Loads the default glyph displayed on the Button for the control.
</short>
<descr>
<p>
<var>LoadDefaultGlyph</var> calls GetDefaultGlyphName to get the name for the 
default glyph resource defined for the class instance. In TCustomEditButton, 
this is an empty string (''). In a descendent class, another value may be 
provided. If a glyph name is found, it is assigned to the ButtonGlyph in the 
Button for the control.
</p>
<p>
LoadDefaultGlyph is called when Nil assigned to the Glyph property in the 
control.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomEditButton.GlyphChanged">
<short>
Performs action needed when the glyph assigned in Button has been changed.
</short>
<descr></descr>
<seealso></seealso>
</element>
<element name="TCustomEditButton.GlyphChanged.Sender">
<short>Object for the event notification.</short>
</element>

<element name="TCustomEditButton.Button">
<short>
TSpeedButton instance used on the edit control.
</short>
<descr>
<p>
<var>Button</var> is a read-only <var>TSpeedButton</var> property with the 
Button displayed on edit control.
</p>
<p>
Use ButtonWidth, ButtonCaption, ButtonCursor, and ButtonHint to set the 
display attributes for the Button in the grouped edit control.
</p>
<p>
At run-time, Button is cast to the TEditSpeedButton type to access the 
default glyph name for the control. Use Glyph to assign a bitmap used as the 
glyph for the speed button. As an alternative, the Images property can be 
used along with ImageIndex and ImageWidth to define an image displayed on the 
Button.
</p>
<p>
Use the OnButtonClick event handler to implement the actions performed when 
the Button is clicked.
</p>
<p>
Use FocusOnButtonClick to define whether the Edit control receives focus when 
the Button is clicked.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomEditButton.ButtonCaption">
<short>Contains the caption used for the Button on the edit control.</short>
<descr>
<p>
The property is read from and written to the Caption property for the 
associated Button control.
</p>
</descr>
<seealso>
<link id="#lcl.buttons.TSpeedButton.Caption">TSpeedButton.Caption</link>
</seealso>
</element>

<element name="TCustomEditButton.ButtonCursor">
<short>
Cursor shape displayed when the mouse hovers over the Button in the control.
</short>
<descr>
<p>
<var>ButtonCursor</var> is a <var>TCursor</var> property with the cursor 
shape displayed when the mouse pointer is hovered over the Button for the 
edit control. The property value is read from and written to the Cursor 
property in the associated Button control.
</p>
<p>
The default value for the property is crDefault.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomEditButton.ButtonHint">
<short>
Text displayed in the pop-up hint window when the mouse hovers over the 
button.
</short>
<descr>
<p>
The property value is read from and written to the Hint property in the 
associated Button for the edit control.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomEditButton.ButtonOnlyWhenFocused">
<short>
<var>ButtonOnlyWhenFocused</var> - if <b>True</b>, the SpeedButton only 
appears when focus is given to the EditButton control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomEditButton.ButtonWidth">
<short>
Width for the TSpeedButton on the edit control.
</short>
<descr>
<p>
The property value is read from and written to the Width property in the 
associated Button on the edit control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomEditButton.Edit">
<short>
Edit is the TEbEdit control used to perform direct input for the value in the 
grouped edit control.
</short>
<descr></descr>
<seealso>
<link id="TEbEdit"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.BaseEditor">TCustomAbstractGroupedEdit.BaseEditor</link>
</seealso>
</element>

<element name="TCustomEditButton.Flat">
<short>
When <b>True</b>, the SpeedButton has a flat appearance rather than a 
three-dimensional one.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomEditButton.FocusOnButtonClick">
<short>
Indicates if the focus is changed to the Edit control after the Button is 
clicked.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TCustomEditButton.Glyph">
<short>
<var>Glyph</var> - the small graphic image on the SpeedButton, which ought to 
indicate its function.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomEditButton.NumGlyphs">
<short>
<var>NumGlyphs</var> - the number of available glyphs.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomEditButton.Images">
<short>
Contains the Images that can be displayed on the Button for the grouped edit 
control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TCustomEditButton.ImageIndex">
<short>
Ordinal position in Images for the bitmap displayed on the Button control.
</short>
<descr>
<p>
Read and write access for the property are redirected to the 
<var>ImageIndex</var> property in <var>Button</var>.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.Button"/>
</seealso>
</element>

<element name="TCustomEditButton.ImageWidth">
<short>
Specifies the width of the image displayed on the Button control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TCustomEditButton.Spacing">
<short>
Specifies the number of pixels reserved between the Edit and Button controls 
when Button is visible.
</short>
<descr>
<p>
The default value for the property is 4 in TCustomEditButton.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomEditButton.OnButtonClick">
<short>
<var>OnButtonClick</var> - event handler for a mouse click on the SpeedButton.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomEditButton.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TCustomEditButton</var>. It 
calls the inherited <var>Create</var> method then sets default values and 
initializes variables.
</p>
<p>
Initializes height and width, cursor, glyph, style, checks visibility, event 
handler for click.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
<link id="#lcl.stdctrls.TCustomEdit.Create">TCustomEdit.Create</link>
<link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
</seealso>
</element>
<element name="TCustomEditButton.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomEditButton.Destroy">
<short>Destructor for the class instance.</short>
<descr></descr>
<seealso>
<link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
</seealso>
</element>

<element name="TEditButton">
<short>
Implements a grouped edit control with both an Edit and a Button.
</short>
<descr>
<p>
<var>TEditButton</var> implements a grouped edit control with both an 
<var>Edit</var> and a <var>Button</var>. TEditButton is derived from the 
<var>TCustomEditButton</var> class, and sets the visibility for properties 
declared in the ancestor classes.
</p>
</descr>
<seealso>
<link id="TCustomEditButton"/>
<link id="TCustomEditButton.Edit"/>
<link id="TCustomEditButton.Button"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit">TCustomAbstractGroupedEdit</link>
</seealso>
</element>

<element name="TEditButton.AutoSelected" link="#lcl.groupededit.TCustomAbstractGroupedEdit.AutoSelected"/>
<element name="TEditButton.Button" link="#lcl.editbtn.TCustomEditButton.Button"/>
<element name="TEditButton.Edit" link="#lcl.editbtn.TCustomEditButton.Edit"/>
<element name="TEditButton.NumbersOnly" link="#lcl.groupededit.TCustomAbstractGroupedEdit.NumbersOnly"/>
<element name="TEditButton.Action" link="#lcl.controls.TControl.Action"/>
<element name="TEditButton.AutoSelect" link="#lcl.stdctrls.TCustomEdit.AutoSelect"/>

<element name="TEditButton.AutoSize">
<short>
Enables automatic adjustment of the size for the control, according to its 
content.
</short>
<descr>
<p>
AutoSize is a Boolean property which allows the control to automatically 
adjustment its size to the content in the control. The default value for the 
property is <b>True</b> in TEditButton.
</p>
</descr>
<seealso>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.AutoSize">TCustomAbstractGroupedEdit.AutoSize</link>
</seealso>
</element>

<element name="TEditButton.Align" link="#lcl.controls.TControl.Align"/>
<element name="TEditButton.Alignment" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Alignment"/>
<element name="TEditButton.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TEditButton.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TEditButton.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>

<element name="TEditButton.BorderStyle">
<short>Style for the Border drawn around the control.</short>
<descr>
<p>
The default value for the property is <var>bsNone</var> in 
<var>TEditButton</var>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.BorderStyle">TWinControl.BorderStyle</link>
</seealso>
</element>

<element name="TEditButton.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
<element name="TEditButton.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
<element name="TEditButton.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
<element name="TEditButton.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
<element name="TEditButton.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
<element name="TEditButton.CharCase" link="#lcl.groupededit.TCustomAbstractGroupedEdit.CharCase"/>
<element name="TEditButton.Color" link="#lcl.controls.TControl.Color"/>
<element name="TEditButton.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TEditButton.Cursor" link="#lcl.controls.TControl.Cursor"/>
<element name="TEditButton.DirectInput" link="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput"/>
<element name="TEditButton.EchoMode" link="#lcl.stdctrls.TCustomEdit.EchoMode"/>
<element name="TEditButton.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TEditButton.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
<element name="TEditButton.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
<element name="TEditButton.Font" link="#lcl.controls.TControl.Font"/>
<element name="TEditButton.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
<element name="TEditButton.Hint" link="#lcl.controls.TControl.Hint"/>
<element name="TEditButton.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
<element name="TEditButton.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
<element name="TEditButton.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
<element name="TEditButton.Layout" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Layout"/>
<element name="TEditButton.MaxLength" link="#lcl.stdctrls.TCustomEdit.MaxLength"/>
<element name="TEditButton.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
<element name="TEditButton.ParentBidiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TEditButton.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TEditButton.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TEditButton.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TEditButton.PasswordChar" link="#lcl.stdctrls.TCustomEdit.PasswordChar"/>
<element name="TEditButton.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TEditButton.ReadOnly" link="#lcl.stdctrls.TCustomEdit.ReadOnly"/>
<element name="TEditButton.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TEditButton.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
<element name="TEditButton.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TEditButton.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TEditButton.Text" link="#lcl.stdctrls.TCustomEdit.Text"/>
<element name="TEditButton.TextHint" link="#lcl.stdctrls.TCustomEdit.TextHint"/>
<element name="TEditButton.Visible" link="#lcl.controls.TControl.Visible"/>

<element name="TEditButton.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
<element name="TEditButton.OnChange" link="#lcl.stdctrls.TCustomEdit.OnChange"/>
<element name="TEditButton.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TEditButton.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TEditButton.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TEditButton.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TEditButton.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TEditButton.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
<element name="TEditButton.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TEditButton.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TEditButton.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TEditButton.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TEditButton.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TEditButton.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TEditButton.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TEditButton.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TEditButton.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TEditButton.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TEditButton.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TEditButton.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TEditButton.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TEditButton.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TEditButton.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TEditButton.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TFilterStringOption">
<short>String filter options which can be enabled in controls.</short>
<descr>
<p>
<var>TFilterStringOption</var> is an enumerated type with values representing 
string filter options which can be enabled in controls which support the 
feature. TFilterStringOption values are stored in the 
<var>TFilterStringOptions</var> set type used to implement the 
<var>FilterOptions</var> property in <var>TCustomControlFilterEdit</var>.
</p>
</descr>
<seealso>
<link id="TFilterStringOptions"/>
<link id="TCustomControlFilterEdit.FilterOptions"/>
</seealso>
</element>
<element name="TFilterStringOption.fsoCaseSensitive">
<short>Value comparisons are case sensitive.</short>
</element>
<element name="TFilterStringOption.fsoMatchOnlyAtStart">
<short>Value comparisons start at the beginning to the string value.</short>
</element>

<element name="TFilterStringOptions">
<short>
Set type used to store values from the TFilterStringOption enumeration.
</short>
<descr></descr>
<seealso>
<link id="TFilterStringOption"/>
<link id="TCustomControlFilterEdit.FilterOptions"/>
</seealso>
</element>

<element name="TFilterItemEvent">
<short>
Specifies an event handler used to filter data items in 
TCustomControlFilterEdit.
</short>
<descr>
<p>
<var>TFilterItemEvent</var> is a <var>Boolean</var> object function type that 
specifies an event handler used to filter data items in 
<var>TCustomControlFilterEdit</var>. The return value is <b>True</b> if an 
item matches a filter condition implemented in the event handler. 
<var>Done</var> can be updated to indicate if the item requires additional 
filtering on the title string in the data item; when it contains <b>True</b>, 
no additional filtering is needed.
</p>
<p>
<var>TFilterItemEvent</var> is the type used for the <var>OnFilterItem</var> 
event handler in <var>TCustomControlFilterEdit</var>.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.OnFilterItem"/>
<link id="TCustomControlFilterEdit.OnFilterItemEx"/>
<link id="TFilterItemExEvent"/>
</seealso>
</element>
<element name="TFilterItemEvent.Result">
<short>
<b>True</b> if the item matches the filter implemented in the event handler.
</short>
</element>
<element name="TFilterItemEvent.ItemData">
<short>Pointer to the data for the item examined in the event handler.</short>
</element>
<element name="TFilterItemEvent.Done">
<short>
Indicates if additional filtering is needed on the title of the item data.
</short>
</element>

<element name="TFilterItemExEvent">
<short>
Specifies an event handler used to filter data items in 
TCustomControlFilterEdit.
</short>
<descr>
<p>
<var>TFilterItemExEvent</var> is a <var>Boolean</var> object function type 
that specifies an event handler used to filter data items in 
<var>TCustomControlFilterEdit</var>. It is similar to 
<var>TFilterItemEvent</var>, but provides an additional argument with the 
caption for the data item.
</p>
<p>
The return value is <b>True</b> if an item matches a filter condition 
implemented in the event handler. <var>Done</var> can be updated to indicate 
if the item requires additional filtering on the title string in the data 
item; when it contains <b>True</b>, no additional filtering is needed.
</p>
<p>
<var>TFilterItemEventEx</var> is the type used for the 
<var>OnFilterItemEx</var> event handler in 
<var>TCustomControlFilterEdit</var>.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.OnFilterItem"/>
<link id="TCustomControlFilterEdit.OnFilterItemEx"/>
<link id="TFilterItemExEvent"/>
</seealso>
</element>
<element name="TFilterItemExEvent.Result">
<short>
<b>True</b> if the item matches the filter implemented in the event handler.
</short>
</element>
<element name="TFilterItemExEvent.ACaption">
<short>
Caption or display name for the item examined in the event handler.
</short>
</element>
<element name="TFilterItemExEvent.ItemData">
<short>Pointer to the data for the item examined in the event handler.</short>
</element>
<element name="TFilterItemExEvent.Done">
<short>
Indicates if additional filtering is needed for the caption or item data.
</short>
</element>

<element name="TCheckItemEvent">
<short>
Specifies an event handler is to determine if the specified Item is checked.
</short>
<descr>
<p>
<var>TCheckItemEvent</var> specifies an event handler that can be used only 
for items that have a checkbox. Returns <b>True</b> when the item is checked. 
It will be necessary to cast the object instance in Item to the correct data 
type in the event handler to access properties introduced in a 
<var>TObject</var> descendant.
</p>
<p>
TCheckItemEvent is the type used to implement the <var>OnCheckItem</var> 
event handler in <var>TCustomControlFilterEdit</var>.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.OnCheckItem"/>
</seealso>
</element>
<element name="TCheckItemEvent.Result">
<short><b>True</b> when the item is checked.</short>
</element>
<element name="TCheckItemEvent.Item">
<short>Object examined in the method.</short>
</element>

<element name="TCustomControlFilterEdit">
<short>
Base class for edit controls which filter data in an associated control like 
TListbox or TTreeview.
</short>
<descr>
<p>
When the container control is connected to a filter control, the filtering 
happens automatically as a user enters text. When the filter is empty and 
does not have focus, it displays the grayed value "(filter)".
</p>
</descr>
</element>

<!-- private -->
<element name="TCustomControlFilterEdit.fFilter"/>
<element name="TCustomControlFilterEdit.fFilterLowercase"/>
<element name="TCustomControlFilterEdit.fFilterOptions"/>
<element name="TCustomControlFilterEdit.fIdleConnected"/>
<element name="TCustomControlFilterEdit.fSortData"/>
<element name="TCustomControlFilterEdit.fIsFirstSetFormActivate"/>
<element name="TCustomControlFilterEdit.fOnAfterFilter"/>

<element name="TCustomControlFilterEdit.ApplyFilter">
<short>Filters the data and updates the container.</short>
<descr>
<p>
Does its job at once when Immediately is set to <b>True</b>. Otherwise, it 
connects the asynchronous event handler routine which applies the filter 
asynchronously in the Application.
</p>
</descr>
</element>
<element name="TCustomControlFilterEdit.ApplyFilter.Immediately">
<short>Indicates the filter is applied immediately.</short>
</element>

<element name="TCustomControlFilterEdit.GetFilter">
<short>
Gets the value for the Filter property.
</short>
<descr/>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
</seealso>
</element>
<element name="TCustomControlFilterEdit.GetFilter.Result">
<short>
Value for the Filter property.
</short>
</element>

<element name="TCustomControlFilterEdit.SetFilter">
<short>
Sets the value for the Filter property.
</short>
<descr/>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
</seealso>
</element>
<element name="TCustomControlFilterEdit.SetFilter.AValue">
<short>New value for the Filter property.</short>
</element>

<element name="TCustomControlFilterEdit.SetFilterOptions"/>
<element name="TCustomControlFilterEdit.SetFilterOptions.AValue"/>
<element name="TCustomControlFilterEdit.SetSortData"/>
<element name="TCustomControlFilterEdit.SetSortData.AValue"/>

<element name="TCustomControlFilterEdit.SetIdleConnected">
<short>Sets the value for the IdleConnected property.</short>
<descr/>
<seealso>
<link id="TCustomControlFilterEdit.IdleConnected"/>
</seealso>
</element>
<element name="TCustomControlFilterEdit.SetIdleConnected.AValue">
<short>New value for the property.</short>
</element>

<!-- private -->
<element name="TCustomControlFilterEdit.OnAsync">
<short>
Performs actions to asynchronously apply the Filter to the Items for the 
control.
</short>
<descr>
<p>
<var>OnAsync</var> is a method used apply the value in the Filter property to 
the sorted Items for the control. It implements the TDataEvent routine passed 
as an argument to the Application.QueueAsyncCall method.
</p>
<p>
OnAsync ensures that the internal flag for pending filter updates is handled 
by calling the private ApplyFilter method to immediately apply the pending 
updates. Use the OnFilterItemEx or OnFilterItem (deprecated) event handlers to 
perform actions needed to implement the filter.
</p>
<p>
OnAsync is executed (via Application.QueueAsyncCall) when the value in 
IdleConnected is changed to <b>True</b>. This occurs when InvalidateFilter or 
ForceFilter are called.
</p>
<p>
The value in IdleConnected is reset to <b>False</b> when the filter has been 
applied to the items in the control. OnAsync signals the OnAfterFilter event 
handler (when assigned).
</p>
</descr>
<version>
Introduced in LCL version 3.0 as a replacement for the OnIdle event handler 
routine.
</version>
<seealso>
<link id="TCustomControlFilterEdit.OnFilterItem"/>
<link id="TCustomControlFilterEdit.OnFilterItemEx"/>
<link id="TCustomControlFilterEdit.IdleConnected"/>
<link id="TCustomControlFilterEdit.OnAfterFilter"/>
<link id="TCustomControlFilterEdit.InvalidateFilter"/>
<link id="TCustomControlFilterEdit.ForceFilter"/>
<link id="#lcl.forms.TApplication.QueueAsyncCall">TApplication.QueueAsyncCall</link>
</seealso>
</element>
<element name="TCustomControlFilterEdit.OnAsync.Data">
<short>
Pointer to an Integer with the data for the asynchronous method. Always 
contains 0 in OnAsync.
</short>
</element>

<element name="TCustomControlFilterEdit.IsTextHintStored">
<short>
Indicates if the value in TextHint is stored in the LCL component streaming 
mechanism.
</short>
<descr>
<p>
The value is <b>True</b> when <var>TextHint</var> contains a value other than 
the default value in the <var>rsFilter</var> resource string.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomControlFilterEdit.IsTextHintStored.Result">
<short>
<b>True</b> when TextHint is included in the LCL component stream.
</short>
</element>

<element name="TCustomControlFilterEdit.fNeedUpdate">
<short>
Flag which indicates that the filter has been updated and needs to be applied.
</short>
</element>

<element name="TCustomControlFilterEdit.fIsFirstUpdate">
<short>
Flag indicating if the filter has ever been applied.
</short>
</element>

<element name="TCustomControlFilterEdit.fSelectedPart">
<short>Node to select during the next update.</short>
</element>

<element name="TCustomControlFilterEdit.fOnFilterItem">
<short>Stores the event handler in the OnFilterItem property.</short>
</element>

<element name="TCustomControlFilterEdit.fOnFilterItemEx">
<short>Stores the event handler in the OnFilterItemEx property.</short>
</element>

<element name="TCustomControlFilterEdit.fOnCheckItem">
<short>Stores the event handler in the OnCheckItem property.</short>
</element>

<element name="TCustomControlFilterEdit.DestroyWnd">
<short>
Ensures that the Canvas for the control is freed before the window handle is 
destroyed.
</short>
<descr>
Calls the inherited DestroyWnd method.
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.DestroyWnd">TWinControl.DestroyWnd</link>
</seealso>
</element>

<element name="TCustomControlFilterEdit.InternalSetFilter">
<short>
Performs actions needed when a new value is assigned to the Filter property.
</short>
<descr>
<p>
<var>InternalSetFilter</var> is called from the write access specifier for the 
<var>Filter</var> property. It performs actions needed when the value in 
Filter has been changed (and applied to Text), and the control needs to be 
updated to reflect the modified value.
</p>
<ul>
<li>
Sets the enabled state for the Button on the control; it is enabled when the 
AValue argument contains a non-empty value.
</li>
<li>
Sets the values in members for the Filter and FilterLowercase properties.
</li>
<li>
Calls Invalidatefilter to update internal members which cause the control to 
refresh the list of filtered items when an idle state occurs.
</li>
</ul>
</descr>
<version>
Added in LCL version 3.0.
</version>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
<link id="TCustomEditButton.Button"/>
</seealso>
</element>
<element name="TCustomControlFilterEdit.InternalSetFilter.AValue">
<short>
New filter value applied in the method.
</short>
</element>

<element name="TCustomControlFilterEdit.DoDefaultFilterItem">
<short>
Provides a default routine used to examine an item in the filtered edit 
control.
</short>
<descr>
<p>
Signals the OnFilterItemEx (preferred) or OnFilterItem (deprecated) event 
handlers (when assigned) to determine if the item meets the Filter condition. 
Values in <var>ACaption</var> and <var>ItemData</var> are passed as arguments 
to the event handlers.
</p>
<p>
The return value is <b>True</b> when the item matches the Filter value. The 
DoDefaultFilterItem method is called when the return value from the event 
handlers is <b>False</b>, or the event handlers are not assigned in the class 
instance.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.DoFilterItem"/>
<link id="TCustomControlFilterEdit.OnFilterItem"/>
<link id="TCustomControlFilterEdit.OnFilterItemEx"/>
</seealso>
</element>
<element name="TCustomControlFilterEdit.DoDefaultFilterItem.Result">
<short><b>True</b> when the item meets the filter condition.</short>
</element>
<element name="TCustomControlFilterEdit.DoDefaultFilterItem.ACaption">
<short>Caption for the item passed to DoDefaultFilterItem.</short>
</element>
<element name="TCustomControlFilterEdit.DoDefaultFilterItem.ItemData">
<short>Pointer to the data for the item examined in the method.</short>
</element>

<element name="TCustomControlFilterEdit.DoFilterItem">
<short>Filters items using the handlers for the control.</short>
<descr></descr>
<seealso></seealso>
</element>
<element name="TCustomControlFilterEdit.DoFilterItem.Result">
<short>Returns <b>True</b> when the item meets the filter criterion.</short>
</element>
<element name="TCustomControlFilterEdit.DoFilterItem.ACaption">
<short>Caption for the item.</short>
</element>
<element name="TCustomControlFilterEdit.DoFilterItem.ItemData">
<short>Pointer to the data for the item.</short>
</element>

<element name="TCustomControlFilterEdit.EditKeyDown">
<short>
Handles a KeyDown event for the Edit control.
</short>
<descr>
<p>
<var>EditKeyDown</var> is an overridden method in 
<var>TCustomControlFilterEdit</var>. It implements the OnKeyDown event handler 
for the Edit in the grouped edit control. It calls the inherited EditKeyDown 
method on entry to signal an assigned OnEditKeyDown handler using the values in 
Key and Shift. No additional actions are performed if Key is set to 0 in the 
inherited method.
</p>
<p>
EditKeyDown extends the inherited method to handle additional key down events, 
including:
</p>
<ul>
<li>Return</li>
<li>Up, Shift+Up</li>
<li>Down, Shift+Down</li>
<li>PageUp, Shift+PageUp</li>
<li>PageDn, Shift+PageDn</li>
<li>Home, Shift+Home, Ctrl+Home</li>
<li>End, Shift+End, Ctrl+End</li>
</ul>
<p>
The methods called to respond to the key down event are declared as abstract 
virtual methods in TCustomControlFilterEdit; they are implemented in 
descendent classes to call methods in the associated control for the filter 
edit control.
</p>
<p>
If the value in Key is handled in the method, Key is set to VK_UNKNOWN (0).
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.ReturnKeyHandled"/>
<link id="TCustomControlFilterEdit.MovePrev"/>
<link id="TCustomControlFilterEdit.MoveNext"/>
<link id="TCustomControlFilterEdit.MovePageUp"/>
<link id="TCustomControlFilterEdit.MovePageDown"/>
<link id="TCustomControlFilterEdit.MoveHome"/>
<link id="TCustomControlFilterEdit.MoveEnd"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.EditKeyDown">TCustomAbstractGroupedEdit.EditKeyDown</link>
</seealso>
</element>
<element name="TCustomControlFilterEdit.EditKeyDown.Key">
<short>
Virtual key code for the key down event.
</short>
</element>
<element name="TCustomControlFilterEdit.EditKeyDown.Shift">
<short>
Shift, Alt, or Ctrl modifier for the key down event.
</short>
</element>

<element name="TCustomControlFilterEdit.EditChange">
<short>
Performs actions needed when the Edit for the control is changed.
</short>
<descr>
<p>
<var>EditChange</var> is an overridden method in 
<var>TCustomControlFilterEdit</var> used to apply the Filter for the control 
when its value has been changed in the edit control. EditChange calls the 
InternalSetFilter method to apply the Filter value and update the enabled 
state for the Button on the control.
</p>
</descr>
<version>
Modified in LCL version 3.0 to call InternalSetFilter.
</version>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
<link id="TCustomControlFilterEdit.Text"/>
<link id="TCustomControlFilterEdit.InternalSetFilter"/>
<link id="TCustomControlFilterEdit.InvalidateFilter"/>
<link id="TCustomEditButton.Button"/>
</seealso>
</element>

<element name="TCustomControlFilterEdit.BuddyClick">
<short>Performs actions when the Button for the control is clicked.</short>
<descr>
<p>
<var>BuddyClick</var> is an overridden method used to perform actions needed 
when the Button for the control is clicked. It clears values in the 
<var>Text</var> and <var>Filter</var> properties, and gives focus to the 
<var>Edit</var> when <var>FocusOnButtonClick</var> is set to <b>True</b>. It 
calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
``<link id="TCustomControlFilterEdit.FocusOnButtonClick"/>
<link id="TCustomEditButton.Edit"/>
<link id="#lcl.controls.TControl.Text">TControl.Text</link>
</seealso>
</element>

<element name="TCustomControlFilterEdit.SortAndFilter">
<short>
Sorts the data in the associated control and applies the filter.
</short>
<descr>
<p>
<var>SortAndFilter</var> is an abstract virtual method in 
<var>TCustomControlFilterEdit</var>. It must be implemented in a descendent 
class to provide the specific functionality needed.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomControlFilterEdit.ApplyFilterCore">
<short>
Applies the Filter data to the container component.
</short>
<descr>
<p>
Method that actually filters data in the container component. ApplyFilterCore 
is a virtual abstract method, and must be implemented in a derived classes.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomControlFilterEdit.MoveNext">
<short>Moves to the next value matching the filter for the control.</short>
<descr>
<p>
Abstract virtual method that must be implemented in a descendent class.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomControlFilterEdit.MoveNext.ASelect">
<short>
<b>True</b> if the value should be selected following the move operation.
</short>
</element>

<element name="TCustomControlFilterEdit.MovePrev">
<short>
Moves to the previous value matching the filter for the control.
</short>
<descr>
<p>
Abstract virtual method that must be implemented in a descendent class.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomControlFilterEdit.MovePrev.ASelect">
<short>
<b>True</b> if the value should be selected following the move operation.
</short>
</element>

<element name="TCustomControlFilterEdit.MovePageUp">
<short>Moves one page of previous values matching the filter.</short>
<descr>
<p>
Abstract virtual method that must be implemented in a descendent class.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomControlFilterEdit.MovePageUp.ASelect">
<short>
<b>True</b> if the value should be selected following the move operation.
</short>
</element>

<element name="TCustomControlFilterEdit.MovePageDown">
<short>Moves one page of subsequent values matching the filter.</short>
<descr>
<p>
Abstract virtual method that must be implemented in a descendent class.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomControlFilterEdit.MovePageDown.ASelect">
<short>
<b>True</b> if the value should be selected following the move operation.
</short>
</element>

<element name="TCustomControlFilterEdit.MoveHome">
<short>Moves to the first value matching the filter.</short>
<descr>
<p>
Abstract virtual method that must be implemented in a descendent class.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomControlFilterEdit.MoveHome.ASelect">
<short>
<b>True</b> if the value should be selected following the move operation.
</short>
</element>

<element name="TCustomControlFilterEdit.MoveEnd">
<short>Moves to the last value matching the filter.</short>
<descr>
<p>
Abstract virtual method that must be implemented in a descendent class.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomControlFilterEdit.MoveEnd.ASelect">
<short>
<b>True</b> if the value should be selected following the move operation.
</short>
</element>

<element name="TCustomControlFilterEdit.ReturnKeyHandled">
<short>
Indicates whether an assigned OnKeyPress event handler handles the Return or 
Enter key in the KeyDown method for the Edit.
</short>
<descr>
<p>
Abstract virtual method that must be implemented in a descendent class.
</p>
</descr>
<seealso></seealso>
</element>
<element name="TCustomControlFilterEdit.ReturnKeyHandled.Result">
<short>
<b>True</b> if OnKeyPress is assigned and handles the VK_RETURN key code.
</short>
</element>

<element name="TCustomControlFilterEdit.GetDefaultGlyphName" link="#lcl.editbtn.TCustomEditButton.GetDefaultGlyphName"/>
<element name="TCustomControlFilterEdit.GetDefaultGlyphName.Result"/>

<element name="TCustomControlFilterEdit.WSRegisterClass">
<short>
Registers the class reference used to create new instances of the class.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TCustomControlFilterEdit.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for the class instance, and calls the 
inherited constructor. Create sets the default values for properties used to 
configure the <var>Edit</var> and <var>Button</var> in the class instance as 
well as its internal flags, including:
</p>
<dl>
<dt>CharCase</dt>
<dd>Set to ecLowerCase</dd>
<dt>Button.Enabled</dt>
<dd>Set to <b>False</b></dd>
<dt>FilterOptions</dt>
<dd>Set to an empty set</dd>
<dt>FIsFirstUpdate, fIsFirstSetFormActivate</dt>
<dd>Set to <b>True</b></dd>
<dt>TextHint</dt>
<dd>Set to rsFilter</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TCustomControlFilterEdit.Create.AOwner">
<short>Owner for the class instance.</short>
</element>

<element name="TCustomControlFilterEdit.Destroy">
<short>Destructor for the class instance.</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TCustomControlFilterEdit.InvalidateFilter">
<short>
Sets flags and property to indicate that the filter must be reapplied for the 
control.
</short>
<descr>
<p>
<var>InvalidateFilter</var> is a method used to indicate that updates to the 
Filter value are pending for the control. It sets the internal flag used to 
track pending filter updates, and sets the IdelConnected property to 
<b>True</b> to enable the asynchronous event handler routine for the control.
</p>
<p>
InvalidateFilter is called from the private ApplyFilter method when the Filter 
value is not immediately applied. InvalidateFilter is also called when a new 
value is applied to the Filter or SortData properties, or when the 
FilterOptions are modified for the control.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
<link id="TCustomControlFilterEdit.IdleConnected"/>
<link id="TCustomControlFilterEdit.SortData"/>
<link id="TCustomControlFilterEdit.FilterOptions"/>
</seealso>
</element>

<element name="TCustomControlFilterEdit.ResetFilter">
<short>
Clears the Filter text to show all items in the control.
</short>
<descr>
<p>
<var>ResetFilter</var> clears the existing value in the Filter property by 
setting it to an empty string (''). This results in the Text for control being 
set to the same value, and the InvalidateFilter is called when the filter is 
internally applied to the control.
</p>
<p>
ResetFilter is called from the BuddyClick method - the OnClick handler routine 
executed when the associated Button for the control is clicked. 
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
<link id="TCustomControlFilterEdit.Text"/>
<link id="TCustomControlFilterEdit.BuddyClick"/>
<link id="TCustomControlFilterEdit.InternalSetFilter"/>
<link id="TCustomEditButton.Button"/>
</seealso>
</element>

<element name="TCustomControlFilterEdit.ForceFilter">
<short>
Applies a new Filter immediately without waiting for an idle state.
</short>
<descr>
<p>
Calls the private ApplyFilter method to immediately apply the value in Filter 
using the ApplyFilterCore method in the implementation.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomControlFilterEdit.ForceFilter.Result">
<short>
Returns the previous Filter value.
</short>
</element>

<element name="TCustomControlFilterEdit.StoreSelection">
<short>
Stores the current selection for the associated control in the class instance.
</short>
<descr>
<p>
<var>StoreSelection</var> is an abstract virtual method, and must be 
implemented in a derived class to use the correct class type for items in the 
associated control.
</p>
<p>
Used in the implementation of the <var>ApplyFilter</var> method.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.RestoreSelection"/>
</seealso>
</element>

<element name="TCustomControlFilterEdit.RestoreSelection">
<short>
Restores the selection in the associated control after the filter is applied.
</short>
<descr>
<p>
Abstract virtual method that must be implemented in a descendent class.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TCustomControlFilterEdit.Filter">
<short>
Contains the textual used to select the visible items in the associated 
control.
</short>
<descr>
<p>
<var>Filter</var> is a <var>String</var> property which contains the value 
used to filter the items in an associated control. Filter is used when the 
SortAndFilter and ApplyFilterCore methods (in descendent classes) are called 
to apply the filter value to the items in an associated control.
</p>
<p>
Changing the value for the property causes the value in the Text property 
control to be updated. The InternalSetFilter method is called to perform 
actions needed for the new property value. The new filter will be applied to 
the associated Control when the OnChange handler for the Edit control is 
called.
</p>
<p>
Use FilterLowercase to access the Filter value converted to lowercase UTF-8 
characters.
</p>
<p>
Use FilterOptions to indicate whether case sensitivity is enabled for the 
filter value; FilterLowercase is used when fsoCaseSensitive has <b>not</b> 
been included in the set of options.
</p>
<p>
Use ResetFilter to clear the filter value (and the Text property) for the 
control. Use ForceFilter to immediately apply a specified Filter value to the 
items in the associated Control.
</p>
</descr>
<version>
Modified in LCL version 3.0 to call InternalSetFilter when a new value is 
assigned to the property.
</version>
<seealso>
<link id="TCustomControlFilterEdit.Text"/>
<link id="TCustomControlFilterEdit.FilterLowercase"/>
<link id="TCustomControlFilterEdit.InternalSetFilter"/>
<link id="TCustomControlFilterEdit.FilterOptions"/>
<link id="TCustomControlFilterEdit.ForceFilter"/>
<link id="TCustomControlFilterEdit.DoDefaultFilterItem"/>
<link id="TCustomControlFilterEdit.OnFilterItem"/>
<link id="TCustomControlFilterEdit.OnFilterItemEx"/>
<link id="TCustomControlFilterEdit.EditChange"/>
</seealso>
</element>

<element name="TCustomControlFilterEdit.FilterLowercase">
<short>
The textual representation for the Filter using lowercase characters.
</short>
<descr>
<p>
<var>FilterLowercase</var> is a read-only <var>String</var> property which
contains the value in <var>Filter</var> converted to lowercase characters. It
is used in the implementation of the <var>DoDefaultFilterItem</var> method
when case sensitivity has not been enabled in the <var>FilterOptions</var> 
property (<var>fsoCaseSensitive</var> is not included). The property can be 
used in a similar manner in routines assigned to the <var>OnFilterItem</var> 
and <var>OnFilterItemEx</var> event handlers.
</p>
<p>
The value for FilterLowercase is derived and assigned in InternalSetFilter, 
and used when the value for the edit control has been changed.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
<link id="TCustomControlFilterEdit.DoDefaultFilterItem"/>
<link id="TCustomControlFilterEdit.FilterOptions"/>
<link id="TCustomControlFilterEdit.OnFilterItem"/>
<link id="TCustomControlFilterEdit.OnFilterItemEx"/>
<link id="TCustomControlFilterEdit.InternalSetFilter"/>
<link id="TCustomControlFilterEdit.EditChange"/>
</seealso>
</element>

<element name="TCustomControlFilterEdit.IdleConnected">
<short>
Indicates if the asynchronous event handler routine is enabled for the 
Application.
</short>
<descr>
<p>
<var>IdleConnected</var> is a <var>Boolean</var> property which indicates if 
the asynchronous event handler routine is enabled for the 
<var>Application</var> singleton. When set to <b>True</b>, the 
<var>Filter</var> in the control will be applied when the application is in 
an idle state.
</p>
<p>
Changing the value for the property causes the handler routine to be queued or 
dequeued as an asynchronous method call for the Application. When set to 
<b>True</b>, the TApplication.QueueAsyncCall method is called to enqueue the 
asynchronous event handler routine. Otherwise, the Application.RemoveAsyncCalls is called to remove any pending asynchronous methods.
</p>
<p>
IdleConnected is set to <b>True</b> in the <var>InvalidateFilter</var> method.
</p>
<p>
IdleConnected is set to <b>False</b> in the asynchronous event handler routine 
after the Filter has been applied for the control.
</p>
<p>
The default value for the property is <b>False</b>.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
<link id="TCustomControlFilterEdit.InvalidateFilter"/>
<link id="#lcl.forms.Application">Application</link>
<link id="#lcl.forms.TApplication.QueueAsyncCall">TApplication.QueueAsyncCall</link>
<link id="#lcl.forms.TApplication.RemoveAsyncCalls">TApplication.RemoveAsyncCalls</link>
</seealso>
</element>

<element name="TCustomControlFilterEdit.SortData">
<short>
Indicates whether items are sorted as they are filtered.
</short>
<descr>
<p>
<var>SortData</var> is a <var>Boolean</var> property which determines whether 
items in the filtered control are sorted when the Filter value is applied in 
the private ApplyFilter method. An explicit default value is not assigned for 
the property, but the default value for the Boolean type is <b>False</b>.
</p>
<p>
Changing the value for the property causes the InvalidateFilter method to be 
called. This method sets internal flags to signify a pending update, and 
enables the asynchronous event handler routine where the filter value is 
applied and sorting is performed.
</p>
<p>
Descendant classes provide an overridden SortAndFilter method which performs 
the actions needed to filter and sort the item data for an associated control 
type.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
<link id="TCustomControlFilterEdit.ApplyFilterCore"/>
<link id="TCustomControlFilterEdit.InvalidateFilter"/>
<link id="TCustomControlFilterEdit.SortAndFilter"/>
</seealso>
</element>

<element name="TCustomControlFilterEdit.SelectedPart">
<short>
For retaining selection in the filtered control. The actual type depends on 
the associated control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomControlFilterEdit.CharCase">
<short>
Controls case conversion performed for a value entered in the control.
</short>
<descr>
<p>
<var>CharCase</var> is a <var>TEditCharCase</var> property that controls the 
case conversion used (if any) for a value entered in the control. The default 
value for the property is ecLowerCase in TCustomControlFilterEdit, and 
indicates that characters are converted to lower case.
</p>
<p>
See TEditCharCase for more information about the enumeration values supported 
for the type.
</p>
</descr>
<seealso>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.CharCase">TCustomAbstractGroupedEdit.CharCase</link>
<link id="#lcl.stdctrls.TEditCharCase">TEditCharCase</link>
</seealso>
</element>

<element name="TCustomControlFilterEdit.FilterOptions">
<short>
Contains options which control string comparisons using the Filter for the 
control.
</short>
<descr>
<p>
<var>FilterOptions</var> is a <var>TFilterStringOptions</var> property which 
contains zero (0) or more <var>TFilterStringOption</var> enumeration 
values(s). Values in FilterOptions determine how string comparisons are 
performed in the <var>DoDefaultFilterItem</var> method. See <link 
id="TFilterStringOption"/> for more information about the enumeration values 
and their meanings.
</p>
<p>
The default value for the property is an empty set ([]). Changing the value for the property causes the Filter to be invalidated and re-applied to the items from the associated control.
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
<link id="TCustomControlFilterEdit.DoDefaultFilterItem"/>
<link id="TFilterStringOptions"/>
<link id="TFilterStringOption"/>
</seealso>
</element>

<element name="TCustomControlFilterEdit.OnAfterFilter">
<short>
Event handler signalled after all items have been filtered in the control.
</short>
<descr>
<p>
OnAfterFilter is signalled from the asynchronous event handler routine, and 
occurs after the private ApplyFilter method has been completed. 
</p>
</descr>
<seealso>
<link id="TCustomControlFilterEdit.Filter"/>
<link id="TCustomControlFilterEdit.FilterOptions"/>
</seealso>
</element>

<element name="TCustomControlFilterEdit.OnFilterItem">
<short>
An event handler to give extra conditions for filtering, in addition to the 
default behavior. Returns <b>True</b> if the passes the filter.
</short>
<descr>
<p>
This feature has, for example, enabled filtering the Options windows in 
Lazarus IDE based on captions for all controls on the options pages. 
Deprecated. Use OnFilterItemEx with a caption parameter instead.
</p>
</descr>
</element>

<element name="TCustomControlFilterEdit.OnFilterItemEx">
<short>
Event handler signalled to filter data in the control using its caption or 
item data.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomControlFilterEdit.OnCheckItem">
<short>
Has effect when items in the filtered container can be checked. Typically a 
CheckListbox.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomControlFilterEdit.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
<element name="TCustomControlFilterEdit.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
<element name="TCustomControlFilterEdit.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
<element name="TCustomControlFilterEdit.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
<element name="TCustomControlFilterEdit.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
<element name="TCustomControlFilterEdit.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TCustomControlFilterEdit.DirectInput" link="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput"/>
<element name="TCustomControlFilterEdit.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
<element name="TCustomControlFilterEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
<element name="TCustomControlFilterEdit.Align" link="#lcl.controls.TControl.Align"/>
<element name="TCustomControlFilterEdit.Alignment" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Alignment"/>
<element name="TCustomControlFilterEdit.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TCustomControlFilterEdit.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TCustomControlFilterEdit.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TCustomControlFilterEdit.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TCustomControlFilterEdit.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TCustomControlFilterEdit.AutoSelect" link="#lcl.groupededit.TCustomAbstractGroupedEdit.AutoSelect"/>
<element name="TCustomControlFilterEdit.Color" link="#lcl.controls.TControl.Color"/>
<element name="TCustomControlFilterEdit.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TCustomControlFilterEdit.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TCustomControlFilterEdit.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TCustomControlFilterEdit.Font" link="#lcl.controls.TControl.Font"/>
<element name="TCustomControlFilterEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
<element name="TCustomControlFilterEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
<element name="TCustomControlFilterEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
<element name="TCustomControlFilterEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
<element name="TCustomControlFilterEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
<element name="TCustomControlFilterEdit.Layout" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Layout"/>
<element name="TCustomControlFilterEdit.MaxLength" link="#lcl.groupededit.TCustomAbstractGroupedEdit.MaxLength"/>
<element name="TCustomControlFilterEdit.ParentBidiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TCustomControlFilterEdit.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TCustomControlFilterEdit.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TCustomControlFilterEdit.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TCustomControlFilterEdit.PopUpMenu" link="#lcl.groupededit.TCustomAbstractGroupedEdit.PopUpMenu"/>
<element name="TCustomControlFilterEdit.ReadOnly" link="#lcl.groupededit.TCustomAbstractGroupedEdit.ReadOnly"/>
<element name="TCustomControlFilterEdit.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TCustomControlFilterEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
<element name="TCustomControlFilterEdit.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TCustomControlFilterEdit.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TCustomControlFilterEdit.Text" link="#lcl.controls.TControl.Text"/>
<element name="TCustomControlFilterEdit.TextHint" link="#lcl.groupededit.TCustomAbstractGroupedEdit.TextHint"/>
<element name="TCustomControlFilterEdit.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TCustomControlFilterEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
<element name="TCustomControlFilterEdit.OnChange" link="#lcl.groupededit.TCustomAbstractGroupedEdit.OnChange"/>
<element name="TCustomControlFilterEdit.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TCustomControlFilterEdit.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TCustomControlFilterEdit.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TCustomControlFilterEdit.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TCustomControlFilterEdit.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TCustomControlFilterEdit.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
<element name="TCustomControlFilterEdit.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TCustomControlFilterEdit.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TCustomControlFilterEdit.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TCustomControlFilterEdit.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TCustomControlFilterEdit.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TCustomControlFilterEdit.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TCustomControlFilterEdit.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TCustomControlFilterEdit.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TCustomControlFilterEdit.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TCustomControlFilterEdit.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TCustomControlFilterEdit.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TCustomControlFilterEdit.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TCustomControlFilterEdit.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TCustomControlFilterEdit.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TCustomControlFilterEdit.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TCustomControlFilterEdit.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TAcceptFileNameEvent">
<short>
<var>TAcceptFileNameEvent</var> - generic event handling method to accept a 
filename from a dialog.
</short>
<descr/>
<seealso/>
</element>
<element name="TAcceptFileNameEvent.Sender">
<short>Object for the event notification.</short>
</element>
<element name="TAcceptFileNameEvent.Value">
<short>File name examined in the event handler.</short>
</element>

<element name="TDialogKind">
<short>
Enumerated type representing dialog styles used in TFileNameEdit.
</short>
<descr>
<p>
<var>TDialogKind</var> is an enumerated type representing the dialog styles 
available for use in <var>TFileNameEdit</var>. Values in the enumeration 
influence the common dialog type created for a control which displays a 
dialog when its button is clicked.
</p>
<p>
TDialogKind is the type used to implement the <var>DialogKind</var> property 
in <var>TFileNameEdit</var>.
</p>
</descr>
<seealso>
<link id="TFileNameEdit.DialogKind"/>
</seealso>
</element>
<element name="TDialogKind.dkOpen">
<short>An Open dialog.</short>
</element>
<element name="TDialogKind.dkSave">
<short>A Save dialog.</short>
</element>
<element name="TDialogKind.dkPictureOpen">
<short>An Open dialog for image types.</short>
</element>
<element name="TDialogKind.dkPictureSave">
<short>A Save dialog for image types.</short>
</element>

<element name="TFileNameEdit">
<short>
<var>TFileNameEdit</var> - an EditBox to hold a filename, with an attached 
SpeedButton that summons a File Open dialog.
</short>
<descr>
<p>
<var>TFileNameEdit</var> is a <var>TCustomEditButton</var> descendant which 
implements a grouped edit control used to select and edit a file name on the 
local file system. The control provides the Edit and Button properties from 
the ancestor class, and executes a dialog when the Button is clicked. New 
properties are introduced which allow configuring the control to a specific 
file path, filters to select files of particular type or file extension, and 
to hide or show directories in its dialog.
</p>
</descr>
<seealso>
<link id="TCustomEditButton"/>
</seealso>
</element>

<element name="TFileNameEdit.FDialogOptions"/>
<element name="TFileNameEdit.FFileName"/>
<element name="TFileNameEdit.FDialogFiles"/>
<element name="TFileNameEdit.FDialogKind"/>
<element name="TFileNameEdit.FDialogTitle"/>
<element name="TFileNameEdit.FFilter"/>
<element name="TFileNameEdit.FFilterIndex"/>
<element name="TFileNameEdit.FInitialDir"/>
<element name="TFileNameEdit.FOnAcceptFileName"/>
<element name="TFileNameEdit.FOnFolderChange"/>
<element name="TFileNameEdit.FFileNameChangeLock"/>

<element name="TFileNameEdit.SetFileName">
<short>Sets the value for the FileName property.</short>
<descr/>
<seealso>
<link id="TFileNameEdit.FileName"/>
</seealso>
</element>
<element name="TFileNameEdit.SetFileName.AValue">
<short>New value for the property.</short>
</element>

<element name="TFileNameEdit.GetDefaultGlyphName">
<short>Gets the default glyph name used for the Button on the control.</short>
<descr>
<p>
The return value contains the resource ID in the <var>ResBtnFileOpen</var> 
constant. The value is used in the <var>LoadDefaultGlyph</var> method defined 
in <var>TCustomEditButton</var>.
</p>
</descr>
<seealso>
<link id="ResBtnFileOpen"/>
<link id="TCustomEditButton.LoadDefaultGlyph"/>
<link id="TCustomEditButton.GetDefaultGlyphName"/>
</seealso>
</element>

<element name="TFileNameEdit.CreateDialog">
<short>Creates the dialog for the control.</short>
<descr>
<p>
CreateDialog is a TCommonDialog function which creates and returns the dialog 
for the grouped edit control.
</p>
<p>
AKind contains the TDialogKind value that identifies the dialog type required 
for the control, and normally has the value from the DialogKind property. 
AKind determines the class type instantiated and used as the return value. 
For example:
</p>
<dl>
<dt>dkOpen</dt>
<dd>TOpenDialog is the type in return value.</dd>
<dt>dkPictureOpen</dt>
<dd>TOpenPictureDialog is the type in return value.</dd>
<dt>dkSave, dkPictureSave</dt>
<dd>TSaveDialog is the type in return value.</dd>
</dl>
<p>
Properties relevant to the dialog kind are copied into the dialog, and may 
include:
</p>
<ul>
<li>FileName</li>
<li>Path information extracted from FileName</li>
<li>InitialDir</li>
<li>DefaultExt</li>
<li>Filter</li>
<li>FilterIndex</li>
<li>DialogOptions</li>
<li>DialogTitle</li>
</ul>
<p>
For an open dialog, path information in FileName is retained if the path is 
valid. This causes use of InitialDir to be disabled in the dialog. If the path 
in Filename is invalid, only the base file name and extension are copied to the 
dialog. An explicit value in InitialDir is resolved (cleaned and expanded) when 
valid, and stored to the dialog. Otherwise, the initial directory is determined 
by the widgetset when the dialog is executed.
</p>
<p>
CreateDialog is used in the implementation of the RunDialog method.
</p>
</descr>
<seealso>
<link id="TFileNameEdit.DefaultExt"/>
<link id="TFileNameEdit.DialogOptions"/>
<link id="TFileNameEdit.DialogTitle"/>
<link id="TFileNameEdit.FileName"/>
<link id="TFileNameEdit.Filter"/>
<link id="TFileNameEdit.FilterIndex"/>
<link id="TFileNameEdit.InitialDir"/>
<link id="TFileNameEdit.RunDialog"/>
<link id="#lcl.dialogs.TCommonDialog">TCommonDialog</link>
<link id="#lcl.dialogs.TOpenDialog">TOpenDialog</link>
<link id="#lcl.dialogs.TSaveDialog">TSaveDialog</link>
<link id="#lazutils.lazfileutils.CleanAndExpandDirectory">CleanAndExpandDirectory</link>
</seealso>
</element>
<element name="TFileNameEdit.CreateDialog.Result">
<short>Dialog class instance created in the method.</short>
</element>
<element name="TFileNameEdit.CreateDialog.AKind">
<short>Identifies the dialog kind or type created in the method.</short>
</element>

<element name="TFileNameEdit.SaveDialogResult">
<short>
<var>SaveDialogResult</var> - stores the result of the dialog.
</short>
<descr>
<p>
<var>SaveDialogResult</var> is a procedure used to capture the results from 
the dialog when it has finished execution. The values are stored in the 
corresponding properties in the class instance, and depending on the 
DialogKind, may include:
</p>
<ul>
<li>FilterIndex</li>
<li>FileName</li>
<li>DialogFiles</li>
</ul>
<p>
SaveDialogResult is used in the implementation of the RunDialog method.
</p>
</descr>
<seealso/>
</element>
<element name="TFileNameEdit.SaveDialogResult.AKind">
<short>Dialog type in the D argument.</short>
</element>
<element name="TFileNameEdit.SaveDialogResult.D">
<short>Dialog examined in the method.</short>
</element>

<element name="TFileNameEdit.ButtonClick">
<short>
Performs actions needed when the Button for the control is clicked.
</short>
<descr>
<p>
<var>ButtonClick</var> is an overridden method used to perform actions needed 
when the <var>Button</var> for the control is clicked. For 
<var>TFileNameEdit</var>, the <var>RunDialog</var> method is called to 
execute the dialog for the control and to capture it results. When 
<var>FocusOnButtonClick</var> is set, the <var>FocusAndMaybeSelectAll</var> 
method is called to give focus to the <var>Edit</var> control in the class.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.ButtonClick"/>
<link id="TCustomEditButton.Button"/>
<link id="TCustomEditButton.Edit"/>
<link id="TCustomEditButton.FocusOnButtonClick"/>
<link id="TFileNameEdit.RunDialog"/>
<link id="TCustomAbstractGroupedEdit.FocusAndMaybeSelectAll"/>
</seealso>
</element>

<element name="TFileNameEdit.EditChange">
<short>
Performs actions needed when the value for the control has been changed.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TFileNameEdit.DoFolderChange">
<short>Signals the OnFolderChange event handler (when assigned).</short>
<descr></descr>
<seealso>
<link id="TFileNameEdit.OnFolderChange"/>
<link id="#lcl.dialogs.TOpenDialog.OnFolderChange"/>
</seealso>
</element>
<element name="TFileNameEdit.DoFolderChange.Sender">
<short>
Object instance (TFileNameEdit) for the event notification.
</short>
</element>

<element name="TFileNameEdit.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance, and 
calls the inherited constructor. Create allocates resource needed for the 
<var>DialogFiles</var> property, and sets the default values for the 
<var>DialogKind</var> and <var>DialogOptions</var> properties.
</p>
</descr>
<seealso>
<link id="TFileNameEdit.DialogFiles"/>
<link id="TFileNameEdit.DialogKind"/>
<link id="TFileNameEdit.DialogOptions"/>
<link id="TCustomEditButton.Create"/>
</seealso>
</element>
<element name="TFileNameEdit.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TFileNameEdit.Destroy">
<short>Destructor for the class instance.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.Destroy"/>
</seealso>
</element>

<element name="TFileNameEdit.RunDialog">
<short>
Executes an Open or Save dialog for the DialogKind specified in the control. 
</short>
<descr>
<p>
<var>RunDialog</var> is a virtual method used to create, display, and execute 
a dialog when the button for the control is clicked. It calls the 
CreateDialog method to create a TDialogKind instance for the type indicated 
in the DialogKind property. The Execute method for the dialog is called to 
display the dialog form. If Execute returns <b>True</b>, the SaveDialogResult 
method is called to perform the Open or Save action(s) needed for the 
DialogKind.
</p>
<p>
RunDialog is called from the ButtonClick method which occurs when the Button 
for the control has been clicked.
</p>
</descr>
<errors/>
<seealso/>
</element>

<element name="TFileNameEdit.AutoSelected" link="#lcl.groupededit.TCustomAbstractGroupedEdit.AutoSelected"/>

<element name="TFileNameEdit.DialogFiles">
<short>
<var>DialogFiles</var> is the list of files for the dialog.
</short>
<descr>
<p>
<var>DialogFiles</var> is a read-only <var>TStrings</var> property used to 
store one or more file names found when the dialog for the control is 
executed. DialogFiles is updated in the <var>SaveDialogResult</var> method. 
For open dialogs, DialogFiles is set to the files returned by the dialog. For 
save dialogs, the content in DialogFiles is cleared.
</p>
</descr>
<seealso>
<link id="TFileNameEdit.SaveDialogResult"/>
<link id="TFileNameEdit.RunDialog"/>
<link id="TFileNameEdit.FileName"/>
</seealso>
</element>

<element name="TFileNameEdit.FileName">
<short>
<var>FileName</var> - the name of the selected file: either the initial value 
placed in the Text Box, or the value selected from the dialog.
</short>
<descr/>
<seealso/>
</element>

<element name="TFileNameEdit.InitialDir">
<short>
Initial directory displayed when the dialog is executed for the control.
</short>
<descr>
<p>
<var>InitialDir</var> determines the first directory displayed when the 
RunDialog method is called. InitialDir is resolved (cleaned and expanded) 
before it is used during dialog execution. If FileName contains qualified path 
information, the value in InitialDir is ignored; the path information in 
FileName is used instead. When omitted (contains ''), the widgetset determines 
the active directory when the dialog for the control is executed.
</p>
<p>
For a file open dialog, InitialDir is updated in the RunDialog method with the 
value returned by the dialog. This occurs even when the Cancel button is used 
to close the dialog. This mimics the behavior used in TOpenDialog.
</p>
<p>
Use FileName to assign the default file name (and optional path information) 
used when the dialog is executed for the control.
</p>
<p>
Use the DialogOptions property to control whether the active directory can be 
changed using the dialog for the control (ofNoChangeDir).
</p>
</descr>
<seealso>
<link id="TFileNameEdit.FileName"/>
<link id="TFileNameEdit.DialogOptions"/>
<link id="TFileNameEdit.RunDialog"/>
</seealso>
</element>

<element name="TFileNameEdit.OnAcceptFileName">
<short>
<var>OnAcceptFileName</var> is an event handler for accepting a filename.
</short>
<descr/>
<seealso/>
</element>

<element name="TFileNameEdit.OnFolderChange">
<short>Event handler signalled when the path to FileName has changed.</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TFileNameEdit.DialogKind">
<short>
Determines the dialog type executed when the Button in the control is clicked.
</short>
<descr>
<p>
<var>DialogKind</var> is a <var>TDialogKind</var> property that indicates the 
type of dialog executed when the <var>Button</var> for the control is 
clicked. The default value for the property is <var>dkOpen</var>, as assigned 
in the constructor. Use one of the other TDialogKind enumeration values to 
perform its corresponding action.
</p>
</descr>
<seealso>
<link id="TFileNameEdit.RunDialog"/>
<link id="TFileNameEdit.SaveDialogResult"/>
<link id="TCustomEditButton.Button"/>
<link id="TDialogKind"/>
</seealso>
</element>

<element name="TFileNameEdit.DialogTitle">
<short>
<var>DialogTitle</var> - the title to appear on the dialog.
</short>
<descr>
<p>
<var>DialogTitle</var> is a <var>String</var> property that contains the 
title displayed on the dialog executed by clicking on Button. The value in 
DialogTitle is assigned to the TCommonDialog descendant created in the 
<var>CreateDialog</var> method.
</p>
</descr>
<seealso>
<link id="TFileNameEdit.DialogKind"/>
<link id="TFileNameEdit.DialogOptions"/>
</seealso>
</element>

<element name="TFileNameEdit.DialogOptions">
<short>
<var>DialogOptions</var> - set of options enabled for the file open dialog.
</short>
<descr>
<p>
<var>DialogOptions</var> is a <var>TOpenOptions</var> property which contains 
the options enabled for a File Open dialog. The default value for the 
property is defined in the <var>DefaultOpenDialogOptions</var> constant.
</p>
<p>
Values in DialogOptions control the functionality and visual appearance of 
the dialog displayed for the control. See <link id="TOpenOption"/> for more 
information about the enumeration values used in DialogOptions.
</p>
</descr>
<seealso>
<link id="TFileNameEdit.CreateDialog"/>
<link id="TFileNameEdit.RunDialog"/>
<link id="Dialogs.TOpenOption"/>
<link id="Dialogs.TOpenOptions"/>
</seealso>
</element>

<element name="TFileNameEdit.Filter">
<short>
<var>Filter</var> - the filtering string to help search for the required file.
</short>
<descr/>
<seealso/>
</element>

<element name="TFileNameEdit.FilterIndex">
<short>
<var>FilterIndex</var> - index value for the filtering string.
</short>
<descr/>
<seealso/>
</element>

<element name="TFileNameEdit.DefaultExt">
<short>Default file extension used in the dialog for the component.</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TFileNameEdit.HideDirectories">
<short>Hides directory paths in the edit control.</short>
<descr>
<p>
If <var>HideDirectories</var> is set to <b>True</b>, the file name editor 
displays only a file name, without path.
</p>
<remark>
This may be useful if application allows user to select files from a fixed 
directory with a long path.
</remark>
</descr>
</element>

<element name="TFileNameEdit.ButtonCaption">
<short>Text displayed on the button for the control.</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TFileNameEdit.ButtonCursor">
<short>
Cursor shape displayed when hovering the mouse over the button for the 
control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TFileNameEdit.ButtonHint">
<short>
Text displayed in the balloon hint for the button in the control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TFileNameEdit.ButtonOnlyWhenFocused">
<short>Controls visibility of the Button when the control loses focus.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.ButtonOnlyWhenFocused"/>
</seealso>
</element>

<element name="TFileNameEdit.ButtonWidth" >
<short>Width of the Button displayed in the control.</short>
<descr/>
<seealso>
<link id="TCustomEditButton.ButtonWidth"/>
</seealso>
</element>

<element name="TFileNameEdit.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TFileNameEdit.DirectInput" link="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput"/>
<element name="TFileNameEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
<element name="TFileNameEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
<element name="TFileNameEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
<element name="TFileNameEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
<element name="TFileNameEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
<element name="TFileNameEdit.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
<element name="TFileNameEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
<element name="TFileNameEdit.Align" link="#lcl.controls.TControl.Align"/>
<element name="TFileNameEdit.Alignment" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Alignment"/>
<element name="TFileNameEdit.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TFileNameEdit.AutoSelect" link="#lcl.stdctrls.TCustomEdit.AutoSelect"/>
<element name="TFileNameEdit.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TFileNameEdit.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TFileNameEdit.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TFileNameEdit.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TFileNameEdit.Color" link="#lcl.controls.TControl.Color"/>
<element name="TFileNameEdit.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TFileNameEdit.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TFileNameEdit.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TFileNameEdit.Font" link="#lcl.controls.TControl.Font"/>
<element name="TFileNameEdit.Layout" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Layout"/>
<element name="TFileNameEdit.MaxLength" link="#lcl.stdctrls.TCustomEdit.MaxLength"/>
<element name="TFileNameEdit.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TFileNameEdit.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TFileNameEdit.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TFileNameEdit.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TFileNameEdit.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TFileNameEdit.ReadOnly" link="#lcl.stdctrls.TCustomEdit.ReadOnly"/>
<element name="TFileNameEdit.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TFileNameEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
<element name="TFileNameEdit.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TFileNameEdit.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TFileNameEdit.Text" link="#lcl.controls.TControl.Text"/>
<element name="TFileNameEdit.TextHint" link="#lcl.groupededit.TCustomAbstractGroupedEdit.TextHint"/>
<element name="TFileNameEdit.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TFileNameEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
<element name="TFileNameEdit.OnChange" link="#lcl.stdctrls.TCustomEdit.OnChange"/>
<element name="TFileNameEdit.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TFileNameEdit.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TFileNameEdit.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TFileNameEdit.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TFileNameEdit.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TFileNameEdit.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
<element name="TFileNameEdit.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TFileNameEdit.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TFileNameEdit.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TFileNameEdit.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TFileNameEdit.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TFileNameEdit.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TFileNameEdit.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TFileNameEdit.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TFileNameEdit.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TFileNameEdit.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TFileNameEdit.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TFileNameEdit.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TFileNameEdit.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TFileNameEdit.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TFileNameEdit.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TFileNameEdit.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TDirectoryEdit">
<short>
<var>TDirectoryEdit</var> - an EditBox to hold a directory name, with an 
attached SpeedButton that summons a Directory Open dialog.
</short>
<descr/>
<seealso>
<link id="#lcl.dialogs.TSelectDirectoryDialog">TSelectDirectoryDialog</link>
</seealso>
</element>

<element name="TDirectoryEdit.FDialogTitle"/>
<element name="TDirectoryEdit.FRootDir"/>
<element name="TDirectoryEdit.FOnAcceptDir"/>
<element name="TDirectoryEdit.FShowHidden"/>
<element name="TDirectoryEdit.FDialogOptions"/>

<element name="TDirectoryEdit.GetDirectory">
<short>Gets the value for the Directory property.</short>
<descr/>
<seealso>
<link id="TDirectoryEdit.Directory"/>
</seealso>
</element>
<element name="TDirectoryEdit.GetDirectory.Result">
<short>Value for the property.</short>
</element>

<element name="TDirectoryEdit.SetDirectory">
<short>Sets the value for the Directory property.</short>
<descr/>
<seealso>
<link id="TDirectoryEdit.Directory"/>
</seealso>
</element>
<element name="TDirectoryEdit.SetDirectory.AValue">
<short>New value for the property.</short>
</element>

<element name="TDirectoryEdit.GetDefaultGlyphName">
<short>
Gets the name of the default glyph resource used for the Button on the 
control.
</short>
<descr>
<p>
<var>GetDefaultGlyphName</var> is an overridden String function used to get 
the default resource name with the glyph image for the Button on the control. 
It is used in the LoadDefaultGlyph method to assign the LCLGlyphName for the 
TButtonGlyph instance used in the control.
</p>
<p>
In <var>TDirectoryEdit</var>, the return value is set to the ResBtnSelDir 
constant.
</p>
</descr>
<seealso>
<link id="TCalcEdit"/>
<link id="ResBtnSelDir"/>
<link id="#lcl.buttons.TButtonGlyph.LCLGlyphName">TButtonGlyph.LCLGlyphName</link>
</seealso>
</element>
<element name="TDirectoryEdit.GetDefaultGlyphName.Result">
<short>
Default resource name for the glyph used on the button in the control.
</short>
</element>

<element name="TDirectoryEdit.CreateDialog">
<short>
Creates and configures the dialog for the control.
</short>
<descr>
<p>
<var>CreateDialog</var> is a <var>TCommonDialog</var> function which creates 
and configures the Directory Open dialog executed when the <var>Button</var> 
is clicked for the control. In <var>TDirectoryEdit</var>, the class type 
instantiated and used as the return value is actually 
<var>TSelectDirectoryDialog</var>.
</p>
<p>
CreateDialog ensures that values for the InitialDir and FileName properties 
in the dialog are set using the properties in the class instance. 
<var>Directory</var> and <var>Filename</var> are used in the dialog when 
the directory exists on the local file system. Otherwise, the initial 
directory is set to the value in <var>RootDir</var> and the file name is set 
to the value in <var>Directory</var>.
</p>
<p>
CreateDialog set the options in the dialog to the values specified in 
<var>DialogOptions</var>, and the value in <var>DialogTitle</var> is used as 
the title for the dialog.
</p>
<p>
CreateDialog is used in the implementation of the <var>RunDialog</var> method.
</p>
</descr>
<seealso>
<link id="TDirectoryEdit.Directory"/>
<link id="TDirectoryEdit.RootDir"/>
<link id="TDirectoryEdit.DialogOptions"/>
<link id="TDirectoryEdit.DialogTitle"/>
<link id="#lcl.dialogs.TSelectDirectoryDialog">TSelectDirectoryDialog</link>
<link id="#lcl.dialogs.TCommonDialog">TCommonDialog</link>
</seealso>
</element>
<element name="TDirectoryEdit.CreateDialog.Result">
<short>Dialog created and configured in the method.</short>
</element>

<element name="TDirectoryEdit.GetDialogResult">
<short>Gets the result from the specified dialog.</short>
<descr>
<p>
<var>GetDialogResult</var> is a <var>String</var> function used to get the 
result from the Select Directory dialog. The return value contains the value 
from the <var>FileName</var> property in the 
<var>TSelectDirectoryDialog</var> instance in <var>D</var>. The return value, 
when accepted in <var>OnAcceptDirectory</var>, is stored in the 
<var>Directory</var> property.
</p>
<p>
GetDialogResult is used in the implementation of the <var>RunDialog</var> 
method.
</p>
</descr>
<seealso>
<link id="TDirectoryEdit.RunDialog"/>
<link id="TDirectoryEdit.OnAcceptDirectory"/>
<link id="TDirectoryEdit.Directory"/>
<link id="#lcl.dialogs.TSelectDirectoryDialog">TSelectDirectoryDialog</link>
<link id="#lcl.dialogs.TCommonDialog">TCommonDialog</link>
</seealso>
</element>
<element name="TDirectoryEdit.GetDialogResult.Result">
<short>Directory name from the dialog.</short>
</element>
<element name="TDirectoryEdit.GetDialogResult.D">
<short>Dialog examined in the method.</short>
</element>

<element name="TDirectoryEdit.ButtonClick">
<short>Implements the button handler for the Button in the control.</short>
<descr>
<p>
<var>ButtonClick</var> is an overridden method used to implement the button 
click handler for the <var>Button</var> in the control. ButtonClick calls the 
inherited method, and calls <var>RunDialog</var> to display the dialog and 
capture the directory name. When the dialog has completed, and 
<var>FocusOnButtonClick</var> is set to <b>True</b>, the 
<var>FocusAndMaybeSelectAll</var> method is called to give focus to the 
<var>Edit</var> control and select text as needed.
</p>
<p>
ButtonClick is called from the <var>BuddyClick</var> method in the ancestor 
class.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.Button"/>
<link id="TCustomEditButton.Edit"/>
<link id="TCustomEditButton.FocusOnButtonClick"/>
<link id="TCustomEditButton.BuddyClick"/>
<link id="TDirectoryEdit.RunDialog"/>
<link id="TCustomAbstractGroupedEdit.FocusAndMaybeSelectAll"/>
</seealso>
</element>

<element name="TDirectoryEdit.AutoSelected" link="#lcl.stdctrls.TCustomEdit.AutoSelected"/>

<element name="TDirectoryEdit.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance, and 
calls the inherited constructor. Create sets the values in the 
<var>DialogOptions</var> property to the defaults in 
<var>DefaultOpenDialogOptions</var>.
</p>
</descr>
<seealso>
<link id="TDirectoryEdit.DialogOptions"/>
<link id="DefaultOpenDialogOptions"/>
</seealso>
</element>
<element name="TDirectoryEdit.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TDirectoryEdit.RunDialog">
<short>
Executes the dialog for the control and stores the return value.
</short>
<descr>
<p>
<var>RunDialog</var> is a procedure used to execute the dialog for the 
control, and to store the selected directory name in the control. RunDialog 
calls <var>CreateDialog</var> to create and configure the dialog executed in 
the method. When the dialog has completed successfully, 
<var>GetDialogResult</var> is called to capture the selected directory name.
</p>
<p>
When assigned, the <var>OnAcceptDirectory</var> event handler is signalled to 
accept or reject the selected directory name. When rejected, the return value 
is ignored. When accepted, the value returned from the dialog is stored in 
the <var>Directory</var> property.
</p>
<p>
RunDialog is used in the implementation of the <var>ButtonClick</var> method.
</p>
</descr>
<seealso>
<link id="TDirectoryEdit.CreateDialog"/>
<link id="TDirectoryEdit.GetDialogResult"/>
<link id="TDirectoryEdit.Directory"/>
<link id="TDirectoryEdit.OnAcceptDirectory"/>
<link id="TDirectoryEdit.ButtonClick"/>
<link id="#lcl.dialogs.TCommonDialog">TCommonDialog</link>
<link id="#lcl.dialogs.TSelectDirectoryDialog">TSelectDirectoryDialog</link>
</seealso>
</element>

<element name="TDirectoryEdit.Directory">
<short>The <var>Directory</var> selected by the dialog.</short>
<descr>
<p>
<var>Directory</var> is a <var>String</var> property which contains the 
active directory, and the value displayed in the <var>Edit</var> for the 
control.
</p>
<p>
Directory and <var>RootDir</var> determine the values used in the Select 
Directory dialog executed when the Button is clicked for the control. When 
Directory is a valid file path on the local file system, it is used as the 
initial directory displayed in the dialog. Otherwise, the value in 
<var>RootDir</var> is used as the initial directory and Directory is used as 
the file name in the dialog.
</p>
<p>
The value in Directory is updated in the <var>RunDialog</var> method when the 
dialog for the control has been executed successfully.
</p>
</descr>
<seealso>
<link id="TDirectoryEdit.RootDir"/>
<link id="TDirectoryEdit.RunDialog"/>
<link id="TDirectoryEdit.GetDialogResult"/>
<link id="TDirectoryEdit.OnAcceptDirectory"/>
</seealso>
</element>

<element name="TDirectoryEdit.RootDir">
<short>
The root directory for file system navigation in the control.
</short>
<descr>
<p>
<var>RootDir</var> is a <var>String</var> property which identifies the root 
directory for file system navigation in the Select Directory dialog for the 
control. Its value, along with <var>Directory</var>, is used in the 
<var>CreateDialog</var> method to configure the dialog.
</p>
<p>
RootDir is relevant when Directory does not represent a valid path on the 
local file system. It is used as the initial directory in the Select 
Directory dialog. When Directory is a valid file path, RootDir is ignored.
</p>
</descr>
<seealso>
<link id="TDirectoryEdit.Directory"/>
<link id="TDirectoryEdit.CreateDialog"/>
<link id="TDirectoryEdit.DialogOptions"/>
</seealso>
</element>

<element name="TDirectoryEdit.OnAcceptDirectory">
<short>
<var>OnAcceptDirectory</var> - event handler for accepting the name of a 
directory.
</short>
<descr/>
<seealso/>
</element>

<element name="TDirectoryEdit.DialogTitle">
<short>
<var>DialogTitle</var> - the title that appears on the Select Directory 
dialog.</short>
<descr/>
<seealso/>
</element>

<element name="TDirectoryEdit.DialogOptions">
<short>
Contains the options enabled for the Open dialog displayed by the control.
</short>
<descr>
<p>
The default value for the property is defined in the 
<var>DefaultOpenDialogOptions</var> set.
</p>
</descr>
<seealso>
<link id="#lcl.dialogs.DefaultOpenDialogOptions">DefaultOpenDialogOptions</link>
</seealso>
</element>

<element name="TDirectoryEdit.ShowHidden">
<short>
<var>ShowHidden</var> - if <b>True</b>, display names of hidden directories.
</short>
<descr>
<p>
When <var>ShowHidden</var> is <b>True</b>, the names for hidden directories 
are displayed. In Windows, this show directories under 'Windows' and 
branches; in Linux, show directories with preceding dot e.g. '.Lazarus'.
</p>
</descr>
<seealso/>
</element>

<element name="TDirectoryEdit.ButtonCaption">
<short>Text displayed on the button for the control.</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TDirectoryEdit.ButtonCursor">
<short>
Cursor shape displayed when the mouse hovers over the button for the control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TDirectoryEdit.ButtonHint">
<short>
Hint displayed when the mouse hovers over the button for the control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TDirectoryEdit.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
<element name="TDirectoryEdit.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
<element name="TDirectoryEdit.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TDirectoryEdit.DirectInput" link="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput"/>
<element name="TDirectoryEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
<element name="TDirectoryEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
<element name="TDirectoryEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
<element name="TDirectoryEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
<element name="TDirectoryEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
<element name="TDirectoryEdit.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
<element name="TDirectoryEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
<element name="TDirectoryEdit.Align" link="#lcl.controls.TControl.Align"/>
<element name="TDirectoryEdit.Alignment" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Alignment"/>
<element name="TDirectoryEdit.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TDirectoryEdit.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TDirectoryEdit.AutoSelect" link="#lcl.groupededit.TCustomAbstractGroupedEdit.AutoSelect"/>
<element name="TDirectoryEdit.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TDirectoryEdit.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TDirectoryEdit.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TDirectoryEdit.Color" link="#lcl.controls.TControl.Color"/>
<element name="TDirectoryEdit.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TDirectoryEdit.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TDirectoryEdit.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TDirectoryEdit.Font" link="#lcl.controls.TControl.Font"/>
<element name="TDirectoryEdit.Layout" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Layout"/>
<element name="TDirectoryEdit.MaxLength" link="#lcl.stdctrls.TCustomEdit.MaxLength"/>
<element name="TDirectoryEdit.ParentBidiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TDirectoryEdit.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TDirectoryEdit.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TDirectoryEdit.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TDirectoryEdit.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TDirectoryEdit.ReadOnly" link="#lcl.stdctrls.TCustomEdit.ReadOnly"/>
<element name="TDirectoryEdit.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TDirectoryEdit.Spacing" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Spacing"/>
<element name="TDirectoryEdit.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TDirectoryEdit.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TDirectoryEdit.Text" link="#lcl.controls.TControl.Text"/>
<element name="TDirectoryEdit.TextHint" link="#lcl.groupededit.TCustomAbstractGroupedEdit.TextHint"/>
<element name="TDirectoryEdit.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TDirectoryEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
<element name="TDirectoryEdit.OnChange" link="#lcl.stdctrls.TCustomEdit.OnChange"/>
<element name="TDirectoryEdit.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TDirectoryEdit.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TDirectoryEdit.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TDirectoryEdit.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TDirectoryEdit.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TDirectoryEdit.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
<element name="TDirectoryEdit.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TDirectoryEdit.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TDirectoryEdit.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TDirectoryEdit.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TDirectoryEdit.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TDirectoryEdit.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TDirectoryEdit.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TDirectoryEdit.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TDirectoryEdit.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TDirectoryEdit.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TDirectoryEdit.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TDirectoryEdit.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TDirectoryEdit.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TDirectoryEdit.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TDirectoryEdit.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TDirectoryEdit.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TAcceptDateEvent">
<short>
<var>TAcceptDateEvent</var> - generic event handling method for accepting a 
date from a dialog.
</short>
<descr>
<p>
<var>TAcceptDateEvent</var> is an object procedure which specifies an event 
handler used to examine and verify a <var>TDateTime</var> value.
</p>
<p>
<var>Sender</var> is the object generating the event notification.
</p>
<p>
<var>ADate</var> is the <var>TDateTime</var> value examined in the event 
handler.
</p>
<p>
<var>AcceptDate</var> is a variable Boolean argument which indicates if the 
TDateTime value meets the criteria implemented in the event handler. Set 
AcceptDate to <b>False</b> to indicate that the TDateTime value should be 
rejected.
</p>
<p>
TAcceptDateEvent is the type used to implement the <var>OnAcceptDate</var> 
property in <var>TDateEdit</var>.
</p>
</descr>
<seealso>
<link id="TDateEdit.OnAcceptDate"/>
</seealso>
</element>
<element name="TAcceptDateEvent.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TAcceptDateEvent.ADate">
<short>TDateTime value examined in the method.</short>
</element>
<element name="TAcceptDateEvent.AcceptDate">
<short>Indicates if the Date/Time can be accepted when <b>True</b>.</short>
</element>

<element name="TCustomDateEvent">
<short>
Specifies an event handler used to examine or alter a String with a date 
value.
</short>
<descr>
<p>
<var>TCustomDateEvent</var> is an object procedure which specifies an event 
handler used to examine or alter a <var>String</var> with a date value in an 
arbitrary format.
</p>
<p>
<var>Sender</var> is the object generating the event notification.
</p>
<p>
<var>ADate</var> is a variable <var>String</var> argument which can be 
examined or altered in the event handler.
</p>
<p>
TCustomDateEvent is the type used to implement the <var>OnCustomDate</var> 
event handler in <var>TDateEdit</var>.
</p>
</descr>
<seealso>
<link id="TDateEdit.OnCustomDate"/>
</seealso>
</element>
<element name="TCustomDateEvent.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TCustomDateEvent.ADate">
<short>
Variable String argument which can be examined or altered in the event 
handler.
</short>
</element>

<element name="TDateRangeCheckEvent">
<short>
Specifies an event handler signalled prior to validating a date for it lower 
and upper limits.
</short>
<descr>
<p>
TDateRangeCheckEvent is the type used to implement the OnDateRangeCheck 
property in TDateEdit. TDateRangeCheckEvent allows the control to perform 
actions needed for the existing value in ADate prior to validating and/or 
limiting the value to a specific range.
</p>
</descr>
<seealso>
<link id="TDateEdit.MinDate"/>
<link id="TDateEdit.MaxDate"/>
<link id="TDateEdit.ButtonClick"/>
</seealso>
</element>
<element name="TDateRangeCheckEvent.Sender">
<short>Object (TDateEdit) for the event notification.</short>
</element>
<element name="TDateRangeCheckEvent.ADate">
<short>The existing TDateTime value for the handler routine.</short>
</element>

<element name="TDateOrder">
<short>
Controls the display order for Month, Day, and Year portions of a date value.
</short>
<descr>
<p>
<var>TDateOrder</var> is an enumerated type with values that indicate the 
display order for the Month, Day, and Year portions of a date value.
</p>
<p>
TDateOrder is the type used to implement the <var>DateOrder</var> property in 
<var>TDateEdit</var>, and passed as an argument to the <var>ParseDate</var> 
routine in the implementation for the unit.
</p>
</descr>
<seealso>
<link id="TDateEdit.DateOrder"/>
</seealso>
</element>
<element name="TDateOrder.doNone">
<short>No order is specified for the Year, Month, and Day values.</short>
</element>
<element name="TDateOrder.doMDY">
<short>Displayed in Month, Day, Year order.</short>
</element>
<element name="TDateOrder.doDMY">
<short>Displayed in Day, Month, Year order.</short>
</element>
<element name="TDateOrder.doYMD">
<short>Displayed in Year, Month, Day order.</short>
</element>

<element name="TDateEdit">
<short>
Implements a control with an edit box for a date value and an attached speed 
button to display a date selection (calendar) dialog.
</short>
<descr>
<p>
<var>TDateEdit</var> is a <var>TCustomEditButton</var> descendant which 
implements a grouped edit control for entering a date value. The control uses 
an <var>Edit</var> and a <var>Button</var>, as defined in the ancestor class, 
and displays a pop-up Calendar dialog to select a date value when the Button 
is clicked. The selected date is stored in the <var>Date</var> property as a 
<var>TDateTime</var> value.
</p>
<p>
TDateEdit provides additional properties which are used to configure the Edit 
and Button controls and the dialog executed when Button is clicked.
</p>
<p>
TDateEdit has an overridden ButtonClick method which displays the pop-up 
Calendar dialog. This method includes logic to set the minimum and maximum 
date values for the native calendar control on the dialog. For the Windows 
platform, the value limits are September 14, 1752 and December 31, 9999. This 
functionality is not supported for all platforms. Specifically, GTK2 and GTK3 
do not support the minimum and maximum date values on their native calendar 
controls.
</p>
</descr>
<seealso>
<link id="TCustomEditButton"/>
</seealso>
</element>

<element name="TDateEdit.FDateOrder"/>
<element name="TDateEdit.FDefaultToday"/>
<element name="TDateEdit.FDisplaySettings"/>
<element name="TDateEdit.FDroppedDown"/>
<element name="TDateEdit.FOnAcceptDate"/>
<element name="TDateEdit.FOnCustomDate"/>
<element name="TDateEdit.FOnDateRangeCheck"/>
<element name="TDateEdit.FFixedDateFormat"/>
<element name="TDateEdit.FFreeDateFormat"/>
<element name="TDateEdit.FDate"/>
<element name="TDateEdit.FMinDate"/>
<element name="TDateEdit.FMaxDate"/>
<element name="TDateEdit.FUpdatingDate"/>

<element name="TDateEdit.CheckRange">
<short>
Signals the OnDateRangeCheck event handler and validates a date for its lower 
and upper limits.
</short>
</element>
<element name="TDateEdit.CheckRange.ADate"/>
<element name="TDateEdit.CheckRange.AMinDate"/>
<element name="TDateEdit.CheckRange.AMaxDate"/>

<element name="TDateEdit.SetFreeDateFormat">
<short>Sets the value for the DateFormat property.</short>
<descr/>
<seealso>
<link id="TDateEdit.DateFormat"/>
</seealso>
</element>
<element name="TDateEdit.SetFreeDateFormat.AValue">
<short>New value for the property.</short>
</element>

<element name="TDateEdit.SetMaxDate">
<short>Sets the value for the MaxDate property.</short>
</element>
<element name="TDateEdit.SetMaxDate.AValue"/>

<element name="TDateEdit.SetMinDate">
<short>Sets the value for the MinDate property.</short>
</element>
<element name="TDateEdit.SetMinDate.AValue"/>

<element name="TDateEdit.IsLimited"/>
<element name="TDateEdit.IsLimited.Result"/>
<element name="TDateEdit.GetMaxDateStored"/>
<element name="TDateEdit.GetMaxDateStored.Result"/>
<element name="TDateEdit.GetMixDateStored"/>
<element name="TDateEdit.GetMixDateStored.Result"/>

<element name="TDateEdit.TextToDate">
<short>
Converts the specified text to a TDateTime value with an optional default 
value.
</short>
<descr></descr>
<seealso></seealso>
</element>
<element name="TDateEdit.TextToDate.Result">
<short>TDateTime value for the specified text.</short>
</element>
<element name="TDateEdit.TextToDate.AText">
<short>Text examined in the method.</short>
</element>
<element name="TDateEdit.TextToDate.ADefault">
<short>Default TDateTime value used when the text cannot be converted.</short>
</element>

<element name="TDateEdit.GetDate">
<short>Gets the value for the Date property.</short>
<descr/>
<seealso>
<link id="TDateEdit.Date"/>
</seealso>
</element>
<element name="TDateEdit.GetDate.Result">
<short>Value for the property.</short>
</element>

<element name="TDateEdit.SetDate">
<short>Sets the value for the Date property.</short>
<descr/>
<seealso>
<link id="TDateEdit.Date"/>
</seealso>
</element>
<element name="TDateEdit.SetDate.AValue">
<short>New value for the property.</short>
</element>

<element name="TDateEdit.CalendarPopupReturnDate">
<short>
Implements the OnReturnDate event handler used in the dialog in the control.
</short>
<descr>
<p>
<var>CalendarPopupReturnDate</var> is a procedure which implements the 
<var>TReturnDateEvent</var> event handler used to validate and store the date 
returned from the dialog for the control. It is passed as an argument when 
calling the <var>ShowCalendarPopup</var> routine in the 
<var>ButtonClick</var> method.
</p>
<p>
CalendarPopupReturnDate signals the <var>OnAcceptDate</var> event handler 
(when assigned) to accept or reject the value in <var>ADate</var>. The value 
in <var>ADate</var> is stored in the <var>Date</var> property when accepted 
in <var>OnAcceptDate</var>.
</p>
<p>
CalendarPopupReturnDate handles any exception which occurs in the method, or 
in the OnAcceptDate event handler, and displays a dialog with the message 
from the exception.
</p>
</descr>
<seealso>
<link id="TDateEdit.ButtonClick"/>
<link id="TDateEdit.OnAcceptDate"/>
<link id="TDateEdit.Date"/>
<link id="#lcl.calendarpopup.ShowCalendarPopup">ShowCalendarPopup</link>
</seealso>
</element>
<element name="TDateEdit.CalendarPopupReturnDate.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TDateEdit.CalendarPopupReturnDate.ADate">
<short>Date/Time value examined and stored in the method.</short>
</element>

<element name="TDateEdit.CalendarPopupShowHide">
<short>
Implements the event handler which toggles the visibility of the dialog form 
for the control.
</short>
<descr>
<p>
<var>CalendarPopupShowHide</var> is a procedure which implements the event 
handler used to toggle the visibility of the dialog form for the control. 
CalendarPopupShowHide is passed as an argument when calling the 
<var>ShowCalendarPopup</var> routine in the <var>ButtonClick</var> method.
</p>
<p>
CalendarPopupShowHide checks the visibility of the form in <var>Sender</var> 
(a <var>TCalendarPopupForm</var> in this usage), and assigns the value to the 
<var>DroppedDown</var> property in the class instance.
</p>
</descr>
<seealso>
<link id="TDateEdit.ButtonClick"/>
<link id="TDateEdit.DroppedDown"/>
<link id="#lcl.calendarpopup.ShowCalendarPopup">ShowCalendarPopup</link>
</seealso>
</element>
<element name="TDateEdit.CalendarPopupShowHide.Sender">
<short>
Object generating the event notification; the TCalendarPopupForm instance in 
this case.
</short>
</element>

<element name="TDateEdit.SetDateOrder">
<short>Sets the value for the DateOrder property.</short>
<descr></descr>
<seealso>
<link id="TDateEdit.DateOrder"/>
</seealso>
</element>
<element name="TDateEdit.SetDateOrder.AValue">
<short>New value for the DateOrder property.</short>
</element>

<element name="TDateEdit.DateToText">
<short>Converts the specified TDateTime value to a string.</short>
<descr>
<p>
<var>DateToText</var> is a <var>String</var> function used to convert the 
<var>TDateTime</var> value in the <var>Value</var> parameter to its textual 
representation. The return value is an empty String (<b>''</b>) when Value is 
equal to the <var>NullDate</var> constant.
</p>
<p>
DateToText uses <var>DefaultFormatSettings</var> to generate the return value 
when <var>DateOrder</var> is <var>doNone</var> using the short date format in 
the <var>DateFormat</var> property. When DateOrder contains another value 
from the enumeration, the formatting mask for the date order is used to 
generate the return value; i. e. 'mm/dd/yyyy'.
</p>
<p>
DateToText is used in the implementation of the <var>SetDate</var>, 
<var>RealSetText</var>, and <var>EditEditingDone</var> methods.
</p>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.EditEditingDone"/>
<link id="TDateEdit.RealSetText"/>
<link id="#rtl.sysutils.DefaultFormatSettings">DefaultFormatSettings</link>
<link id="#rtl.sysutils.DateToStr">DateToStr</link>
<link id="#rtl.sysutils.FormatDateTime">FormatDateTime</link>
</seealso>
</element>
<element name="TDateEdit.DateToText.Result">
<short>Text for the converted date/time value.</short>
</element>
<element name="TDateEdit.DateToText.Value">
<short>TDateTime vale converted in the method.</short>
</element>

<element name="TDateEdit.IsNullDate"/>
<element name="TDateEdit.IsNullDate.Result"/>
<element name="TDateEdit.IsNullDate.ADate"/>

<element name="TDateEdit.WSRegisterClass">
<short>
Registers the class reference used to create new instances of the class.
</short>
<seealso/>
</element>

<element name="TDateEdit.GetDefaultGlyphName">
<short>
Gets the name of the default glyph resource used for the Button on the 
control.
</short>
<descr>
<p>
<var>GetDefaultGlyphName</var> is an overridden String function used to get 
the default resource name with the glyph image for the Button on the control. 
It is used in the LoadDefaultGlyph method to assign the LCLGlyphName for the 
TButtonGlyph instance used in the control.
</p>
<p>
In <var>TDateEdit</var>, the return value is set to the ResBtnCalendar
constant.
</p>
</descr>
<seealso>
<link id="TCalcEdit"/>
<link id="ResBtnCalendar"/>
<link id="TCustomEditButton.GetDefaultGlyphName"/>
<link id="#lcl.buttons.TButtonGlyph.LCLGlyphName">TButtonGlyph.LCLGlyphName</link>
</seealso>
</element>
<element name="TDateEdit.GetDefaultGlyphName.Result">
<short>Default resource name for the glyph image on the control.</short>
</element>

<element name="TDateEdit.ButtonClick">
<short>
Displays a pop-up calendar dialog when the Button for the grouped edit 
control is clicked.
</short>
<descr>
<p>
<var>ButtonClick</var> is an overridden method in <var>TDateEdit</var>. It 
implements the virtual method defined in the ancestor class, and is called 
when the Button for the grouped edit control is clicked.
</p>
<p>
ButtonClick creates, displays, and executes a pop-up calendar dialog used to 
get a TDateTime value. The value in the Date property is passed as the 
initial date displayed on the dialog form. If Date contains the NullDate 
value, the current system date is used.
</p>
<p>
Values in the MinDate and MaxDate properties are used to validate and to 
limit the range of dates displayed on the pop-up calendar. When the 
properties contain non-zero values that are at least one day apart, they are 
used as the lower and upper limits for the value in Date. Otherwise, the 
MinDateTime and MaxDateTime RTL constants are used as the limits for the date 
value.
</p>
<p>
The ShowCalendarPopup routine is called to display and execute the dialog 
form. Set values in CalendarDisplaySettings and DefaultToday to control the 
appearance and behavior for the calendar on the dialog.
</p>
<remark>
For the Windows platform, additional validation is performed to ensure that 
Date is within the range of values allowed for the native calendar control. 
The minimum date value is "1752-09-14" (September 14, 1752) for the start of 
the Gregorian calendar. The maximum date value is "9999-12-31" (December 31, 
9999). This is done to prevent an exception when an invalid value is passed 
to the native calendar control. When DefaultToday is enabled, Date defaults 
to the current system date for a value outside this range. When not enabled, 
the MinDate and MaxDate values are used to range limit the date.
</remark>
<p>
Assign a routine to the OnAcceptDate event handler to perform actions needed 
when a new date value is selected using the dialog. Enable FocusOnButtonClick 
to focus and optionally auto-select the value in the edit control after the 
dialog has been closed.
</p>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.MinDate"/>
<link id="TDateEdit.MaxDate"/>
<link id="TDateEdit.CalendarDisplaySettings"/>
<link id="TDateEdit.DefaultToday"/>
<link id="TDateEdit.OnAcceptDate"/>
<link id="TDateEdit.FocusOnButtonClick"/>
<link id="TDateEdit.EditDblClick"/>
<link id="TCustomEditButton.ButtonClick"/>
<link id="TCustomEditButton.Button"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.FocusAndMaybeSelectAll">TCustomAbstractGroupedEdit.FocusAndMaybeSelectAll</link>
<link id="#lcl.calendarpopup.ShowCalendarPopup">ShowCalendarPopup</link>
</seealso>
</element>

<element name="TDateEdit.EditDblClick">
<short>
Performs actions needed when the Edit in the control is double clicked.
</short>
<descr>
<p>
<var>EditDblClick</var> is an overridden procedure in <var>TDateEdit</var>. 
It calls the inherited method, and checks to ensure that the control is not 
marked as <var>ReadOnly</var> before calling the <var>ButtonClick</var> 
method.
</p>
</descr>
<seealso>
<link id="TDateEdit.ReadOnly"/>
<link id="TDateEdit.ButtonClick"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.EditDblClick">TCustomAbstractGroupedEdit.EditDblClick</link>
</seealso>
</element>

<element name="TDateEdit.EditEditingDone">
<short>
Implements the OnEditingDone event handler for the Edit in the control.
</short>
<descr>
<p>
<var>EditEditingDone</var> is an overridden method in <var>TDateEdit</var>. 
It calls the inherited method on entry to signal the OnEditEditingDone event 
handler (when assigned).
</p>
<p>
If DirectInput is enabled, the value in Date is converted to a string and 
stored in the Text property. Values in DateOrder, DateFormat, or the default 
date format settings for the locale are used to determine the content for the 
converted value. An empty string ('') is assigned to Text when Date contains 
the NullDate value.
</p>
</descr>
<seealso>
<link id="TDateEdit.DirectInput"/>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.DateFormat"/>
<link id="TDateEdit.DateOrder"/>
<link id="TDateEdit.Text"/>
<link id="TDateEdit.OnEditingDone"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.EditEditingDone">TCustomAbstractGroupedEdit.EditEditingDone</link>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.OnEditingDone">TCustomAbstractGroupedEdit.OnEditingDone</link>
</seealso>
</element>

<element name="TDateEdit.SetDirectInput">
<short>Sets the value in the DirectInput property.</short>
<descr>
<p>
<var>SetDirectInput</var> is overridden in <var>TDateEdit</var> to 
synchronize the value from the Text property to the Date property when the 
property value in DirectInput is changed. The OnCustomDate event handler is 
signalled (when assigned) to handle a custom date format or value in Text. 
DateOrder is used to determine the order of the date component values in 
Text. When DateOrder is doNone, the format setting in DefaultFormatSettings 
or DateFormat is used. An implementation routine is used to parse the value 
in Text if cannot be converted using TryStrToDate or ParseDate.
</p>
<p>
Date is set to the value in NullDate if Text is not successfully converted to 
a TDateTime value.
</p>
<remark>
Date may contain an uninitialized value at design-time.
</remark>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.DefaultToday"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput">TCustomAbstractGroupedEdit.DirectInput</link>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.Text">TCustomAbstractGroupedEdit.Text</link>
<link id="NullDate"/>
</seealso>
</element>
<element name="TDateEdit.SetDirectInput.AValue">
<short>New value for the property.</short>
</element>

<element name="TDateEdit.RealSetText">
<short>Sets the value for text in the control.</short>
<descr>
<p>
<var>RealSetText</var> is overridden in <var>TDateEdit</var> to ensure that 
<var>DefaultToday</var> is used to set the <var>Date</var> when 
<var>Text</var> is an empty string. Calls the inherited RealSetText method.
</p>
</descr>
<seealso>
<link id="TDateEdit.DefaultToday"/>
<link id="TDateEdit.Date"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.Text">TCustomAbstractGroupedEdit.Text</link>
</seealso>
</element>
<element name="TDateEdit.RealSetText.AValue">
<short>New value for the control.</short>
</element>

<element name="TDateEdit.SetDateMask">
<short>
Applies an EditMask based on the DateOrder for the control.
</short>
<descr>
<p>
<var>SetDateMask</var> is a method used to update the EditMask for the 
control. It also updates the internal member where a 
FormatDateTime-compatible format string is stored. The mask value is 
determined by the DateOrder property, and uses the following TDateOrder and 
edit mask values:
</p>
<dl>
<dt>doNone</dt>
<dd>
EditMask is set to an empty string (''). The date format string is also an 
empty string.
</dd>
<dt>doDMY, doMDY</dt>
<dd>
EditMask is set to '99/99/9999;1;_'. The date format string is set to 
'mm/dd/yyyy' (for doMDY) or 'dd/mm/yyyy' (for doDMY).
</dd>
<dt>doYMD</dt>
<dd>
EditMask is set to '9999/99/99;1;_'. The date format string is set to 
'yyyy/mm/dd'.
</dd>
</dl>
<p>
SetDateMask retrieves and re-applies the current value in Date after the 
EditMask has been changed. This forces the display value in Text to be 
updated.
</p>
<p>
SetDateMask is called when a new value is assigned to the DateOrder property.
</p>
</descr>
<seealso>
<link id="TDateEdit.DateOrder"/>
<link id="TDateEdit.Date"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.EditMask">TCustomAbstractGroupedEdit.EditMask</link>
</seealso>
</element>

<element name="TDateEdit.Loaded">
<short>
Performs actions needed when the component has finished loading in the LCL 
streaming mechanism.
</short>
<descr>
<p>
<var>Loaded</var> is an overridden method in <var>TDateEdit</var>. The 
overridden method ensures that the value in Date is re-applied at run-time. 
</p>
<p>
Date defaults to the current system date when Value is a null date and 
DefaultToday is <b>True</b>. The assignment causes Date to be range-limited 
to the minimum and maximum values in MinDate and MaxDate (when assigned), or 
the limits for the Date type. Date is not updated at design-time.
</p>
<p>
The string representation for the date value is also applied to the Text 
property. The value in DateOrder determines the date format used for the text 
value.
</p>
<p>
Loaded calls the inherited method prior to exit to update the spacing and 
color for the control.
</p>
</descr>
<version>
Modified in version 2.2.4 (e7e585f1) to call the inherited Loaded method on 
exit instead of on entry. This allows the OnChange handler to be signalled 
once after both the Date member and Text have been updated.
</version>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.DateOrder"/>
<link id="TDateEdit.DateFormat"/>
<link id="TDateEdit.DefaultToday"/>
<link id="TDateEdit.Text"/>
<link id="TDateEdit.MinDate"/>
<link id="TDateEdit.MaxDate"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.Loaded">TCustomAbstractGroupedEdit.Loaded</link>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.UpdateSpacing">TCustomAbstractGroupedEdit.UpdateSpacing</link>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.Color">TCustomAbstractGroupedEdit.Color</link>
</seealso>
</element>

<element name="TDateEdit.DoDateRangeCheck">
<short>Signals the OnDateRangeCheck event handler (when assigned).</short>
<descr>
<p>
<var>DoDateRangeCheck</var> is called when a date value is validated and 
range checked for its lower and upper limits. It is called prior to 
validation of the date value, and allows the OnDateRangeCheck event handler 
to perform any actions needed for the control. DoDateRangeCheck occurs when a 
new value is assigned to either the MinDate or MaxDate property, and when 
ButtonClick is called to display the pop-up calendar dialog for the control.
</p>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.MinDate"/>
<link id="TDateEdit.MaxDate"/>
<link id="TDateEdit.ButtonClick"/>
<link id="TDateEdit.OnDateRangeCheck"/>
</seealso>
</element>
<element name="TDateEdit.DoDateRangeCheck.ADate">
<short>Date value for the event notification.</short>
</element>

<element name="TDateEdit.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TDateEdit</var>. It calls the 
inherited <var>Create</var> method and sets the default values for properties 
in the class instance.
</p>
<p>
Create initializes the dialog title, caption, display settings, and the 
default date.
</p>
</descr>
<errors/>
<seealso>
<link id="TCustomEditButton.Create"/>
</seealso>
</element>
<element name="TDateEdit.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TDateEdit.GetDateFormat">
<short>
Gets the FormatDateTime-compatible format specification used for the current 
DateOrder in the control.
</short>
<descr>
<p>
GetDateFormat reads the member value assigned when the SetDateMask method is 
called. It contains the FormatDateTime-compatible format specification used 
to convert values in Text and Date when DateOrder has a value other than 
doNone.
</p>
<p>
GetDateFormat is not used in the current LCL version.
</p>
<p>
Use the DateFormat property for the format used when DateOrder is set to 
doNone.
</p>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.DateOrder"/>
<link id="TDateEdit.DateFormat"/>
<link id="TDateEdit.Text"/>
<link id="TDateEdit.SetDateMask"/>
</seealso>
</element>
<element name="TDateEdit.GetDateFormat.Result">
<short>
String with the fixed date format for the DateOrder in the control.
</short>
</element>

<element name="TDateEdit.AutoSelected" link="#lcl.groupededit.TCustomAbstractGroupedEdit.AutoSelected"/>

<element name="TDateEdit.Date">
<short>Contains the TDateTime value for the control.</short>
<descr>
<p>
<var>Date</var> is a <var>TDateTime</var> property with the date value for 
the control. The Time component in the value is ignored in TDateEdit. Date is 
a public property, so it is not available in the Object Inspector at 
design-time. But its value can be assigned in program code at run-time.
</p>
<p>
Date provides the value displayed and updated using the Edit for the control 
when DirectInput is enabled. It is updated when the Button for the control is 
clicked and a new value is selected from the calendar dialog.
</p>
<p>
Setting a new value for the property causes the new date to be validated. An 
empty date is represented using the NullDate value. When the property value 
is NullDate and DefaultToday is enabled, the current system date is used.
</p>
<p>
MinDate and MaxDate are used (when assigned) to ensure that the new property 
value is within the specified range of dates. They are not used to limit the 
value in Date if either of the properties contain NullDate, or are not at 
least one day apart. When not used, the MinDateTime and MaxDateTime RTL 
constants are used as the lower and upper limits for the date value.
</p>
<p>
The value in Text is updated when the new value is stored in the Date 
property.
</p>
<p>
Use DateOrder to control the order of the date components displayed on the 
control and in the Text property. Use DateFormat to specify the 
FormatDateTime-compatible formatting string used when DateOrder is set to 
doNone. The default format settings for the locale are used to generate the 
value in Text when both DateOrder and DateFormat are not used.
</p>
</descr>
<seealso>
<link id="TDateEdit.MinDate"/>
<link id="TDateEdit.MaxDate"/>
<link id="TDateEdit.Text"/>
<link id="TDateEdit.DefaultToday"/>
<link id="TDateEdit.Button"/>
<link id="TDateEdit.DateOrder"/>
<link id="TDateEdit.DateFormat"/>
<link id="TDateEdit.DefaultToday"/>
</seealso>
</element>

<element name="TDateEdit.Button" link="#lcl.editbtn.TCustomEditButton.Button"/>

<element name="TDateEdit.DroppedDown">
<short>
Indicates the calendar dialog for the control is visible when <b>True</b>.
</short>
<descr>
<p>
<var>DroppedDown</var> is a read-only <var>Boolean</var> property which 
indicates if the calendar dialog form is visible for the control. The 
property value is updated when the calendar dialog form is displayed or 
hidden in the ButtonClick method.
</p>
</descr>
<seealso>
<link id="TDateEdit.ButtonClick"/>
</seealso>
</element>

<element name="TDateEdit.CalendarDisplaySettings">
<short>
Display or behavior options enabled in the pop-up calendar dialog for the 
control.
</short>
<descr>
<p>
<var>CalendarDisplaySettings</var> is a <var>TDisplaySettings</var> property 
with the display and behavior options enabled in the calendar dialog for the 
grouped edit control. It contains zero or more values from the 
TDisplaySetting enumeration, and enables the features or behaviors in the 
calendar control. The default values in the set type are <b>[dsShowHeadings, 
dsShowDayNames]</b>.
</p>
<p>
See TDisplaySetting for more information about the values in the enumeration 
and their meanings.
</p>
<p>
The property value is passed as an argument to the ShowCalendarPopup routine 
when the Button is clicked for the control.
</p>
</descr>
<seealso>
<link id="TDateEdit.ButtonClick"/>
<link id="#lcl.calendar.TDisplaySettings">TDisplaySettings</link>
<link id="#lcl.calendar.TDisplaySetting">TDisplaySetting</link>
<link id="#lcl.calendar.TCustomCalendar.DisplaySettings">TCustomCalendar.DisplaySettings</link>
<link id="#lcl.calendarpopup.ShowCalendarPopup">ShowCalendarPopup</link>
</seealso>
</element>

<element name="TDateEdit.ReadOnly" link="#lcl.groupededit.TCustomAbstractGroupedEdit.ReadOnly"/>

<element name="TDateEdit.DefaultToday">
<short>
<b>True</b> to use the current system date when a Date value is not available.
</short>
<descr>
<p>
<var>DefaultToday</var> is a <var>Boolean</var> property which indicates if 
the current system date is used when the Date property has not been assigned 
or contains an invalid date value. The default value for the property is 
<b>False</b>.
</p>
<p>
DefaultToday is used in the ButtonClick method, and causes SysUtils.Date to 
be used as the date value when set to True. This occurs when the date 
contains the NullDate value, or when the date is not within the date range 
allowed for a given platform. It is used when a new value is assigned to the 
DirectInput property and a valid date has not been assigned to the Date 
property. It is also used when a new value is assigned to Text and 
DirectInput has not been enabled for the control.
</p>
</descr>
<seealso>
<link id="TDateEdit.ButtonClick"/>
<link id="TDateEdit.DirectInput"/>
<link id="TDateEdit.Text"/>
<link id="NullDate"/>
</seealso>
</element>

<element name="TDateEdit.DateOrder">
<short>
Controls the display order for Year, Month, and Day parts of the Date value.
</short>
<descr>
<p>
<var>DateOrder</var> is a <var>TDateOrder</var> property which indicates the 
order of the Year, Month, and Day parts of the Date value. Values in the 
enumeration include:
</p>
<dl>
<dt>doNone</dt>
<dd>
No order is specified. The value in DateFormat is used instead. EditMask is 
set to ''.
</dd>
<dt>doMDY</dt>
<dd>
Displays values in Month, Day, Year order and uses the format specification 
'mm/dd/yyyy'. EditMask is set to '99/99/9999;1;_'.
</dd>
<dt>doDMY</dt>
<dd>
Displays values in Day, Month, Year order and uses the format specification 
'dd/mm/yyyy'. EditMask is set to '99/99/9999;1;_'.
</dd>
<dt>doYMD</dt>
<dd>
Displays values in Year, Month, Day order and uses the format specification 
'yyyy/mm/dd'. EditMask is set to '9999/99/99;1;_'.
</dd>
</dl>
<p>
Setting a new value for the property causes SetDateMask to be called to 
update the EditMask for the control.
</p>
<p>
DateOrder is also used when the value in Date is converted to a String type 
and stored in the Text property.
</p>
<p>
Use DateFormat for the format specification used when DateOrder is doNone.
</p>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.DateFormat"/>
<link id="TDateEdit.SetDateMask"/>
<link id="TDateEdit.Text"/>
<link id="TDateOrder"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.EditMask">TCustomAbstractGroupedEdit.EditMask</link>
</seealso>
</element>

<element name="TDateEdit.DateFormat">
<short>
Specifies the format string used for the date value in the control.
</short>
<descr>
<p>
<var>DateFormat</var> is a <var>String</var> property which contains the 
format used when converting the Date value to and from text. DateFormat is 
used when <var>DateOrder</var> contains the value <var>doNone</var>; when 
another <var>TDateOrder</var> value is used, the fixed format needed for the 
date order is automatically used.
</p>
<p>
DateFormat is used in the implementation of the <var>TextToDate</var> and 
<var>DateToText</var> methods.
</p>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.DateOrder"/>
<link id="TDateOrder"/>
</seealso>
</element>

<element name="TDateEdit.MinDate">
<short>
Smallest date value allowed in the date edit control.
</short>
<descr>
<p>
<var>MinDate</var> is a <var>TDateTime</var> property which indicates the 
smallest value allowed in the Date property. Along with MaxDate, it defines a 
range limit for possible Date values in both the edit control and the pop-up 
calendar form displayed when its Button is clicked.
</p>
<p>
The default value for the property is an empty date/time value (0.0), and 
indicates that neither MinDate nor MaxDate are used to limit the values in 
Date. Setting a new value for the property causes the date value to be 
validated. It must be in the range of valid TDateTime values defined in the 
RTL MinDateTime and MaxDateTime constants. An EInvalidDate exception is 
raised if the new value is outside the allowed range.
</p>
<p>
The value in Date is adjusted (when needed) if its value is smaller than the 
new value for the MinDate property. No actions are needed if MinDate and 
MaxDate have not been assigned, or are not at least one day apart.
</p>
<p>
Time component values (hours, minutes, seconds, milliseconds) in MinDate are 
ignored in TDateEdit.
</p>
<p>
Use MaxDate to specify the largest value allowed in the Date property.
</p>
<remark>
MinDate and MaxDate are not implemented for all platforms supported in the 
LCL. Specifically, GTK2 and GTK3 do not implement MinDate and MaxDate in 
their native calendar controls.
</remark>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.MaxDate"/>
<link id="TDateEdit.DoDateRangeCheck"/>
<link id="#lcl.calendar.EInvalidDate">EInvalidDate</link>
<link id="#rtl.sysutils.MinDateTime">MinDateTime</link>
<link id="#rtl.sysutils.MaxDateTime">MaxDateTime</link>
</seealso>
</element>

<element name="TDateEdit.MaxDate">
<short>
Largest date value allowed in the date edit control.
</short>
<descr>
<p>
<var>MaxDate</var> is a <var>TDateTime</var> property which indicates the 
largest value allowed in the Date property. Along with MinDate, it defines a 
range limit for possible Date values in both the edit control and the pop-up 
calendar form displayed when its Button is clicked.
</p>
<p>
The default value for the property is an empty date/time value (0.0), and 
indicates that neither MinDate nor MaxDate are used to limit the values in 
Date. Setting a new value for the property causes the date value to be 
validated. It must be in the range of valid TDateTime values defined in the 
RTL MinDateTime and MaxDateTime constants. An EInvalidDate exception is 
raised if the new value is outside the allowed range.
</p>
<p>
The value in Date is adjusted (when needed) if its value is larger than the 
new value for the MaxDate property. No actions are needed if MinDate and 
MaxDate have not been assigned, or are not at least one day apart.
</p>
<p>
Time component values (hours, minutes, seconds, milliseconds) in MaxDate are 
ignored in TDateEdit.
</p>
<p>
Use MinDate to specify the smallest value allowed in the Date property.
</p>
<remark>
MinDate and MaxDate are not implemented for all platforms supported in the 
LCL. Specifically, GTK2 and GTK3 do not implement MinDate and MaxDate in 
their native calendar controls.
</remark>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.MinDate"/>
<link id="TDateEdit.DoDateRangeCheck"/>
<link id="#lcl.calendar.EInvalidDate">EInvalidDate</link>
<link id="#rtl.sysutils.MinDateTime">MinDateTime</link>
<link id="#rtl.sysutils.MaxDateTime">MaxDateTime</link>
</seealso>
</element>

<element name="TDateEdit.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
<element name="TDateEdit.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
<element name="TDateEdit.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
<element name="TDateEdit.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
<element name="TDateEdit.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
<element name="TDateEdit.Action" link="#lcl.controls.TControl.Action"/>
<element name="TDateEdit.Align" link="#lcl.controls.TControl.Align"/>
<element name="TDateEdit.Alignment" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Alignment"/>
<element name="TDateEdit.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TDateEdit.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TDateEdit.AutoSelect" link="#lcl.stdctrls.TCustomEdit.AutoSelect"/>
<element name="TDateEdit.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TDateEdit.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TDateEdit.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TDateEdit.CharCase" link="#lcl.stdctrls.TCustomEdit.CharCase"/>
<element name="TDateEdit.Color" link="#lcl.controls.TControl.Color"/>
<element name="TDateEdit.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TDateEdit.DirectInput" link="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput"/>
<element name="TDateEdit.EchoMode" link="#lcl.stdctrls.TCustomEdit.EchoMode"/>
<element name="TDateEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
<element name="TDateEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
<element name="TDateEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
<element name="TDateEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
<element name="TDateEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
<element name="TDateEdit.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TDateEdit.EchoMode" link="#lcl.groupededit.TCustomAbstractGroupedEdit.EchoMode"/>
<element name="TDateEdit.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TDateEdit.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
<element name="TDateEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
<element name="TDateEdit.Font" link="#lcl.controls.TControl.Font"/>
<element name="TDateEdit.Layout" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Layout"/>
<element name="TDateEdit.MaxLength" link="#lcl.stdctrls.TCustomEdit.MaxLength"/>
<element name="TDateEdit.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TDateEdit.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TDateEdit.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TDateEdit.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TDateEdit.PasswordChar" link="#lcl.stdctrls.TCustomEdit.PasswordChar"/>
<element name="TDateEdit.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TDateEdit.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TDateEdit.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TDateEdit.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TDateEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
<element name="TDateEdit.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TDateEdit.Text" link="#lcl.controls.TControl.Text"/>
<element name="TDateEdit.TextHint" link="#lcl.groupededit.TCustomAbstractGroupedEdit.TextHint"/>

<element name="TDateEdit.OnAcceptDate">
<short>
Event handler signalled to accept or reject a new date value selected using 
the calendar dialog for the control.
</short>
<descr>
<p>
<var>OnAcceptDate</var> is a <var>TAcceptDateEvent</var> property with the 
event handler signalled to accept or reject a new value for the Date 
property. The handler routine can perform actions to validate or update the 
TDateTime and Boolean arguments.
</p>
<p>
OnAcceptDate is signalled (when assigned) when the pop-up calendar dialog is 
displayed for the grouped edit control. The handler routine can update the 
value in the date argument if its value is not in an acceptable range. If the 
Boolean argument is <b>True</b> on exit from the handler, the date argument 
is stored to the Date property. Otherwise, the new date/time value is 
discarded.
</p>
<p>
An exception raised during execution of the pop-up calendar dialog is handled 
in the class instance; MessageDlg is called to display the exception message.
</p>
</descr>
<seealso>
<link id="TDateEdit.ButtonClick"/>
<link id="TDateEdit.Date"/>
<link id="TAcceptDateEvent"/>
</seealso>
</element>

<element name="TDateEdit.OnCustomDate">
<short>
<var>OnCustomDate</var> - event handler for inserting a custom date.
</short>
<descr>
<p>
<var>OnCustomDate</var> is a <var>TCustomDateEvent</var> property with the 
event handler signalled to validate or update a string value before it is 
converted to the TDateTime type. OnCustomDate is signalled (when assigned) 
when the value in Text is converted to the TDateTime type used in the Date 
property. It also occurs when a new value is assigned to DirectInput, and 
when reading the value for the Date property when DirectInput is enabled.
</p>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.DateOrder"/>
<link id="TDateEdit.DirectInput"/>
<link id="TDateEdit.Text"/>
</seealso>
</element>

<element name="TDateEdit.OnDateRangeCheck">
<short>
Event handler signalled prior to validating and range checking a date value.
</short>
<descr>
<p>
<var>OnDateRangeCheck</var> is a <var>TDateRangeCheckEvent</var> with the 
event handler signalled prior to validating and range checking a date value. 
It allows the application to perform actions needed before a date value is 
potentially updated. An application can implement and assign a routine to the 
handler which responds to the event notification.
</p>
<p>
OnDateRangeCheck is signalled (when assigned) from the DoDateRangeCheck 
method. It occurs when a new value is assigned to either the MinDate or 
MaxDate property, and when ButtonClick is called to display the pop-up 
calendar for the control.
</p>
</descr>
<seealso>
<link id="TDateEdit.Date"/>
<link id="TDateEdit.MinDate"/>
<link id="TDateEdit.MaxDate"/>
<link id="TDateEdit.DoDateRangeCheck"/>
<link id="TDateEdit.ButtonClick"/>
<link id="TDateRangeCheckEvent"/>
</seealso>
</element>

<element name="TDateEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
<element name="TDateEdit.OnChange" link="#lcl.stdctrls.TCustomEdit.OnChange"/>
<element name="TDateEdit.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TDateEdit.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TDateEdit.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TDateEdit.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TDateEdit.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
<element name="TDateEdit.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TDateEdit.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TDateEdit.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TDateEdit.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TDateEdit.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TDateEdit.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TDateEdit.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TDateEdit.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TDateEdit.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TDateEdit.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TDateEdit.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TDateEdit.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TDateEdit.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TDateEdit.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TDateEdit.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TAcceptTimeEvent">
<short>
Specifies an event handler used to validate and accept/reject a time value.
</short>
<descr>
<p>
<var>TAcceptTimeEvent</var> specifies an event handler used to validate and 
accept/reject a time value in <var>TTimeEdit</var>. TAcceptTimeEvent is the 
type used to implement the <var>OnAcceptTime</var> property in 
<var>TTimeEdit</var>.
</p>
</descr>
<seealso>
<link id="TTimeEdit.OnAcceptTime"/>
</seealso>
</element>
<element name="TAcceptTimeEvent.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TAcceptTimeEvent.ATime">
<short>Time value examined in the method.</short>
</element>
<element name="TAcceptTimeEvent.AcceptTime">
<short>Indicates the time value is accepted when <b>True</b>.</short>
</element>

<element name="TCustomTimeEvent">
<short>
Specifies an event handler used to generate an arbitrary time value.
</short>
<descr>
<p>
<var>TCustomTimeEvent</var> specifies an event handler used to generate an 
arbitrary <var>TDateTime</var> value. TCustomTimeEvent is the type used to 
implement the <var>OnCustomTime</var> property in <var>TTimeEdit</var>.
</p>
</descr>
<seealso>
<link id="TTimeEdit.OnCustomTime"/>
</seealso>
</element>
<element name="TCustomTimeEvent.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TCustomTimeEvent.ATime">
<short>TDateTime value generated in the event handler.</short>
</element>

<element name="TTimeEdit">
<short>
Implements a control used to edit time values.
</short>
<descr>
<p>
<var>TTimeEdit</var> is a <var>TCustomEditButton</var> descendant which 
implements a control used to edit a time value. TTimeEdit provides the 
<var>Edit</var> and <var>Button</var> properties defined in the ancestor 
class, and a dialog that is executed to select a time value when the Button 
is clicked. The dialog allows selection of Hour and Minute values from a 
drop-down list. Enable DirectInput to enter a time value that includes 
additional time parts (like Seconds and Milliseconds).
</p>
<p>
The Time value in the control is represented using the <var>TDateTime</var> 
type; only the time portion of the value is significant. 
</p>
<p>
Use TimeFormat and TimeSeparator to override the default format settings used 
to generate the display Text for the time edit control.
</p>
</descr>
<version>
Modified in LCL version 4.0 to include additional properties and methods.
</version>
<seealso>
<link id="TTimeEdit.Time"/>
<link id="TTimeEdit.Text"/>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.TimeSeparator"/>
<link id="TCustomEditButton"/>
</seealso>
</element>

<!-- private -->
<element name="TTimeEdit.FTime"/>
<element name="TTimeEdit.IsEmptyTime"/>
<element name="TTimeEdit.FDefaultNow"/>
<element name="TTimeEdit.FDroppedDown"/>
<element name="TTimeEdit.FSimpleLayout"/>
<element name="TTimeEdit.FTimeAMPMString"/>
<element name="TTimeEdit.FTimeFormat"/>
<element name="TTimeEdit.FTimeSeparator"/>
<element name="TTimeEdit.FOnAcceptTime"/>
<element name="TTimeEdit.FOnCustomTime"/>

<!-- private -->
<element name="TTimeEdit.GetTime">
<short>Gets the value for the Time property.</short>
<descr/>
<seealso>
<link id="TTimeEdit.Time"/>
</seealso>
</element>
<element name="TTimeEdit.GetTime.Result">
<short>Value for the property.</short>
</element>

<element name="TTimeEdit.GetTimeAMPMString">
<short>
Gets the value for the indexed TimeAMString or TimePMString properties.
</short>
<descr/>
<version>
Added in LCL version 4.0.
</version>
<seealso/>
</element>
<element name="TTimeEdit.GetTimeAMPMString.AIndex">
<short>
Ordinal position in the internal member for the property value. 0 is for 
TimeAMString. 1 is for TimePMString.
</short>
</element>
<element name="TTimeEdit.GetTimeAMPMString.Result">
<short>
Value for the indexed property.
</short>
</element>

<element name="TTimeEdit.SetTime">
<short>Sets the value for the Time property.</short>
<descr/>
<seealso>
<link id="TTimeEdit.Time"/>
</seealso>
</element>
<element name="TTimeEdit.SetTime.AValue">
<short>New value for the property.</short>
</element>

<element name="TTimeEdit.SetEmptyTime">
<short>Sets the value in the Time property to the empty time value.</short>
<descr>
<p>
<var>SetEmptyTime</var> is a procedure used to set the value in the 
<var>Time</var> property to the empty time value. The value in 
<var>NullTime</var> is assigned as the value for the <var>Time</var> 
property. In addition, the <var>EmptyStr</var> constant is assigned as the 
value for the <var>Text</var> property. An internal flag is set to indicate 
that the time value is empty.
</p>
<p>
SetEmptyTime is used in the implementation of the <var>ParseInput</var> 
method, and in the constructor for the class instance.
</p>
</descr>
<seealso>
<link id="TTimeEdit.ParseInput"/>
<link id="TTimeEdit.Create"/>
<link id="NullDate"/>
<link id="#rtl.sysutils.EmptyStr">EmptyStr</link>
</seealso>
</element>

<element name="TTimeEdit.GetLayout">
<short>Gets the value for the SimpleLayout property.</short>
<descr></descr>
<seealso>
<link id="TTimeEdit.SimpleLayout"/>
</seealso>
</element>
<element name="TTimeEdit.GetLayout.Result">
<short>Value for the property.</short>
</element>

<element name="TTimeEdit.SetLayout">
<short>Sets the value for the SimpleLayout property.</short>
<descr/>
<seealso>
<link id="TTimeEdit.SimpleLayout"/>
</seealso>
</element>
<element name="TTimeEdit.SetLayout.AValue">
<short>New value for the property.</short>
</element>

<element name="TTimeEdit.SetTimeAMPMString">
<short>
Sets the value for the indexed TimeAMString and TimePMString properties.
</short>
<descr/>
<version>
Added in LCL version 4.0.
</version>
<seealso/>
</element>
<element name="TTimeEdit.SetTimeAMPMString.AIndex">
<short>
Ordinal position in the internal member for the property value updated in the 
method. 0 is for TimeAMString, 1 is for TimePMString.
</short>
</element>
<element name="TTimeEdit.SetTimeAMPMString.AValue">
<short>
New value for the indexed property represented by AIndex.
</short>
</element>

<element name="TTimeEdit.SetTimeFormat">
<short>
Sets the value for the TimeFormat property.
</short>
<descr/>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.TimeFormat"/>
</seealso>
</element>
<element name="TTimeEdit.SetTimeFormat.AValue">
<short>
New value for the property.
</short>
</element>

<element name="TTimeEdit.SetTimeSeparator">
<short>
Sets the value for the TimeSeparator property.
</short>
<descr/>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.TimeSeparator"/>
</seealso>
</element>
<element name="TTimeEdit.SetTimeSeparator.AValue">
<short>
New value for the property.
</short>
</element>

<element name="TTimeEdit.TimePopupReturnTime">
<short>
Implements the event handler used to display the popup dialog for the 
control, and to capture the returned time value.
</short>
<descr></descr>
<seealso></seealso>
</element>
<element name="TTimeEdit.TimePopupReturnTime.Sender">
<short>Object generating the event notification.</short>
</element>
<element name="TTimeEdit.TimePopupReturnTime.ATime">
<short>Time value returned from the popup dialog.</short>
</element>

<element name="TTimeEdit.TimePopupShowHide">
<short>
Implements an event handler used to toggle the visibility of the popup dialog 
for the control.
</short>
<descr></descr>
<seealso/>
</element>
<element name="TTimeEdit.TimePopupShowHide.Sender">
<short>Object generating the event notification.</short>
</element>

<element name="TTimeEdit.OpenTimePopup">
<short>
Configures and displays the popup dialog for the control.
</short>
<descr>
<p>
Used in the implementation of the ButtonClick and EditDblClick methods.
</p>
</descr>
<seealso/>
</element>

<element name="TTimeEdit.ParseInput">
<short>
Parses text in the Edit control and stores the value in the Time property.
</short>
<descr>
Used in the implementation of the OpenTimePopup and EditEditingDone methods.
</descr>
<seealso></seealso>
</element>

<element name="TTimeEdit.TryParseInput">
<short>
Tries to parse and convert the specified string to a time value.
</short>
<descr/>
<seealso/>
</element>
<element name="TTimeEdit.TryParseInput.Result">
<short>
<b>True</b> if the text was successfully converted to a TDateTime value.
</short>
</element>
<element name="TTimeEdit.TryParseInput.AInput">
<short>
String with the time to convert in the method.
</short>
</element>
<element name="TTimeEdit.TryParseInput.ParseResult">
<short>
Returns the TDateTime with the time value converted in the method.
</short>
</element>

<element name="TTimeEdit.GetDefaultGlyphName">
<short>
Gets the name of the default glyph resource used for the Button on the 
control.
</short>
<descr>
<p>
<var>GetDefaultGlyphName</var> is an overridden String function used to get 
the default resource name with the glyph image for the Button on the control. 
It is used in the LoadDefaultGlyph method to assign the LCLGlyphName for the 
TButtonGlyph instance used in the control.
</p>
<p>
In <var>TTimeEdit</var>, the return value is set to the ResBtnTime 
constant.
</p>
</descr>
<seealso>
<link id="ResBtnCalendar"/>
<link id="TCustomEditButton.GetDefaultGlyphName"/>
<link id="#lcl.buttons.TButtonGlyph.LCLGlyphName">TButtonGlyph.LCLGlyphName</link>
</seealso>
</element>
<element name="TTimeEdit.GetDefaultGlyphName.Result">
<short>
Default resource name for the glyph used on the button in the control.
</short>
</element>

<element name="TTimeEdit.Is12HourMode">
<short>
Indicates whether the effective TimeFormat for the control reflects 12-hour 
clock values with AM and PM designations.
</short>
<descr>
<p>	
<var>Is12HourMode</var> is a <var>Boolean</var> function which indicates that 
the TimeFormat for control displays values with AM and PM suffixes for 12-hour 
clock values. It examines the effective time format returned by the 
UsedTimeFormat method and returns <b>True</b> if the lowercase 
<var>TimeFormat</var> value contains one of the following:
</p>
<ul>
<li>'am/pm'</li>
<li>'a/p'</li>
<li>'ampm'</li>
</ul>
<p>
Is12HourMode, along with <var>UsedTimeAMString</var> and 
<var>UsedTimePMString</var>, are used when a popup is displayed for the 
<var>Time</var> value in the control.
</p>
</descr>
<version>
Added in LCL version 4.4.
</version>
<seealso>
<link id="TTimeEdit.UsedTimeFormat"/>
<link id="TTimeEdit.UsedTimeAMString"/>
<link id="TTimeEdit.UsedTimePMString"/>
<link id="TTimeEdit.Time"/>
</seealso>
</element>

<element name="TTimeEdit.Is12HourMode.Result">
<short></short>
</element>

<element name="TTimeEdit.UsedFormatSettings">
<short>
Gets the effective format settings used to format the value for the time edit 
control.
</short>
<descr>
<p>
The return value contains the DefaultFormatSettings for the platform combined 
with the values assigned to the TimeFormat and TimeSeparator properties. 
UsedFormatSettings is called when a new value is stored in the Time property, 
and is used to format the Text displayed on the control.
</p>
<p>
Use TimeFormat to specify the short time format settings applied to the Time 
property. Use TimeSeparator to specify the time separator character used in the 
short time settings applied to the Time property.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.Time"/>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.TimeSeparator"/>
<link id="TTimeEdit.Text"/>
<link id="TTimeEdit.UsedTimeFormat"/>
<link id="TTimeEdit.UsedTimeSeparator"/>
<link id="#rtl.sysutils.DefaultFormatSettings">DefaultFormatSettings</link>
<link id="#rtl.sysutils.TFormatSettings">TFormatSettings</link>
</seealso>
</element>
<element name="TTimeEdit.UsedFormatSettings.Result">
<short>
Format settings after the values in TimeFormat and TimeSeparator have been 
applied.
</short>
</element>

<element name="TTimeEdit.UsedTimeAMString">
<short>
Gets the suffix used for an <i>ante meridiem</i> (before midday) time value in 
the control.	
</short>
<descr>
<p>
<var>UsedTimeAMString</var> is a <var>String</var> function which returns the 
suffix used for an <i>ante meridiem</i> time value when the UsedTimeFormat for 
the control displays 12-hour clock values. UsedTimeAMString examines the 
lowercase value returned from UsedTimeFormat to determine whether the value 
'ampm' is used in the effective TimeFormat for the control.
</p>
<p>
If UsedTimeFormat contains 'ampm', the return value is set to the effective  
display value for a Time which occurs before midday / noon. This is the value 
from DefaultFormatSettings.TimeAMString when TimeAMString is empty, or the 
TimeAMString property value when assigned. The default value in the 
DEFAULT_TIMEAMSTRING constant is used when the return value is unassigned 
(an empty string).
</p>
<p>
UsedTimeAMString, along with <var>UsedTimePMString</var> and 
<var>UsedTimeFormat</var>, are used when a popup is displayed for the 
<var>Time</var> value in the control.
</p>
<p>	
See <var>UsedTimePMString</var> for the effective value used for a post 
meridiem (after midday) time value when a 12-hour clock is used.
</p>
</descr>
<seealso>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.UsedTimeFormat"/>
<link id="TTimeEdit.UsedTimePMString"/>
<link id="#rtl.sysutils.DefaultFormatSettings">DefaultFormatSettings</link>
</seealso>
</element>

<element name="TTimeEdit.UsedTimeAMString.Result">
<short>
Suffix used for an ante meridiem (before midday) time value when 12-hour clock 
values are used in time TimeFormat.
</short>
</element>

<element name="TTimeEdit.UsedTimeFormat">
<short>
Gets the effective short time format used for the Time value in the control.
</short>
<descr>
<p>
The return value contains the short time format used to format the value in 
the Text property. It defaults to the short time setting in the 
DefaultFormatSettings for the platform. The value in TimeFormat is substituted 
when an explicit value has been assigned to the property.
</p>
<p>
UsedTimeFormat is called from the UsedFormatSettings method, which occurs when 
a new value has been assigned to the Time property.
</p>
<p>
See TimeSeparator and UsedTimeSeparator for the separator character used in 
the short time format settings.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.Time"/>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.TimeSeparator"/>
<link id="TTimeEdit.Text"/>
<link id="TTimeEdit.UsedFormatSettings"/>
<link id="TTimeEdit.UsedTimeSeparator"/>
<link id="#rtl.sysutils.DefaultFormatSettings">DefaultFormatSettings</link>
<link id="#rtl.sysutils.TFormatSettings">TFormatSettings</link>
</seealso>
</element>
<element name="TTimeEdit.UsedTimeFormat.Result">
<short>
Short time format used in the class instance.
</short>
</element>

<element name="TTimeEdit.UsedTimePMString">
<short>
Gets the suffix used for a <i>post meridiem</i> (after midday) time value in 
the control.	
</short>
<descr>
<p>
<var>UsedTimePMString</var> is a <var>String</var> function which returns the 
suffix used for a <i>post meridiem</i> time value when the UsedTimeFormat for 
the control displays 12-hour clock values. UsedTimeAMString examines the 
lowercase value returned from UsedTimeFormat to determine whether the value 
'ampm' is used in the effective TimeFormat for the control.
</p>
<p>
If UsedTimeFormat contains 'ampm', the return value is set to the effective  
display suffix for a Time which occurs before midday / noon. This is the value 
from DefaultFormatSettings.TimePMString when TimePMString is empty, or the 
TimePMString property value when assigned. The default value in the 
DEFAULT_TIMEPMSTRING constant is used when the return value is unassigned 
(an empty string).
</p>
<p>
UsedTimePMString, along with <var>UsedTimeAMString</var> and 
<var>UsedTimeFormat</var>, are used when a popup is displayed for the 
<var>Time</var> value in the control.
</p>
<p>	
See <var>UsedTimeAMString</var> for the effective value used for a ante  
meridiem (after midday) time value when a 12-hour clock is used.
</p>
</descr>
<seealso>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.UsedTimeFormat"/>
<link id="TTimeEdit.UsedTimeAMString"/>
<link id="#rtl.sysutils.DefaultFormatSettings">DefaultFormatSettings</link>
</seealso>
</element>

<element name="TTimeEdit.UsedTimePMString.Result">
<short>
Suffix used for a post meridiem (after midday) time value when 12-hour clock 
values are used in time TimeFormat.
</short>
</element>

<element name="TTimeEdit.UsedTimeSeparator">
<short>
Gets the effective time separator character used in the short time format 
settings.
</short>
<descr>
<p>
The return value contains the time separator character in the short time format 
used in the class instance. It defaults to the time separator character found 
in the DefaultFormatSettings for the platform. The first character found in 
TimeSeparator is substituted when an explicit value has been assigned to the 
property. Other characters in TimeSeparator are ignored.
</p>
<p>
UsedTimeSeparator is called from the UsedFormatSettings method, which occurs 
when a new value has been assigned to the Time property.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.Time"/>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.TimeSeparator"/>
<link id="TTimeEdit.Text"/>
<link id="TTimeEdit.UsedFormatSettings"/>
<link id="TTimeEdit.UsedTimeFormat"/>
<link id="#rtl.sysutils.DefaultFormatSettings">DefaultFormatSettings</link>
<link id="#rtl.sysutils.TFormatSettings">TFormatSettings</link>
</seealso>
</element>
<element name="TTimeEdit.UsedTimeSeparator.Result">
<short>
Time separator character used in the short time format settings for the class 
instance.
</short>
</element>

<element name="TTimeEdit.ButtonClick">
<short>
Performs actions needed when the Button for the control is clicked.
</short>
<descr></descr>
<seealso>
<link id="TCustomEditButton.ButtonClick"/>
<link id="#lcl.timepopup.ShowTimePopup">ShowTimePopup</link>
</seealso>
</element>

<element name="TTimeEdit.EditDblClick">
<short>
Implements the OnDblClick event handler for the Edit in the control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TTimeEdit.EditEditingDone">
<short>
Implements the OnEditingDone event handler for the Edit in the control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TTimeEdit.Create">
<short>Constructor for the class instance.</short>
<descr></descr>
<seealso></seealso>
</element>
<element name="TTimeEdit.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TTimeEdit.ValidTimeFormat">
<short>
Indicates whether the specified value is a valid time format for the TTimeEdit 
control.
</short>
<descr>
<p>
TTimeEdit requires a time format string that does not include date or interval 
parts which are not used/allowed in the class instance. ValidTimeFormat 
examines the characters in AFormat to determine which parts are used.
</p>
<p>
The return value is <b>False</b> if AFormat contains any format specifier(s) or 
combination of specifier(s) which are not allowed in the control.
</p>
<p>
The return value is <b>True</b> if AFormat is a valid time format setting for 
use in the TimeFormat property.
</p>
<p>
ValidTimeFormat is called when a new value is assigned to the TimeFormat 
property, and prevents updates to both TimeFormat and Time if the method 
returns <b>False</b>.
</p>
<p>
See <link id="TTimeEdit.TimeFormat">TimeFormat</link> for more information 
about the available format specifiers and their usage.
</p>
<p>
Use TimeSeparator to specify the separator character used to delimit time 
parts in the formatted Text.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.TimeSeparator"/>
<link id="TTimeEdit.Time"/>
<link id="#rtl.sysutils.FormatDateTime">FormatDateTime</link>
<link id="#rtl.sysutils.formatchars">FormatChars</link>
</seealso>
</element>
<element name="TTimeEdit.ValidTimeFormat.AFormat">
<short>
Time format examined in the method.
</short>
</element>
<element name="TTimeEdit.ValidTimeFormat.Result">
<short>
Returns <b>True</b> if the specified time format is valid for the control.
</short>
</element>

<element name="TTimeEdit.Time">
<short>Represents the time value in the control.</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TTimeEdit.Button" link="#lcl.editbtn.TCustomEditButton.Button"/>

<element name="TTimeEdit.DroppedDown">
<short>Indicates if the popup dialog for the control is visible.</short>
<descr>
DroppedDown is read-only Boolean property which indicates if the popup dialog 
for the control is visible.
</descr>
<seealso></seealso>
</element>

<element name="TTimeEdit.DefaultNow">
<short>Indicates the current time is used for an empty time value.</short>
<descr>
<p>
<var>DefaultNow</var> is a <var>Boolean</var> property which indicates if the 
time value defaults to the current system time when a empty time value 
assigned in the control. The default value for the property is <b>False</b>.
</p>
<p>
DefaultNow is used in the implementation of the <var>GetTime</var> method 
which gets the value for the <var>Time</var> property.
</p>
</descr>
<seealso>
<link id="TTimeEdit.Time"/>
</seealso>
</element>

<element name="TTimeEdit.OnAcceptTime">
<short>
Event handler signalled to validate and accept/reject the time value for the 
control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TTimeEdit.OnCustomTime">
<short>
Event handler signalled to get an arbitrary time value for the control.
</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TTimeEdit.ReadOnly" link="#lcl.groupededit.TCustomAbstractGroupedEdit.ReadOnly"/>
<element name="TTimeEdit.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
<element name="TTimeEdit.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
<element name="TTimeEdit.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
<element name="TTimeEdit.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
<element name="TTimeEdit.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
<element name="TTimeEdit.Action" link="#lcl.controls.TControl.Action"/>
<element name="TTimeEdit.Align" link="#lcl.controls.TControl.Align"/>
<element name="TTimeEdit.Alignment" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Alignment"/>
<element name="TTimeEdit.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TTimeEdit.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TTimeEdit.AutoSelect" link="#lcl.groupededit.TCustomAbstractGroupedEdit.AutoSelect"/>
<element name="TTimeEdit.BidiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TTimeEdit.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TTimeEdit.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TTimeEdit.CharCase" link="#lcl.groupededit.TCustomAbstractGroupedEdit.CharCase"/>
<element name="TTimeEdit.Color" link="#lcl.controls.TControl.Color"/>
<element name="TTimeEdit.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TTimeEdit.DirectInput" link="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput"/>
<element name="TTimeEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
<element name="TTimeEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
<element name="TTimeEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
<element name="TTimeEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
<element name="TTimeEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
<element name="TTimeEdit.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TTimeEdit.EchoMode" link="#lcl.groupededit.TCustomAbstractGroupedEdit.EchoMode"/>
<element name="TTimeEdit.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TTimeEdit.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
<element name="TTimeEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
<element name="TTimeEdit.Font" link="#lcl.controls.TControl.Font"/>
<element name="TTimeEdit.MaxLength" link="#lcl.groupededit.TCustomAbstractGroupedEdit.MaxLength"/>
<element name="TTimeEdit.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TTimeEdit.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TTimeEdit.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TTimeEdit.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TTimeEdit.PopupMenu" link="#lcl.groupededit.TCustomAbstractGroupedEdit.PopUpMenu"/>
<element name="TTimeEdit.ShowHint" link="#lcl.controls.TControl.ShowHint"/>

<element name="TTimeEdit.SimpleLayout">
<short>
Indicates if the dialog uses a layout with 30 minute intervals between values.
</short>
<descr>
<p>
<var>SimpleLayout</var> is a <var>Boolean</var> property which indicates if 
the popup dialog for the control uses the 2 (rows) by 6 (columns) layout with 
30 minute intervals between time values. The default value for the property 
is <b>True</b>. When set to <b>False</b>, a more detailed layout with 12 rows 
by 5 columns using 5 minute time intervals is used.
</p>
</descr>
<seealso></seealso>
</element>

<element name="TTimeEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
<element name="TTimeEdit.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TTimeEdit.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>

<element name="TTimeEdit.TimeAMString">
<short>
Specifies the value displayed for a 12-hour time value prior to midday (Noon).
</short>
<descr>
<p>
<var>TimeAMString</var> contains the <b><i>ante meridiem</i></b> ("before 
midday") value displayed for a 12-hour Time value. It can be used to override 
the TimeAMString setting provided in DefaultFormatSettings. Its value is used 
in the UsedFormatSettings method, and applied when the feature is enabled using 
one of the corresponding format specifiers in the TimeFormat property.
</p>
<p>
See <link id="TTimeEdit.TimeFormat">TimeFormat</link> for more information 
about the available time format specifiers and their usage.
</p>
<p>
Use TimePMString for the <b><i>post meridiem</i></b> value.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.TimePMString"/>
<link id="TTimeEdit.UsedFormatSettings"/>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.Time"/>
<link id="#rtl.sysutils.DefaultFormatSettings">DefaultFormatSettings</link>
</seealso>
</element>

<element name="TTimeEdit.TimeFormat">
<short>
Specifies the time format used to generate the display Text for the time edit 
control.
</short>
<descr>
<p>
<var>TimeFormat</var> is a <var>String</var> property which contains 
FormatDateTime-compatible specifiers used to generate the Text displayed on the 
time edit control. It can be used to override the default time format settings 
for a given platform. TimeFormat is used in the UsedTimeFormat method called 
when a new value is assigned to the Time property.
</p>
<p>
TimeFormat can contain only format specifiers accepted by FormatDateTime(), 
except for those which apply to date or interval parts. The following symbols 
are interpreted in a specific way:
</p>
<dl>
<dt>'h', 'H'</dt>
<dd>Represents hours.</dd>
<dt>'n', 'N'</dt>
<dd>Represents minutes.</dd>
<dt>'m', 'M'</dt>
<dd>
Represents minutes, but allowed only in conjunction with at least 'h' to avoid 
misinterpretation as "month".
</dd>
<dt>'s', 'S'</dt>
<dd>Represents seconds.</dd>
<dt>'z', 'Z'</dt>
<dd>Represents milliseconds.</dd>
<dt>':'</dt>
<dd>Replaced with the value in the TimeSeparator property.</dd>
<dt>'.'</dt>
<dd>Represents the separator between seconds and milliseconds.</dd>
<dt>'ampm', 'AMPM'</dt>
<dd>
Formats the time in the 12-hour format, appends the TimeAMString or 
TimePMString of the DefaultFormatSettings, depending on whether the time is in 
the first or second half of the day.
</dd>
<dt>'a/p', 'am/pm', 'A/P', 'AM/PM'</dt>
<dd>
Formats the time in the 12-hour format with the corresponding part of the 
symbol appended for the first or second half of the day.
</dd>
<dt>'t', 'tt'</dt>
<dd>
Replaced with the value from ShortTimeFormat or LongTimeFormat in 
DefaultFormatSettings, respectively.
</dd>
<dt>'y', 'Y', 'd', 'D'</dt>
<dd>
<b>Forbidden</b> because they will introduce date parts.
</dd>
<dt>'[', ']'</dt>
<dd>
<b>Forbidden</b> because time interval formatting is not supported by this 
control.
</dd>
<dt>Single (') or Double (") quotes</dt>
<dd>
Symbol replacement is <b>not</b> performed within the quoted substring.
</dd>
</dl>
<p>
Any other characters can be inserted without quoting unless they collide with 
those specified above.
</p>
<p>
Changing the value in TimeFormat causes the new property value to be validated 
and either accepted or rejected using the ValidTimeFormat method. When 
accepted, the Text property is updated using the new format settings.
</p>
<p>
Use TimeSeparator to specify the separator character used to delimit time 
parts in the format settings.
</p>
<p>
Use TimeAMString and TimePMString to override the DefaultFormatSettings suffixes used for 12-hour time format.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.Text"/>
<link id="TTimeEdit.Time"/>
<link id="TTimeEdit.TimeSeparator"/>
<link id="TTimeEdit.TimeAMString"/>
<link id="TTimeEdit.TimePMString"/>
<link id="TTimeEdit.ValidTimeFormat"/>
<link id="#rtl.sysutils.FormatDateTime">FormatDateTime</link>
<link id="#rtl.sysutils.formatchars">FormatChars</link>
</seealso>
</element>

<element name="TTimeEdit.TimeSeparator">
<short>
Specifies the separator character used to delimit time parts in the format 
settings applied to the control.
</short>
<descr>
<p>
<var>TimeSeparator</var> is a <var>String</var> property which contains the 
separator used to delimit time parts specified in the TimeFormat property. It 
allows the default time separator from the system format settings to be 
overridden in the class instance.
</p>
<p>
Changing the value for the property causes the Text property to be updated 
using the new separator.
</p>
<p>
TimeSeparator is used in the UsedTimeSeparator method called when a new value 
is assigned to the Time property. When omitted, the default time separator in 
DefaultFormatSettings is used instead.
</p>
<p>
Please note: While TimeSeparator is a String type, only the first character 
specified in the property is actually used. The other characters in the 
property are ignored.
</p>
<p>
Use TimeFormat to specify the time format settings used in the class instance.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.Time"/>
<link id="TTimeEdit.Text"/>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.ValidTimeFormat"/>
<link id="TTimeEdit.UsedTimeSeparator"/>
<link id="#rtl.sysutils.FormatDateTime">FormatDateTime</link>
<link id="#rtl.sysutils.formatchars">FormatChars</link>
</seealso>
</element>

<element name="TTimeEdit.TimePMString">
<short>
Specifies the value displayed for a 12-hour time value after midday (Noon).
</short>
<descr>
<p>
<var>TimePMString</var> contains the <b><i>post meridiem</i></b> ("after 
midday") value displayed for a 12-hour Time value. It can be used to override 
the TimePMString setting provided in DefaultFormatSettings. Its value is used 
in the UsedFormatSettings method, and applied when the feature is enabled using 
one of the corresponding format specifiers in the TimeFormat property.
</p>
<p>
See <link id="TTimeEdit.TimeFormat">TimeFormat</link> for more information 
about the available time format specifiers and their usage.
</p>
<p>
Use TimeAMString for the <b><i>ante meridiem</i></b> value.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTimeEdit.TimeAMString"/>
<link id="TTimeEdit.UsedFormatSettings"/>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.Time"/>
<link id="#rtl.sysutils.DefaultFormatSettings">DefaultFormatSettings</link>
</seealso></element>

<element name="TTimeEdit.Visible" link="#lcl.controls.TControl.Visible"/>

<element name="TTimeEdit.Text">
<short>
Contains the formatted text used to represent the Time value for the control.
</short>
<descr>
<p>
<var>Text</var> is a published property in TTimeEdit. It contains the formatted 
text displayed for the Time value in the control. It is automatically updated 
when a new value is assigned to the Time, TimeFormat, or TimeSeparator 
properties. It contains the result from the FormatDateTime routine called using 
the Time value and format settings for the control.
</p>
<p>
Use TimeFormat to specify a FormatDateTime-compatible string used to generate 
the value for the Text property.
</p>
<p>
Use TimeSeparator to specify the delimiter character used between time parts in 
the TimeFormat.
</p>
</descr>
<seealso>
<link id="TTimeEdit.Time"/>
<link id="TTimeEdit.TimeFormat"/>
<link id="TTimeEdit.TimeSeparator"/>
<link id="#lcl.groupededit.TCustomAbstractGroupedEdit.Text">TCustomAbstractGroupedEdit.Text</link>
</seealso>
</element>

<element name="TTimeEdit.TextHint" link="#lcl.groupededit.TCustomAbstractGroupedEdit.TextHint"/>

<element name="TTimeEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
<element name="TTimeEdit.OnChange" link="#lcl.groupededit.TCustomAbstractGroupedEdit.OnChange"/>
<element name="TTimeEdit.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TTimeEdit.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TTimeEdit.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TTimeEdit.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TTimeEdit.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
<element name="TTimeEdit.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TTimeEdit.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TTimeEdit.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TTimeEdit.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TTimeEdit.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TTimeEdit.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TTimeEdit.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TTimeEdit.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TTimeEdit.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TTimeEdit.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TTimeEdit.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TTimeEdit.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TTimeEdit.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TTimeEdit.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TTimeEdit.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TAcceptValueEvent">
<short>
Specifies an event handler signalled when a calculator dialog has been used 
to accept or reject a value.
</short>
<descr>
<p>
<var>TAcceptValueEvent</var> is the type used for the OnAcceptValue property 
in TCalcEdit. Implement and assign a routine using the signature for the 
event handler to respond to selection of a value using a calculator dialog. 
Use the AValue and Accept variable arguments to determine the value and 
action returned from the dialog instance.
</p>
</descr>
<seealso>
<link id="TCalcEdit.OnAcceptValue"/>
</seealso>
</element>
<element name="TAcceptValueEvent.Sender">
<short>
Object instance (TCalcEdit) for the event notification. 
</short>
</element>
<element name="TAcceptValueEvent.AValue">
<short>
Double type with the value returned from the dialog for a calculator dialog.
</short>
</element>
<element name="TAcceptValueEvent.Accept">
<short>
Returns <b>True</b> if the OK button was used to accept the value on the 
dialog. Otherwise, the return value is <b>False</b>.
</short>
</element>

<element name="TCalcEdit">
<short>
Implements an numeric edit control with a button to display a calculator 
dialog.
</short>
<descr>
<p>
<var>TCalcEdit</var> is a <var>TCustomEditButton</var> descendant which 
implements a numeric edit control with a button to display a calculator 
dialog. It contains properties to configure the button and the calculator 
dialog. Other properties are provided to access the numeric value as an 
Integer or a floating point (Double) data type. Use the RunDialog method to 
display the calculator dialog and get its return value.
</p>
</descr>
<seealso>
<link id="TCustomEditButton"/>
</seealso>
</element>

<element name="TCalcEdit.FDialogTitle"/>
<element name="TCalcEdit.FCalculatorLayout"/>
<element name="TCalcEdit.FOnAcceptValue"/>
<element name="TCalcEdit.FDialogPosition"/>
<element name="TCalcEdit.FDialogLeft"/>
<element name="TCalcEdit.FDialogTop"/>

<!-- private -->
<element name="TCalcEdit.GetAsFloat">
<short>Gets the value for the AsFloat property.</short>
<descr/>
<seealso>
<link id="TCalcEdit.AsFloat"/>
</seealso>
</element>
<element name="TCalcEdit.GetAsFloat.Result">
<short>Value for the property.</short>
</element>

<element name="TCalcEdit.GetAsInteger">
<short>Gets the value for the AsInteger property.</short>
<descr/>
<seealso>
<link id="TCalcEdit.AsInteger"/>
</seealso>
</element>
<element name="TCalcEdit.GetAsInteger.Result">
<short>Value for the property.</short>
</element>

<element name="TCalcEdit.SetAsFloat">
<short>Sets the value for the AsFloat property.</short>
<descr/>
<seealso>
<link id="TCalcEdit.AsFloat"/>
</seealso>
</element>
<element name="TCalcEdit.SetAsFloat.AValue">
<short>New value for the property.</short>
</element>

<element name="TCalcEdit.SetAsInteger">
<short>Sets the value for the AsInteger property.</short>
<descr/>
<seealso>
<link id="TCalcEdit.AsInteger"/>
</seealso>
</element>
<element name="TCalcEdit.SetAsInteger.AValue">
<short>New value for the property.</short>
</element>

<element name="TCalcEdit.TitleStored"/>
<element name="TCalcEdit.TitleStored.Result"/>

<element name="TCalcEdit.FCalcDialog">
<short>
<var>FCalcDialog</var> - local variable holding the Calculator Dialog for use 
with this class.
</short>
<descr/>
<seealso/>
</element>

<element name="TCalcEdit.GetDefaultGlyphName" link="#lcl.editbtn.TCustomEditButton.GetDefaultGlyphName"/>
<element name="TCalcEdit.GetDefaultGlyphName.Result"/>

<element name="TCalcEdit.ButtonClick">
<short>
Performs actions needed when the button for the control is clicked.
</short>
<descr>
<p>
<var>ButtonClick</var> is an overridden method used to perform actions needed 
when the <var>Button</var> for the control is clicked. For 
<var>TCalcEdit</var>, the <var>RunDialog</var> method is called to execute 
the dialog for the control and to capture it results. When 
<var>FocusOnButtonClick</var> is set, the <var>FocusAndMaybeSelectAll</var> 
method is called to give focus to the <var>Edit</var> control in the class.
</p>
</descr>
<seealso>
<link id="TCustomEditButton.ButtonClick"/>
</seealso>
</element>

<element name="TCalcEdit.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance. 
Create calls the inherited constructor, and sets the default values for the 
following properties:
</p>
<dl>
<dt>DialogTitle</dt>
<dd>Uses the value in the rsCalculator constant</dd>
<dt>DialogPosition</dt>
<dd>Set to poScreenCenter</dd>
</dl>
</descr>
<seealso>
<link id="TCustomEditButton.Create"/>
</seealso>
</element>
<element name="TCalcEdit.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCalcEdit.RunDialog">
<short>
<var>RunDialog</var> - perform the function of the dialog.
</short>
<descr>
<p>
<var>RunDialog</var> is a procedure used display the form which captures the 
value for the control. For <var>TCalcEdit</var>, a <var>TCalculatorForm</var> 
instance is used instead of a <var>TCommonDialog</var> descendant as used in 
other grouped edit controls.
</p>
<p>
Property values in the class are assigned to the form, such as: DialogTitle, 
DialogTop, DialogLeft, DialogPosition, and AsFloat. The form is displayed 
modally, and its value is passed to the OnAcceptValue event handler (when 
assigned). The accepted value is stored in the AsFloat property.
</p>
</descr>
<seealso/>
</element>

<element name="TCalcEdit.AutoSelected" link="#lcl.groupededit.TCustomAbstractGroupedEdit.AutoSelected"/>

<element name="TCalcEdit.CalculatorLayout">
<short>
<var>CalculatorLayout</var> - normal or simple.
</short>
<descr/>
<seealso/>
</element>

<element name="TCalcEdit.AsFloat">
<short>
<var>AsFloat</var> - holds the result of the calculation as a floating-point 
(double precision) number.
</short>
<descr/>
<seealso/>
</element>

<element name="TCalcEdit.AsInteger">
<short>
<var>AsInteger</var> - holds the result of the calculation as an Integer.
</short>
<descr/>
<seealso/>
</element>

<element name="TCalcEdit.OnAcceptValue">
<short>
<var>OnAcceptValue</var> - event handler for accepting the result of the 
calculation.
</short>
<descr/>
<seealso/>
</element>

<element name="TCalcEdit.DialogTitle">
<short>
<var>DialogTitle</var> - the caption to be used for the dialog.
</short>
<descr/>
<seealso/>
</element>

<element name="TCalcEdit.ButtonCaption" link="#lcl.editbtn.TCustomEditButton.ButtonCaption"/>
<element name="TCalcEdit.ButtonCursor" link="#lcl.editbtn.TCustomEditButton.ButtonCursor"/>
<element name="TCalcEdit.ButtonHint" link="#lcl.editbtn.TCustomEditButton.ButtonHint"/>
<element name="TCalcEdit.ButtonOnlyWhenFocused" link="#lcl.editbtn.TCustomEditButton.ButtonOnlyWhenFocused"/>
<element name="TCalcEdit.ButtonWidth" link="#lcl.editbtn.TCustomEditButton.ButtonWidth"/>
<element name="TCalcEdit.Constraints" link="#lcl.controls.TControl.Constraints"/>

<element name="TCalcEdit.DialogPosition">
<short>Position where the calculator dialog is displayed.</short>
<descr>
<p>
<var>DialogPosition</var> is a <var>TPosition</var> property with the 
position where the calculator dialog is displayed when the button for the 
control is clicked. The default value for the property is 
<var>poScreenCenter</var>.
</p>
<p>
Values in DialogPosition, DialogTop, and DialogLeft are assigned to the form 
for the dialog in the RunDialog method.
</p>
</descr>
<seealso>
<link id="TCalcEdit.DialogTop"/>
<link id="TCalcEdit.DialogLeft"/>
<link id="TCalcEdit.RunDialog"/>
<link id="#lcl.forms.TPosition">TPosition</link>
</seealso>
</element>

<element name="TCalcEdit.DialogTop">
<short>Vertical coordinate for the dialog displayed for the control.</short>
<descr>
</descr>
<seealso></seealso>
</element>

<element name="TCalcEdit.DialogLeft">
<short>Horizontal coordinate for the dialog displayed for the control.</short>
<descr></descr>
<seealso></seealso>
</element>

<element name="TCalcEdit.DirectInput" link="#lcl.groupededit.TCustomAbstractGroupedEdit.DirectInput"/>
<element name="TCalcEdit.Glyph" link="#lcl.editbtn.TCustomEditButton.Glyph"/>
<element name="TCalcEdit.NumGlyphs" link="#lcl.editbtn.TCustomEditButton.NumGlyphs"/>
<element name="TCalcEdit.Images" link="#lcl.editbtn.TCustomEditButton.Images"/>
<element name="TCalcEdit.ImageIndex" link="#lcl.editbtn.TCustomEditButton.ImageIndex"/>
<element name="TCalcEdit.ImageWidth" link="#lcl.editbtn.TCustomEditButton.ImageWidth"/>
<element name="TCalcEdit.Flat" link="#lcl.editbtn.TCustomEditButton.Flat"/>
<element name="TCalcEdit.FocusOnButtonClick" link="#lcl.editbtn.TCustomEditButton.FocusOnButtonClick"/>
<element name="TCalcEdit.Align" link="#lcl.controls.TControl.Align"/>
<element name="TCalcEdit.Alignment" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Alignment"/>
<element name="TCalcEdit.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TCalcEdit.BidiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TCalcEdit.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TCalcEdit.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TCalcEdit.AutoSelect" link="#lcl.stdctrls.TCustomEdit.AutoSelect"/>
<element name="TCalcEdit.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TCalcEdit.Color" link="#lcl.controls.TControl.Color"/>
<element name="TCalcEdit.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TCalcEdit.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TCalcEdit.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TCalcEdit.Font" link="#lcl.controls.TControl.Font"/>
<element name="TCalcEdit.Layout" link="#lcl.groupededit.TCustomAbstractGroupedEdit.Layout"/>
<element name="TCalcEdit.MaxLength" link="#lcl.stdctrls.TCustomEdit.MaxLength"/>
<element name="TCalcEdit.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TCalcEdit.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TCalcEdit.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TCalcEdit.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TCalcEdit.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TCalcEdit.ReadOnly" link="#lcl.stdctrls.TCustomEdit.ReadOnly"/>
<element name="TCalcEdit.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TCalcEdit.Spacing" link="#lcl.editbtn.TCustomEditButton.Spacing"/>
<element name="TCalcEdit.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TCalcEdit.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TCalcEdit.Text" link="#lcl.controls.TControl.Text"/>
<element name="TCalcEdit.TextHint" link="#lcl.groupededit.TCustomAbstractGroupedEdit.TextHint"/>
<element name="TCalcEdit.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TCalcEdit.OnButtonClick" link="#lcl.editbtn.TCustomEditButton.OnButtonClick"/>
<element name="TCalcEdit.OnChange" link="#lcl.stdctrls.TCustomEdit.OnChange"/>
<element name="TCalcEdit.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TCalcEdit.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TCalcEdit.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TCalcEdit.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TCalcEdit.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TCalcEdit.OnEditingDone" link="#lcl.controls.TControl.OnEditingDone"/>
<element name="TCalcEdit.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TCalcEdit.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TCalcEdit.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TCalcEdit.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TCalcEdit.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TCalcEdit.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TCalcEdit.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TCalcEdit.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TCalcEdit.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TCalcEdit.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TCalcEdit.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TCalcEdit.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TCalcEdit.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TCalcEdit.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TCalcEdit.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TCalcEdit.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="ResBtnListFilter">
<short>
Resource name for the default glyph used on the Button in 
TCustomControlFilterEdit.
</short>
</element>

<element name="ResBtnFileOpen">
<short>
Resource name for the default glyph used on the Button in TFileNameEdit.
</short>
</element>

<element name="ResBtnSelDir">
<short>
Resource name for the default glyph used on the Button in TDirectoryEdit.
</short>
</element>

<element name="ResBtnCalendar">
<short>
Resource name for the default glyph used on the Button in TDateEdit.
</short>
</element>

<element name="ResBtnCalculator">
<short>
Resource name for the default glyph used on the Button in TCalcEdit.
</short>
</element>

<element name="ResBtnTime">
<short>
Resource name for the default glyph used on the Button in TTimeEdit.
</short>
</element>

<element name="Register">
<short>Registers components in the unit for use in the Lazarus IDE.</short>
<descr>
<p>
<var>Register</var> is the procedure used to add components to the component 
palette in the Lazarus IDE. Register adds the following components to the 
Lazarus component palette:
</p>
<p>
<b>Misc</b> Tab
</p>
<ul>
<li>TEditButton</li>
<li>TFileNameEdit</li>
<li>TDirectoryEdit</li>
<li>TDateEdit</li>
<li>TTimeEdit</li>
<li>TCalcEdit</li>
</ul>
</descr>
</element>

</module>
<!-- EditBtn -->
</package>
</fpdoc-descriptions>
