<?xml version="1.0" encoding="UTF-8"?>
<!--

Documentation for LCL (Lazarus Component Library) and LazUtils (Lazarus 
Utilities) are published under the Creative Commons Attribution-ShareAlike 4.0 
International public license.

https://creativecommons.org/licenses/by-sa/4.0/legalcode.txt
https://gitlab.com/freepascal.org/lazarus/lazarus/-/blob/main/docs/cc-by-sa-4-0.txt

Copyright (c) 1997-2025, by the Lazarus Development Team.

-->
<fpdoc-descriptions>
<package name="lcl">
<!--
====================================================================
ComCtrls
====================================================================
-->
<module name="ComCtrls">
<short>Common controls used in Lazarus forms.</short>
<descr>
<p>
<file>comctrls.pp</file> contains classes and types like those found in the 
Delphi <file>comctrls.pp</file> unit.
</p>
<p>
The following components are added to the Lazarus IDE:
</p>
<p>
<b>Common Controls</b> Tab
</p>
<ul>
<li>TTrackbar</li>
<li>TProgressBar</li>
<li>TTreeView</li>
<li>TListView</li>
<li>TStatusBar</li>
<li>TToolBar</li>
<li>TCoolBar</li>
<li>TUpDown</li>
<li>TPageControl</li>
<li>TTabControl</li>
<li>THeaderControl</li>
</ul>
<p>
The following components are added but not displayed on the component palette:
</p>
<ul>
<li>TToolButton</li>
<li>TTabSheet</li>
</ul>
<p>
<file>comctrls.pp</file> is part of the Lazarus Component Library (<b>LCL</b>).
</p>
</descr>

<!-- unresolved references -->
<element name="SysUtils"/>
<element name="Types"/>
<element name="Classes"/>
<element name="Math"/>
<element name="Laz_AVL_Tree"/>
<element name="IntegerList"/>
<element name="LCLStrConsts"/>
<element name="LResources"/>
<element name="LCLIntf"/>
<element name="LCLType"/>
<element name="LCLProc"/>
<element name="LMessages"/>
<element name="WSLCLClasses"/>
<element name="WSReferences"/>
<element name="Graphics"/>
<element name="ImgList"/>
<element name="ActnList"/>
<element name="Themes"/>
<element name="Menus"/>
<element name="Controls"/>
<element name="Forms"/>
<element name="StdCtrls"/>
<element name="ExtCtrls"/>
<element name="ToolWin"/>
<element name="Buttons"/>
<element name="GraphType"/>
<element name="LazUTF8"/>
<element name="LazLoggerBase"/>
<element name="LazUtilities"/>

<element name="THitTest">
<short>Represents permissible results for a hit test.</short>
<descr>
<p>
<var>THitTest</var> is an enumerated type with values that represent 
permissible results for a hit test (position of a mouse click relative to 
objects on a form). Values from THitTest are stored in the THitTests set type.
</p>
</descr>
<seealso>
<link id="THitTests"/>
</seealso>
</element>
<element name="THitTest.htAbove">
<short>The action was above the coordinates for the control.</short>
</element>
<element name="THitTest.htBelow">
<short>The action was below the coordinates for the control.</short>
</element>
<element name="THitTest.htNowhere">
<short>The action was not near the control checking for the event.</short>
</element>
<element name="THitTest.htOnItem">
<short>The action was on the control checking for the event.</short>
</element>
<element name="THitTest.htOnButton">
<short>The action was on a button in the control.</short>
</element>
<element name="THitTest.htOnIcon">
<short>The action was on the icon for an item.</short>
</element>
<element name="THitTest.htOnIndent">
<short>
The action was in the indent area prior to an expand/collapse indicator.
</short>
</element>
<element name="THitTest.htOnLabel">
<short>The action was on the display label for an item.</short>
</element>
<element name="THitTest.htOnRight">
<short>
The action was on the right edge of the display area for an item.
</short>
</element>
<element name="THitTest.htOnStateIcon">
<short>The action was on the state icon for an item.</short>
</element>
<element name="THitTest.htToLeft">
<short>The action was to the left of the display area for an item.</short>
</element>
<element name="THitTest.htToRight">
<short>The action was to the left of the display area for an item.</short>
</element>

<element name="THitTests">
<short>
Set type used to store values from the THitTest enumeration.
</short>
<descr>
<p>
<var>THitTests</var> is the type returned from controls which implement the 
GetHitTestInfoAt method.
</p>
</descr>
<seealso>
<link id="TTabControl.GetHitTestInfoAt"/>
<link id="TCustomListView.GetHitTestInfoAt"/>
<link id="TCustomTreeView.GetHitTestInfoAt"/>
</seealso>
</element>

<element name="TStatusPanelStyle">
<short>Represents the style used for a panel on a status bar.</short>
<descr>
<p>
<var>TStatusPanelStyle</var> is an enumerated type representing the style 
used for a panel on a status bar. TStatusPanelStyle is the type used to 
implement the <var>Style</var> property in <var>TStatusPanel</var>, and used 
in widgetset classes which initialize or update a status bar panel.
</p>
</descr>
<seealso>
<link id="TStatusPanel.Style"/>
</seealso>
</element>
<element name="TStatusPanelStyle.psText">
<short>The panel contains Text.</short>
</element>
<element name="TStatusPanelStyle.psOwnerDraw">
<short>
The panel uses an owner-drawn style (generally implemented in an event 
handler).
</short>
</element>

<element name="TStatusPanelBevel">
<short>
Enumerated type with the bevel styles used on status bar panels.
</short>
<descr>
<p>
<var>TStatusPanelBevel</var> is an enumerated type with values which 
represent bevel styles used on status bar panels. TStatusPanelBevel is the 
type used to implement the <var>Style</var> property in 
<var>TStatusPanel</var>.
</p>
</descr>
<seealso>
<link id="TStatusPanel.Style"/>
</seealso>
</element>
<element name="TStatusPanelBevel.pbNone">
<short>No bevel is drawn on a panel.</short>
</element>
<element name="TStatusPanelBevel.pbLowered">
<short>Drawn using a lowered bevel style.</short>
</element>
<element name="TStatusPanelBevel.pbRaised">
<short>Drawn using a raised bevel style.</short>
</element>

<element name="TPanelPart">
<short>
Lists the possible parts that make up a status panel.
</short>
<descr>
<p>
<var>TPanelPart</var> is an enumerated type listing the possible parts that 
make up a status panel.
</p>
</descr>
<seealso/>
</element>
<element name="TPanelPart.ppText">
<short>Panel part contains text with text alignment.</short>
</element>
<element name="TPanelPart.ppBorder">
<short>Panel parts contains a bevel style.</short>
</element>
<element name="TPanelPart.ppWidth">
<short>Panel part contains a width value.</short>
</element>

<element name="TPanelParts">
<short>
Set type used to store TPanelPart values.
</short>
<descr>
<p>
<var>TPanelParts</var> is a set type used to store <var>TPanelPart</var> 
values.
</p>
</descr>
<seealso/>
</element>

<element name="TStatusPanelClass">
<short>Class reference used to create new instances of TStatusPanel.</short>
<descr>
<p>
<var>TStatusPanelClass</var> is the type returned by the 
<var>GetPanelClass</var> method in <var>TStatusBar</var>. The class reference 
is used in the <var>CreatePanel</var> method in TStatusBar to create a new 
panel for the control.
</p>
</descr>
<seealso>
<link id="TStatusBar.GetPanelClass"/>
<link id="TStatusBar.CreatePanel"/>
</seealso>
</element>

<element name="TStatusPanel">
<short>Implements a panel displayed in TStatusBar.</short>
<descr>
<p>
<var>TStatusPanel</var> is a TCollectionItem descendant which implements 
panels used in <var>TStatusBar</var>. Instances of the class are created by 
and stored in a <var>TStatusPanels</var> collection in a 
<var>TStatusBar</var> control. Use the properties in the panel to control its 
appearance, size, and textual content.
</p>
</descr>
<seealso>
<link id="TStatusBar.Panels"/>
<link id="TStatusPanels"/>
</seealso>
</element>

<element name="TStatusPanel.FBiDiMode"/>
<element name="TStatusPanel.FText"/>
<element name="TStatusPanel.FWidth"/>
<element name="TStatusPanel.FAlignment"/>
<element name="TStatusPanel.FBevel"/>
<element name="TStatusPanel.FParentBiDiMode"/>
<element name="TStatusPanel.FStyle"/>

<element name="TStatusPanel.SetAlignment">
<short>Gets the value for the Alignment property.</short>
<descr/>
<seealso>
<link id="TStatusPanel.Alignment"/>
</seealso>
</element>
<element name="TStatusPanel.SetAlignment.Value">
<short>New value for the property.</short>
</element>

<element name="TStatusPanel.SetBevel">
<short>Sets the value for the Bevel property.</short>
<descr/>
<seealso/>
</element>
<element name="TStatusPanel.SetBevel.Value">
<short>New value for the property.</short>
</element>

<element name="TStatusPanel.SetStyle">
<short>Sets the value for the Style property.</short>
<descr/>
<seealso/>
</element>
<element name="TStatusPanel.SetStyle.Value">
<short>New value for the property.</short>
</element>

<element name="TStatusPanel.SetText">
<short>Sets the value for the Text property.</short>
<descr/>
<seealso/>
</element>
<element name="TStatusPanel.SetText.Value">
<short>New value for the property.</short>
</element>

<element name="TStatusPanel.SetWidth">
<short>Sets the value for the Width property.</short>
<descr/>
<seealso/>
</element>
<element name="TStatusPanel.SetWidth.Value">
<short>New value for the property.</short>
</element>

<element name="TStatusPanel.FIntfFlag">
<short>Field used by Widgetset classes. Do not use it in the LCL.</short>
</element>

<element name="TStatusPanel.GetDisplayName">
<short>
Gets the value displayed as the name for the collection item.
</short>
<descr>
<p>
<var>GetDisplayName</var> is an overridden <var>String</var> function which 
returns the value displayed as the name of the collection item. The value in 
the <var>Text</var> property is used as the return value when it is not an 
empty string (<b>''</b>). Otherwise, the inherited GetDisplayName method is 
called to get the return value.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
</seealso>
</element>
<element name="TStatusPanel.GetDisplayName.Result">
<short>Value displayed as the name for the collection item.</short>
</element>

<element name="TStatusPanel.PanelChanged">
<short>
<var>PanelChanged</var> - method for dealing with a status panel, one or more 
of whose parts has changed.
</short>
<descr/>
<seealso/>
</element>
<element name="TStatusPanel.PanelChanged.Parts">
<short>Set type with the parts changed on the status panel.</short>
</element>

<element name="TStatusPanel.SetIndex">
<short>
Sets the value for the Index property.
</short>
<descr>
<p>
<var>SetIndex</var> saves the old index value, checks that the supplied value 
is different and then calls inherited method.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
</seealso>
</element>
<element name="TStatusPanel.SetIndex.Value">
<short>New value for the Index property.</short>
</element>

<element name="TStatusPanel.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TStatusPanel</var>. It sets 
default values for the width, alignment and bevel, calls the inherited 
<var>Create</var> method, and loads the class instance into StatusBar.
</p>
</descr>
<seealso>
<link id="#rtl.Classes.TCollectionItem.Create">TCollectionItem.Create</link>
</seealso>
</element>
<element name="TStatusPanel.Create.aCollection">
<short>Collection which owns the status panel.</short>
</element>

<element name="TStatusPanel.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
<var>Destroy</var> is the destructor for <var>TStatusPanel</var> and calls 
the inherited Destroy method. It removes itself from the StatusBar by calling 
its InvalidatePanel method.
</p>
</descr>
<seealso>
<link id="TStatusPanel.StatusBar"/>
<link id="TStatusBar.InvalidatePanel"/>
<link id="#rtl.Classes.TCollectionItem.Destroy">TCollectionItem.Destroy</link>
</seealso>
</element>

<element name="TStatusPanel.Assign">
<short>
Implements persistence for the class type.
</short>
<descr>
<p>
<var>Assign</var> copies text, width, alignment, bevel and style properties 
from <var>Source</var> if it is of correct type, otherwise calls inherited 
<var>Assign</var> (which will probably raise an exception).
</p>
</descr>
<seealso>
<link id="#rtl.Classes.TPersistent.Assign">TPersistent.Assign</link>
</seealso>
</element>
<element name="TStatusPanel.Assign.Source">
<short>
Class instance with the values stored in the status panel.
</short>
</element>

<element name="TStatusPanel.StatusBar">
<short>
Gets the status bar which contains the class instance.
</short>
<descr>
<p>
<var>StatusBar</var> is a <var>TStatusBar</var> function used to retrieve the 
status bar where the class instance is displayed. It uses the Collection 
which owns the item to access its StatusBar property. If the Collection is 
not derived from TStatusPanels, the return value is <b>Nil</b>.
</p>
</descr>
<seealso>
<link id="TStatusBar"/>
<link id="TStatusPanels.StatusBar"/>
<link id="#rtl.classes.TCollectionItem.Collection">TCollectionItem.Collection</link>
</seealso>
</element>
<element name="TStatusPanel.StatusBar.Result">
<short>Status bar where the panel is displayed.</short>
</element>

<element name="TStatusPanel.Alignment">
<short>
<var>Alignment</var> - whether left- or right-justified or centered.
</short>
<descr>
<remark>
Only supported for the Windows platform.
</remark>
</descr>
<seealso/>
</element>

<element name="TStatusPanel.Bevel">
<short>The type of <var>Bevel</var> for the display.</short>
<descr>
<p>
Supported for the Windows platform only.
</p>
</descr>
<seealso/>
</element>

<element name="TStatusPanel.BiDiMode">
<short>
Introduces BiDiMode support not present in the ancestor class.
</short>
<descr/>
<seealso/>
</element>

<element name="TStatusPanel.ParentBiDiMode">
<short>
Introduces BiDiMode support not present in the ancestor class.
</short>
<descr/>
<seealso/>
</element>

<element name="TStatusPanel.Style">
<short>
Indicates whether the panel contains text or is owner-drawn.
</short>
<descr>
<p>
<var>Style</var> is a <var>TStatusPanelStyle</var> property which indicates 
whether the panel is drawn as text, or uses an owner-draw routine to render 
the status panel.
</p>
<dl>
<dt>psText</dt>
<dd>
Indicates that the panel draws its Text on the panel. Causes the widgetset 
class to send a message which sets the text for the panel handle.
</dd>
<dt>psOwnerDraw</dt>
<dd>
Indicates that the panel is drawn using the OnDrawPanel routine assigned to 
the StatusBar for the panel. Causes an additional drawing flag to be set when 
the widgetset class updates the panel on its StatusBar.
</dd>
</dl>
<p>
The default value for the property is <var>psText</var>. Changing the value 
for the property causes the Changed method to be called to update the 
collection item in its owner. PanelChanged is also called to invalidate the 
border for the status bar panel.
</p>
</descr>
<seealso>
<link id="TStatusPanel.Text"/>
<link id="TStatusPanel.Alignment"/>
<link id="TStatusPanel.BiDiMode"/>
<link id="TStatusPanel.ParentBiDiMode"/>
<link id="TStatusPanel.PanelChanged"/>
<link id="TStatusPanelStyle"/>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
</seealso>
</element>

<element name="TStatusPanel.Text">
<short>
Text displayed on the status bar panel.
</short>
<descr>
<p>
<var>Text</var> is a <var>TCaption</var> property with the text displayed for 
the status bar panel. Changing the value for the property causes the Changed 
method to be called to update the collection item in its owner. PanelChanged 
is also called to invalidate the text area for the status bar panel.
</p>
<p>
Text is used when the Style property contains psText. Set Style to 
psOwnerDraw to use the OnDrawPanel event handler in the StatusBar to render 
the panel.
</p>
</descr>
<seealso/>
</element>

<element name="TStatusPanel.Width">
<short>
The Width for the panel on the StatusBar.
</short>
<descr/>
<seealso/>
</element>

<element name="TStatusPanels">
<short>
A collection of panels displayed on a status bar control.
</short>
<descr/>
<seealso/>
</element>

<element name="TStatusPanels.FStatusBar"/>

<element name="TStatusPanels.GetItem">
<short>Gets the value for the indexed Items property.</short>
<descr/>
<seealso>
<link id="TStatusPanels.Items"/>
<link id="#rtl.classes.TCollection.GetItem">TCollection.GetItem</link>
</seealso>
</element>
<element name="TStatusPanels.GetItem.Result">
<short>Value for the property.</short>
</element>
<element name="TStatusPanels.GetItem.Index">
<short>Ordinal position for the requested collection item.</short>
</element>

<element name="TStatusPanels.SetItem">
<short>Sets the value in the indexed Items property.</short>
<descr/>
<seealso>
<link id="#rtl.classes.TCollection.SetItem">TCollection.SetItem</link>
</seealso>
</element>
<element name="TStatusPanels.SetItem.Index">
<short>Ordinal position for the collection item stored in the method.</short>
</element>
<element name="TStatusPanels.SetItem.Value">
<short>New value for the collection item.</short>
</element>

<element name="TStatusPanels.GetOwner">
<short>
<var>GetOwner</var> returns a Status Bar overriding the inherited method.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>
<element name="TStatusPanels.GetOwner.Result">
<short>Persistent object that owns the status panel.</short>
</element>

<element name="TStatusPanels.Update">
<short>
Ensures that observers are notified when he specified collection item has 
been changed.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TCollection">TCollection</link>
</seealso>
</element>
<element name="TStatusPanels.Update.Item">
<short>Collection item for the notification.</short>
</element>

<element name="TStatusPanels.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> - constructor for <var>TStatusPanels</var>: calls inherited 
<var>Create</var> and attaches itself to StatusBar.
</p>
</descr>
<seealso>
<link id="#rtl.Classes.TCollection.Create">TCollection.Create</link>
</seealso>
</element>
<element name="TStatusPanels.Create.TheStatusBar">
<short>The control where the status panel is displayed.</short>
</element>

<element name="TStatusPanels.Add">
<short>Adds a new TStatusPanel instance to the collection.</short>
<descr>
</descr>
<p>
Calls the inherited Add method and casts the result to 
<var>TStatusPanel</var> for use as the return value. Calls the 
<var>UpdateHandleObject</var> method in <var>StatusBar</var> to ensure that 
an update sequence is started when the handle for the status bar has been 
allocated.
</p>
<seealso>
<link id="TStatusPanel.StatusBar"/>
<link id="TStatusBar.UpdateHandleObject"/>
<link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
</seealso>
</element>
<element name="TStatusPanels.Add.Result">
<short>Status panel added in the method.</short>
</element>

<element name="TStatusPanels.Items">
<short>
Provides indexed access to the TStatusPanel items in the collection.
</short>
<descr>
<p>
<var>Items</var> is a <var>TStatusPanel</var> property which allows access to 
a status bar panel by an ordinal position specified in Index. Values in the 
Index argument must be in the range 0..Count-1.
</p>
<p>
Items is the default property for the class instance, and allows access using 
either of the following:
</p>
<code>// var AStatusBar: TStatusBar;
AStatusBar.Panels.Items[0];
AStatusBar.Panels[0];
</code>
<p>
It is also the target member for an enumerator. For example:
</p>
<code>// var AStatusBar: TStatusBar;
// APanel: TStatusPanel;
for APanel in AStatusBar.Panels do
begin
APanel.Alignment := taCenter;
APanel.Width := 88;
end;
</code>
<p>
Use methods like Add, Delete, and Clear to maintain the items in the 
collection.
</p>
</descr>
<seealso>
<link id="TStatusPanel"/>
<link id="TStatusPanels.Add"/>
<link id="#rtl.classes.TCollection.Clear">TCollection.Clear</link>
<link id="#rtl.classes.TCollection.Delete">TCollection.Delete</link>
<link id="#rtl.classes.TCollection.Items">TCollection.Items</link>
</seealso>
</element>
<element name="TStatusPanels.Items.Index">
<short>Ordinal position for the status bar panel.</short>
</element>

<element name="TStatusPanels.StatusBar">
<short>
The <var>StatusBar</var> to which this collection of status panels belongs.
</short>
<descr>
<p>
<var>StatusBar</var> is a read-only <var>TStatusBar</var> property and 
contains the status bar that is the owner of the items in the collection. It 
provides access to the properties and methods in the status bar from methods 
in the collection. Its primary purpose is to notify the status bar when 
panel(s) in the collection have been added or modified.
</p>
<p>
The property value is assigned in the <var>Create</var> constructor, and uses 
the value passed as an argument to the method.
</p>
</descr>
<seealso>
<link id="TStatusPanels.Create"/>
<link id="TStatusPanels.Add"/>
<link id="TStatusBar"/>
<link id="#rtl.classes.TCollection">TCollection</link>
</seealso>
</element>

<element name="TSBCreatePanelClassEvent">
<short>
Specifies an event handler signalled to get the class type for a new status 
bar panel.
</short>
<descr>
<p>
<var>TSBCreatePanelClassEvent</var> is an object procedure type and specifies 
an event handler used to get the class type needed for a new status bar panel 
instance.
</p>
<p>
<var>Sender</var> is the status bar where the panel will be created. It must 
be cast to TStatusBar to access properties and method specific to the class 
type.
</p>
<p>
<var>PanelClass</var> is a variable argument with the class type used to 
create the new panel instance. It can be updated in the event handler to use 
the value from the GetPanelClass method in the status bar, or another class 
type if desired.
</p>
<p>
TSBCreatePanelClassEvent is the type used for the 
<var>OnCreatePanelClass</var> event handler in <var>TStatusBar</var>.
</p>
</descr>
<seealso>
<link id="TStatusBar.OnCreatePanelClass"/>
<link id="TStatusBar.CreatePanel"/>
</seealso>
</element>
<element name="TSBCreatePanelClassEvent.Sender">
<short>Object (TStatusBar) for the event.</short>
</element>
<element name="TSBCreatePanelClassEvent.PanelClass">
<short>Class reference for the new panel.</short>
</element>

<element name="TDrawPanelEvent">
<short>
Specifies an event handler used to draw a panel in a status bar.
</short>
<descr>
<p>
<var>TDrawPanelEvent</var> is the type used to implement the 
<var>OnDrawPanel</var> property in <var>TStatusBar</var>.
</p>
</descr>
<seealso>
<link id="TStatusBar.OnDrawPanel"/>
</seealso>
</element>
<element name="TDrawPanelEvent.StatusBar">
<short>Status bar for the event notification.</short>
</element>
<element name="TDrawPanelEvent.Panel">
<short>Panel drawn by the event handler.</short>
</element>
<element name="TDrawPanelEvent.Rect">
<short>Drawing area for the event notification.</short>
</element>

<element name="TStatusBar">
<short>
Displays a panel along the bottom of a form with current status information.
</short>
<descr>
<p>
<var>TStatusBar</var> - a strip along the bottom of a form for displaying 
information on current status. The bar may consist of a single 
<var>SimplePanel</var> in which case the displayed text is contained in 
<var>SimpleText</var>.
</p>
<p>
However if <var>SimplePanel</var> is <b>False</b>, then there can be multiple 
panels or sub-sections of the status bar whose properties are described in 
<var>Panels</var>.
</p>
<p>
The property <var>SimpleText</var> can be assigned in code to display the 
value of some variable, such as the position of the Splitter in the example.
</p>
</descr>
<example file="extctrls/statusbar.pas"/>
</element>

<element name="TStatusBar.FAutoHint"/>
<element name="TStatusBar.FCanvas"/>
<element name="TStatusBar.FHandlePanelCount"/>
<element name="TStatusBar.FHandleObjectNeedsUpdate"/>
<element name="TStatusBar.FHandleUpdatePanelIndex"/>
<element name="TStatusBar.FOnCreatePanelClass"/>
<element name="TStatusBar.FSizeGrip"/>
<element name="TStatusBar.FUpdateLock"/>
<element name="TStatusBar.FPanels"/>
<element name="TStatusBar.FSimpleText"/>
<element name="TStatusBar.FSimplePanel"/>
<element name="TStatusBar.FOnDrawPanel"/>
<element name="TStatusBar.FOnHint"/>
<element name="TStatusBar.FUseSystemFont"/>

<element name="TStatusBar.SetPanels">
<short>Sets the value for the Panels property.</short>
<descr/>
<seealso>
<link id="TStatusBar.Panels"/>
</seealso>
</element>
<element name="TStatusBar.SetPanels.Value">
<short>New value for the property.</short>
</element>

<element name="TStatusBar.SetSimpleText">
<short>Sets the value for the SimpleText property.</short>
<descr>
<p>
Notifies the widgetset class of the value change when a handle has been 
allocated and SimplePanel is set to <b>True</b>.
</p>
</descr>
<seealso>
<link id="TStatusBar.SimpleText"/>
<link id="TStatusBar.SimplePanel"/>
</seealso>
</element>
<element name="TStatusBar.SetSimpleText.Value">
<short>New value for the property.</short>
</element>

<element name="TStatusBar.SetSimplePanel">
<short>Sets the value for the SimplePanel property.</short>
<descr/>
<seealso>
<link id="TStatusBar.SimplePanel"/>
</seealso>
</element>
<element name="TStatusBar.SetSimplePanel.Value">
<short>New value for the property.</short>
</element>

<element name="TStatusBar.SetSizeGrip">
<short>Sets the value for the SizeGrip property.</short>
<descr/>
<seealso>
<link id="TStatusBar.SizeGrip"/>
</seealso>
</element>
<element name="TStatusBar.SetSizeGrip.AValue">
<short>New value for the property.</short>
</element>

<element name="TStatusBar.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>
<element name="TStatusBar.BoundsChanged" link="#lcl.controls.TControl.BoundsChanged"/>

<element name="TStatusBar.CreateWnd">
<short>
<var>CreateWnd</var> calls inherited method, then fixes handles if needed.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
</seealso>
</element>

<element name="TStatusBar.DestroyWnd">
<short>
<var>DestroyWnd</var> calls inherited method and frees handles.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.DestroyWnd">TWinControl.DestroyWnd</link>
</seealso>
</element>

<element name="TStatusBar.Loaded">
<short>
<var>Loaded</var> calls inherited method and fixes handles if needed.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
</seealso>
</element>

<element name="TStatusBar.UpdateHandleObject">
<short>
Updates the handle for the status bar when one or all of the panels on the 
control need to be updated.
</short>
<descr>
<p>
<var>UpdateHandleObject</var> is a method used to update the widgetset handle 
for the status bar. It calls either the Update or PanelUpdate method in the 
widget when one or all of the Panels on the status bar need to be redrawn.
</p>
<p>
<var>PanelIndex</var> contains the ordinal position for the panel(s) updated 
on the status bar. A value in the range <b>0..Panels.Count-1</b> causes the 
corresponding panel to be redrawn when the status bar is updated. -1 (or any 
value less than zero actually) causes all of the defined Panels to be redrawn.
</p>
<p>
No actions are performed in the method when the handle has not been allocated 
for the widgetset class, or when SimplePanel is enabled and PanelIndex 
contains a value other than 0 (zero).
</p>
<p>
UpdateHandleObject is called when the visual appearance for the status bar has 
been changed. It occurs when the component is loaded from its LCL resource, 
and when the handle for the widget is allocated. It is also called when a new 
value is assigned to the SimplePanel or BiDiMode properties.
</p>
</descr>
<seealso>
<link id="TStatusBar.Panels"/>
<link id="TStatusBar.SimplePanel"/>
<link id="TStatusBar.BiDiMode"/>
<link id="TStatusBar.Loaded"/>
<link id="TStatusBar.OnDrawPanel"/>
</seealso>
</element>
<element name="TStatusBar.UpdateHandleObject.PanelIndex">
<short>
Ordinal position for the panel updated on the control, or -1 for all panels.
</short>
</element>

<element name="TStatusBar.CalculatePreferredSize">
<short>
<var>CalculatePreferredSize</var> calls inherited method then supplies its 
own values if any are missing.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.CalculatePreferredSize">TControl.CalculatePreferredSize</link>
</seealso>
</element>

<element name="TStatusBar.SetBiDiMode">
<short>Sets the value in the BiDiMode property.</short>
<descr>
<p>
Ensures that all panels in the status bar update their alignment to match the 
new value for the property. Calls UpdateHandleObject to ensure that an update 
sequence is started for the control when its handle has been assigned.
</p>
</descr>
<seealso>
<link id="TStatusBar.Panels"/>
<link id="TStatusBar.UpdateHandleObject"/>
<link id="#lcl.controls.TControl.BiDiMode">TControl.BiDiMode</link>
</seealso>
</element>
<element name="TStatusBar.SetBiDiMode.AValue">
<short>New value for the property.</short>
</element>

<element name="TStatusBar.CreatePanel">
<short>
<var>CreatePanel</var> - returns a created Status Panel.
</short>
<descr/>
<seealso/>
</element>
<element name="TStatusBar.CreatePanel.Result">
<short>Status panel creates in the method.</short>
</element>

<element name="TStatusBar.CreatePanels">
<short>
<var>CreatePanels</var> - returns a set of created panels.
</short>
</element>
<element name="TStatusBar.CreatePanels.Result">
<short>Status panels created in the method.</short>
</element>

<element name="TStatusBar.GetPanelClass">
<short>
<var>GetPanelClass</var> - returns a class of status panel.
</short>
</element>
<element name="TStatusBar.GetPanelClass.Result">
<short>Class type used for status panels.</short>
</element>

<element name="TStatusBar.DoSetApplicationHint">
<short>
<var>DoSetApplicationHint</var> - specifies a hint string and returns 
<b>True</b> if successful.
</short>
<descr/>
<seealso/>
</element>

<element name="TStatusBar.DoHint">
<short>Displays the hint for the status bar.</short>
<descr>
<p>
<var>DoHint</var> shows the hint text for the control and returns <b>True</b> 
when successful. Uses the <var>OnHint</var> event handler.
</p>
</descr>
<seealso/>
</element>

<element name="TStatusBar.DrawPanel">
<short>
Signals the OnDrawPanel event handler (when assigned).
</short>
<descr>
<p>
<var>DrawPanel</var> is a method used to draw the status bar panel specified in 
<var>Panel</var> to the specified rectangle (<var>Rect</var>) on the Canvas for 
the control. It signals the OnDrawPanel event handler (when assigned) using 
the values specified in the arguments. DrawPanel is called from the LMDrawItem 
method and occurs when the LM_DRAWITEM message is handled for the control.
</p>
</descr>
<seealso>
<link id="TStatusBar.OnDrawPanel"/>
<link id="TStatusBar.LMDrawItem"/>
<link id="TStatusPanel"/>
<link id="TDrawPanelEvent"/>
</seealso>
</element>
<element name="TStatusBar.DrawPanel.Panel">
<short>Panel drawn in the method.</short>
</element>
<element name="TStatusBar.DrawPanel.Rect">
<short>Rectangle for the drawing operation.</short>
</element>

<element name="TStatusBar.LMDrawItem">
<short>
Draws the status bar panel when the specified LM_DRAWITEMS message is handled 
for the control.
</short>
<descr>
<p>
<var>LMDrawItem</var> is a method used to handle a TLMDrawItems message received for the status bar control. LMDrawItem retrieves the status bar panel 
(by item position) and the rectangle where it is drawn from the drawing structure in the Message argument. It ensures that the handle for the control Canvas is set to the device context for the control and calls DrawPanel to render the status bar panel at the required coordinates. The Canvas handle is restored to its original value prior to exit.
</p>
</descr>
<seealso>
<link id="TStatusBar.Canvas"/>
<link id="TStatusBar.DrawPanel"/>
<link id="#lcl.lmessages.TLMDrawItems">TLMDrawItems</link>
</seealso>
</element>
<element name="TStatusBar.LMDrawItem.Message">
<short>
Message with the status bar panel and coordinates drawn in the method.
</short>
</element>

<element name="TStatusBar.DoAutoAdjustLayout">
<short>Performs actions needed to apply the layout policy in AMode.</short>
<descr>
<p>
Calls <var>BeginUpdate</var> to reduce the number of refreshes needed when 
updating panels in the status bar. Adjusts the width of all items in the 
<var>Panels</var> collection using the factor in <var>AXProportion</var>. The 
value in <var>AYProportion</var> is ignored in the method. Calls 
<var>EndUpdate</var> prior to exit from the method.
</p>
<remark>
No actions are performed in the method when <var>AMode</var> contains a 
<var>TLayoutAdjustmentPolicy</var> value other than 
<var>lapAutoAdjustWithoutHorizontalScrolling</var> or 
<var>lapAutoAdjustForDPI</var>.
</remark>
</descr>
<seealso/>
</element>
<element name="TStatusBar.DoAutoAdjustLayout.Mode">
<short>Layout policy applied in the method.</short>
</element>
<element name="TStatusBar.DoAutoAdjustLayout.AXProportion">
<short>Horizontal sizing factor applied to panels in the status bar.</short>
</element>
<element name="TStatusBar.DoAutoAdjustLayout.AYProportion">
<short>Vertical sizing factor applied to panels in the status bar.</short>
</element>

<element name="TStatusBar.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TStatusBar</var>. It calls the 
inherited <var>Create</var> method, and initializes a number of local 
variables, including:
</p>
<ul>
<li>AutoHint</li>
<li>Canvas</li>
<li>ControlStyle</li>
<li>Color</li>
<li>Align</li>
<li>AutoSize</li>
<li>SimplePanel</li>
</ul>
</descr>
<seealso>
<link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
<link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
</seealso>
</element>
<element name="TStatusBar.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TStatusBar.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
<var>Destroy</var> is the destructor for <var>TStatusBar</var>. It frees the 
Canvas and panels, and calls the inherited <var>Destroy</var> method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
<link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
</seealso>
</element>

<element name="TStatusBar.InvalidatePanel">
<short>
Updates the panel at the specified position in the Panels for the status bar.
</short>
<descr>
<p>
<var>InvalidatePanel</var> renders the panel with specified index non-valid. 
Calls <var>UpdateHandleObject</var> to ensure that the widgetset class is 
notified of the change to the specified panel.
</p>
<remark>
No actions are performed in the method when the PanelParts argument is an 
empty set (<b>[]</b>).
</remark>
</descr>
<seealso/>
</element>
<element name="TStatusBar.InvalidatePanel.PanelIndex">
<short>Ordinal position for the panel affected in the method.</short>
</element>
<element name="TStatusBar.InvalidatePanel.PanelParts">
<short>Panel parts affected in the method.</short>
</element>

<element name="TStatusBar.BeginUpdate">
<short>
Starts an update process for the status bar.
</short>
<descr/>
<seealso/>
</element>

<element name="TStatusBar.EndUpdate">
<short>
Finishes an update process for the status bar.
</short>
<descr/>
<seealso/>
</element>

<element name="TStatusBar.ExecuteAction">
<short>
<var>ExecuteAction</var>: if required action is a Hint-related, sets the Hint 
in place, otherwise calls inherited method.
</short>
<seealso>
<link id="#rtl.classes.TComponent.ExecuteAction">TComponent.ExecuteAction</link>
</seealso>
</element>

<element name="TStatusBar.GetPanelIndexAt">
<short>
Gets the ordinal position for the panel at the specified coordinates.
</short>
<descr>
<p>
<var>GetPanelIndexAt</var> gets the ordinal position for the panel at the 
specified coordinates. The return value is <b>-1</b> when <var>Panels</var> 
have not been defined in the status bar. No actions are performed in the 
method when Panels is empty.
</p>
<p>
GetPanelIndexAt uses the display rectangle for the control to determine in 
the specified coordinates are within one of the Panels defined for the 
control. When <b>True</b>, each of the items in the Panels collection are 
examined to determine if the point is within a specific panel. The ordinal 
position for the panel is assigned as the return value.
</p>
</descr>
<seealso/>
</element>
<element name="TStatusBar.GetPanelIndexAt.Result">
<short>
Ordinal position for the status panel, or -1 when no panel is located at the 
specified coordinates.
</short>
</element>
<element name="TStatusBar.GetPanelIndexAt.X">
<short>
Horizontal coordinate to locate in the Panels for the status bar.
</short>
</element>
<element name="TStatusBar.GetPanelIndexAt.Y">
<short>
Vertical coordinate to locate in the Panels for the status bar.
</short>
</element>

<element name="TStatusBar.SizeGripEnabled">
<short>
<var>SizeGripEnabled</var> - returns <b>True</b> if the size-grip (an area at 
the bottom of the statusbar where a mouse can grip to change the size) is 
enabled.
</short>
</element>

<element name="TStatusBar.UpdatingStatusBar">
<short>
Returns <b>True</b> if the status bar is being updated.
</short>
<descr/>
<seealso/>
</element>
<element name="TStatusBar.UpdatingStatusBar.Result">
<short><b>True</b> if the status bar is being updated.</short>
</element>

<element name="TStatusBar.Canvas">
<short>
The <var>Canvas</var> where the Panels for the StatusBar are painted.
</short>
<descr/>
<seealso/>
</element>

<element name="TStatusBar.Action" link="#lcl.controls.TControl.Action"/>

<element name="TStatusBar.Align">
<short>Specifies the placement of the control inside its Parent.</short>
<descr>
<p>
<var>Align</var> is a <var>TAlign</var> property which specifies how the 
control is aligned to its parent control. The default value for the property 
is <var>alBottom</var> in <var>TStatusBar</var>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Align">TControl.Align</link>
</seealso>
</element>

<element name="TStatusBar.Anchors" link="#lcl.controls.TControl.Anchors"/>

<element name="TStatusBar.AutoHint">
<short>
Indicates if a hint is automatically shown when the mouse hovers over the 
status bar.
</short>
<descr>
<p>
The default value for the property is <b>False</b>.
</p>
</descr>
</element>

<element name="TStatusBar.AutoSize">
<short>
Indicates if the control is automatically resized to fill the area on its 
aligned edge.
</short>
<descr>
<p>
The default value for the property is <b>True</b> in <var>TStatusBar</var>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.AutoSize">TControl.AutoSize</link>
</seealso>
</element>

<element name="TStatusBar.BidiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TStatusBar.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TStatusBar.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>

<element name="TStatusBar.Color">
<short>
The background color of the control.
</short>
<descr>
<p>
<var>Color</var> is a published <var>TColor</var> property in 
<var>TStatusBar</var>. The default value for the property is clDefault or 
clBtnFace (depending on the UseCLDefault compiler define). If the color is 
clDefault, the result will need to be passed through GetDefaultColor to 
resolve clDefault to an actual TColor value.
</p>
<p>
Convenience routines which obtain the color by resolving clDefault and 
ParentColor are provided in the GetColorResolvingParent and 
GetRGBColorResolvingParent methods in the TControl ancestor.
</p>
<remark>
For the macOS Carbon widgetset, the Color property is not supported in 
TStatusBar. The status bar is always transparent on the platform.
</remark>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Color">TControl.Color</link>
<link id="#lcl.controls.TControl.GetColorResolvingParent">TControl.GetColorResolvingParent</link>
<link id="#lcl.controls.TControl.GetRGBColorResolvingParent">TControl.GetRGBColorResolvingParent</link>
</seealso>
</element>

<element name="TStatusBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TStatusBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TStatusBar.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TStatusBar.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TStatusBar.Enabled" link="#lcl.controls.TControl.Enabled"/>

<element name="TStatusBar.Font">
<short>
Font used to display the content on the control.
</short>
<descr>
<p>
<var>Font</var> is a published <var>TFont</var> property in 
<var>TStatusBar</var>. It contains the font settings used to display the 
content on the control. This includes the value specified in SimpleText when 
SimplePanel is enabled, and in Panels using the psText style when SimplePanel 
is disabled.
</p>
<p>
In TStatusBar, the default values in Font are set to the attributes specified 
for the default system font. Changing values in the TFont instance or assigning 
a different font to the property causes the control to be redrawn.
</p>
<p>
Set ParentFont to <b>True</b> use the typeface and attributes assigned to the 
Font property in the parent control. Please note that resetting ParentFont to 
<b>False</b> does not restore the previous values in the Font property.
</p>
<remark>
The UseSystemFont property has no effect in LCL; it is provided for code 
compatibility with the Delphi VCL only.
</remark>
</descr>
<seealso>
<link id="TStatusBar.SimpleText"/>
<link id="TStatusBar.SimplePanel"/>
<link id="TStatusBar.Panels"/>
<link id="TStatusBar.ParentFont"/>
<link id="TStatusBar.UseSystemFont"/>
<link id="TStatusPanels"/>
<link id="TStatusPanel"/>
<link id="#lcl.controls.TControl.Font">TControl.Font</link>
</seealso>
</element>

<element name="TStatusBar.Panels">
<short>
Collection with the TStatusPanel instances defined for the control.
</short>
<descr>
<p>
<var>Panels</var> is a collection used to store <var>TStatusPanel</var> class 
instances added to the status bar. Panels are significant when the 
<var>SimplePanel</var> property is set to <b>False</b>; when SimplePanel 
contains <b>True</b>, the status bar displays the value in 
<var>SimpleText</var> across the entire width for the status bar.
</p>
<p>
Use <var>CreatePanel</var> to create a new status panel displayed on the 
status bar. Or use the editor provided in the Lazarus IDE Object Inspector to 
maintain the items in the Panels collection at design-time.
</p>
</descr>
<seealso>
<link id="TStatusBar.SimplePanel"/>
<link id="TStatusBar.SimpleText"/>
<link id="TStatusBar.CreatePanel"/>
<link id="TStatusPanels"/>
<link id="TStatusPanel"/>
</seealso>

</element>

<element name="TStatusBar.ParentBiDiMode" link="#lcl.controls.TControl.ParentBidiMode"/>
<element name="TStatusBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TStatusBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TStatusBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>

<element name="TStatusBar.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>

<element name="TStatusBar.SimpleText">
<short>
Contains the text displayed on the status bar when SimplePanel is enabled.
</short>
<descr>
<p>
<var>SimpleText</var> is a <var>String</var> property containing the 
information to be displayed in the Status Bar. It is displayed if 
<var>SimplePanel</var> is <b>True</b>; otherwise the information defined in 
Panels is displayed using the settings for the individual status bar panels.
</p>
<p>
Changing the value for the property causes the control to be redrawn when the 
handle has been allocated for the widgetset class instance.
</p>
</descr>
<seealso>
<link id="TStatusBar.SimplePanel"/>
<link id="TStatusBar.Panels"/>
<link id="TStatusPanels"/>
<link id="TStatusPanel"/>
</seealso>
</element>

<element name="TStatusBar.SimplePanel">
<short>
Indicates if a single panel is displayed in the status bar with the text in 
SimpleText.
</short>
<descr>
<p>
<var>SimplePanel</var> is a Boolean property which indicates if a single 
panel is displayed in the status bar with the text in SimpleText
</p>
<p>
If <b>True</b>, the value of <var>SimpleText</var> is displayed; if 
<b>False</b>, the contents of the individual <var>Panels</var> is displayed.
</p>
<p>
Contents can be adjusted with a stringlist editor that pops up when the 
ellipsis (...) next to <var>Panels</var> is selected and allows insertion of 
an arbitrary number of sub-panels with their own strings.
</p>
</descr>
<seealso>
<link id="TStatusBar.SimpleText"/>
<link id="TStatusBar.Panels"/>
<link id="TStatusPanels"/>
<link id="TStatusPanel"/>
</seealso>

</element>

<element name="TStatusBar.SizeGrip">
<short>Displays a sizing grip used to resize the parent form.</short>
<descr>
<p>
<var>SizeGrip</var> is a <var>Boolean</var> property which indicates if a 
sizing grip (or grabber) is visible for the status bar. The sizing grip is a 
triangular shape displayed at the bottom-right of the status bar, and 
provides an alternate way to resize the parent form using the mouse. It 
presents a larger mouse target than a window border.
</p>
<p>
The default value for the property is <b>True</b>, and indicates that the 
sizing grip is visible.
</p>
<p>
Setting a new value for the property causes the widgetset class to be 
notified of the change if the handle has been allocated for the control.
</p>
<p>
Use <var>SizeGripEnabled</var> to determine if the sizing grip is enabled in 
the control.
</p>
</descr>
<seealso>
<link id="TStatusBar.SizeGripEnabled"/>
<link id="#lcl.forms.TCustomForm.BorderStyle">TCustomForm.BorderStyle</link>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
</seealso>
</element>

<element name="TStatusBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>

<element name="TStatusBar.UseSystemFont">
<short>Indicates the System font is used for the control.</short>
<descr>
<p>
This is used to provide VCL-compatibility in widgetset classes.
</p>
</descr>
<seealso/>
</element>

<element name="TStatusBar.Visible">
<short>Indicates if the control is visible.</short>
<descr>
<p>
Allows the control, and all of its children, to be displayed or hidden. 
Visible is set to <b>True</b> in the <var>Show</var> method, and to 
<b>False</b> in the <var>Hide</var> method. Calling these methods is 
equivalent to setting the value in the Visible property.
</p>
<p>
The default value for the property is <b>True</b> in <var>TStatusBar</var>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
<link id="#lcl.controls.TControl.Show">TControl.Show</link>
<link id="#lcl.controls.TControl.Hide">TControl.Hide</link>
</seealso>
</element>

<element name="TStatusBar.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TStatusBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>

<element name="TStatusBar.OnCreatePanelClass">
<short>
Event handler signalled to get the class used to create new panels in the 
status bar.
</short>
<descr>
<p>
<var>OnCreatePanelClass</var> is signalled (when assigned) in the 
<var>CreatePanel</var> method to get the class used to create new panels in 
the status bar. Assign an object procedure using the signature in 
<var>TSBCreatePanelClassEvent</var> to the property to override the value 
provided by the <var>GetPanelClass</var> method.
</p>
</descr>
</element>

<element name="TStatusBar.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TStatusBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TStatusBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>

<element name="TStatusBar.OnDrawPanel">
<short>
Event handler signalled to draw a panel in the status bar.
</short>
<descr>
<p>
<var>OnDrawPanel</var> is a <var>TDrawPanelEvent</var> property with the event 
handler signalled to draw the specified panel on the status bar. OnDrawPanel is 
signalled (when assigned) from the DrawPanel method, and occurs when the 
TLMDrawItems message is handled for the control. Assign an object procedure 
using the signature in TDrawPanelEvent to render the specified panel to a 
rectangle on the Canvas for the status bar control.
</p>
</descr>
<seealso>
<link id="TStatusBar.DrawPanel"/>
<link id="TDrawPanelEvent"/>
<link id="#lcl.lmessages.TLMDrawItems">TLMDrawItems</link>
</seealso>
</element>

<element name="TStatusBar.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TStatusBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>

<element name="TStatusBar.OnHint">
<short>
Event handler used to get the text for a hint displayed on the status bar 
control.
</short>
<descr>
<p>
<var>OnHint</var> is a <var>TNotifyEvent</var> property with the event handler 
signalled to get hint text displayed on the status bar control. It is called 
from the DoSetApplicationHint method (when assigned), and occurs when AutoHint 
is enabled and a custom hint action is passed to the ExecuteAction method. The 
handler can determine the content for the hint and the location where it is 
displayed. If the handler returns False, the value passed from the application 
is assigned to SimpleText (when SimplePanel is enabled), or used as the text 
for the first defined panel in Panels (when SimplePanel is disabled).
</p>
</descr>
<seealso>
<link id="TStatusBar.ShowHint"/>
<link id="TStatusBar.DoHint"/>
<link id="TStatusBar.AutoHint"/>
<link id="TStatusBar.DoSetApplicationHint"/>
<link id="TStatusBar.ExecuteAction"/>
<link id="#lcl.controls.TControl.Hint">TControl.Hint</link>
</seealso>
</element>

<element name="TStatusBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TStatusBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TStatusBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TStatusBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TStatusBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TStatusBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TStatusBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TStatusBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TStatusBar.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TStatusBar.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TStatusBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

<element name="TPageFlag">
<short>
Contains values which can be assigned to the Flags property in TCustomPage.
</short>
<descr>
<p>
Reflects the status or state for the handle used in a custom page control.
</p>
</descr>
<seealso/>
</element>
<element name="TPageFlag.pfAdded">
<short>Handle for the page has been added to the notebook.</short>
</element>
<element name="TPageFlag.pfAdding">
<short>Handle for the page is being added to the notebook.</short>
</element>
<element name="TPageFlag.pfRemoving">
<short>Removing the page handle from the notebook.</short>
</element>
<element name="TPageFlag.pfInserting">
<short>Inserting the page handle into the notebook.</short>
</element>

<element name="TPageFlags">
<short>Set type used to store TPageFlag enumeration values.</short>
<descr>
<p>
<var>TPageFlags</var> is the type used to implement the <var>Flags</var> 
property in <var>TCustomPage</var>.
</p>
</descr>
<seealso>
<link id="TCustomPage.Flags"/>
</seealso>
</element>

<element name="TCustomPage">
<short>The base class for TTabSheet.</short>
<descr>
<p>
<var>TCustomPage</var> is a <var>TWinControl</var> descendant which 
implements the base class for the tabbed pages found in notebooks. 
TCustomPage provides properties used to maintain the order and visibility of 
the page, and event handlers signalled when the page is hidden or displayed.
</p>
</descr>
<seealso>
<link id="TTabSheet"/>
<link id="TPageControl"/>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.ActivePageComponent"/>
<link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
</seealso>
</element>

<element name="TCustomPage.FTabVisible"/>
<element name="TCustomPage.FFlags"/>
<element name="TCustomPage.FImageIndex"/>
<element name="TCustomPage.FOnHide"/>
<element name="TCustomPage.FOnShow"/>

<element name="TCustomPage.SetImageIndex">
<short>Sets the value for the ImageIndex property.</short>
<descr>
<p>
Notifies the widgetset class of changes to properties in the custom page.
</p>
</descr>
<seealso>
<link id="TCustomPage.ImageIndex"/>
</seealso>
</element>
<element name="TCustomPage.SetImageIndex.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomPage.SetTabVisible">
<short>Sets the value for the TabVisible property.</short>
<descr/>
<seealso>
<link id="TCustomPage.SetTabVisible"/>
</seealso>
</element>
<element name="TCustomPage.SetTabVisible.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomPage.WSRegisterClass">
<short>Registers the widgetset class used for the class instance.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomPage.WMPaint">
<short>Handles the LM_PAINT message for the control.</short>
<descr>
<p>
<var>WMPaint</var> is an overridden method in <var>TCustomPage</var> which 
handles the LM_PAINT message for the control. It calls the inherited method 
to render the control. No actions are performed in the method if the Parent 
is a TCustomTabControl descendant and the class instance is not the current 
page in the Parent control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.WMPaint">TWinControl.WMPaint</link>
</seealso>
</element>
<element name="TCustomPage.WMPaint.Msg">
<short>Message handled in the method.</short>
</element>

<element name="TCustomPage.SetParent">
<short>Sets the Parent control for the custom page.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.SetParent">TControl.SetParent</link>
</seealso>
</element>
<element name="TCustomPage.SetParent.AParent">
<short>New value for the Parent property.</short>
</element>

<element name="TCustomPage.Flags">
<short>
Contains flag values that represent the status or state for the handle in the 
custom page control.
</short>
<descr>
<p>
Values in <var>Flags</var> are normally added or removed when changes are 
performed in a control which uses the page control class instance. See 
<var>TPageFlag</var> for more information about enumeration values and their 
meanings.
</p>
</descr>
<seealso>
<link id="TPageFlags"/>
<link id="TPageFlag"/>
</seealso>
</element>

<element name="TCustomPage.CMHitTest">
<short>Handles the CM_HITTEST control message.</short>
<descr>
<p>
CMHitTest checks the type for the Parent control to determine whether the 
Message is ignored or forwarded to the inherited method. When Parent is a 
TCustomTabControl descendant, the class instance must be the active page in 
the parent control. When it is not, the Message result is set to 0 and the 
message is ignored. Otherwise, the inherited method is called to handle the 
Message.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.CMHitTest">TControl.CMHitTest</link>
</seealso>
</element>
<element name="TCustomPage.CMHitTest.Message">
<short>Control message handled in the method.</short>
</element>

<element name="TCustomPage.CMVisibleChanged">
<short>Handles the CM_VISIBLECHANGED message for the control.</short>
<descr>
<p>
Calls the inherited method to handle a focus change and update the control 
state. If the control is Visible, the DoShow method is called to signal the 
OnShow event handler (when assigned). Otherwise, DoHide is called to signal 
the OnHide event handler (when assigned).
</p>
</descr>
<seealso>
<link id="TCustomPage.DoShow"/>
<link id="TCustomPage.DoHide"/>
<link id="TCustomPage.OnShow"/>
<link id="TCustomPage.OnHide"/>
<link id="#lcl.controls.TWinControl.CMVisibleChanged">TWinControl.CMVisibleChanged</link>
</seealso>
</element>
<element name="TCustomPage.CMVisibleChanged.Message">
<short>Control message handled in the method.</short>
</element>

<element name="TCustomPage.GetPageIndex">
<short>Gets the value for the PageIndex property.</short>
<descr/>
<seealso>
<link id="TCustomPage.PageIndex"/>
</seealso>
</element>
<element name="TCustomPage.GetPageIndex.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomPage.SetPageIndex">
<short>Sets the value for the PageIndex property.</short>
<descr/>
<seealso>
<link id="TCustomPage.PageIndex"/>
</seealso>
</element>
<element name="TCustomPage.SetPageIndex.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomPage.GetTabVisible">
<short>Gets the value for the TabVisible property.</short>
<descr/>
<seealso>
<link id="TCustomPage.GetTabVisible"/>
</seealso>
</element>
<element name="TCustomPage.GetTabVisible.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomPage.DialogChar">
<short>
Provides support for a TCustomTabControl parent when handling a dialog 
accelerator key.
</short>
<descr>
<p>
Calls the inherited DialogChar method when Parent is not derived from 
TCustomTabControl.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.DialogChar">TWinControl.DialogChar</link>
</seealso>
</element>
<element name="TCustomPage.DialogChar.Result">
<short>
<b>True</b> if message contains an accelerator key handled in the method.
</short>
</element>
<element name="TCustomPage.DialogChar.Message">
<short>Message examined in the method.</short>
</element>

<element name="TCustomPage.DoHide">
<short>
Performs actions needed when Visible is changed to <b>False</b>.
</short>
<descr>
<p>
<var>DoHide</var> is a method used to perform actions needed when the 
<var>Visible</var> property is changed to <b>False</b>. DoHide signals the 
<var>OnHide</var> event handler (when assigned).
</p>
<p>
DoHide is called from the <var>CMVisibleChanged</var> message handler.
</p>
</descr>
<seealso>
<link id="TCustomPage.Visible"/>
<link id="TCustomPage.OnHide"/>
<link id="TCustomPage.CMVisibleChanged"/>
</seealso>
</element>

<element name="TCustomPage.DoShow">
<short>
Performs actions needed when Visible is changed to <b>True</b>.
</short>
<descr>
<p>
<var>DoShow</var> is a method used to perform actions needed when 
<var>Visible</var> property is changed to <b>True</b>. DoShow signals the 
OnShow event handler (when assigned).
</p>
<p>
DoShow is called from the CMVisibleChanged message handler.
</p>
</descr>
<seealso>
<link id="TCustomPage.Visible"/>
<link id="TCustomPage.OnShow"/>
<link id="TCustomPage.CMVisibleChanged"/>
</seealso>
</element>

<element name="TCustomPage.DestroyHandle">
<short>
Updates the Flags property when the Handle for the control is freed.
</short>
<descr>
<p>
<var>DestroyHandle</var> is an overridden method used to update the control 
when its <var>Handle</var> is freed in the widgetset class. DestroyHandle 
calls the inherited method on entry, and updates the <var>Flags</var> 
property to exclude the value <var>pfAdded</var>.
</p>
</descr>
<seealso>
<link id="TCustomPage.Flags"/>
<link id="TPageFlags"/>
<link id="TPageFlag"/>
<link id="#lcl.controls.TWinControl.Handle">TWinControl.Handle</link>
<link id="#lcl.controls.TWinControl.DestroyHandle">TWinControl.DestroyHandle</link>
</seealso>
</element>

<element name="TCustomPage.RealSetText">
<short>Notifies the widgetset to change the text for the control.</short>
<descr>
<p>
RealSetText is overridden in <var>TCustomPage</var> to notify the widgetset 
class of the value change when the <var>Parent</var> control is assigned and 
has a valid <var>Handle</var>. RealSetText calls the inherited method to 
apply the new value. <var>AdjustSize</var> is called if the widgetset class 
was notified.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.RealSetText">TWinControl.RealSetText</link>
<link id="#lcl.controls.TWinControl.Handle">TWinControl.Handle</link>
<link id="#lcl.controls.TControl.AdjustSize">TControl.AdjustSize</link>
</seealso>
</element>
<element name="TCustomPage.RealSetText.AValue">
<short>Value used for the Text (Caption) in the control.</short>
</element>

<element name="TCustomPage.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for <var>TCustomPage</var>, 
and calls the inherited constructor on entry. Create sets the default values 
for the style, visibility, alignment and caption in the class instance.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
</seealso>
</element>
<element name="TCustomPage.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomPage.CanTab">
<short>
Indicates if the Tab key can be used to navigate into or out of the control.
</short>
<descr>
<p>
Always returns <b>False</b> in <var>TCustomPage</var>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.CanTab">TWinControl.CanTab</link>
</seealso>
</element>
<element name="TCustomPage.CanTab.Result">
<short>Always returns <b>False</b>.</short>
</element>

<element name="TCustomPage.IsControlVisible">
<short>Indicates whether the control is visible.</short>
<descr>
<p>
<var>IsControlVisible</var> is an overridden method in <var>TCustomPage</var> 
which indicates whether the control is visible.
</p>
<p>
If <var>AutoSizingAll</var> is set to <b>True</b>, no actions are performed 
in the method and the return values is <b>True</b>. This allows inactive 
pages to be considered in the GetPreferredSize method in the parent control.
</p>
<p>
IsControlVisible calls the inherited method on entry to determine if the 
Visible property is set to <b>True</b>, and whether the control is visible at 
design-time. When the <var>Parent</var> control is 
<var>TCustomTabControl</var>, the value in the <var>PageIndex</var> property 
must match the value in the parent control.
</p>
<p>
The return value is <b>True</b> when all of the conditions are satisfied.
</p>
</descr>
<seealso>
<link id="TCustomPage.PageIndex"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="#lcl.Controls.TControl.IsControlVisible">TControl.IsControlVisible</link>
</seealso>
</element>
<element name="TCustomPage.IsControlVisible.Result">
<short><b>True</b> when the control is visible.</short>
</element>

<element name="TCustomPage.HandleObjectShouldBeVisible" link="#lcl.controls.TControl.HandleObjectShouldBeVisible"/>
<element name="TCustomPage.HandleObjectShouldBeVisible.Result"/>

<element name="TCustomPage.VisibleIndex">
<short>
Gets the index number for a visible page within all of the visible pages.
</short>
<descr>
<p>
<var>VisibleIndex</var> is an <var>Integer</var> function used to get the 
ordinal position for the page instance within the list of visible pages for 
the Parent control.
</p>
<p>
When Parent is a <var>TCustomTabControl</var> descendant, its TCustomPage 
instances are examined to find the current class instance. At run-time, only 
pages with the TabVisible property set to <b>True</b> are considered in the 
method. At design-time, all pages are examined.
</p>
<p>
The return value is the relative position in the list of visible pages where 
the current class instance was found. The return value is -1 if the current 
page was not found in the Parent control, or when none of the pages in the 
Parent control are visible.
</p>
<p>
When Parent is not derived from TCustomTabControl, the return value is always 
<b>-1</b>.
</p>
</descr>
</element>
<element name="TCustomPage.VisibleIndex.Result">
<short>
Ordinal position for the visible page, or -1 when not found or not visible.
</short>
</element>

<element name="TCustomPage.CheckNewParent">
<short>
Ensures that the specified control is derived from TCustomTabControl.
</short>
<descr>
<p>
Raises an <var>EInvalidOperation</var> exception when <var>AParent</var> is 
not derived from <var>TCustomTabControl</var>. Calls the inherited 
<var>CheckNewParent</var> method when AParent is unassigned or derived from 
TCustomTabControl.
</p>
</descr>
<errors>
Raises an EInvalidOperation exception when AParent is not derived from 
TCustomTabControl.
</errors>
<seealso>
<link id="TCustomPage"/>
<link id="#lcl.controls.TControl.CheckNewParent">TControl.CheckNewParent</link>
</seealso>
</element>
<element name="TCustomPage.CheckNewParent.AParent">
<short>Parent control examined in the method.</short>
</element>

<element name="TCustomPage.PageIndex">
<short>Ordinal position for the page in the parent control.</short>
<descr>
<p>
<var>PageIndex</var> is an Integer property which contains the ordinal 
position for the page control in its <var>Parent</var> control. Setting a new 
value for the property causes the Parent control to call its 
<var>MoveTab</var> method to reorder the pages. This action is performed when 
the Parent control is descended from <var>TCustomTabControl</var>.
</p>
</descr>
<seealso>
<link id="TCustomTabControl"/>
</seealso>
</element>

<element name="TCustomPage.TabVisible">
<short>Indicates if the tab in the Parent control is visible.</short>
<descr>
<p>
<var>TabVisible</var> indicates if the Tab in the <var>Parent</var> control 
is visible.
</p>
<p>
Changing the value in the property cause the Parent control to be updated to 
reflect the new value. No actions are performed in the method at design-time, 
or when the property value is not different than the stored value.
</p>
<p>
When the <var>Parent</var> control has been assigned and has a handle 
allocated, the TCustomTabControl in Parent is updated to reflect the new 
value for the property. When <b>True</b>, the active page in the Parent 
control is changed to the current page instance if one has not already been 
assigned in the Parent. The page and its handle are removed from the Tab 
control when the property value is <b>False</b>.
</p>
<p>
Use <var>IsControlVisible</var> to determine if the page is currently the 
active page displayed in the Parent tab control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomPage.ImageIndex">
<short>Ordinal position for the image associated with the page.</short>
<descr>
<p>
<var>ImageIndex</var> contains the ordinal position in an image list for the 
image associated with the page instance. The default value for the property 
is <b>-1</b> and indicates that an image has not been assigned for the page. 
The image list is a property available in the Parent control.
</p>
<p>
Changing the value for the property causes the widgetset class to be notified 
using its UpdateTabProperties method.
</p>
<p>
No actions are performed in the method during LCL component streaming, or 
when the Handle for the control has not been allocated.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomPage.Left">
<short>
Not stored in LCL component streaming for TCustomPage.
</short>
<descr>
<p>
The value for the Left property is not stored in the LCL component streaming 
mechanism for TCustomPage.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Left">TControl.Left</link>
</seealso>
</element>

<element name="TCustomPage.Top">
<short>
Not stored in LCL component streaming for TCustomPage.
</short>
<descr>
<p>
The value for the Top property is not stored in the LCL component streaming 
mechanism for TCustomPage.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Left">TControl.Left</link>
</seealso>
</element>

<element name="TCustomPage.Width">
<short>
Not stored in LCL component streaming for TCustomPage.
</short>
<descr>
<p>
The value for the Width property is not stored in the LCL component streaming 
mechanism for TCustomPage.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Width">TControl.Width</link>
</seealso>
</element>

<element name="TCustomPage.Height">
<short>
Not stored in LCL component streaming for TCustomPage.
</short>
<descr>
<p>
The value for the Height property is not stored in the LCL component 
streaming mechanism for TCustomPage.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
</seealso>
</element>

<element name="TCustomPage.TabOrder">
<short>
Not stored in LCL component streaming for TCustomPage.
</short>
<descr>
<p>
The value for the TabOrder property is not stored in the LCL component 
streaming mechanism for TCustomPage.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.TabOrder">TWinControl.TabOrder</link>
</seealso>
</element>

<element name="TCustomPage.Visible">
<short>
Not stored in LCL component streaming for TCustomPage.
</short>
<descr>
<p>
The value for the Visible property is not stored in the LCL component 
streaming mechanism for TCustomPage.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
</seealso>
</element>

<element name="TCustomPage.OnHide">
<short>Event handler signalled when the page is hidden.</short>
<descr>
<p>
<var>OnHide</var> is a <var>TNotifyEvent</var> property with the event 
handler signalled when the page is hidden. OnHide is signalled from the 
<var>DoHide</var> method, and occurs when the value in the <var>Visible</var> 
property is set to <b>False</b>.
</p>
<p>
Applications can implement and assign a handler routine to respond to the 
event notification. The <var>Sender</var> argument contains the 
<var>TCustomPage</var> instance for the event notification.
</p>
</descr>
</element>

<element name="TCustomPage.OnShow">
<short>Event handler signalled when the page becomes visible.</short>
<descr>
<p>
<var>OnShow</var> is a <var>TNotifyEvent</var> property with the event 
handler signalled when the page becomes visible. OnShow is signalled from the 
<var>DoShow</var> method, and occurs when the value in the <var>Visible</var> 
property is set to <b>True</b>.
</p>
<p>
Applications can implement and assign a handler routine to respond to the 
event notification. The <var>Sender</var> argument contains the 
<var>TCustomPage</var> instance for the event notification.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomPageClass">
<short>Class reference used to create a new TCustomPage instance.</short>
<descr/>
<seealso/>
</element>

<element name="TNBBasePages">
<short>Ancestor for the TNBPages class.</short>
<descr>
<p>
<var>TNBBasePages</var> specifies the ancestor for TNBPages, and provides 
virtual abstract methods used to maintain a list of TCustomPage objects 
associated with a TCustomTabControl (also called a "notebook"). Use the 
TNBPages descendant which provides concrete method implementations and 
additional properties and methods for the purpose.
</p>
</descr>
<seealso>
<link id="TNBPages"/>
</seealso>
</element>

<element name="TNBBasePages.IndexOfPage">
<short>Gets the ordinal position for the specified page object.</short>
<descr/>
<seealso/>
</element>
<element name="TNBBasePages.IndexOfPage.Result">
<short>
Ordinal position for the specified page object, or -1 when not found.
</short>
</element>
<element name="TNBBasePages.IndexOfPage.AnObject">
<short>Page object to locate in the list.</short>
</element>

<element name="TNBBasePages.InsertPage">
<short>Inserts the specified page at the given position in the list.</short>
<descr/>
<seealso/>
</element>
<element name="TNBBasePages.InsertPage.Index">
<short>Ordinal position where the page is inserted.</short>
</element>
<element name="TNBBasePages.InsertPage.APage">
<short>Page object inserted in the method.</short>
</element>

<element name="TNBBasePages.DeletePage">
<short>Deletes the page at the specified position in the list.</short>
<descr/>
<seealso/>
</element>
<element name="TNBBasePages.DeletePage.Index">
<short>Ordinal position for the page deleted in the method.</short>
</element>

<element name="TNBBasePages.GetPage">
<short>
Gets the page object stored at the specified position in the list.
</short>
<descr/>
<seealso/>
</element>
<element name="TNBBasePages.GetPage.Result">
<short>Page object stored at the specified position in the list.</short>
</element>
<element name="TNBBasePages.GetPage.Index">
<short>Ordinal position in the list for the requested page object.</short>
</element>

<element name="TNBBasePages.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
Calls the inherited constructor. Please note: The value in theNotebook is 
ignored in the method. Use the derived TNBPages class which stores the 
notebook where the page objects are used.
</p>
</descr>
<seealso/>
</element>
<element name="TNBBasePages.Create.theNotebook">
<short>
Notebook (or custom tab control) for the page objects; Ignored in the method.
</short>
</element>

<element name="TNBBasePagesClass">
<short>Class reference used to create new instances of TNBBasePages.</short>
<descr/>
<seealso/>
</element>

<element name="TNBPages">
<short>Implements a list of pages used in TCustomTabControl.</short>
<descr>
<p>
<var>TNBPages</var> is a <var>TNBBasePages</var> descendant which implements 
a list of pages used in <var>TCustomTabControl</var>.
</p>
<p>
TNBPages extends the ancestor class to include properties for the 
TCustomTabControl which owns the list of pages (<var>Notebook</var>), and the 
internal list used to store the <var>TCustomPage</var> instances 
(<var>PageList</var>). It implements the abstract virtual methods defined in 
the ancestor, and provides additional methods to maintain the pages in 
PageList.
</p>
</descr>
<seealso>
<link id="TCustomPage"/>
<link id="TCustomTabControl"/>
<link id="TNBBasePages"/>
</seealso>
</element>

<!-- private -->
<element name="TNBPages.FPageList"/>
<element name="TNBPages.FNotebook"/>

<element name="TNBPages.PageListChange">
<short>Implements the OnChange event handler for the page list.</short>
<descr/>
<seealso/>
</element>
<element name="TNBPages.PageListChange.Ptr"/>
<element name="TNBPages.PageListChange.AnAction"/>

<element name="TNBPages.Get">
<short>Implements read access to values for the Strings property.</short>
<descr>
<p>
Read access is redirected to the <var>PageList</var> property. The return 
value contains the <var>Caption</var> for the <var>TCustomPage</var> instance 
stored at the specified position in PageList.
</p>
</descr>
<seealso>
<link id="TNBPages.PageList"/>
<link id="#rtl.classes.TStringList">TStringList</link>
</seealso>
</element>
<element name="TNBPages.Get.Result">
<short>Returns the Caption for the page.</short>
</element>
<element name="TNBPages.Get.Index">
<short>Ordinal position for the requested value.</short>
</element>

<element name="TNBPages.GetCount">
<short>
Gets the value for the Count property.
</short>
<descr>
<p>
GetCount is an overridden method in TNBPages, and returns the number of items 
stored in <var>PageList</var>.
</p>
</descr>
<seealso>
<link id="TNBPages.PageList"/>
</seealso>
</element>
<element name="TNBPages.GetCount.Result">
<short>Number of pages in the class instance.</short>
</element>

<element name="TNBPages.GetObject">
<short>
Gets the value for the indexed Objects property.
</short>
<descr>
<p>
<var>GetObject</var> is an overridden method in <var>TNBPages</var>, and 
redirects indexed object access to the <var>PageList</var> property. The 
return value is a <var>TObject</var> instance, and must be cast to 
<var>TCustomPage</var> to access its properties and methods.
</p>
<p>
Use <var>GetPage</var> to get a page in PageList as a TCustomPage instance.
</p>
</descr>
<seealso>
<link id="TNBPages.GetPage"/>
<link id="TNBPages.PageList"/>
<link id="#rtl.classes.TStringList">TStringList</link>
</seealso>
</element>
<element name="TNBPages.GetObject.Result">
<short>Object stored at the specified position.</short>
</element>
<element name="TNBPages.GetObject.Index">
<short>Ordinal position for the object requested in the method.</short>
</element>

<element name="TNBPages.Put">
<short>
Re-implements the method used to store a string value at a specified position 
in the list.
</short>
<descr>
<p>
Stores the value in S to the Caption property for the TCustomPage instance in 
PageList.
</p>
</descr>
<seealso>
<link id="TNBPages.PageList"/>
<link id="#rtl.classes.TStringList">TStringList</link>
</seealso>
</element>
<element name="TNBPages.Put.Index">
<short>Ordinal position where the string value is stored.</short>
</element>
<element name="TNBPages.Put.S">
<short>String value stored at the specified position in the list.</short>
</element>

<element name="TNBPages.IndexOfPage">
<short>Gets the position in PageList for the specified page.</short>
<descr/>
<seealso/>
</element>
<element name="TNBPages.IndexOfPage.Result">
<short>Ordinal position for the page instance, or -1 when not found.</short>
</element>
<element name="TNBPages.IndexOfPage.AnObject">
<short>TCustomPage instance to locate in the list of pages.</short>
</element>

<element name="TNBPages.InsertPage">
<short>
Inserts a page instance at the specified position in the page list.
</short>
<descr/>
<seealso/>
</element>
<element name="TNBPages.InsertPage.Index">
<short>Ordinal position in the page list for the inserted value.</short>
</element>
<element name="TNBPages.InsertPage.APage">
<short>Page instance inserted into the page list.</short>
</element>

<element name="TNBPages.DeletePage">
<short>
Deletes the page stored at the specified position in the page list.
</short>
<descr/>
<seealso/>
</element>
<element name="TNBPages.DeletePage.Index">
<short>Ordinal position for the page removed from the page list.</short>
</element>

<element name="TNBPages.GetPage">
<short>Gets the page stored at the specified position in PageList.</short>
<descr>
<p>
<var>GetPage</var> implements the abstract method defined in the ancestor, 
and is used to get a <var>TCustomPage</var> instance stored at the specified 
position in <var>PageList</var>. GetPage calls the GetObject method to 
retrieve the page, and casts it to the TCustomPage type used in the return 
value.
</p>
</descr>
<seealso/>
</element>
<element name="TNBPages.GetPage.Result">
<short>TCustomPage instance stored at the specified position.</short>
</element>
<element name="TNBPages.GetPage.Index">
<short>Ordinal position in PageList for the requested page.</short>
</element>

<element name="TNBPages.PageList">
<short>List with the TCustomPage instances for the class instance.</short>
<descr>
<p>
<var>PageList</var> is a read-only <var>TListWithEvent</var> property which 
contains the <var>TCustomPage</var> instances for the class instance.
</p>
<p>
PageList includes an <var>OnChange</var> event handler used to perform 
notifications when values are added, retrieved, or deleted in the list. The 
private <var>PageListChange</var> method implements the handler, and ensures 
that new items in the list are parented to the control in <var>Notebook</var>.
</p>
<p>
Most methods in <var>TNBPages</var> are redirected to PageList to get or set 
their values.
</p>
</descr>
<seealso>
<link id="#lcl.lcltype.TListWithEvent">TListWithEvent</link>
<link id="#rtl.classes.TListNotification">TListNotification</link>
</seealso>
</element>

<element name="TNBPages.Notebook">
<short>Provides a reference to the control which owns the pages.</short>
<descr/>
<seealso/>
</element>

<element name="TNBPages.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TNBPages</var>, and calls the 
inherited <var>Create</var> method. It sets up the list of pages for the 
notebook (tab control).
</p>
</descr>
<seealso>
<link id="#rtl.system.TObject.Create">TObject.Create</link>
</seealso>
</element>
<element name="TNBPages.Create.theNotebook">
<short>Control which owns the class instance (and its pages).</short>
</element>

<element name="TNBPages.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
Frees and releases resources allocated to PageList.
</p>
</descr>
<seealso>
<link id="TNBPages.PageList"/>
<link id="TNBPages.Create"/>
</seealso>
</element>

<element name="TNBPages.Clear">
<short>Removes all pages stored in the class instance.</short>
<descr>
<p>
<var>Clear</var> is an overridden method in <var>TNBPages</var> used to remove 
all of the <var>TCustomPage</var> instances in <var>PageList</var>. Pages are 
deleted (in reverse order) by calling the Delete method, but the active page 
is skipped to avoid activating other pages in the process. The active page is 
deleted last.
</p>
<p>
The inherited Clear method is <b>not</b> called in the implementation.
</p>
</descr>
<seealso>
<link id="TNBPages.Delete"/>
<link id="TNBPages.NoteBook"/>
<link id="TNBPages.PageList"/>
<link id="TCustomTabControl.PageCount"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="#rtl.classes.TStrings.Clear">TStrings.Clear</link>
</seealso>
<version>
Modified in LCL version 2.2.6 to avoid OnChanging and OnChange events when 
pages are deleted.
</version>
</element>

<element name="TNBPages.Delete">
<short>
Deletes the page stored at the specified position in the page list.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStrings.Delete">TStrings.Delete</link>
</seealso>
</element>
<element name="TNBPages.Delete.Index">
<short>Ordinal position for the page removed from the list.</short>
</element>

<element name="TNBPages.Insert">
<short>
Inserts a new page with the given name at the specified position in PageList.
</short>
<descr>
<p>
<var>Insert</var> calls the <var>GetPageClass</var> method in 
<var>NoteBook</var> to get the class reference used to create the new page. 
The owner of the page instance is the NoteBook control (or its owner when 
assigned). The value in <var>S</var> is assigned as the Caption in the 
TCustomPage instance. The <var>InsertPage</var> method in NoteBook is called 
to store the TCustomPage instance at the position in <var>Index</var>.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TStrings.Insert">TStrings.Insert</link>
</seealso>
</element>
<element name="TNBPages.Insert.Index">
<short>Ordinal position where the new page is stored.</short>
</element>
<element name="TNBPages.Insert.S">
<short>Name (Caption) used for the new page instance.</short>
</element>

<element name="TNBPages.Move">
<short>
Moves a page from the current index to a new position in PageList.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStrings.Move">TStrings.Move</link>
</seealso>
</element>
<element name="TNBPages.Move.CurIndex">
<short>
Current position in PageList where the page is stored.
</short>
</element>
<element name="TNBPages.Move.NewIndex">
<short>
New position in PageList where the page is stored.
</short>
</element>

<element name="TNBNoPages">
<short>
Re-implements an empty page container for TCustomTabControl controls.
</short>
<descr>
<p>
<var>TNBNoPages</var> is a <var>TNBBasePages</var> descendant which 
re-implements the page container for a TCustomTabControl. As the name 
implies, it does not actually use TCustomPages instances in the container. It 
removes the methods used to add and maintain the values in the class instance.
</p>
</descr>
<seealso/>
</element>

<element name="TNBNoPages.Get">
<short>
Gets the caption for the page at the specified ordinal position.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStrings">TStrings</link>
</seealso>
</element>
<element name="TNBNoPages.Get.Result">
<short>
Caption for the TCustomPage instance at the specified position.
</short>
</element>
<element name="TNBNoPages.Get.Index">
<short>
Ordinal position in the list of pages for the requested value.
</short>
</element>

<element name="TNBNoPages.GetCount">
<short>
Gets the value for the Count property.
</short>
<descr>
<p>Always returns 0 (zero) in TNBNoPages.</p>
</descr>
<seealso/>
</element>
<element name="TNBNoPages.GetCount.Result">
<short>
Value for the Count property.
</short>
</element>

<element name="TNBNoPages.IndexOfPage">
<short>
Gets the ordinal position in the page list for the specified page object.
</short>
<descr>
<p>Always returns -1 in TNBNoPages.</p>
</descr>
<seealso/>
</element>
<element name="TNBNoPages.IndexOfPage.Result">
<short>
Always returns -1 in TNBNoPages.
</short>
</element>
<element name="TNBNoPages.IndexOfPage.AnObject">
<short>
Page object to locate in the page list. Not used in the method.
</short>
</element>

<element name="TNBNoPages.GetPage">
<short>
Gets the page object at the specified position in the page list.
</short>
<descr>
<p>Always returns <b>Nil</b> in TNBNoPages.</p>
</descr>
<seealso/>
</element>
<element name="TNBNoPages.GetPage.Result">
<short>
Always returns <b>Nil</b> in TNBNoPages.
</short>
</element>
<element name="TNBNoPages.GetPage.Index">
<short>
Ordinal position for the page object retrieved in the method. Not used in 
TNBNoPages.
</short>
</element>

<element name="TTabChangingEvent">
<short>
<var>TTabChangingEvent</var> - generic event handling method for a change in 
a notebook Tab.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabChangingEvent.Sender">
<short>Notebook for the event notification.</short>
</element>
<element name="TTabChangingEvent.AllowChange">
<short>Indicates if the tab change can be performed.</short>
</element>

<element name="TTabPosition">
<short>
Represents the position for a tab relative to its page.
</short>
<descr>
<p>
<var>TTabPosition</var> is an enumerated type with values that represent the 
position for the tabs in <var>TCustomTabControl</var> relative to its page. 
TTabPosition is the type used to implement the <var>TabPosition</var> 
property in TCustomTabControl.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.TabPosition"/>
</seealso>
</element>
<element name="TTabPosition.tpTop">
<short>Displays tabs along the top edge of the page.</short>
</element>
<element name="TTabPosition.tpBottom">
<short>Displays tabs along the bottom edge of the page.</short>
</element>
<element name="TTabPosition.tpLeft">
<short>Displays tabs vertically along the left edge of the page.</short>
</element>
<element name="TTabPosition.tpRight">
<short>Displays tabs vertically along the right edge of the page.</short>
</element>

<element name="TTabStyle">
<short>
<var>TTabStyle</var> - enumerated type for tab style: normal, buttons or flat 
buttons.
</short>
<descr>
<p>
<var>TTabStyle</var> is an enumerated type with values that define the 
drawing style used for tabs in <var>TCustomTabControl</var>. TTabStyle is the 
type used to implement the <var>Style</var> property in TCustomTabControl.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Style"/>
</seealso>
</element>
<element name="TTabStyle.tsTabs">
<short>
Tabs are drawn using the tab style common to manilla file folders.
</short>
</element>
<element name="TTabStyle.tsButtons">
<short>Tabs are drawn as buttons.</short>
</element>
<element name="TTabStyle.tsFlatButtons">
<short>Tabs are drawn as buttons using a flat (non-raised) appearance.</short>
</element>

<element name="TTabGetImageEvent">
<short>
Specifies an event handler type used to get the position in an image list for 
the image on a tab.
</short>
<descr>
<p>
<var>TTabGetImageEvent</var> is the type used for the OnGetImageIndex event 
handler in TCustomTabControl.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.OnGetImageIndex"/>
</seealso>
</element>
<element name="TTabGetImageEvent.Sender">
<short>
Object (TCustomTabControl) for the event notification. Provides access to the 
pages and the image list for the control.
</short>
</element>
<element name="TTabGetImageEvent.TabIndex">
<short>
Ordinal position for the tab (or page) examined in the handler.
</short>
</element>
<element name="TTabGetImageEvent.ImageIndex">
<short>
Used to return the ordinal position for the image displayed for the specified 
tab. Return -1 if an image index is not assigned or available for the tab.
</short>
</element>

<element name="TCTabControlOption">
<short>
Represents the LCL options available for TCustomTabControl.
</short>
<descr/>
<seealso/>
</element>
<element name="TCTabControlOption.nboShowCloseButtons">
<short>
Enables close buttons on each tab control page. Requires support in the native 
tab control for a given platform.
</short>
</element>
<element name="TCTabControlOption.nboMultiLine">
<short>
Enables word wrapped, multi-line captions on tabs.
</short>
</element>
<element name="TCTabControlOption.nboHidePageListPopup">
<short>
Hides the pop-up list of tab pages.
</short>
</element>
<element name="TCTabControlOption.nboKeyboardTabSwitch">
<short>
Enables use of the tab key to change the active page on a tab control.
</short>
</element>
<element name="TCTabControlOption.nboShowAddTabButton">
<short>
Enables a button which adds a page to a tab control.
</short>
</element>
<element name="TCTabControlOption.nboDoChangeOnSetIndex">
<short>
Causes the OnChange event handler to be signalled when a value is assigned to 
the TabIndex property in a tab control.
</short>
</element>

<element name="TCTabControlOptions">
<short>
Set type used to store values from the TCTabControlOption enumeration.
</short>
<descr>
<p>
<var>TCTabControlOptions</var> is a set type used to store zero (0) or more 
values from the <var>TCTabControlOption</var> enumeration. When a value is 
included in the set, the corresponding option is enabled in a tab control.
</p>
<p>
TCTabControlOptions is the type used to implement the Options property in 
TCustomTabControl.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Options"/>
<link id="TCTabControlOption"/>
</seealso>
</element>

<element name="TCTabControlCapability">
<short>
Represents the capabilities which can be enabled for a notebook or tab control.
</short>
<descr/>
<seealso>
<link id="TCTabControlCapabilities"/>
<link id="TCustomTabControl.GetCapabilities"/>
</seealso>
</element>
<element name="TCTabControlCapability.nbcShowCloseButtons">
<short>
Indicates the widgetset class allows close buttons on each tab in a tab 
control.
</short>
</element>
<element name="TCTabControlCapability.nbcMultiLine">
<short>
Indicates the widgetset class allows multi-line captions on tabs in a tab 
control.
</short>
</element>
<element name="TCTabControlCapability.nbcPageListPopup">
<short>
Indicates the widgetset class displays a button for the pop-up page list for a tab control.
</short>
</element>
<element name="TCTabControlCapability.nbcShowAddTabButton">
<short>
Indicates the widgetset class displays a button to add a page to a tab control.
</short>
</element>
<element name="TCTabControlCapability.nbcTabsSizeable">
<short>
Indicates the widgetset class allows the size of a tab to be changed for a tab 
control.
</short>
</element>

<element name="TCTabControlCapabilities">
<short>
Set type used to store values from the TCTabControlCapability enumeration.
</short>
<descr/>
<seealso>
<link id="TCTabControlCapability"/>
<link id="TCustomTabControl.GetCapabilities"/>
</seealso>
</element>

<element name="TDrawTabEvent">
<short>
Specifies an event handler used to draw the tab at the given index to a 
display rectangle on a tab control.
</short>
<descr>
<p>
TDrawTabEvent is not used in the current LCL implementation.
</p>
</descr>
<seealso/>
</element>
<element name="TDrawTabEvent.Control"/>
<element name="TDrawTabEvent.TabIndex"/>
<element name="TDrawTabEvent.Rect"/>
<element name="TDrawTabEvent.Active"/>

<element name="TCustomTabControl">
<short>
Implements the base class for tabbed controls in the LCL.
</short>
<descr>
<p>
<var>TCustomTabControl</var> - base class for <var>TTabControl</var>, a 
series of <var>Tabs</var> along the edge of a display area; selection of a 
<var>Tab</var> governs the contents of the <var>DisplayRect</var>
</p>
<p>
A tab control has a series of <var>Tabs</var> and it may or may not contain 
pages.
</p>
</descr>
<seealso>
<link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
</seealso>
</element>

<!-- private -->
<element name="TCustomTabControl.FAccess"/>
<element name="TCustomTabControl.FAddingPages"/>
<element name="TCustomTabControl.FHotTrack"/>
<element name="TCustomTabControl.FImages"/>
<element name="TCustomTabControl.FImageWidth"/>
<element name="TCustomTabControl.FImageListChangeLink"/>
<element name="TCustomTabControl.FMultiSelect"/>
<element name="TCustomTabControl.FOnChanging"/>
<element name="TCustomTabControl.FOnCloseTabClicked"/>
<element name="TCustomTabControl.FOnGetImageIndex"/>
<element name="TCustomTabControl.fOnPageChanged"/>
<element name="TCustomTabControl.FOptions"/>
<element name="TCustomTabControl.FOwnerDraw"/>
<element name="TCustomTabControl.FPageIndex"/>
<element name="TCustomTabControl.FPageIndexOnLastChange"/>
<element name="TCustomTabControl.FRaggedRight"/>
<element name="TCustomTabControl.FScrollOpposite"/>
<element name="TCustomTabControl.FShowTabs"/>
<element name="TCustomTabControl.FStyle"/>
<element name="TCustomTabControl.FTabHeight"/>
<element name="TCustomTabControl.FTabPosition"/>
<element name="TCustomTabControl.FTabWidth"/>

<element name="TCustomTabControl.DoSendPageIndex">
<short>Notifies the widgetset class when PageIndex has been changed.</short>
</element>

<element name="TCustomTabControl.DoSendShowTabs">
<short>Notifies the widgetset class when ShowTabs has been changed.</short>
</element>

<element name="TCustomTabControl.DoSendTabPosition">
<short>Notifies the widgetset class when TabPosition has been changed.</short>
</element>

<element name="TCustomTabControl.DoSendTabSize">
<short>Notifies the widgetset class when TabSize has been changed.</short>
</element>

<element name="TCustomTabControl.DoImageListChange">
<short>Notifies the widgetset class when Images has been changed.</short>
</element>

<element name="TCustomTabControl.GetActivePage">
<short>Gets the value for the ActivePage property.</short>
<descr>
<p>
Uses an internal index value to get the caption for the TCustomPage in the 
Page property.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.ActivePage"/>
<link id="TCustomTabControl.Page"/>
</seealso>
</element>
<element name="TCustomTabControl.GetActivePage.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomTabControl.GetActivePageComponent">
<short>Gets the value for the ActivePageComponent property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.ActivePageComponent"/>
</seealso>
</element>
<element name="TCustomTabControl.GetActivePageComponent.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomTabControl.GetDisplayRect">
<short>Gets the value for the DisplayRect property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.DisplayRect"/>
</seealso>
</element>
<element name="TCustomTabControl.GetDisplayRect.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomTabControl.GetMultiLine">
<short>Gets the value for the MultiLine property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.MultiLine"/>
</seealso>
</element>
<element name="TCustomTabControl.GetMultiLine.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomTabControl.FindVisiblePage">
<short>Locates a visible page in the tab control.</short>
<descr>
<p>
<var>FindVisiblePage</var> is used to locate a Page in the tab control with 
its TabVisible property set to <b>True</b>.
</p>
<p>
Index specifies the ordinal position in Pages property that is the search 
locus. FindVisiblePage searches the Page collection in ascending order 
starting at the position in Index. If a visible page is not found, Page is 
searched in descending order starting at Index -1.
</p>
<p>
The return value contains the ordinal position in the indexed Page property 
where the visible tab was located, or -1 when there are no visible tabs in 
Page.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.FindVisiblePage.Result">
<short>
Ordinal position for the visible page tab, or -1 when a visible tab is not 
found.
</short>
</element>
<element name="TCustomTabControl.FindVisiblePage.Index">
<short>Ordinal position where the search is started.</short>
</element>

<element name="TCustomTabControl.IsStoredActivePage">
<short>Implements the storage specifier for the ActivePage property.</short>
<descr>
<p>
Always returns <b>False</b> in <var>TCustomTabControl</var>.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.IsStoredActivePage.Result">
<short>Always returns <b>False</b> in TCustomTabControl.</short>
</element>

<element name="TCustomTabControl.MoveTab">
<short>
Moves the specified page control to the position in NewIndex.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTabControl.MoveTab.Sender">
<short>Page object moved in the method.</short>
</element>
<element name="TCustomTabControl.MoveTab.NewIndex">
<short>New position in the list of pages.</short>
</element>

<element name="TCustomTabControl.SetMultiLine">
<short>Sets the value for the MultiLine property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.SetMultiLine"/>
</seealso>
</element>
<element name="TCustomTabControl.SetMultiLine.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetStyle">
<short>Sets the value for the Style property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.Style"/>
</seealso>
</element>
<element name="TCustomTabControl.SetStyle.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.WSMovePage">
<short>
Notifies the widgetset class when a page is moved in the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTabControl.WSMovePage.APage"/>
<element name="TCustomTabControl.WSMovePage.NewIndex"/>

<element name="TCustomTabControl.PageRemoved">
<short>
Performs action needed when the current page object is removed from the 
tabbed control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTabControl.PageRemoved.Index">
<short>
Ordinal position for the page object removed from the tabbed control.
</short>
</element>

<element name="TCustomTabControl.SetActivePage">
<short>Sets the value for the ActivePage property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.ActivePage"/>
</seealso>
</element>
<element name="TCustomTabControl.SetActivePage.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetActivePageComponent">
<short>Sets the value for the ActivePageComponent property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.ActivePageComponent"/>
</seealso>
</element>
<element name="TCustomTabControl.SetActivePageComponent.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetImages">
<short>Sets the value for the Images property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.Images"/>
</seealso>
</element>
<element name="TCustomTabControl.SetImages.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetImagesWidth">
<short>Sets the value for the ImagesWidth property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.ImagesWidth"/>
</seealso>
</element>
<element name="TCustomTabControl.SetImagesWidth.AImagesWidth">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetPageIndex">
<short>Sets the value for the PageIndex property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.PageIndex"/>
</seealso>
</element>
<element name="TCustomTabControl.SetPageIndex.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetPages">
<short>Sets the value for the Pages property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.Pages"/>
<link id="TNBPages"/>
</seealso>
</element>
<element name="TCustomTabControl.SetPages.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetShowTabs">
<short>Sets the value for the ShowTabs property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.ShowTabs"/>
</seealso>
</element>
<element name="TCustomTabControl.SetShowTabs.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetTabHeight">
<short>Sets the value for the TabHeight property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.TabHeight"/>
</seealso>
</element>
<element name="TCustomTabControl.SetTabHeight.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetTabPosition">
<short>Sets the value for the ShowTabs property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.TabPosition"/>
</seealso>
</element>
<element name="TCustomTabControl.SetTabPosition.tabPos">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.SetTabWidth">
<short>Sets the value for the TabWidth property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.TabWidth"/>
</seealso>
</element>
<element name="TCustomTabControl.SetTabWidth.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.ShowCurrentPage">
<short>
Ensures that the current page has its Visible property set to <b>True</b>.
</short>
<descr>
<p>
<var>ShowCurrentPage</var> checks the value in <var>PageIndex</var> to 
determine if a valid page index has been specified. No actions are performed 
in the method when PageIndex is less than <b>0</b> or greater than 
<b>PageCount - 1</b>.
</p>
<p>
ShowCurrentPage gets the <var>TCustomPage</var> instance in <var>Page</var> 
at the position in <var>PageIndex</var>, and sets its <var>Visible</var> 
property to <b>True</b>. If the Page is Enabled, it <var>SetFocus</var> 
method is called.
</p>
<p>
ShowCurrentPage sets the Visible property in the previously selected Page to 
<b>False</b>.
</p>
</descr>
<seealso/>
</element>

<!-- private -->
<element name="TCustomTabControl.TabHeightIsStored"/>
<element name="TCustomTabControl.TabHeightIsStored.Result"/>
<element name="TCustomTabControl.TabWidthIsStored"/>
<element name="TCustomTabControl.TabWidthIsStored.Result"/>

<element name="TCustomTabControl.UpdateAllDesignerFlags">
<short>
Updates control style flags to hide or display pages in the control at 
design-time.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTabControl.UpdateDesignerFlags">
<short>
Updates control style flags for the specified page to hide or display the 
control at design-time.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTabControl.UpdateDesignerFlags.APageIndex">
<short>Ordinal position for the Page updated in the method.</short>
</element>

<element name="TCustomTabControl.DoImageListDestroyResolutionHandle">
<short>
Notifies the widgetset class when the handle for the image resolution is 
freed.
</short>
<descr/>
<seealso>
<link id="TCustomTabControl.SetImageListAsync"/>
<link id="#LCL.forms.TApplication.QueueAsyncCall">TApplication.QueueAsyncCall</link>
</seealso>
</element>
<element name="TCustomTabControl.DoImageListDestroyResolutionHandle.Sender">
<short>Image list for the event notification.</short>
</element>
<element name="TCustomTabControl.DoImageListDestroyResolutionHandle.AWidth">
<short>Not used in the method.</short>
</element>
<element name="TCustomTabControl.DoImageListDestroyResolutionHandle.AReferenceHandle">
<short>Not used in the method.</short>
</element>

<element name="TCustomTabControl.SetImageListAsync">
<short>
Performs actions needed when an image list in the control is changed.
</short>
<descr>
<p>
Queued and executed asynchronously by the Application instance.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.SetImageListAsync.Data">
<short>Pointer to the Data for the asynchronous event.</short>
</element>

<!-- protected -->
<element name="TCustomTabControl.DoAutoAdjustLayout">
<short>
Performs actions needed to apply the specified auto-adjust layout policy.
</short>
<descr>
<p>
<var>DoAutoAdjustLayout</var> is an overridden method in 
<var>TCustomTabControl</var> used to apply the specified auto-adjustment 
layout policy to the tabbed control. It calls the inherited method on entry to 
adjust the size, position, and alignment for the control including border 
spacing.
</p>
<p>
DoAutoAdjustLayout ensures that the width and height for the tabs and their 
assigned images are updated when needed. The image list in the widgetset class 
is updated (when assigned) to use the resolution needed for the PPI setting in 
Font. Values in TabWidth and TabHeight are adjusted (when assigned) using the 
scaling factors in AXProportion and AYProportion.
</p>
<p>
DoAutoAdjustLayout method is called from the DoAutoAdjustLayout method, and 
occurs when a scaled form (and its controls) are displayed in an application.
</p>
</descr>
<version>
Modified in LCL version 3.0 to apply scaling factors to TabWidth and TabHeight.
</version>
<seealso>
<link id="TCustomTabControl.Images"/>
<link id="#lcl.controls.TControl.DoAutoAdjustLayout">TControl.DoAutoAdjustLayout</link>
<link id="#lcl.controls.TLayoutAdjustmentPolicy">TLayoutAdjustmentPolicy</link>
</seealso>
</element>
<element name="TCustomTabControl.DoAutoAdjustLayout.AMode">
<short>
Layout adjustment policy applied in the method.
</short>
</element>
<element name="TCustomTabControl.DoAutoAdjustLayout.AXProportion">
<short>
Horizontal scaling factor for a layout adjustment policy.
</short>
</element>
<element name="TCustomTabControl.DoAutoAdjustLayout.AYProportion">
<short>
Vertical scaling factor for a layout adjustment policy.
</short>
</element>

<element name="TCustomTabControl.GetPageClass">
<short>
Gets the class type used to create new page instances in the control.
</short>
<descr/>
<seealso>
<link id="TCustomTabControl.InsertPage"/>
<link id="TNBPages.InsertPage"/>
</seealso>
</element>
<element name="TCustomTabControl.GetPageClass.Result">
<short>Class type used to create new page instances in the control.</short>
</element>

<element name="TCustomTabControl.GetListClass">
<short>
Gets the class type used to create the page list class for the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTabControl.GetListClass.Result">
<short>Class type used to access a list of pages in the control.</short>
</element>

<element name="TCustomTabControl.SetOptions">
<short>Sets the value for the Options property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.Options"/>
</seealso>
</element>
<element name="TCustomTabControl.SetOptions.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTabControl.AddRemovePageHandle">
<short>
Notifies the widgetset class when a page handle is added or removed in the 
control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTabControl.AddRemovePageHandle.APage">
<short>Page instance with the handle added or removed.</short>
</element>

<element name="TCustomTabControl.CNNotify">
<short>Handles the CN_NOTIFY message for the control.</short>
<descr>
<p>
Handles TCN_SELCHANGE and TCN_SELCHANGING notification codes in Message.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.CNNotify.Message">
<short>Control notification message handled in the method.</short>
</element>

<element name="TCustomTabControl.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomTabControl.CreateWnd">
<short>
Creates the Handle for the widgetset object and displays the selected tab and 
page.
</short>
<descr>
<p>
Calls the inherited method on entry. Adds or removes handles for pages on the 
control. Displays the visible tabs and the active page for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
</seealso>
</element>

<element name="TCustomTabControl.Loaded">
<short>
Notifies the widgetset class of the active page when the control Handle is 
allocated.
</short>
<descr>
<p>
Notifies the widgetset class of the value in PageIndex when the control 
Handle has been allocated.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
</seealso>
</element>

<element name="TCustomTabControl.DoChange">
<short>
Performs actions needed when the active page for the control has been changed.
</short>
<descr>
<p>
Performs actions needed when the active page for the control has been changed.
Signals the OnChange event handler (when assigned).
Called when a new value is assigned to PageIndex.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTabControl.InitializeWnd">
<short>
Copies cached control properties and initializes a new tab control instance. 
</short>
<descr>
<p>
<var>InitializeWnd</var> is an overridden method in 
<var>TCustomTabControl</var>. It is called after the Handle has been created, 
and before child handles are created. InitializeWnd ensures that internal 
members in the class instance are initialized when the handle is allocated.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
</seealso>
</element>

<element name="TCustomTabControl.Change">
<short>
Performs actions to show or hide pages when the current page is changed.
</short>
<descr>
<p>
<var>Change</var> is a method used to performs actions needed to show or hide 
pages in the tabbed control.
</p>
<p>
Change calls ShowCurrentPage to display the page in PageIndex, and hide the 
previously visible page in the tabbed control. Change calls DoChange when the 
control is not being destroyed, or loaded in the LCL component streaming 
mechanism.
</p>
<p>
Change is called from the MoveTab method, and when selection change messages 
are handled for the control.
</p>
</descr>
<version>
Modified in LCL version 3.4 to call MaybeSelectFirstControlOnPage before
OnChange is signalled for the active page.
</version>
<seealso>
<link id="TCustomTabControl.ActivePage"/>
<link id="TCustomTabControl.MaybeSelectFirstControlOnPage"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomTabControl.TabIndex"/>
<link id="TCustomTabControl.DoChange"/>
<link id="TCustomTabControl.OnChange"/>
</seealso>
</element>

<element name="TCustomTabControl.KeyDown">
<short>Handles page navigation using the Tab key.</short>
<descr>
<p>
<var>KeyDown</var> is overridden in TCustomTabControl to handle use of the 
<b>Tab</b> key (<b>VK_TAB</b>) to change the active page in the tabbed 
control.
</p>
<p>
The <var>Options</var> property must contain the value 
<var>nboKeyboardTabSwitch</var> to enable the tab switching feature. Pressing 
<b>Ctrl+Tab</b> switches to the next page by incrementing the 
<var>PageIndex</var> value. Pressing <b>Ctrl+Shift+Tab</b> switches to the 
previous page by decrementing the <var>PageIndex</var> value.
</p>
<p>
If <var>Key</var> is not the <b>VK_TAB</b> virtual key code, the inherited 
method is called to handle the values in <var>Key</var> and <var>Shift</var>.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Options"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCTabControlOption"/>
<link id="#lcl.controls.TWinControl.KeyDown">TWinControl.KeyDown</link>
</seealso>
</element>
<element name="TCustomTabControl.KeyDown.Key">
<short>Virtual key code examined in the method.</short>
</element>
<element name="TCustomTabControl.KeyDown.Shift">
<short>Key modifier(s) used in the method.</short>
</element>

<element name="TCustomTabControl.MaybeSelectFirstControlOnPage">
<short>
Updates the ActiveControl on the parent form when the specified page becomes 
active.
</short>
<descr>
<p>
<var>MaybeSelectFirstControlOnPage</var> is a method used to ensure that the 
active control on a form is properly updated when the page on the tab control 
is changed. It prevents the tabbed control from stealing focus if the active 
control on the parent form is not the tabbed control or one of its child 
controls.
</p>
<p>
<var>APage</var> is used to find the next control in the tab order for the 
page. If a control is found, it is assigned as the ActiveControl on the parent 
form.
</p>
<p>
No actions are performed in the method if any of the following conditions are 
detected:
</p>
<ul>
<li>
The parent form for the tab control has not been assigned.
</li>
<li>
APage has not been assigned.
</li>
<li>
APage is not visible.
</li>
<li>
APage is not enabled.
</li>
<li>
APage does not have any child controls.
</li>
</ul>
<p>
MaybeSelectFirstControlOnPage is called from the Change method, and occurs 
when a new value is assigned to the TabIndex property. It occurs after the 
current Page on the tab control has been made visible and given focus. It is 
called before the OnChange event handler is signalled.
</p>
</descr>
<errors>
Raises an EAssertionFailed exception if a value has not been assigned to the 
APage argument.
</errors>
<version>
Added in LCL version 3.4.
</version>
<seealso>
<link id="TCustomTabControl.ActivePage"/>
<link id="TCustomTabControl.ActivePageComponent"/>
<link id="TCustomTabControl.Change"/>
<link id="TCustomTabControl.CanChange"/>
<link id="TCustomTabControl.OnChanging"/>
<link id="TCustomTabControl.OnChange"/>
<link id="TCustomTabControl.TabIndex"/>
<link id="#lcl.forms.GetParentForm">GetParentForm</link>
<link id="#lcl.forms.TCustomForm.ActiveControl">TCustomForm.ActiveControl</link>
<link id="#lcl.controls.TWinControl.FindNextControl">TWinControl.FindNextControl</link>
</seealso>
</element>
<element name="TCustomTabControl.ActivateFirstControlOnPage.APage">
<short>
Tab page with child controls examined in the method.
</short>
</element>

<element name="TCustomTabControl.ReadState" link="#lcl.controls.TControl.ReadState"/>
<element name="TCustomTabControl.ReadState.Reader"/>

<element name="TCustomTabControl.DialogChar">
<short>
Handles an accelerator key for the active page in the tabbed control.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.DialogChar">TControl.DialogChar</link>
</seealso>
</element>
<element name="TCustomTabControl.DialogChar.Result">
<short>
<b>True</b> if the accelerator was handled in the active page.
</short>
</element>
<element name="TCustomTabControl.DialogChar.Message">
<short>Message with the accelerator key examined in the method.</short>
</element>

<element name="TCustomTabControl.InternalSetPageIndex">
<short>
Updates the internal page index without triggering an OnChange event.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTabControl.InternalSetPageIndex.AValue">
<short>New value for the internal page index.</short>
</element>

<element name="TCustomTabControl.ShowControl">
<short>
Makes the specified page object the active page in the tabbed control.
</short>
<descr>
<p>
<var>ShowControl</var> gets the position for the control specified by the 
<var>APage</var> argument in the <var>Page</var> property, and makes it the 
active page in the tabbed control. If the control is not found in Page, the 
inherited ShowControl method is called to display the control.
</p>
<p>
ShowControl is provided for Delphi compatibility.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.IndexOf"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomTabControl.PageToTabIndex"/>
<link id="TCustomTabControl.TabToPageIndex"/>
<link id="#lcl.controls.TWinControl.ShowControl">TWinControl.ShowControl</link>
</seealso>
</element>
<element name="TCustomTabControl.ShowControl.APage">
<short>Page object to locate and display in the method.</short>
</element>

<element name="TCustomTabControl.IndexOfTabAt">
<short>
Returns the ordinal position for the visible tab located at the specified 
client coordinates.
</short>
<descr>
<p>
<var>IndexOfTab</var> is an overloaded method in <var>TCustomTabControl</var> 
used to get the position for a tab located at the client client coordinates. 
The overloaded variants allow the client position to be specified as separate 
Integer values, or as a TPoint instance where the X and Y members contain the 
client-relative coordinates.
</p>
<p>
IndexOfTabAt calls the GetTabIndexAtPos method in the widgetset class to get 
the ordinal tab position in the return value. The return value is -1 if a tab 
is not visible at the specified coordinates, or when the handle has not been 
allocated for the widget instance.
</p>
<p>
<b>Example Usage:</b>
</p>
<code>
APos := TabControl1.IndexOfTabAt(TabControl1.ScreenToClient(Mouse.CursorPos));
</code>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.IndexOfTabAt.Result">
<short>
Ordinal position in Tabs for the visible tab located at the specified 
coordinates, or -1 when not found or available.
</short>
</element>
<element name="TCustomTabControl.IndexOfTabAt.X">
<short>
Horizontal client coordinate for the tab position located in the method.
</short>
</element>
<element name="TCustomTabControl.IndexOfTabAt.Y">
<short>
Vertical client coordinate for the tab position located in the method.
</short>
</element>
<element name="TCustomTabControl.IndexOfTabAt.P">
<short>
TPoint instance with the client coordinates for the requested tab index.
</short>
</element>

<element name="TCustomTabControl.IndexOfPageAt">
<short>
Gets the ordinal position for the page object located at the specified client 
coordinates.
</short>
<descr>
<p>
<var>IndexOfPageAt</var> is an overloaded method in 
<var>TCustomTabControl</var> used to get the ordinal position for the page 
object located at the specified client coordinates. The overloaded variants 
allow the client coordinates to be specified as separate Integer values, or as 
a TPoint instance where the X and Y members contain the client-relative 
coordinates.
</p>
<p>
<b>Example Usage:</b>
</p>
<code>
APos := TabControl1.IndexOfPageAt(TabControl1.ScreenToClient(Mouse.CursorPos));
</code>
</descr>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.PageCount"/>
<link id="TCustomTabControl.Tabs"/>
<link id="TCustomTabControl.TabToPageIndex"/>
<link id="TCustomTabControl.IndexOfTabAt"/>
</seealso>
</element>
<element name="TCustomTabControl.IndexOfPageAt.Result">
<short>
Ordinal position for the page object located the specified client coordinates.
</short>
</element>
<element name="TCustomTabControl.IndexOfPageAt.X">
<short>
Horizontal client coordinate for the page position located in the method.
</short>
</element>
<element name="TCustomTabControl.IndexOfPageAt.Y">
<short>
Vertical client coordinate for the page position located in the method.
</short>
</element>
<element name="TCustomTabControl.IndexOfPageAt.P">
<short>
TPoint instance with the client coordinates for the requested page index.
</short>
</element>

<element name="TCustomTabControl.UpdateTabProperties">
<short>
Applies property changes for all of the pages on the tab control to the 
widgetset class instances.
</short>
<descr>
<p>
Calls the UpdateTabProperties method for the page objects defined in the widget instance.
</p>
<p>
No actions are performed in the method if the Handle has not been allocated 
for the widget instance.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.PageCount"/>
</seealso>
</element>

<element name="TCustomTabControl.GetControlClassDefaultSize">
<short>
<var>GetControlClassDefaultSize</var> returns its own defaults, overriding 
inherited values.
</short>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>
<element name="TCustomTabControl.GetControlClassDefaultSize.Result">
<short>
TSize instance with the default dimensions for a new instance of the tab 
control.
</short>
</element>

<element name="TCustomTabControl.Notification">
<short>
Handles a notification when a component is added to or removed from the 
control.
</short>
<descr>
<p>
<var>Notification</var> is overridden in <var>TCustomTabControl</var> to 
ensure that resources allocated for the Images property are <b>Nil</b>'d when 
the component is removed.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Images"/>
<link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
</seealso>
</element>
<element name="TCustomTabControl.Notification.AComponent">
<short>Component for the notification.</short>
</element>
<element name="TCustomTabControl.Notification.Operation">
<short>Operation performed for the component.</short>
</element>

<element name="TCustomTabControl.ActivePageComponent">
<short>The active TCustomPage instance for the tabbed control.</short>
<descr>
<p>
<var>ActivePageComponent</var> is a <var>TCustomPage</var> property which 
indicates the active page component for the tabbed control.
</p>
<p>
<var>PageIndex</var> is used to access the page instance in <var>Page</var> 
with the property value. The property value is <b>Nil</b> when PageIndex 
contains a value that is not in the range <b>0..<var>PageCount</var>-1</b>.
</p>
<p>
Setting a new value for the property causes the <var>IndexOf</var> method to 
be called to locate the value in the list of pages. PageIndex is updated to 
reflect the position for the specified page, and may contain <b>-1</b> if 
pages are not used in the tabbed control.
</p>
<p>
Use <var>ActivePage</var> to get or set the active page in the control using 
its Caption.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.IndexOf"/>
<link id="TCustomTabControl.ActivePage"/>
<link id="TCustomPage"/>
</seealso>
</element>

<element name="TCustomTabControl.ActivePage">
<short>Caption for the active page in the tabbed control.</short>
<descr>
<p>
<var>ActivePage</var> is a <var>String</var> property which holds the caption 
for the active page in the control.
</p>
<p>
The property value is retrieved using values in the <var>PageIndex</var> and 
<var>Page</var> properties, and contains the <var>Caption</var> property for 
the <var>TCustomPage</var> instance. The property value is an empty string 
(<b>''</b>) if PageIndex is not in the range <b>0..<var>PageCount</var>-1</b>.
</p>
<p>
Setting a new value for the property causes the indexed Page property to be 
searched to locate the TCustomPage instance with a Caption matching 
<var>Value</var>. If a page is found with the specified caption, the 
<var>SetPageIndex</var> method is called to validate and store the PageIndex, 
and signal the <var>OnChange</var> event handler when configured in 
<var>Options</var>. No actions are performed if the new property Value is not 
used in Page.
</p>
<p>
A value assigned to ActivePage at design-time is <b>not</b> stored in the LCL 
component streaming mechanism.
</p>
<p>
Use <var>ActivePageComponent</var> to read or write the TCustomPage instance 
that is the active page in the control.
</p>
<p>
Use <var>Tabs</var> to access the internal page (or tab) list for the control.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomTabControl.Options"/>
<link id="TCustomTabControl.OnChange"/>
<link id="TCustomTabControl.ActivePageComponent"/>
<link id="TCustomTabControl.Tabs"/>
<link id="#lcl.controls.TControl.Caption">TControl.Caption</link>
</seealso>
</element>

<element name="TCustomTabControl.GetPage">
<short>Gets the value for the indexed Page property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomPage"/>
</seealso>
</element>
<element name="TCustomTabControl.GetPage.Result">
<short>Value for the property.</short>
</element>
<element name="TCustomTabControl.GetPage.AIndex">
<short>Ordinal position for the page object requested in the method.</short>
</element>

<element name="TCustomTabControl.GetPageCount">
<short>Gets the value for the PageCount property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.PageCount"/>
<link id="TCustomTabControl.Page"/>
</seealso>
</element>
<element name="TCustomTabControl.GetPageCount.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomTabControl.InsertPage">
<short>
Inserts the specified page into the page list and updates both the page and 
the control.
</short>
<descr>
<p>
<var>InsertPage</var> is a method used to insert the page object in 
<var>APage</var> into the page list at the ordinal position specified in 
<var>Index</var>.
</p>
<p>
<var>APage</var> is the TCustomPage instance inserted as a new tab on the 
tabbed control. Values in the Flags property in APage are updated to reflect 
the page object state, both before the page is stored and after the page has 
been inserted.
</p>
<p>
InsertPage sets the Parent property in APage to the current tab control 
instance. The SetControlIndex is called (when needed) to set the Z-axis order 
for the page object on the parent control.
</p>
<p>
If an ActivePage has not been assigned for the control, the value in Index is 
stored in the PageIndex property to make the new page the active page. Values 
in the ControlStyle property are updated to indicate whether the page is the 
active page on the IDE design surface.
</p>
<p>
No actions are performed in the method if the page object in APage is already 
stored in the page list.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.IndexOf"/>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.PageCount"/>
<link id="TCustomPage"/>
<link id="TNBPages.Insert"/>
</seealso>
</element>
<element name="TCustomTabControl.InsertPage.APage">
<short>
TCustomPage instance inserted in the page list at the specified ordinal 
position.
</short>
</element>
<element name="TCustomTabControl.InsertPage.Index">
<short>
Ordinal position in the page list where the specified page object is inserted.
</short>
</element>

<element name="TCustomTabControl.RemovePage">
<short>
Removes the page object at the specified position in the page list and 
updates the visible tabs on the control.
</short>
<descr>
<p>
<var>RemovePage</var> is a method used to remove the page object at the 
position specified in Index from the page list in the tabbed control.
</p>
<p>
RemovePage gets the TCustomPage instance at the specified position in Page and 
performs actions needed to remove the page object. The TabVisible property in 
the page is set to <b>False</b>, and the page is removed from both the local 
page list and the page list in the widget. PageIndex is decremented when it 
contains the page Index removed in the method.
</p>
<p>
No actions are performed in the method if Index is not in the range 
<b>0..PageCount-1</b>.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.PageCount"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TNBPages.DeletePage"/>
<link id="TCustomPage.TabVisible"/>
</seealso>
</element>
<element name="TCustomTabControl.RemovePage.Index">
<short>
Ordinal position for the page object removed from the page list.
</short>
</element>

<element name="TCustomTabControl.CanChange">
<short>
Signals the OnChanging event handler prior to updates to PageIndex.
</short>
<descr>
<p>
Provided for Delphi code compatibility. Use CanChangePageIndex instead.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.CanChange.Result">
<short>
True if the value in PageIndex (ActivePage) can be changed.
</short>
</element>

<element name="TCustomTabControl.DisplayRect">
<short>
Rectangular area used to display information for the tabbed control.
</short>
<descr>
<p>
<var>DisplayRect</var> is a read-only <var>TRect</var> property which 
contains the display rectangle for the tabbed control. The property value 
contains the TRect instance returned from the 
<var>TWinControl.GetClientRect</var> method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.GetClientRect">TWinControl.GetClientRect</link>
<link id="#rtl.classes.TRect">TRect</link>
</seealso>
</element>

<element name="TCustomTabControl.Tabs">
<short>
Contains the list of pages accessible in the tabbed control.
</short>
<descr>
<p>
<var>Tabs</var> is a <var>TStrings</var> property which contains the list of 
pages for the tabbed control. It is created using the class reference from 
GetListClass in the constructor. By default, <var>TNBPages</var> is used as 
the class type for the page list. It is stored in an internal member, and 
used when TCustomPage class instances for the control are accessed and 
maintained.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTabControl.TabIndex">
<short>
Contains the ordinal position for the active Tab in the control.
</short>
<descr>
<p>
<var>TabIndex</var> is an <var>Integer</var> property which contains the 
ordinal position for the active Tab in the tabbed control. It is the same as 
the <var>PageIndex</var> property; they read and write the same member value. 
The default value for the property is <b>-1</b>, and indicates that an active 
tab (page) has not been selected in the control.
</p>
<p>
Setting a new value for the property causes the <var>OnChange</var> event 
handler to be signalled when <var>nboDoChangeOnSetIndex</var> has been 
included in the <var>Options</var> for the control. The event handler is not 
signalled at design-time, during LCL component streaming, or when the control 
is freed.
</p>
<p>
No actions are performed in the method when the new property value is not in 
the range <b>-1..<var>PageCount</var>-1</b>, or when the new value is the 
same as the existing value.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomTabControl.OnChange"/>
<link id="TCustomTabControl.Options"/>
<link id="TCTabControlOption"/>
</seealso>
</element>

<element name="TCustomTabControl.OnChange">
<short>
Event handler signalled when the active page (or tab) for the control is 
changed.
</short>
<descr>
<p>
<var>OnChange</var> is a <var>TNotifyEvent</var> property with the event 
handler signalled when the active page (or tab) for the control is changed. 
OnChange is enabled when the value <var>nboDoChangeOnSetIndex</var> has been 
included in the <var>Options</var> for the control.
</p>
<p>
Setting a new value in either <var>PageIndex</var> or <var>TabIndex</var> 
signals the assigned and enabled event handler. It is also called from the 
<var>Change</var> method when selection change messages are handled for the 
control, and when a tab is re-ordered using the <var>MoveTab</var> method.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Change"/>
<link id="TCustomTabControl.Options"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomTabControl.TabIndex"/>
<link id="TCTabControlOption"/>
</seealso>
</element>

<!-- public -->
<element name="TCustomTabControl.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for 
<var>TCustomTabControl</var>, and calls the inherited <var>Create</var> method 
on entry. Create allocates resources needed for the internal page list and 
the change link for its image list. It sets the default values for properties, 
including: PageIndex, ControlStyle, TabPosition, TabStop and ShowTabs. It also 
sets the initial bounds for the control to the values returned from 
GetControlClassDefaultSize.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
</seealso>
</element>
<element name="TCustomTabControl.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomTabControl.Destroy">
<short>
<var>Destroy</var> - destructor for <var>TCustomTabControl</var>: clears and 
frees pages and list, then calls inherited <var>Destroy</var>.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
<link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
<link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
</seealso>
</element>

<element name="TCustomTabControl.TabRect">
<short>
Gets the client rectangle for the specified tab adjusted to the parent.
</short>
<descr>
<p>
<var>TabRect</var> is a <var>TRect</var> function used to get the rectangle 
for the tab specified in the AIndex argument.
</p>
<p>
TabRect calls the GetTabRect in the widget instance to get the return value 
for the method. The values in the rectangle are adjusted to reflect the client 
coordinates relative to the Parent for the control.
</p>
<p>
If the handle has not been allocated for the widget, the return value is a 
rectangle where the Left, Top, Bottom, and Right members are all set to -1.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.TabRect.Result">
<short>
TRect instance with the client rectangle for the specified tab.
</short>
</element>
<element name="TCustomTabControl.TabRect.Index">
<short>
Ordinal position for the tab coordinates in the return value.
</short>
</element>

<element name="TCustomTabControl.GetImageIndex">
<short>
Gets the ordinal position for the image displayed on the tab for the 
specified page.
</short>
<descr>
<p>
<var>GetImageIndex</var> is an <var>Integer</var> function used to get the 
ordinal position in <var>Images</var> for the image displayed on the 
specified tab. <var>ThePageIndex</var> contains the <var>Page</var> examined 
in the method to get its <var>ImageIndex</var> property. If Page does not 
have a <var>TCustomPage</var> instance at the position in ThePageIndex, 
<b>-1</b> is used as the image index.
</p>
<p>
GetImageIndex signals the <var>OnGetImageIndex</var> event handler (when 
assigned) to allow a custom image index to be used in the return value.
</p>
<p>
GetImageIndex is called from methods in the widgetset class when the image 
displayed on a tab is needed.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomTabControl.TabIndex"/>
<link id="TCustomTabControl.Images"/>
<link id="TCustomTabControl.OnGetImageIndex"/>
<link id="TCustomPage.ImageIndex"/>
</seealso>
</element>
<element name="TCustomTabControl.GetImageIndex.Result">
<short>Ordinal position in Images for the specified page index.</short>
</element>
<element name="TCustomTabControl.GetImageIndex.ThePageIndex">
<short>Ordinal position in Page with the image index for the tab.</short>
</element>

<element name="TCustomTabControl.IndexOf">
<short>
Gets the ordinal position in the page list for the specified page object.
</short>
<descr/>
<seealso>
<link id="TNBPages.IndexOfPage"/>
</seealso>
</element>
<element name="TCustomTabControl.IndexOf.Result">
<short>
Ordinal position in the page list for the page object, or -1 when not found.
</short>
</element>
<element name="TCustomTabControl.IndexOf.APage">
<short>
Page object (TPersistent) to locate in the page list.
</short>
</element>

<element name="TCustomTabControl.CustomPage">
<short>
Gets the page object at the specified position as a TCustomPage type.
</short>
<descr/>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.GetPage"/>
</seealso>
</element>
<element name="TCustomTabControl.CustomPage.Result">
<short>
TCustomPage instance for the page object at the specified position in the page 
list.
</short>
</element>
<element name="TCustomTabControl.CustomPage.Index">
<short>
Ordinal position in the page list for the return value.
</short>
</element>

<element name="TCustomTabControl.CanChangePageIndex">
<short>
<var>CanChangePageIndex</var> - determine whether it is permissible to change 
the index of the page.
</short>
<descr/>
<seealso>
<link id="TCustomTabControl.CanChange"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomTabControl.OnChanging"/>
</seealso>
</element>
<element name="TCustomTabControl.CanChangePageIndex.Result">
<short>
<b>True</b> if the value in PageIndex can be changed to make another page/tab 
become active.
</short>
</element>

<element name="TCustomTabControl.GetMinimumTabWidth">
<short>
Gets the smallest tab width allowed on the tabbed control.
</short>
<descr>
<p>
The return value is provide by the GetNotebookMinTabWidth method in the 
widgetset class instance.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.GetMinimumTabWidth.Result">
<short>
Minimum tab width in pixels.
</short>
</element>

<element name="TCustomTabControl.GetMinimumTabHeight">
<short>
Gets the smallest tab height allowed on the tabbed control.
</short>
<descr>
<p>
The return value is provide by the GetNotebookMinTabHeight method in the 
widgetset class instance.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.GetMinimumTabHeight.Result">
<short>
Minimum tab height in pixels.
</short>
</element>

<element name="TCustomTabControl.GetCapabilities">
<short>
Gets the set of platform-specific tab control options supported for the 
widgetset.
</short>
<descr>
<p>
The return value is provided by the GetCapabilities method in the widgetset 
class instance.
</p>
<p>
GetCapabilities is called when a new value is assigned to a property, like 
TabWidth and TabHeight, which may not be available on all of the supported LCL 
platforms. If the platform does not support the capability, the new property 
value is <b>not</b> posted to the widgetset class instance.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Options"/>
<link id="TCTabControlCapabilities"/>
<link id="TCTabControlCapability"/>
<link id="TCTabControlOptions"/>
<link id="TCTabControlOption"/>
</seealso>
</element>
<element name="TCustomTabControl.GetCapabilities.Result">
<short>
Set type with the TCTabControlCapability enumeration values supported for the 
platform.
</short>
</element>

<element name="TCustomTabControl.TabToPageIndex">
<short>Gets the real page index for the specified tab.</short>
<descr>
<p>
<var>TabToPageIndex</var> is an <var>Integer</var> function used to get the 
page index for the tab at the specified position. The tab index value in 
<var>AIndex</var> does not include any non-visible tabs. TabToPageIndex 
adjusts the index value to include any <var>TCustomPage</var> instances in 
<var>Page</var> with its <var>TabVisible</var> property set to <b>False</b>.
</p>
<p>
The return value contains the value specified in AIndex after adding any 
non-visible pages prior to the requested position.
</p>
<p>
No actions are performed in the method at design-time; all pages are visible 
on the designer surface.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTabControl.TabToPageIndex.Result">
<short>
Ordinal page index after adjusting for tabs/pages not currently visible on the 
control.
</short>
</element>
<element name="TCustomTabControl.TabToPageIndex.AIndex">
<short>
Ordinal position for the visible tab to convert to a physical page index.
</short>
</element>

<element name="TCustomTabControl.PageToTabIndex">
<short>
Maps a LCL page index to a tab index in the widgetset class.
</short>
<descr>
<p>
<var>PageToTabIndex</var> is an <var>Integer</var> function used to get the 
tab index for the specified page index. A page index is the physical location 
in the list of page objects. A tab index, on the other hand, is the logical 
position within the visible tabs on the tabbed control.
</p>
<p>
<var>AIndex</var> is the ordinal position in the page list for a tab, and is 
converted to the logical tab index in the return value. Values in AIndex must 
be in the range <b>0..PageCount-1</b>.
</p>
<p>
The return value contains the position for the tab when only visible tabs are 
taken into consideration. In other words, the physical page index minus any 
preceding page objects with their TabVisible property set to <b>False</b>.
</p>
<p>
The return value is -1 when AIndex has a value less than 0 (zero) or greater 
than PageCount-1, or when the page object at the position in AIndex is not 
visible.
</p>
<remark>
At design-time, all tabs are visible on the design surface for the tabbed 
control. The return value is set to the value in AIndex at design-time.
</remark>
</descr>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.PageCount"/>
<link id="TCustomPage.TabVisible"/>
<link id="TCustomPage.PageIndex"/>
</seealso>
</element>
<element name="TCustomTabControl.PageToTabIndex.Result">
<short>
Ordinal position for the page object in the list of visible tabs on the 
control.
</short>
</element>
<element name="TCustomTabControl.PageToTabIndex.AIndex">
<short>
Ordinal position for the page object in the internal list.
</short>
</element>

<element name="TCustomTabControl.DoCloseTabClicked">
<short>
Performs actions needed when the tab for the specified page object is closed.
</short>
<descr>
<p>
<var>DoCloseTabClicked</var> signals the OnCloseTabClicked event handler (when 
assigned) using the value in <var>APage</var> as the Sender for the event 
notification. DoCloseTabClicked occurs when the user clicks on the close 
button for a tab.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.OnCloseTabClicked"/>
<link id="TCustomPage"/>
<link id="#rtl.classes.TNotifyEvent">TNotifyEvent</link>
</seealso>
</element>
<element name="TCustomTabControl.DoCloseTabClicked.APage">
<short>
Page object (TCustomPage) for the tab closed on the control.
</short>
</element>

<element name="TCustomTabControl.HotTrack">
<short>
Enables or disables drawing a "hot-lighted" tab when the mouse pointer is 
hovered over the control.
</short>
<descr>
<p>
<var>HotTrack</var> is a <var>Boolean</var> property which indicates whether a 
tab on the control is "hot-lighted" (or highlighted but not selected) when the 
mouse is hovered over the tab. The default value for the property is 
<b>False</b> and disables the feature. When enabled, the tab is drawn (when 
hovered) using the background color in clHotlight.
</p>
</descr>
<seealso>
<!-- link id="TCustomListView.HotTrack"/ -->
</seealso>
</element>

<element name="TCustomTabControl.Images">
<short>
Contains the images displayed on the tabs for the control.
</short>
<descr>
<p>
<var>Images</var> is a <var>TCustomImageList</var> property which contains the 
images displayed on tabs for the control. Assigning a new image list to the 
property causes the widgetset class instance to be updated; the image list, 
the tab position, and properties for the page objects are sent to the widget. 
The Invalidate method is called to cause the control to be redrawn.
</p>
<p>
Use ImagesWidth to set the default width and height for the images in the list.
</p>
<p>
Use the indexed Page property to access to each page object on the tabbed 
control.
</p>
<p>
Use the ImageIndex property in the TCustomPage instances to specify which 
image is displayed for a given tab/page on the control.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.ImagesWidth"/>
<link id="TCustomTabControl.Page"/>
<link id="TCustomPage.ImageIndex"/>
<link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
</seealso>
</element>

<element name="TCustomTabControl.ImagesWidth">
<short>Width for the Images used in the control.</short>
<descr>
<p>
<var>ImagesWidth</var> specifies the width used for the <var>Images</var> in 
the control. ImagesWidth determines the resolution (either selected or 
resized) for the current display density (PPI).
</p>
<p>
Changing the value in the property causes the <var>DoImageListChange</var> 
method to be called to select the image resolution, and to notify the 
widgetset class of the change. The <var>UpdateTabProperties</var> method is 
called to propagate the change to all tabs in the control.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Images"/>
<link id="TCustomTabControl.ImagesWidth"/>
<link id="TCustomTabControl.UpdateTabProperties"/>
<link id="TChangeLink.OnChange"/>
</seealso>
</element>

<element name="TCustomTabControl.MultiLine">
<short>
Indicates whether the caption on a tab can have multiple lines of text.
</short>
<descr>
<p>
<var>MultiLine</var> is a <var>Boolean</var> property which indicates whether 
the caption for a tab can be displayed as multiple lines of text. A multi-line 
caption may be needed when the length of the text exceeds the value in 
TabWidth, or the caption text contains embedded end-of-line character(s).
</p>
<p>
MultiLine contains <b>True</b> when the value nboMultiLine has been included 
in the Options for the tabbed control. The default value for the property is 
<b>False</b> and limits tab captions to a single line of text.
</p>
<p>
Changing the value for the property causes the Options property to be updated 
to reflect the new property value. When set to <b>True</b>, nboMultiLine is 
included in the Options property. Otherwise, the value is excluded from 
Options.
</p>
<remark>
MultiLine (and the nboMultiLine option) may not be supported on all of the 
platforms where the LCL is hosted. Use the GetCapabilities method to determine 
whether a specific tab control option is supported for the platform.
</remark>
</descr>
<seealso>
<link id="TCustomTabControl.Options"/>
<link id="TCustomTabControl.Pages"/>
<link id="TCustomTabControl.TabWidth"/>
<link id="TCustomTabControl.GetCapabilities"/>
<link id="TCTabControlOption"/>
<link id="TCTabControlOptions"/>
<link id="TCTabControlCapabilities"/>
</seealso>
</element>

<element name="TCustomTabControl.MultiSelect">
<short>
Indicates whether multiple tabs can be simultaneously selected on the tabbed 
control.
</short>
<descr/>
<p>
<var>MultiSelect</var> is a <var>Boolean</var> property which controls whether 
multiple tabs can be simultaneously selected on the tab control. When set to 
<b>True</b>, additional tabs can be selected by holding Shift or Ctrl when the mouse button is clicked.
</p>
<remark>
The MultiSelect property is not supported for the macOS Carbon and Cocoa, GTK2, GTK3, QT4, QT5, and QT6 widgetsets.
</remark>
<seealso/>
</element>

<element name="TCustomTabControl.OnChanging">
<short>
Event handler signalled prior to changing the active tab/page on the tabbed 
control.
</short>
<descr>
<p>
<var>OnChanging</var> is a <var>TTabChangingEvent</var> property with the 
event handler signalled prior to changing the active page/tab on the tabbed 
control. OnChanging is signalled from the CanChange method, and occurs 
immediately before the new value is applied to the PageIndex property.
</p>
<p>
An application can implement and assign a handler routine to the property to 
determine whether the PageIndex and the active tab/page can be changed.
</p>
<p>
The <var>Sender</var> argument is the TCustomTabControl for the event. 
</p>
<p>
<var>AllowChange</var> is a variable argument which indicates whether 
PageIndex can be changed. When set to <b>True</b> (the default), the value in 
PageIndex can be updated. Otherwise, the value in PageIndex is not updated.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.CanChange"/>
<link id="TCustomTabControl.CanChangePageIndex"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TTabChangingEvent"/>
</seealso>
</element>

<element name="TCustomTabControl.OnCloseTabClicked">
<short>
Event handler signalled when a tab is closed.
</short>
<descr>
<p>
<var>OnCloseTabClicked</var> is a <var>TNotifyEvent</var> property with the 
event handler signalled when a tab on the control is closed. OnCloseTabClicked 
is signalled (when assigned) when the user clicks on the close button for a 
given tab. An application can implement and assign a handler routine which 
performs actions needed when the tab is closed.
</p>
<p>
The <var>Sender</var> argument contains the tabbed control instance for the 
event notification, but must be cast to <var>TCustomTabControl</var> to access 
properties and methods specific for the class type.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.DoCloseTabClicked"/>
<link id="#rtl.classes.TNotifyEvent">TNotifyEvent</link>
</seealso>
</element>

<element name="TCustomTabControl.OnGetImageIndex">
<short>
Event handler signalled to get the image index for a tab on the tabbed control.
</short>
<descr>
<p>
<var>OnGetImageIndex</var> is a <var>TTabGetImageEvent</var> property with the 
event handler signalled to get the ordinal position for the image displayed 
for the specified tab. It is signalled (when assigned) from the GetImageIndex 
method, and allows the application to override the value assigned to the 
ImageIndex property in a page object (TCustomPage).
</p>
<p>
The <var>Sender</var> argument is the object (TCustomTabControl) for the event 
notification.
</p>
<p>
<var>TabIndex</var> contains the ordinal position for a tab/page which is 
visible on the tabbed control.
</p>
<p>
<var>ImageIndex</var> is a variable argument used to return the position in 
Images for the bitmap displayed on the specified tab. Return -1 in the 
argument value if an image is not available in Images or not needed for the 
tab.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Images"/>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.GetImageIndex"/>
<link id="TCustomPage.ImageIndex"/>
<link id="TTabGetImageEvent"/>
</seealso>
</element>

<element name="TCustomTabControl.Options">
<short>
The set of Options enabled for the tabbed control.
</short>
<descr>
<p>
<var>Options</var> is a <var>TCTabControlOptions</var> property with the set 
of options enabled for the tabbed control. It contains values from the 
<var>TCTabControlOption</var> enumeration which enable the corresponding 
features, including:
</p>
<dl>
<dt>nboShowCloseButtons</dt>
<dd>
Enables close buttons on each tab control page. Requires support in the native 
tab control for a given platform.
</dd>
<dt>nboMultiLine</dt>
<dd>
Enables word wrapped or multi-line captions on tabs. Used to read or write the 
value for the MultiLine property.
</dd>
<dt>nboHidePageListPopup</dt>
<dd>
Hides the pop-up list of tab pages.
</dd>
<dt>nboKeyboardTabSwitch</dt>
<dd>
Enables use of the Tab key to change the active page on a tabbed control. When 
enabled, Ctrl+Tab moves to the next tab and Ctrl+Shift+Tab moves to the 
previous tab. Tab and Shift+Tab are used for navigation between controls in 
the tab order for the parent form.
</dd>
<dt>nboShowAddTabButton</dt>
<dd>
Enables a button which adds a page to a tab control.
</dd>
<dt>nboDoChangeOnSetIndex</dt>
<dd>
Causes the OnChange event handler to be signalled when a value is assigned to 
the to ActivePage or PageIndex properties.
</dd>
</dl>
<p>
The default value for the property is an empty set ([]) and indicates that 
none of the optional features are enabled. Changing the value for the property 
causes the widgetset class instance to be updated when its handle has been 
allocated.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.ActivePage"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomTabControl.KeyDown"/>
<link id="TCustomTabControl.MultiLine"/>
<link id="TCustomTabControl.DoChange"/>
<link id="TCustomTabControl.OnChange"/>
<link id="TCTabControlOptions"/>
<link id="TCTabControlOption"/>
</seealso>
</element>

<element name="TCustomTabControl.OwnerDraw">
<short>
Reads and write the value for the OwnerDraw property in Tabs.
</short>
<descr>
<p>
<var>OwnerDraw</var> is a <var>Boolean</var> property. Its value is read from 
and written to the corresponding property in Tabs. In widgetset classes, it 
affects the style flags for a tab - but is not used in the current LCL 
version or its widgetsets.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTabControl.Page">
<short>
Provides indexed access to the page objects used on the tabbed control.
</short>
<descr>
<p>
<var>Page</var> is an indexed read-only <var>TCustomPage</var> property used 
to access the page objects on the tabbed control by their ordinal position in 
the internal page list.
</p>
<p>
Use InsertPage or RemovePage to maintain the TCustomPage instances in the page 
list.
</p>
<p>
Use PageCount to get the number of page objects in the internal list.
</p>
<p>
Use PageIndex to red or write the selected page object on the tabbed control.
</p>
<p>
Use Tabs or Pages to access the list of captions for the tabs/page objects on 
the tabbed control.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.PageCount"/>
<link id="TCustomTabControl.Pages"/>
<link id="TCustomTabControl.Tabs"/>
<link id="TCustomTabControl.ActivePageComponent"/>
<link id="TCustomTabControl.InsertPage"/>
<link id="TCustomTabControl.RemovePage"/>
<link id="TCustomPage"/>
<link id="TNBPages.GetPage"/>
</seealso>
</element>
<element name="TCustomTabControl.Page.Index">
<short>
Ordinal position for the TCustomPage instance in the property value.
</short>
</element>

<element name="TCustomTabControl.PageCount">
<short>
Returns the number of page objects stored in the internal page list for the 
tabbed control.
</short>
<descr>
<p>
<var>PageCount</var> is a read-only <var>Integer</var> property with the 
number of TCustomPage instances in the internal page list for the control. The 
value for the property is read from the Count property in the internal 
TNBPages instance in the control.
</p>
<p>
Use InsertPage or RemovePage to maintain the page objects in the list.
</p>
<p>
Use tabs or Pages to access the list with the captions for the tabs on the 
control.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.Pages"/>
<link id="TCustomTabControl.Tabs"/>
<link id="TCustomPage"/>
<link id="#rtl.classes.TStrings.Count">TStrings.Count</link>
</seealso>
</element>

<element name="TCustomTabControl.PageIndex">
<short>
Ordinal position for the selected page on the tabbed control.
</short>
<descr>
<p>
<var>PageIndex</var> is an <var>Integer</var> property which indicates the 
ordinal position in the page list for the selected page object on the tabbed 
control. The default value for the property is -1 and indicates that a page/
tab is not active on the control.
</p>
<p>
Changing the value for the property causes the OnChange event handler to be 
signalled when nboDoChangeOnSetIndex has been included in the Options for the 
control. OnChange is not signalled at design-time - even when enabled in 
Options. The InternalSetPageIndex method is called to update the property 
value and the design-time flags for the control. The new value is also sent to 
the widgetset class instance.
</p>
<p>
No actions are needed or performed when PageIndex is set to -1, or when its 
value is larger than PageCount-1.
</p>
<p>
The value in PageIndex is used to determine the value for both the ActivePage 
and ActivePageComponent properties. Changing the value in either of these 
properties causes PageIndex to be updated (when allowed by Options and 
CanChangePageIndex).
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Options"/>
<link id="TCustomTabControl.PageCount"/>
<link id="TCustomTabControl.Pages"/>
<link id="TCustomTabControl.Tabs"/>
<link id="TCustomTabControl.TabToPageIndex"/>
<link id="TCustomTabControl.ActivePage"/>
<link id="TCustomTabControl.ActivePageComponent"/>
<link id="TCustomTabControl.OnChange"/>
<link id="TCustomTabControl.CanChange"/>
<link id="TCustomTabControl.CanChangePageIndex"/>
</seealso>
</element>

<element name="TCustomTabControl.Pages">
<short>
The list of captions for the page objects on the control.
</short>
<descr>
<p>
<var>Pages</var> is a read-only <var>TStrings</var> property which provides 
access to the list with the captions and page objects for the tabbed control. 
At run-time, the GetListClass is used to get the class type needed to create 
the member. The default list class type is TNBPages in TCustomTabControl. 
</p>
<p>
Methods in TCustomTabControl cast the internal list to the TNBPages type when 
reading or writing its values.
</p>
<p>
Use InsertPage or RemovePage to maintain the page objects in the Pages 
property.
</p>
<p>
Use the indexed Page property to access a TCustomPage instance for a page by 
its ordinal position in Pages.
</p>
<p>
Use Tabs to access the list with the captions for the tabs on the control.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.InsertPage"/>
<link id="TCustomTabControl.RemovePage"/>
<link id="TCustomTabControl.Tabs"/>
<link id="TCustomTabControl.GetListClass"/>
<link id="TNBPages"/>
<link id="#rtl.classes.TStrings">TStrings</link>
</seealso>
</element>

<element name="TCustomTabControl.RaggedRight">
<short>
Enables or disables justified text in the captions for tabs on the control.
</short>
<descr>
<p>
When set to <b>False</b>, captions are center-justified on the tabs. This 
property requires support for the capability in the native tab control for the 
platform.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTabControl.ScrollOpposite">
<short>
Indicates whether unused multi-line tabs are scrolled to the side opposite of 
the tab position.
</short>
<descr>
<p>
Set <var>ScrollOpposite</var> to <b>True</b> to force an unused row of tabs in 
a multi-line tab control to be moved when a tab in a new row is selected. The 
previous row of tabs is moved to edge opposite of the setting in TabPosition.
When set to <b>False</b>, a unused tab row is moved behind the current tab row.
</p>
<p>
The default value for the ScrollOpposite property is <b>False</b>.
</p>
<p>
ScrollOpposite is supported on the Windows widgetset only. It causes the TCS_SCROLLOPPOSITE flag to be included in the tab style flags for the widget when set to <b>True</b>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTabControl.ShowTabs">
<short>
Enables display of tabs on the control when set to <b>True</b> (default).
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTabControl.Style">
<short>
Indicates the appearance or display style used for the tabs on the control.
</short>
<descr>
<p>
<var>Style</var> is a <var>TTabStyle</var> property which controls the visual 
appearance and behavior for the tabs on the control. The default value for the 
property is tsTabs and causes the conventional tab appearance and behavior to 
be used for the tab controls. 
</p>
<p>
See <link id="TTabStyle"/> for the other values for the property and their 
meanings.
</p>
<remark>
Use of the Style property to control tab appearance is a platform-specific 
feature, and is not supported for all of the LCL widgetsets.
</remark>
</descr>
<seealso>
<link id="TTabStyle"/>
</seealso>
</element>

<element name="TCustomTabControl.TabHeight">
<short>
Height in pixels for the tabs on the control.
</short>
<descr>
<p>
<var>TabHeight</var> is a <var>SmallInt</var> property which contains the 
number of pixels used as the height for the tabs displayed on the tabbed 
control. The default value is 0 (zero) when an explicit value has not been 
assigned, and causes the default height for the native tab control to be used.
</p>
<p>
Changing the value for the property causes the widgetset class instance to be 
updated with the new value. The property value is included in the LCL 
component streaming mechanism when an explicit positive non-zero value has 
been assigned in the class instance. The value may be resized using a scaling 
factor in the DoAutoAdjustLayout method.
</p>
<remark>
Use of TabHeight requires support for the feature in the native tab control. 
The property value is not used if nbcTabsSizeable is not included in the 
capabilities for the platform (GetCapabilities).
</remark>
<p>
Use TabWidth to set the width for the tabs on the control.
</p>
</descr>
<version>
Modified in LCL version 3.0 to use a storage specifier for the property 
value in LCL component streaming.
</version>
<seealso>
<link id="TCustomTabControl.TabWidth"/>
<link id="TCustomTabControl.Style"/>
<link id="TCustomTabControl.ShowTabs"/>
<link id="TCustomTabControl.GetCapabilities"/>
<link id="TCustomTabControl.DoAutoAdjustLayout"/>
</seealso>
</element>

<element name="TCustomTabControl.TabPosition">
<short>
Indicates the edge where the tabs for the control are aligned.
</short>
<descr>
<p>
<var>TabPosition</var> is a <var>TTabPosition</var> property which indicates 
the edge on the control where its tabs are aligned. The default value for the 
property is tpTop and causes the tabs to be drawn across the top edge of the 
control. Changing the value for the property causes to the widgetset class 
instance to be updated with the new value.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.ShowTabs"/>
<link id="TCustomTabControl.Style"/>
<link id="TTabPosition"/>
</seealso>
</element>

<element name="TCustomTabControl.TabWidth">
<short>
Width in pixels for the tabs on the control.
</short>
<descr>
<p>
<var>TabWidth</var> is a <var>SmallInt</var> property which contains the 
number of pixels used as the width for the tabs displayed on the tabbed 
control. The default value is 0 (zero) when an explicit value has not been 
assigned, and causes the default width for the native tab control to be used.
</p>
<p>
Changing the value for the property causes the widgetset class instance to be 
updated with the new value. The property value is included in the LCL 
component streaming mechanism when an explicit positive non-zero value has 
been assigned in the class instance. The value may be resized using a scaling 
factor in the DoAutoAdjustLayout method.
</p>
<remark>
Use of TabWidth requires support for the feature in the native tab control. 
The property value is not used if nbcTabsSizeable is not included in the 
capabilities for the platform (GetCapabilities).
</remark>
<p>
Use TabHeight to set the height for the tabs on the control.
</p>
</descr>
<version>
Modified in LCL version 3.0 to use a storage specifier for the property 
value in LCL component streaming.
</version>
<seealso>
<link id="TCustomTabControl.TabHeight"/>
<link id="TCustomTabControl.Style"/>
<link id="TCustomTabControl.ShowTabs"/>
<link id="TCustomTabControl.GetCapabilities"/>
<link id="TCustomTabControl.DoAutoAdjustLayout"/>
</seealso>
</element>

<!-- published -->
<element name="TCustomTabControl.TabStop">
<short>
Enables or disables navigation using the Tab key.
</short>
<descr>
<p>
<var>TabStop</var> is a <var>Boolean</var> property which indicates whether 
the Tab key can be used to navigate between adjacent controls in the tab order 
for the parent control. The default value for the property is <b>True</b> in 
<var>TCustomTabControl</var>.
</p>
<p>
When enabled, the Tab key changes the focus to the next control in the tab 
order. Shift+Tab changes the focus to the previous control in the tab order.
</p>
<p>
Include nboKeyboardTabSwitch in the Options property to enable use Ctrl+Tab 
and Shift+Ctrl+Tab to change the active tab on the control.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Options"/>
<link id="#lcl.controls.TWinControl.TabOrder">TWinControl.TabOrder</link>
<link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
</seealso>
</element>

<element name="TTabSheet">
<short>An individual page used in TPageControl.</short>
<descr>
<p>
<var>TTabSheet</var> - individual page of a <var>TPageControl</var>. It is a 
more elaborate version of <var>TPage</var>, and adds the following features:
</p>
<ul>
<li>Drag/Drop properties</li>
<li>Ability to Enable/Disable the page</li>
<li>Ability to make the Tab visible or hidden</li>
</ul>
</descr>
<seealso>
<link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
</seealso>
</element>

<element name="TTabSheet.GetPageControl">
<short>Gets the value for the PageControl property.</short>
<descr/>
<seealso>
<link id="TTabSheet.PageControl"/>
</seealso>
</element>
<element name="TTabSheet.GetPageControl.Result">
<short>Value for the property.</short>
</element>

<element name="TTabSheet.GetTabIndex">
<short>Gets the value for the TabIndex property.</short>
<descr/>
<seealso>
<link id="TTabSheet.TabIndex"/>
</seealso>
</element>
<element name="TTabSheet.GetTabIndex.Result">
<short>Value for the property.</short>
</element>

<element name="TTabSheet.SetPageControl">
<short>Sets the value for the PageControl property.</short>
<descr/>
<seealso>
<link id="TTabSheet.PageControl"/>
</seealso>
</element>
<element name="TTabSheet.SetPageControl.APageControl">
<short>New value for the property.</short>
</element>

<element name="TTabSheet.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TTabSheet.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance. It 
calls the inherited method on entry using the value in TheOwner as an argument.
</p>
</descr>
<seealso>
<link id="TCustomPage.Create"/>
</seealso>
</element>
<element name="TTabSheet.Create.TheOwner">
<short>
Component which owns the class instance.
</short>
</element>

<element name="TTabSheet.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. It 
ensures that a child control which is a host dock site is detached (set to 
<b>Nil</b>). Destroy calls the inherited method to free handles for both the 
control and any child controls, and other resources allocated in the ancestor 
class (TWinControl).
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.ControlCount">TWinControl.ControlCount</link>
<link id="#lcl.controls.TWinControl.Controls">TWinControl.Controls</link>
<link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
</seealso>
</element>

<element name="TTabSheet.PageControl">
<short>
The TPageControl instance where the tab sheet is displayed.
</short>
<descr>
<p>
<var>PageControl</var> is a <var>TPageControl</var> property with the parent 
control where this tab sheet is hosted. The property value is assigned at 
design-time when the 'Add Page' context option is used on the form designer 
in the Lazarus IDE. The value is <b>Nil</b> if the Parent property has not 
been assigned or is not derived from TPageControl.
</p>
<p>
Changing the property value causes the Parent property to be updated to 
reflect the new value.
</p>
</descr>
<seealso>
<link id="TPageControl"/>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
</seealso>
</element>

<element name="TTabSheet.TabIndex">
<short>
Ordinal position for the tab sheet in the visible tab sheets on the 
page control.
</short>
<descr>
<p>
<var>TabIndex</var> is a read-only <var>Integer</var> property with the 
ordinal position for the tab sheet in the list of active pages on the parent 
TPageControl instance. The property value is -1 when TabVisible is set to 
<b>False</b>.
</p>
<p>
TabIndex iterates over the TTabSheet instances in PageControl up to the value 
in its PageIndex property. The return value contains the ordinal position for 
the TTabSheet in the list of pages with their TabVisible property set to 
<b>True</b>. Pages which are not visible are not considered when the ordinal 
value is calculated.
</p>
</descr>
<seealso>
<link id="TTabSheet.TabVisible"/>
<link id="TTabSheet.PageControl"/>
<link id="TPageControl.Pages"/>
<link id="TCustomPage.PageIndex"/>
</seealso>
</element>

<element name="TTabSheet.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TTabSheet.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
<element name="TTabSheet.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TTabSheet.Caption" link="#lcl.controls.TControl.Caption"/>
<element name="TTabSheet.ChildSizing" link="#lcl.controls.TWinControl.ChildSizing"/>
<element name="TTabSheet.ClientHeight" link="#lcl.controls.TControl.ClientHeight"/>
<element name="TTabSheet.ClientWidth" link="#lcl.controls.TControl.ClientWidth"/>
<element name="TTabSheet.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TTabSheet.Font" link="#lcl.controls.TControl.Font"/>

<element name="TTabSheet.Height">
<short>
Height of the visible area for the tab sheet on the parent page control.
</short>
<descr>
<p>
<var>Height</var> is a published <var>Integer</var> property in 
<var>TTabSheet</var>, and contains the height in pixels for the visible area 
on the tab sheet. It reflects the height for the parent page control minus the 
space needed to display the captioned tab for the tab sheet and its borders.
</p>
<p>
The value in Height is not stored in the LCL component streaming mechanism, 
and changing the value in Height has no effect. The origin (Left, Top) and 
dimensions (Width, Height) for the tab sheet are determined when the parent 
control (TPageControl) is resized. Height always contains the number of 
vertical pixels in the visible area on the parent control.
</p>
<p>
Place a TScrollBox control (aligned to alClient) on the tab sheet to provide a 
container for scrollable content.
</p>
</descr>
<seealso>
<link id="#lcl.comctrls.TCustomPage.Height"/>
</seealso>
</element>

<element name="TTabSheet.ImageIndex" link="#lcl.comctrls.TCustomPage.ImageIndex"/>

<element name="TTabSheet.Left">
<short>
Left coordinate for the tab sheet in the visible area of the parent page 
control.
</short>
<descr>
<p>
<var>Left</var> is a published <var>Integer</var> property in 
<var>TTabSheet</var>. It contains the horizontal coordinate for the tab sheet 
within the visible area for the parent page control. 
</p>
<p>
The value in Left is not stored in the LCL component streaming mechanism, 
and changing the value in Left has no effect. The origin (Left, Top) and 
dimensions (Width, Height) for the tab sheet are determined when the parent 
control (TPageControl) is resized. Left is always set to 0 (zero).
</p>
</descr>
<seealso>
<link id="#lcl.comctrls.TCustomPage.Left"/>
</seealso>
</element>

<element name="TTabSheet.PageIndex" link="#lcl.comctrls.TCustomPage.PageIndex"/>
<element name="TTabSheet.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TTabSheet.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TTabSheet.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TTabSheet.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TTabSheet.ShowHint" link="#lcl.controls.TControl.ShowHint"/>

<element name="TTabSheet.TabVisible">
<short>Indicates if the tab is visible in the Parent control.</short>
<descr>
<p>
TabVisible indicates if the Tab is visible in the Parent control. The default 
value for the property is <b>True</b> in TTabSheet.
</p>
<p>
Changing the value in the property cause the Parent control to be updated to 
reflect the new value. No actions are performed in the method at design-time, 
or when the property value is not different than the stored value.
</p>
<p>
When the Parent control has been assigned and has a handle allocated, the 
TCustomTabControl in Parent is updated to reflect the new value for the 
property. When <b>True</b>, the active page in the Parent control is changed 
to the current page instance if one has not already been assigned in the 
Parent. The page and its handle are removed from the Tab control when the 
property value is <b>False</b>.
</p>
<p>
Use IsControlVisible to determine if the page is currently the active page 
displayed in the Parent tab control.
</p>
</descr>
<seealso>
<link id="#lcl.comctrls.TCustomPage.TabVisible">TCustomPage.TabVisible</link>
</seealso>
</element>

<element name="TTabSheet.Top">
<short>
Top coordinate for the tab sheet in the visible area of the parent page 
control.
</short>
<descr>
<p>
<var>Top</var> is a published <var>Integer</var> property in 
<var>TTabSheet</var>. It contains the vertical coordinate for the tab sheet 
within the visible area for the parent page control.
</p>
<p>
The value in Top is not stored in the LCL component streaming mechanism, 
and changing the value in Top has no effect. The origin (Left, Top) and 
dimensions (Width, Height) for the tab sheet are determined when the parent 
control (TPageControl) is resized. Top is always set to 0 (zero).
</p>
</descr>
<seealso>
<link id="#lcl.comctrls.TCustomPage.Top"/>
</seealso>
</element>

<element name="TTabSheet.Width">
<short>
Width of the visible area for the tab sheet on the parent page control.
</short>
<descr>
<p>
<var>Width</var> is a published <var>Integer</var> property in 
<var>TTabSheet</var>, and contains the width in pixels for the visible area 
on the tab sheet. It reflects the width for the parent page control minus the 
space needed to display its borders.
</p>
<p>
The value in Width is not stored in the LCL component streaming mechanism, 
and changing the value in Width has no effect. The origin (Left, Top) and 
dimensions (Width, Height) for the tab sheet are determined when the parent 
control (TPageControl) is resized. Width always contains the number of 
horizontal pixels in the visible area on the parent control.
</p>
<p>
Place a TScrollBox control (aligned to alClient) on the tab sheet to provide a 
container for scrollable content.
</p>
</descr>
<seealso>
<link id="#lcl.comctrls.TCustomPage.Width"/>
</seealso>
</element>

<element name="TTabSheet.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TTabSheet.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TTabSheet.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TTabSheet.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TTabSheet.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TTabSheet.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TTabSheet.OnHide" link="#lcl.comctrls.TCustomPage.OnHide"/>
<element name="TTabSheet.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TTabSheet.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TTabSheet.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TTabSheet.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TTabSheet.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TTabSheet.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TTabSheet.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TTabSheet.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TTabSheet.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TTabSheet.OnShow" link="#lcl.comctrls.TCustomPage.OnShow"/>
<element name="TTabSheet.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

<element name="TPageControl">
<short>
Implements a multi-page component with a series of tabs.
</short>
<descr>
<p>
<var>TPageControl</var> provides a series of tabs along an edge of a 
multi-page component to allow selection of one of the pages 
(<var>TTabSheet</var>) defined for the component.
</p>
<p>
To use <var>TPageControl</var>, select its icon from the Common Controls tab 
of the IDE Component Palette and place it at the desired location on the Form.
</p>
<p>
Use the Form Designer and Object Inspector to adjust its shape, size, 
alignment, anchoring, docking and other properties, then select the object 
and right click with the mouse to bring up a pop-up menu whose first item is 
'AddPage'. After you have added as many pages as you need, the individual 
pages can be edited by selecting <var>ActivePage</var> in the Object 
Inspector choosing the page required and editing its properties.
</p>
<p>
While a given page is selected, it is also possible to drop other controls 
(such as buttons, memo boxes etc) onto the page from the Component Palette.
</p>
<p>
Inherits most of its properties from <link 
id="#lcl.comctrls.TCustomTabControl">TCustomTabControl</link>
</p>
</descr>
<seealso>
<link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
</seealso>
</element>

<element name="TPageControl.FPageToUndock"/>

<element name="TPageControl.Clear">
<short>
Clears the list of tab names in the control, and frees the associated tab 
sheets or pages.
</short>
<descr>
<p>
By calling the <var>Clear</var> method of the protected <var>Tabs</var> 
property in the <var>TCustomTabControl</var> ancestor, this method removes 
all tab sheets from the PageControl. The <var>TPageControl.PageCount</var> is 
<var>0</var> afterwards.
</p>
<p>
Note, however, that the controls on the tab sheets are only destroyed when 
their <var>Owner</var> is one of the tab sheets. Otherwise they still exist on 
the form, but their <var>Parent</var> has been set to <var>nil</var>.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Tabs"/>
</seealso>
</element>

<element name="TPageControl.GetActivePageIndex">
<short>Gets the value for the ActivePageIndex property.</short>
<descr/>
<seealso>
<link id="TPageControl.ActivePageIndex"/>
</seealso>
</element>
<element name="TPageControl.GetActivePageIndex.Result">
<short>Value for the property.</short>
</element>

<element name="TPageControl.GetActiveTabSheet">
<short>Gets the value for the ActivePage property.</short>
<descr/>
<seealso>
<link id="TPageControl.ActivePage"/>
</seealso>
</element>
<element name="TPageControl.GetActiveTabSheet.Result">
<short>Value for the property.</short>
</element>

<element name="TPageControl.GetTabSheet">
<short>Gets the value for the Pages property.</short>
<descr/>
<seealso>
<link id="TPageControl.Pages"/>
</seealso>
</element>
<element name="TPageControl.GetTabSheet.Result">
<short>Value for the property.</short>
</element>
<element name="TPageControl.GetTabSheet.Index">
<short>
Ordinal position for the page or tab sheet requested in the method.
</short>
</element>

<element name="TPageControl.SetActivePageIndex">
<short>Sets the value for the ActivePageIndex property.</short>
<descr/>
<seealso>
<link id="TPageControl.ActivePageIndex"/>
</seealso>
</element>
<element name="TPageControl.SetActivePageIndex.AValue">
<short>New value for the property.</short>
</element>

<element name="TPageControl.SetActiveTabSheet">
<short>Sets the value for the ActivePage property.</short>
<descr/>
<seealso>
<link id="TPageControl.ActivePage"/>
</seealso>
</element>
<element name="TPageControl.SetActiveTabSheet.AValue">
<short>New value for the property.</short>
</element>

<element name="TPageControl.FindPageWithDockClient">
<short>
Finds the tab sheet in the Pages property which is the parent for the control 
in Client.
</short>
<descr/>
<seealso/>
</element>
<element name="TPageControl.FindPageWithDockClient.Result"/>
<element name="TPageControl.FindPageWithDockClient.Client"/>

<!-- protected -->
<element name="TPageControl.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TPageControl.GetPageClass">
<short>
Gets the class type used to create a new tab sheet (or page) for the page 
control.
</short>
<descr/>
<seealso/>
</element>
<element name="TPageControl.GetPageClass.Result">
<short>Class type used to create new instances of TPageControl.</short>
</element>

<element name="TPageControl.DoAddDockClient">
<short>
<var>DoAddDockClient</var> creates a new tab sheet in the PageControl, places 
the client on it and aligns it.
</short>
<descr>
<p>
Client cannot be added directly to TPageControl, but a new tab sheet should 
be added and client placed on it.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.DoAddDockClient">TWinControl.DoAddDockClient</link>
</seealso>
</element>

<element name="TPageControl.DockOver">
<short>
Called to check whether this control allows docking and where.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.DockOver">TWinControl.DockOver</link>
</seealso>
</element>
<element name="TPageControl.DockOver.Source">
<short>
Object with the display rectangle and alignment for the hover notification.
</short>
</element>
<element name="TPageControl.DockOver.X">
<short>
Horizontal coordinate for the dockable object.
</short>
</element>
<element name="TPageControl.DockOver.Y">
<short>
Vertical coordinate for the dockable object.
</short>
</element>
<element name="TPageControl.DockOver.State">
<short>
Indicates whether the object is entering, moving, or leaving the dock site.
</short>
</element>
<element name="TPageControl.DockOver.Accept">
<short>
Returns <b>True</b> if the object can be docked.
</short>
</element>

<element name="TPageControl.DoRemoveDockClient">
<short>
<var>DoRemoveDockClient</var> - frees the page which is being undocked.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.DoRemoveDockClient">TWinControl.DoRemoveDockClient</link>
</seealso>
</element>

<element name="TPageControl.DoUndockClientMsg" link="#lcl.controls.TWinControl.DoUndockClientMsg"/>

<element name="TPageControl.ChildClassAllowed">
<short>
Determines whether the specified class can be a child control on the 
TPageControl instance.
</short>
<descr>
<p>
<var>ChildClassAllowed</var> is an overridden method in 
<var>TPageControl</var>. It re-implements the inherited method, and returns
<b>True</b> if the class reference in ChildClass is assigned and derived from 
TTabSheet. The GetLCLCapability method in the widgetset class is also called 
to check whether child controls are allowed for the native control on a given 
platform.
</p>
<p>
ChildClassAllowed is called at run-time prior to using a control as the new 
value for the Parent property in one of its child control. It is also used at 
design-time when the component tree view or property editors are created/ 
updated in the Lazarus IDE.
</p>
</descr>
<seealso>
<link id="TTabSheet"/>
<link id="#lcl.controls.TWinControl.ChildClassAllowed">TWinControl.ChildClassAllowed</link>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
<link id="#lcl.controls.TControl.CHeckNewParent">TControl.CheckNewParent</link>
</seealso>
</element>
<element name="TPageControl.ChildClassAllowed.Result">
<short>
<b>True</b> if an instance of ChildClass can be used as a child control.
</short>
</element>
<element name="TPageControl.ChildClassAllowed.ChildClass">
<short>
Class reference used to create instances if the child control.
</short>
</element>

<element name="TPageControl.UpdateDockCaption">
<short>
Updates page captions to reflect the captions for docked clients controls.
</short>
<descr>
<p>
<var>UpdateDockCaption</var> is an overridden method in <var>TPageControl</var> 
which implements the method defined in the TWinControl ancestor. It ensures 
that the Caption for each of the Pages (TTabSheet) is updated with the Caption 
from the first child control on each page.
</p>
<p>
UpdateDockCaption is called when the control has an assigned HostDockSite, and 
either the list of docked clients has changed or one of their captions has 
changed.
</p>
<p>
In TPageControl, the Exclude argument is not used.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TPageControl.Pages"/>
<link id="TTabSheet.Caption"/>
<link id="#lcl.controls.TWinControl.UpdateDockCaption"/>
<link id="#lcl.controls.TWinControl.Controls"/>
<link id="#lcl.controls.TControl.HostDockSite"/>
<link id="#lcl.controls.TControl.Text"/>
</seealso>
</element>
<element name="TPageControl.UpdateDockCaption.Exclude">
<short>
Not used in TPageControl.
</short>
</element>

<element name="TPageControl.FindNextPage">
<short>
Gets the next tab sheet in the specified direction.
</short>
<descr>
<p>
<var>FindNextPage</var> is a <var>TTabSheet</var> function used to get the 
next tab sheet (or page) in the specified direction.
</p>
<p>
<var>CurPage</var> contains the TTabSheet instance where the search is 
started. If CurPage is not found in the list of Pages, the search starts at 
the first or last tab sheet in the specified search direction. The first when 
GoForward is <b>False</b>, and the last when GoForward is <b>True</b>.
</p>
<p>
<var>GoForward</var> indicates the direction for the search. When set to 
<b>True</b>, subsequent Pages after the value in CurPage are used. When set 
to <b>False</b>, previous pages are examined.
</p>
<p>
<var>CheckTabVisible</var> indicates whether the TTabSheet must be visible in 
the list of Pages. When set to <b>True</b>, the TabVisible property for the 
next tab sheet must also be set to <b>True</b>. If TabVisible is 
<b>False</b>, the tab sheet is skipped. When CheckTabVisible is set to 
<b>False</b> (the default value), all tab sheets in Pages are used.
</p>
<p>
The return value contains the first tab sheet that matches the search 
criteria and direction. The can be the same as CurPage if another tab sheet 
is not found. The return value is <b>Nil</b> when PageCount contains 0 (no 
tab sheets have been created).
</p>
<p>
FindNextPage is used to implement the SelectNextPage method.
</p>
</descr>
<seealso>
<link id="TPageControl.SelectNextPage"/>
<link id="TPageControl.Pages"/>
<link id="TCustomTabControl.PageCount"/>
<link id="TTabSheet.TabVisible"/>
</seealso>
</element>
<element name="TPageControl.FindNextPage.Result">
<short>
Tab sheet which matches the search criteria and direction. Nil if no tab 
sheets have been defined on the page control.
</short>
</element>
<element name="TPageControl.FindNextPage.CurPage">
<short>
Tab sheet where the search is started.
</short>
</element>
<element name="TPageControl.FindNextPage.GoForward">
<short>
<b>True</b> to search for a subsequent tab sheet. <b>False</b> to search for 
a prior tab sheet.
</short>
</element>
<element name="TPageControl.FindNextPage.CheckTabVisible">
<short>
<b>True</b> if the tab sheets must have their TabVisible property set. 
<b>False</b> to check all tab sheets.
</short>
</element>

<element name="TPageControl.SelectNextPage">
<short>
Locates and activates the next page in the specified direction.
</short>
<descr>
<p>
SelectNextPage is an overloaded method used to locate and activate the next 
page (or tab sheet) in the specified direction.
</p>
<p>
<var>GoForward</var> indicates the search direction for the next page. When 
set to <b>False</b>, the pages prior to ActivePage are examined. When set to 
<b>True</b>, the pages after active page are used.
</p>
<p>
An overloaded variant provides the CheckTabVisible argument, which forces use 
of tab sheets with their TabVisible property set to <b>True</b>.
</p>
<p>
SelectNextPage calls the FindNextPage method to locate the next tab sheet in 
the specified direction. If a tab sheet is found, it is assigned to the 
ActivePage property for the control.
</p>
</descr>
<seealso>
<link id="TPageControl.FindNextPage"/>
<link id="TPageControl.Pages"/>
<link id="TPageControl.ActivePage"/>
</seealso>
</element>
<element name="TPageControl.SelectNextPage.GoForward">
<short>
<b>True</b> to search for a subsequent tab sheet. <b>False</b> to search for 
a prior tab sheet.
</short>
</element>
<element name="TPageControl.SelectNextPage.CheckTabVisible">
<short>
<b>True</b> if the tab sheets must have their TabVisible property set. 
<b>False</b> to check all tab sheets.
</short>
</element>

<element name="TPageControl.IndexOfTabAt" link="#lcl.comctrls.TCustomTabControl.IndexOfTabAt"/>
<element name="TPageControl.IndexOfTabAt.Result"/>
<element name="TPageControl.IndexOfTabAt.X"/>
<element name="TPageControl.IndexOfTabAt.Y"/>
<element name="TPageControl.IndexOfTabAt.P"/>

<element name="TPageControl.IndexOfPageAt" link="#lcl.comctrls.TCustomTabControl.IndexOfPageAt"/>
<element name="TPageControl.IndexOfPageAt.Result"/>
<element name="TPageControl.IndexOfPageAt.X"/>
<element name="TPageControl.IndexOfPageAt.Y"/>
<element name="TPageControl.IndexOfPageAt.P"/>

<element name="TPageControl.AddTabSheet">
<short>
Creates and configures a new tab sheet for the page control.
</short>
<descr/>
<p>
<var>AddTabSheet</var> is a <var>TTabSheet</var> function used create and 
configure a new instance of the page class (TTabSheet) for the control. It is 
a convenience routine, added in Lazarus, to make the TPageControl class more 
intuitive to use.
</p>
<p>
AddTabSheet calls the GetPageClass method to get the class reference used to 
create a new TTabSheet instance. The current class instance is used as both 
the owner of the tab sheet and the value for the PageControl property.
</p>
<seealso>
<link id="TTabSheet.PageControl"/>
<link id="TPageControl.GetPageClass"/>
<link id="TPageControl.Pages"/>
</seealso>
</element>
<element name="TPageControl.AddTabSheet.Result">
<short>Page class instance created in the method.</short>
</element>

<element name="TPageControl.ActivePageIndex">
<short>
Ordinal position for the active page (tab sheet) on the page control.
</short>
<descr>
<p>
<var>ActivePageIndex</var> is an <var>Integer</var> property with the ordinal 
position in Pages where the ActivePage is stored. The value for the property 
is read from and written the PageIndex property in the TCustomTabControl ancestor.
</p>
<p>
ActivePageIndex contains -1 when PageCount is 0 (no tab sheets have been 
created), or ActivePage has not been assigned.
</p>
</descr>
<seealso>
<link id="TPageControl.Pages"/>
<link id="TPageControl.ActivePage"/>
<link id="TCustomTabControl.PageCount"/>
<link id="TCustomTabControl.PageIndex"/>
</seealso>
</element>

<element name="TPageControl.Pages">
<short>
Provides indexed access to the pages (tab sheets) on the page control.
</short>
<descr>
<p>
<var>Pages</var> is a read-only indexed <var>TTabSheet</var> property used to 
access pages (tab sheets) defined on the page control by their ordinal 
positions. Read access to the property value ensures that the page object is 
cast to the TTabSheet class type used in the control.
</p>
<p>
At design-time, use the ActivePage property to make one of the Pages become 
active on the control. Use the published TabIndex property to select a page 
by its ordinal position.
</p>
<p>
At run-time, use methods like FindNextPage or SelectNextPage to locate or 
select a TTabSheet for use as the ActivePage. You can also use 
ActivePageIndex to specify the active page by its ordinal position at 
run-time.
</p>
</descr>
<seealso>
<link id="TPageControl.ActivePage"/>
<link id="TPageControl.ActivePageIndex"/>
<link id="TPageControl.FindNextPage"/>
<link id="TPageControl.SelectNextPage"/>
<link id="TPageControl.TabIndex"/>
<link id="TTabSheet"/>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.Pages"/>
<link id="TCustomTabControl.PageIndex"/>
</seealso>
</element>
<element name="TPageControl.Pages.Index">
<short>
Ordinal position for the tab sheet (page) returned as the property value.
</short>
</element>

<element name="TPageControl.ActivePage">
<short>
The currently selected and active page (<var>TTabSheet</var>) on the page 
control.
</short>
<descr>
<p>
<var>ActivePage</var> is a TTabSheet property with the page that is active 
and selected on the page control. Read and write access to the property value 
are redirected to the ActivePageComponent property in the TCustomTabControl 
ancestor.
</p>
<remark>
Please note that ActivePage is implemented with a type that differs from 
TCustomTabControl, where it is defined as a <var>String</var>.
</remark>
</descr>
<seealso>
<link id="TCustomTabControl.ActivePage"/>
<link id="TCustomTabControl.ActivePageComponent"/>
</seealso>
</element>

<element name="TPageControl.OnGetDockCaption" link="#lcl.controls.TWinControl.OnGetDockCaption"/>
<element name="TPageControl.Align" link="#lcl.controls.TControl.Align"/>
<element name="TPageControl.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TPageControl.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TPageControl.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TPageControl.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TPageControl.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TPageControl.DockSite" link="#lcl.controls.TWinControl.DockSite"/>
<element name="TPageControl.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TPageControl.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TPageControl.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TPageControl.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TPageControl.Font" link="#lcl.controls.TControl.Font"/>
<element name="TPageControl.HotTrack" link="#lcl.comctrls.TCustomTabControl.HotTrack"/>
<element name="TPageControl.Images" link="#lcl.comctrls.TCustomTabControl.Images"/>
<element name="TPageControl.ImagesWidth" link="#lcl.comctrls.TCustomTabControl.ImagesWidth"/>
<element name="TPageControl.MultiLine" link="#lcl.comctrls.TCustomTabControl.MultiLine"/>
<element name="TPageControl.Options" link="#lcl.comctrls.TCustomTabControl.Options"/>
<element name="TPageControl.ParentBidiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TPageControl.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TPageControl.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TPageControl.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TPageControl.RaggedRight" link="#lcl.comctrls.TCustomTabControl.RaggedRight"/>
<element name="TPageControl.ScrollOpposite" link="#lcl.comctrls.TCustomTabControl.ScrollOpposite"/>
<element name="TPageControl.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TPageControl.ShowTabs" link="#lcl.comctrls.TCustomTabControl.ShowTabs"/>
<element name="TPageControl.Style" link="#lcl.comctrls.TCustomTabControl.Style"/>
<element name="TPageControl.TabHeight" link="#lcl.comctrls.TCustomTabControl.TabHeight"/>
<element name="TPageControl.TabIndex" link="#lcl.comctrls.TCustomTabControl.TabIndex"/>
<element name="TPageControl.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TPageControl.TabPosition" link="#lcl.comctrls.TCustomTabControl.TabPosition"/>
<element name="TPageControl.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TPageControl.TabWidth" link="#lcl.comctrls.TCustomTabControl.TabWidth"/>
<element name="TPageControl.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TPageControl.OnChange" link="#lcl.comctrls.TCustomTabControl.OnChange"/>
<element name="TPageControl.OnChanging" link="#lcl.comctrls.TCustomTabControl.OnChanging"/>
<element name="TPageControl.OnCloseTabClicked" link="#lcl.comctrls.TCustomTabControl.OnCloseTabClicked"/>
<element name="TPageControl.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TPageControl.OnDockDrop" link="#lcl.controls.TWinControl.OnDockDrop"/>
<element name="TPageControl.OnDockOver" link="#lcl.controls.TWinControl.OnDockOver"/>
<element name="TPageControl.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TPageControl.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TPageControl.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TPageControl.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TPageControl.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TPageControl.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TPageControl.OnGetImageIndex" link="#lcl.comctrls.TCustomTabControl.OnGetImageIndex"/>
<element name="TPageControl.OnGetSiteInfo" link="#lcl.controls.TWinControl.OnGetSiteInfo"/>
<element name="TPageControl.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TPageControl.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TPageControl.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TPageControl.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TPageControl.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TPageControl.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TPageControl.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TPageControl.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TPageControl.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TPageControl.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TPageControl.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TPageControl.OnUnDock" link="#lcl.controls.TWinControl.OnUnDock"/>

<element name="TTabControlStrings">
<short>
<var>TTabControlStrings</var> - the Strings that appear on the tabs of 
<var>TTabControl</var>.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlStrings.FHotTrack"/>
<element name="TTabControlStrings.FImages"/>
<element name="TTabControlStrings.FMultiLine"/>
<element name="TTabControlStrings.FMultiSelect"/>
<element name="TTabControlStrings.FOwnerDraw"/>
<element name="TTabControlStrings.FRaggedRight"/>
<element name="TTabControlStrings.FScrollOpposite"/>
<element name="TTabControlStrings.FTabControl"/>
<element name="TTabControlStrings.FUpdateCount"/>

<element name="TTabControlStrings.GetTabIndex">
<short>
<var>GetTabIndex</var> - returns the Index value of the current Tab.</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlStrings.GetTabIndex.Result">
<short>
Ordinal position for the selected tab sheet on the control.
</short>
</element>

<element name="TTabControlStrings.SetHotTrack">
<short>
Sets the value for the HotTrack property.
</short>
<descr/>
<seealso>
<link id="TTabControlStrings.HotTrack"/>
</seealso>
</element>
<element name="TTabControlStrings.SetHotTrack.AValue">
<short>
New value for the HotTrack property.
</short>
</element>

<element name="TTabControlStrings.SetImages">
<short>
Sets the value for the Images property.
</short>
<descr/>
<seealso>
<link id="TTabControlStrings.Images"/>
</seealso>
</element>
<element name="TTabControlStrings.SetImages.AValue">
<short>
New value for the Images property.
</short>
</element>

<element name="TTabControlStrings.SetMultiLine">
<short>
Sets the value for the MultiLine property.
</short>
<descr/>
<seealso>
<link id="TTabControlStrings.MultiLine"/>
</seealso>
</element>
<element name="TTabControlStrings.SetMultiLine.AValue">
<short>
New value for the MultiLine property.
</short>
</element>

<element name="TTabControlStrings.SetMultiSelect">
<short>
Sets the value for the MultiSelect property.
</short>
<descr/>
<seealso>
<link id="TTabControlStrings.MultiSelect"/>
</seealso>
</element>
<element name="TTabControlStrings.SetMultiSelect.AValue">
<short>
New value for the MultiSelect property.
</short>
</element>

<element name="TTabControlStrings.SetOwnerDraw">
<short>
Sets the value for the OwnerDraw property.
</short>
<descr/>
<seealso>
<link id="TTabControlStrings.OwnerDraw"/>
</seealso>
</element>
<element name="TTabControlStrings.SetOwnerDraw.AValue">
<short>
New value for the OwnerDraw property.
</short>
</element>

<element name="TTabControlStrings.SetRaggedRight">
<short>
Sets the value for the RaggedRight property.
</short>
<descr/>
<seealso>
<link id="TTabControlStrings.RaggedRight"/>
</seealso>
</element>
<element name="TTabControlStrings.SetRaggedRight.AValue">
<short>
New value for the RaggedRight property.
</short>
</element>

<element name="TTabControlStrings.SetScrollOpposite">
<short>
Sets the value for the ScrollOpposite property.
</short>
<descr/>
<seealso>
<link id="TTabControlStrings.ScrollOpposite"/>
</seealso>
</element>
<element name="TTabControlStrings.SetScrollOpposite.AValue">
<short>
New value for the ScrollOpposite property.
</short>
</element>

<element name="TTabControlStrings.SetTabIndex">
<short>
Sets the value for the TabIndex property.
</short>
<descr/>
<seealso>
<link id="TTabControlStrings.TabIndex"/>
</seealso>
</element>
<element name="TTabControlStrings.SetTabIndex.AValue">
<short>
New value for the TabIndex property.
</short>
</element>

<element name="TTabControlStrings.Create">
<short>
<var>Create</var> - constructor for <var>TTabControlStrings</var>: calls 
inherited <var>Create</var> then sets many local defaults.</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TTabControlStrings</var>. It 
calls the inherited <var>Create</var> method then sets default values in the 
class instance.
</p>
<p>
Among the defaults set are:
</p>
<ul>
<li>
HotTrack, Multiline, MultiSelect, OwnerDraw, RaggedRight, ScrollOpposite (all set to <b>False</b>)
</li>
<li>
Tab height and width (Set to zero).
</li>
</ul>
</descr>
<seealso>
<link id="#rtl.system.TObject.Create">TObject.Create</link>
</seealso>
</element>
<element name="TTabControlStrings.Create.TheTabControl">
<short>
TTabControl instance where the string values are used.
</short>
</element>

<element name="TTabControlStrings.GetHitTestInfoAt">
<short>
Returns hit test results for the specified location at X and Y.
</short>
<descr>
<p>
<var>GetHitTestInfoAt</var> always returns an empty THitTests set in 
<var>TTabControlStrings</var>.
</p>
</descr>
<seealso>
<link id="THitTest"/>
<link id="THitTests"/>
</seealso>
</element>
<element name="TTabControlStrings.GetHitTestInfoAt.Result">
<short>
Set of THitTest values for the specified mouse pointer coordinates.
</short>
</element>
<element name="TTabControlStrings.GetHitTestInfoAt.X">
<short>
Horizontal coordinate checked in the method.
</short>
</element>
<element name="TTabControlStrings.GetHitTestInfoAt.Y">
<short>
Vertical coordinate checked in the method.
</short>
</element>

<element name="TTabControlStrings.GetSize">
<short>Gets the size for the String displayed on a tab control.</short>
<descr>
<p>
<var>GetSize</var> is an abstract virtual method in 
<var>TTabControlStrings</var>. It must be implemented in a descendent class.
</p>
</descr>
</element>
<element name="TTabControlStrings.GetSize.Result">
<short>
Returns a set of THitTest result values for the specified location.
</short>
</element>

<element name="TTabControlStrings.IndexOfTabAt">
<short>
Gets the ordinal position for the value of the tab at the specified 
location X, Y.
</short>
<descr>
<p>
<var>IndexOfTabAt</var> always returns 0 in TTabControlStrings. It is 
overridden in descendent classes to return the position in the Notebook or 
TabSheet for the tabbed control.
</p>
<p>
Used in the implementation of the IndexOfTabAt method in TTabControl.
</p>
</descr>
<seealso/>
</element>
<element name="TTabControlStrings.IndexOfTabAt.Result">
<short>
Ordinal position in Items for the named tab at the specified coordinates.
</short>
</element>
<element name="TTabControlStrings.IndexOfTabAt.X">
<short>
Horizontal coordinate for the tab to locate in Items.
</short>
</element>
<element name="TTabControlStrings.IndexOfTabAt.Y">
<short>
Vertical coordinate for the tab to locate in Items.
</short>
</element>

<element name="TTabControlStrings.RowCount">
<short>
Returns the number of rows needed (for a multi-row string).
</short>
<descr>
<p>
<var>RowCount</var> always returns 1 in TTabControlStrings.
</p>
</descr>
<seealso/>
</element>
<element name="TTabControlStrings.RowCount.Result">
<short>
Number of row needed to represent tab names on the associated control.
</short>
</element>

<element name="TTabControlStrings.TabRect">
<short>
Returns the coordinates of the rectangle for the tab with specified index.
</short>
<descr>
<p>
<var>TabRect</var> always returns a zero-filled TRect instance in 
TTabControlStrings.
</p>
</descr>
<seealso/>
</element>
<element name="TTabControlStrings.TabRect.Result">
<short>
TRect instance with the display area for the tab at the specified ordinal position.
</short>
</element>
<element name="TTabControlStrings.TabRect.Index">
<short>
Ordinal position for the tab with the caption represented in the return value.
</short>
</element>

<element name="TTabControlStrings.ImageListChange">
<short>
<var>ImageListChange</var> - method for changing the image list.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlStrings.ImageListChange.Sender">
<short>
Object (TCustomTabControl) instance for the change notification.
</short>
</element>

<element name="TTabControlStrings.ScrollTabs">
<short>
Scrolls the tabs by the amount specified in Delta.
</short>
<descr>
<p>
<var>ScrollTabs</var> sets the visible when a scroll message occurs on the 
associated tab control.
</p>
</descr>
<seealso/>
</element>
<element name="TTabControlStrings.ScrollTabs.Delta">
<short>
Indicates the direction and number of tabs for the scroll operation.
</short>
</element>

<element name="TTabControlStrings.TabControlBoundsChange">
<short>
<var>TabControlBoundsChange</var> - method for dealing with a change in the 
bounds of a Tab Control.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlStrings.UpdateTabImages">
<short>
<var>UpdateTabImages</var> - bring the tab images up to date.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlStrings.BeginUpdate">
<short>
<var>BeginUpdate</var> increments the Update count.
</short>
<descr/>
<seealso>
<link id="#rtl.Classes.TStrings.BeginUpdate">TStrings.BeginUpdate</link>
</seealso>
</element>

<element name="TTabControlStrings.EndUpdate">
<short>
<var>EndUpdate</var> decrements the Update count.
</short>
<descr/>
<errors>An exception is raised if the Update count is zero</errors>
<seealso>
<link id="#rtl.classes.TStrings.EndUpdate">TStrings.EndUpdate</link>
</seealso>
</element>

<element name="TTabControlStrings.IsUpdating">
<short>
<var>IsUpdating</var> - returns <b>True</b> if in the process of updating.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlStrings.IsUpdating.Result">
<short>
Returns <b>True</b> if an update is in progress.
</short>
</element>

<element name="TTabControlStrings.TabControl">
<short>
The <var>TabControl</var> to which these strings apply.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlStrings.TabIndex">
<short>
<var>TabIndex</var> - the index of the current Tab.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlStrings.HotTrack">
<short>
<var>HotTrack</var> - the property whereby the item under the mouse pointer 
becomes emphasized.
</short>
<descr/>
<seealso>
<link id="#lcl.comctrls.TCustomListView.HotTrack">TCustomListView.HotTrack</link>
</seealso>
</element>

<element name="TTabControlStrings.Images">
<short>
The list of <var>Images</var> associated with the Strings for these tabs.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlStrings.MultiLine">
<short>
<var>MultiLine</var> - if <b>True</b>, multiple lines may be used in Tab 
strings.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlStrings.MultiSelect">
<short>
<var>MultiSelect</var> - if <b>True</b>, multiple tabs can be selected, for 
example by holding down Shift or Ctrl keys while selecting.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlStrings.OwnerDraw">
<short>
<var>OwnerDraw</var> - if <b>True</b>, Owner object (or calling routine) can 
specify drawing methods.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlStrings.RaggedRight">
<short>
<var>RaggedRight</var> - if <b>True</b>, strings are un-justified or 
un-aligned with ragged right margin.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlStrings.ScrollOpposite">
<short>
<var>ScrollOpposite</var> - if <b>True</b>, scrolling proceeds in opposite 
direction to usual.
</short>
<descr/>
<seealso/>
</element>

<element name="TNoteBookStringsTabControl">
<short>
Implements the tabbed page control used in TNoteBookStringsTabControl.
</short>
<descr>
<p>
TNoteBookStringsTabControl is a TPageControl descendant which implements the 
tabbed page control used in TNoteBookStringsTabControl.
</p>
</descr>
<seealso>
<link id="TPageControl"/>
</seealso>
</element>

<element name="TNoteBookStringsTabControl.FHandleCreated"/>

<element name="TNoteBookStringsTabControl.CreateHandle">
<short/>
<descr/>
<seealso/>
</element>

<element name="TNoteBookStringsTabControl.AdjustXY">
<short>
Adjusts the specified coordinates to the ClientOrigin for the parent.
</short>
<descr>
<p>
The adjustment amount is the difference between the <var>ClientOrigin</var> 
for the control and the <var>ClientOrigin</var> for the <var>Parent</var> of 
the control. The offset amounts are then applied to the values <var>X</var> 
and <var>Y</var>.
</p>
<p>
Called from the <var>DragDrop</var>, <var>DragOver</var>, 
<var>MouseMove</var>, <var>MouseDown</var>, and <var>MouseUp</var> methods.
</p>
</descr>
<seealso>
<link id="TNoteBookStringsTabControl.DragDrop"/>
<link id="TNoteBookStringsTabControl.DragOver"/>
<link id="TNoteBookStringsTabControl.MouseMove"/>
<link id="TNoteBookStringsTabControl.MouseDown"/>
<link id="TNoteBookStringsTabControl.MouseUp"/>
</seealso>
</element>
<element name="TNoteBookStringsTabControl.AdjustXY.X">
<short>Horizontal coordinate adjusted in the method.</short>
</element>
<element name="TNoteBookStringsTabControl.AdjustXY.Y">
<short>Vertical coordinate adjusted in the method.</short>
</element>

<element name="TNoteBookStringsTabControl.DoStartDrag">
<short/>
<descr/>
<seealso/>
</element>
<element name="TNoteBookStringsTabControl.DoStartDrag.DragObject">
<short/>
</element>

<element name="TNoteBookStringsTabControl.DragDrop">
<short/>
<descr/>
<seealso/>
</element>
<element name="TNoteBookStringsTabControl.DragDrop.Source">
<short/>
</element>
<element name="TNoteBookStringsTabControl.DragDrop.X">
<short/>
</element>
<element name="TNoteBookStringsTabControl.DragDrop.Y">
<short/>
</element>

<element name="TNoteBookStringsTabControl.DragOver">
<short/>
<descr/>
<seealso/>
</element>
<element name="TNoteBookStringsTabControl.DragOver.Source">
<short/>
</element>
<element name="TNoteBookStringsTabControl.DragOver.X">
<short/>
</element>
<element name="TNoteBookStringsTabControl.DragOver.Y">
<short/>
</element>
<element name="TNoteBookStringsTabControl.DragOver.State">
<short/>
</element>
<element name="TNoteBookStringsTabControl.DragOver.Accept">
<short/>
</element>

<element name="TNoteBookStringsTabControl.MouseDown">
<short/>
<descr/>
<seealso/>
</element>
<element name="TNoteBookStringsTabControl.MouseDown.Button">
<short/>
</element>
<element name="TNoteBookStringsTabControl.MouseDown.Shift">
<short/>
</element>
<element name="TNoteBookStringsTabControl.MouseDown.X">
<short/>
</element>
<element name="TNoteBookStringsTabControl.MouseDown.Y">
<short/>
</element>

<element name="TNoteBookStringsTabControl.MouseMove">
<short/>
<descr/>
<seealso/>
</element>
<element name="TNoteBookStringsTabControl.MouseMove.Shift">
<short/>
</element>
<element name="TNoteBookStringsTabControl.MouseMove.X">
<short/>
</element>
<element name="TNoteBookStringsTabControl.MouseMove.Y">
<short/>
</element>

<element name="TNoteBookStringsTabControl.MouseUp">
<short/>
<descr/>
<seealso/>
</element>
<element name="TNoteBookStringsTabControl.MouseUp.Button">
<short/>
</element>
<element name="TNoteBookStringsTabControl.MouseUp.Shift">
<short/>
</element>
<element name="TNoteBookStringsTabControl.MouseUp.X">
<short/>
</element>
<element name="TNoteBookStringsTabControl.MouseUp.Y">
<short/>
</element>

<element name="TNoteBookStringsTabControl.MouseEnter">
<short/>
<descr/>
<seealso/>
</element>

<element name="TNoteBookStringsTabControl.MouseLeave">
<short/>
<descr/>
<seealso/>
</element>

<element name="TNoteBookStringsTabControl.GetPopupMenu">
<short>
Gets the value for the PopupMenu property.
</short>
<descr>
<p>
<var>GetPopupMenu</var> is an overridden <var>TPopupMenu</var> function which 
implements the read access specifier for the <var>PopupMenu</var> property. 
The return value contains the TPopupMenu instance from the <var>Parent</var> 
control when it is derived from TTabControl and <var>Options</var> contains 
the value <var>nboHidePageListPopup</var>. Otherwise, the inherited method in 
<var>TControl</var> is called to get the popup menu instance for the control.
</p>
</descr>
<seealso>
<link id="TTabControl"/>
<link id="TPageControl.Options"/>
<link id="#lcl.menus.TPopupMenu">TPopupMenu</link>
<link id="#lcl.controls.TControl.GetPopupMenu">TControl.GetPopupMenu</link>
<link id="#lcl.controls.TControl.PopupMenu">TControl.PopupMenu</link>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
</seealso>
</element>
<element name="TNoteBookStringsTabControl.GetPopupMenu.Result">
<short>Value for the property.</short>
</element>

<element name="TNoteBookStringsTabControl.WSRegisterClass">
<short/>
<descr/>
<seealso/>
</element>

<element name="TNoteBookStringsTabControlClass">
<short>Class type reference for TNoteBookStringsTabControl</short>
<descr/>
<seealso>
<link id="TTabControlNoteBookStrings.GetInternalTabControllClass"/>
</seealso>
</element>

<element name="TTabControlNoteBookStrings">
<short>
<var>TTabControlNoteBookStrings</var> - instance of 
<var>TTabControlStrings</var> for use with a <var>TNoteBook</var>.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControlNoteBookStrings.FNoteBook"/>
<element name="TTabControlNoteBookStrings.FInHandleCreated"/>

<element name="TTabControlNoteBookStrings.GetStyle">
<short>Gets the value for the Style property.</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlNoteBookStrings.GetStyle.Result">
<short>Value for the Style property.</short>
</element>

<element name="TTabControlNoteBookStrings.SetStyle">
<short>Sets the value for the Style property.</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlNoteBookStrings.SetStyle.AValue">
<short>New value for the Style property.</short>
</element>

<element name="TTabControlNoteBookStrings.GetInternalTabControllClass">
<short>Gets a new instance of a tab control</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlNoteBookStrings.GetInternalTabControllClass.Result">
<short/>
</element>

<element name="TTabControlNoteBookStrings.Get">
<short>
<var>Get</var> returns the text string found on the indexed page.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStringList">TStringList</link>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.Get.Result">
<short/>
</element>
<element name="TTabControlNoteBookStrings.Get.Index">
<short/>
</element>

<element name="TTabControlNoteBookStrings.GetCount">
<short>Gets the value for the Count property.</short>
<descr>
<p>
<var>GetCount</var> is an overridden method in 
<var>TTabControlNoteBookStrings</var> used to get the value for the 
<var>Count</var> property. In TTabControlNoteBookStrings, the property 
contains the value from the <var>PageCount</var> property in 
<var>NoteBook</var>.
</p>
</descr>
<seealso>
<link id="TTabControlNoteBookStrings.Notebook"/>
<link id="TCustomTabControl.PageCount"/>
<link id="#rtl.classes.TStrings.Count">TStrings.Count</link>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.GetCount.Result">
<short>Value for the Count property.</short>
</element>

<element name="TTabControlNoteBookStrings.GetObject">
<short>
<var>GetObject</var> returns the indexed object from the paged notebook.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStrings.Objects">TStrings.Objects</link>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.GetObject.Result">
<short/>
</element>
<element name="TTabControlNoteBookStrings.GetObject.Index">
<short/>
</element>

<element name="TTabControlNoteBookStrings.GetTabIndex">
<short>Gets the value for the TabIndex property.</short>
<descr/>
<seealso>
<link id="TTabControlStrings.GetTabIndex"/>
<link id="TTabControlStrings.TabIndex"/>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.GetTabIndex.Result">
<short>Value for the TabIndex property.</short>
</element>

<element name="TTabControlNoteBookStrings.GetTabPosition">
<short>Gets the value for the TabPosition property.</short>
<descr/>
<seealso>
<link id="TTabControlNoteBookStrings.TabPosition"/>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.GetTabPosition.Result">
<short>Value for the TabPosition property.</short>
</element>

<element name="TTabControlNoteBookStrings.NBChanging">
<short>
<var>NBChanging</var> - method for dealing with the process for change in a 
NoteBook.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlNoteBookStrings.NBChanging.Sender">
<short/>
</element>
<element name="TTabControlNoteBookStrings.NBChanging.AllowChange">
<short/>
</element>

<element name="TTabControlNoteBookStrings.NBGetImageIndex">
<short>
<var>NBGetImageIndex</var> - obtains the Image Index associated with a given 
Tab Index in the NoteBook.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlNoteBookStrings.NBGetImageIndex.Sender">
<short/>
</element>
<element name="TTabControlNoteBookStrings.NBGetImageIndex.TheTabIndex">
<short/>
</element>
<element name="TTabControlNoteBookStrings.NBGetImageIndex.ImageIndex">
<short/>
</element>

<element name="TTabControlNoteBookStrings.NBPageChanged">
<short>
<var>NBPageChanged</var> - Method for dealing with a NoteBook page that has 
changed.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControlNoteBookStrings.NBPageChanged.Sender">
<short/>
</element>

<element name="TTabControlNoteBookStrings.NBHandleCreated">
<short>
Ensures that the bounds for the Tab control are updated when the handle for 
the class instance is created.
</short>
<descr>
<p>
Implements an internal event handler assigned to the 
TNoteBookStringsTabControl instance for the class.
</p>
</descr>
<seealso/>
</element>
<element name="TTabControlNoteBookStrings.NBHandleCreated.Sender">
<short/>
</element>

<element name="TTabControlNoteBookStrings.Put">
<short>
<var>Put</var> writes the supplied string to the indexed page of the notebook.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStringList">TStringList</link>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.Put.Index">
<short/>
</element>
<element name="TTabControlNoteBookStrings.Put.S">
<short/>
</element>

<element name="TTabControlNoteBookStrings.PutObject">
<short>
<var>PutObject</var> stores the supplied object at the indexed place in the 
paged notebook.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStrings.Objects">TStrings.Objects</link>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.PutObject.Index">
<short/>
</element>
<element name="TTabControlNoteBookStrings.PutObject.AObject">
<short/>
</element>

<element name="TTabControlNoteBookStrings.SetImages">
<short>
<var>SetImages</var> - if the supplied ImageList is of correct type, stores 
it in the notebook <var>Images</var> area.
</short>
<descr/>
<seealso>
<link id="TTabControlStrings.SetImages"/>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.SetImages.AValue">
<short/>
</element>

<element name="TTabControlNoteBookStrings.SetMultiLine">
<short>Sets the value for the MultiLine property.</short>
<descr/>
<seealso>
<link id="TTabControlStrings.SetMultiLine"/>
<link id="TTabControlStrings.MultiLine"/>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.SetMultiLine.AValue">
<short>New value for the MultiLine property.</short>
</element>

<element name="TTabControlNoteBookStrings.SetTabIndex">
<short>Sets the value for the TabIndex property.</short>
<descr/>
<seealso>
<link id="TTabControlStrings.SetTabIndex"/>
<link id="TTabControlStrings.TabIndex"/>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.SetTabIndex.AValue">
<short>New value for the TabIndex property.</short>
</element>

<element name="TTabControlNoteBookStrings.SetUpdateState">
<short>
<var>SetUpdateState</var> - if Updating is <b>True</b>, calls 
<var>BeginUpdate</var>; otherwise calls <var>EndUpdate</var>.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStrings">TStrings</link>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.SetUpdateState.Updating">
<short/>
</element>

<element name="TTabControlNoteBookStrings.Create">
<short>
<var>Create</var> - constructor for <var>TTabControlNoteBookStrings</var>: 
calls inherited <var>Create</var> then sets some default Actions.
</short>
<descr>
<p>
<var>Create</var> - constructor for <var>TTabControlNoteBookStrings</var>: 
calls inherited <var>Create</var> then sets some default Actions.
</p>
<p>
Among the actions set are: OnGetImageIndex, OnChanging, OnChange. Notebook is 
created with a nominated parent.
</p>
</descr>
<seealso>
<link id="TTabControlStrings.Create"/>
<link id="#rtl.system.TObject.Create">TObject.Create</link>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.Create.TheTabControl">
<short/>
</element>

<element name="TTabControlNoteBookStrings.Destroy">
<short>
<var>Destroy</var> - destructor for <var>TTabControlNoteBookStrings</var>: 
frees NoteBook then calls inherited <var>Destroy</var>.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TStrings.Destroy">TStrings.Destroy</link>
</seealso>
</element>

<element name="TTabControlNoteBookStrings.Clear">
<short>
<var>Clear</var> calls the <var>Clear</var> method for the client Notebook.
</short>
<descr/>
<seealso>
<link id="#rtl.Classes.TStrings.Clear">TStrings.Clear</link>
</seealso>
</element>

<element name="TTabControlNoteBookStrings.Delete">
<short>
<var>Delete</var> calls the <var>Delete</var> method for the client NoteBook.
</short>
<descr/>
<seealso>
<link id="#rtl.Classes.TStrings.Delete">TStrings.Delete</link>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.Delete.Index">
<short/>
</element>

<element name="TTabControlNoteBookStrings.Insert">
<short>
<var>Insert</var> calls the <var>Insert</var> method for the client NoteBook.
</short>
<descr/>
<seealso>
<link id="#rtl.Classes.TStrings.Insert">TStrings.Insert</link>
</seealso>
</element>
<element name="TTabControlNoteBookStrings.Insert.Index">
<short/>
</element>
<element name="TTabControlNoteBookStrings.Insert.S">
<short/>
</element>

<element name="TTabControlNoteBookStrings.GetSize" link="#lcl.comctrls.TTabControlStrings.GetSize"/>
<element name="TTabControlNoteBookStrings.GetSize.Result"/>

<element name="TTabControlNoteBookStrings.TabControlBoundsChange" link="#lcl.comctrls.TTabControlStrings.TabControlBoundsChange">
<short/>
<descr/>
<seealso/>
</element>

<element name="TTabControlNoteBookStrings.IndexOfTabAt" link="#lcl.comctrls.TTabControlStrings.IndexOfTabAt"/>
<element name="TTabControlNoteBookStrings.IndexOfTabAt.Result"/>
<element name="TTabControlNoteBookStrings.IndexOfTabAt.X"/>
<element name="TTabControlNoteBookStrings.IndexOfTabAt.Y"/>

<element name="TTabControlNoteBookStrings.TabPosition">
<short>
Indicates the alignment and orientation for the tabs on the control.
</short>
<descr>
<p>
<var>TabPosition</var> is a <var>TTabPosition</var> property which indicates 
how the Tabs on the control are aligned and oriented. The default value for 
the property is tpTop, and causes the tabs to align across the top of the 
client display area. The rise area for the control is also aligned to the top 
of the control.
</p>
<p>
Changing the property value causes the widgetset class to be updated.
</p>
</descr>
<seealso>
<link id="TTabPosition"/>
</seealso>
</element>

<element name="TTabControlNoteBookStrings.Style">
<short>
Drawing style used for the tabs on the control.
</short>
<descr>
<p>
<var>Style</var> is a <var>TTabStyle</var> property which controls the 
drawing style used for the tabs on the control. Read and write access to the 
property value is re-directed to the Style property in Notebook. The default 
value for the property is tsTabs, as set in the TCustomTabControl instance in 
NoteBook.
</p>
<p>
When a new value is assigned to the property, the TabControlBoundsChange 
method is called to re-calculate and apply the height and/or width for the 
tab control.
</p>
</descr>
<seealso>
<link id="TTabControlNoteBookStrings.TabControlBoundsChange"/>
<link id="TTabControlNoteBookStrings.NoteBook"/>
<link id="TCustomTabControl.Style"/>
<link id="TTabStyle"/>
</seealso>
</element>

<element name="TTabControlNoteBookStrings.NoteBook">
<short>
The tab control where the string values are displayed as the caption for the 
tabs.
</short>
<descr/>
<seealso/>
</element>

<element name="TTabControl">
<short>
<var>TTabControl</var> - a series of <var>Tabs</var> along the edge of a 
display area; selection of a <var>Tab</var> governs the contents of the 
<var>DisplayRect</var>.
</short>
<descr>
<p>
<var>TTabControl</var> - a series of <var>Tabs</var> along the edge of a 
display area; selection of a <var>Tab</var> governs the contents of the 
<var>DisplayRect</var>
</p>
<p>
Use <var>TTabControl</var> by selecting its icon from the Common Controls tab 
of the IDE Component Palette and placing it at the desired location on the 
<var>Form</var>. Use the Form Designer and Object Inspector to adjust its 
shape, size, alignment, anchoring and other properties. Tabs can be added or 
removed from the component by selecting it, then right-clicking with the 
mouse to get a pop-up menu whose first item is 'Add Tab'. Once created, the 
Tabs can be edited by selecting the <var>Tabs</var> entry in the Object 
Inspector and selecting the ellipsis (...) which will cause a pop-up String 
editor to appear. The tabs can be given new captions, moved up and down the 
list or removed altogether as required.
</p>
<p>
Each Tab has an Index (starting from 0) and this index can be used to specify 
an entry from <var>Images</var> for display in the <var>DisplayRect</var>.
</p>
</descr>
<seealso>
<link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
</seealso>
</element>

<element name="TTabControl.FImageChangeLink"/>
<element name="TTabControl.FOnChange"/>
<element name="TTabControl.FOnChangeNeeded"/>
<element name="TTabControl.FTabControlCreating"/>
<element name="TTabControl.FTabs"/>
<element name="TTabControl.FCanvas"/>

<element name="TTabControl.AdjustDisplayRect">
<short>
Adjusts the display rectangle to reserve space for an internal border drawn 
on the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.AdjustDisplayRect.ARect">
<short/>
</element>

<element name="TTabControl.GetDisplayRect">
<short>Gets the value for the DisplayRect property.</short>
<descr/>
<seealso>
<link id="TTabControl.DisplayRect"/>
</seealso>
</element>
<element name="TTabControl.GetDisplayRect.Result">
<short>Value for the property.</short>
</element>

<element name="TTabControl.GetHotTrack">
<short>Gets the value for the HotTrack property.</short>
<descr/>
<seealso>
<link id="TTabControl.HotTrack"/>
</seealso>
</element>
<element name="TTabControl.GetHotTrack.Result">
<short>Value for the property.</short>
</element>

<element name="TTabControl.GetMultiLine">
<short>Gets the value for the MultiLine property.</short>
<descr/>
<seealso>
<link id="TTabControl.MultiLine"/>
</seealso>
</element>
<element name="TTabControl.GetMultiLine.Result">
<short>Value for the property.</short>
</element>

<element name="TTabControl.GetMultiSelect">
<short>Gets the value for the MultiSelect property.</short>
<descr/>
<seealso>
<link id="TTabControl.MultiSelect"/>
</seealso>
</element>
<element name="TTabControl.GetMultiSelect.Result">
<short>Value for the property.</short>
</element>

<element name="TTabControl.GetOwnerDraw">
<short>Gets the value for the OwnerDraw property.</short>
<descr/>
<seealso>
<link id="TTabControl.OwnerDraw"/>
</seealso>
</element>
<element name="TTabControl.GetOwnerDraw.Result">
<short>Value for the property.</short>
</element>

<element name="TTabControl.GetRaggedRight">
<short>Gets the value for the RaggedRight property.</short>
<descr/>
<seealso>
<link id="TTabControl.RaggedRight"/>
</seealso>
</element>
<element name="TTabControl.GetRaggedRight.Result">
<short>Value for the property.</short>
</element>

<element name="TTabControl.GetScrollOpposite">
<short>Gets the value for the ScrollOpposite property.</short>
<descr/>
<seealso>
<link id="TTabControl.ScrollOpposite"/>
</seealso>
</element>
<element name="TTabControl.GetScrollOpposite.Result">
<short>Value for the property.</short>
</element>

<element name="TTabControl.GetTabIndex">
<short>Gets the value for the TabIndex property.</short>
<descr/>
<seealso>
<link id="TTabControl.TabIndex"/>
</seealso>
</element>
<element name="TTabControl.GetTabIndex.Result">
<short>Value for the property.</short>
</element>

<element name="TTabControl.GetTabRectWithBorder">
<short>
Gets a rectangle with the space reserved for the tabs on the control 
including border space.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.GetTabRectWithBorder.Result">
<short/>
</element>

<element name="TTabControl.GetTabStop">
<short>Gets the value for the TabStop property.</short>
<descr/>
<seealso>
<link id="TTabControl.TabStop"/>
</seealso>
</element>
<element name="TTabControl.GetTabStop.Result">
<short>Value for the property.</short>
</element>

<element name="TTabControl.SetHotTrack">
<short>Sets the value for the HotTrack property.</short>
<descr/>
<seealso>
<link id="TTabControl.HotTrack"/>
</seealso>
</element>
<element name="TTabControl.SetHotTrack.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetImages">
<short>
Sets the value for the Images property.
</short>
<descr>
<p>
<var>SetImages</var> is an overridden method in <var>TTabControl</var> used as 
the write access specifier for the Images property. It calls the inherited 
method to store AValue in the Images member, and ensures that the value in 
Images is then propagated to the Images member in the Tabs property.
</p>
<p>
No actions are performed in the method if AValue is the image list already 
assigned to the Images property.
</p>
</descr>
<version>
Modified in LCL version 4.2. The method is declared as an override for the 
virtual method in the ancestor class (TCustomTabControl).
</version>
<seealso>
<link id="TTabControl.Images"/>
<link id="TTabControl.Tabs"/>
<link id="TTabControlStrings.Images"/>
</seealso>
</element>
<element name="TTabControl.SetImages.AValue">
<short>
New value for the Images property.
</short>
</element>

<element name="TTabControl.SetMultiLine">
<short>Sets the value for the MultiLine property.</short>
<descr/>
<seealso>
<link id="TTabControl.MultiLine"/>
</seealso>
</element>
<element name="TTabControl.SetMultiLine.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetMultiSelect">
<short>Sets the value for the MultiSelect property.</short>
<descr/>
<seealso>
<link id="TTabControl.MultiSelect"/>
</seealso>
</element>
<element name="TTabControl.SetMultiSelect.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetOwnerDraw">
<short>Sets the value for the OwnerDraw property.</short>
<descr/>
<seealso>
<link id="TTabControl.OwnerDraw"/>
</seealso>
</element>
<element name="TTabControl.SetOwnerDraw.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetRaggedRight">
<short>Sets the value for the RaggedRight property.</short>
<descr/>
<seealso>
<link id="TTabControl.RaggedRight"/>
</seealso>
</element>
<element name="TTabControl.SetRaggedRight.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetScrollOpposite">
<short>Sets the value for the ScrollOpposite property.</short>
<descr/>
<seealso>
<link id="TTabControl.ScrollOpposite"/>
</seealso>
</element>
<element name="TTabControl.SetScrollOpposite.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetStyle">
<short>Sets the value for the Style property.</short>
<descr/>
<seealso>
<link id="TTabControl.Style"/>
<link id="TCustomTabControl.SetStyle"/>
</seealso>
</element>
<element name="TTabControl.SetStyle.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetTabHeight">
<short>Sets the Height for tabs displayed on the control.</short>
<descr>
<p>
<var>SetTabHeight</var> is used to set the height for the tabs displayed on 
the control to the value in <var>AValue</var>. SetTabHeight calls 
<var>GetCapabilities</var> to determine if the value 
<var>nbcTabsSizeable</var> is included in the capabilities for the control. 
No actions are performed in the method when nbcTabsSizeable is <b>not</b> 
present in the controls capabilities list.
</p>
<p>
SetTabHeight propagates the new tab height to the Notebook which contains the 
<var>Tabs</var> in the control.
</p>
</descr>
<seealso/>
</element>
<element name="TTabControl.SetTabHeight.AValue">
<short>New height for the tabs displayed on the control.</short>
</element>

<element name="TTabControl.SetTabPosition">
<short>Sets the value for the TabPosition property.</short>
<descr/>
<seealso>
<link id="TTabControl.TabPosition"/>
<link id="TCustomTabControl.SetTabPosition"/>
</seealso>
</element>
<element name="TTabControl.SetTabPosition.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetTabs">
<short>Sets the value for the Tabs property.</short>
<descr/>
<seealso>
<link id="TTabControl.Tabs"/>
</seealso>
</element>
<element name="TTabControl.SetTabs.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetTabStop">
<short>Sets the value for the TabStop property.</short>
<descr/>
<seealso>
<link id="TTabControl.TabStop"/>
</seealso>
</element>
<element name="TTabControl.SetTabStop.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.SetTabWidth">
<short>Sets the value for the TabWidth property.</short>
<descr/>
<seealso>
<link id="TTabControl.TabWidth"/>
</seealso>
</element>
<element name="TTabControl.SetTabWidth.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.WSRegisterClass">
<short>Registers the class type with the widgetset.</short>
<descr>
<p>
<var>WSRegisterClass</var> is an overridden class procedure used to register 
the widgetset class used to create new instances of the class. 
WSRegisterClass calls the inherited method, and calls RegisterPropertyToSkip 
to omit the <var>OnDrawTab</var> property when the component is loaded at 
run-time. OnDrawTab was used in an older version of the LCL.
</p>
</descr>
<seealso/>
</element>

<element name="TTabControl.SetOptions">
<short>Sets the value for the Options property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.Options"/>
<link id="TCustomTabControl.SetOptions"/>
</seealso>
</element>
<element name="TTabControl.SetOptions.AValue">
<short>New value for the property.</short>
</element>

<element name="TTabControl.AddRemovePageHandle">
<short>Not implemented in TTabControl. Page handles are not used.</short>
<descr>
<p>
An empty implementation in TTabControl; there are no pages, so no handle is 
required.
</p>
</descr>
<seealso/>
</element>
<element name="TTabControl.AddRemovePageHandle.APage">
<short/>
</element>

<element name="TTabControl.CanChange">
<short>Indicates whether the tab control can update its Tabs property.</short>
<descr>
<p>
Signals the OnChanging event handler (when assigned) to get the return value 
for the method. The default return value is <b>True</b> when OnChanging has 
not been assigned.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Tabs"/>
<link id="TCustomTabControl.OnChanging"/>
</seealso>
</element>
<element name="TTabControl.CanChange.Result">
<short>
<b>True</b> if the Tabs for the control can be modified.
</short>
</element>

<element name="TTabControl.CanShowTab">
<short>
Indicates if the control can show the tab at the specified position.
</short>
<descr>
<p>Always returns <b>True</b> in TTabControl.</p>
</descr>
<seealso/>
</element>
<element name="TTabControl.CanShowTab.Result">
<short>Always returns <b>True</b> in TTabControl.</short>
</element>
<element name="TTabControl.CanShowTab.ATabIndex">
<short>Ordinal position for the requested tab.</short>
</element>

<element name="TTabControl.Change">
<short>Changes the active tab for the control.</short>
<descr>
<p>
Change is an overridden method in TTabControl. It re-implements the method 
from the ancestor class to signal the OnChange event handler (when assigned) 
to change the active tab for the control. An internal flag is used to 
determine if a previous call to OnChange has not been completed. No actions 
are performed in the method when the flag is set.
</p>
<p>
Change does <b>not</b> call the inherited method.
</p>
</descr>
<seealso>
<link id="TTabControl.IsUpdating"/>
<link id="TCustomTabControl.Change"/>
</seealso>
</element>

<element name="TTabControl.CreateWnd" link="#lcl.comctrls.TCustomTabControl.CreateWnd"/>
<element name="TTabControl.DestroyHandle" link="#lcl.controls.TWinControl.DestroyHandle"/>

<element name="TTabControl.Notification">
<short>
Handles the notification when a component is added to or removed from the 
class instance.
</short>
<descr>
<p>
<var>Notification</var> is an overridden method in <var>TTabControl</var>, 
and calls the inherited method on entry. It ensures that the 
<var>Images</var> member is set to <b>Nil</b> when the component is removed 
from the class instance.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Notification"/>
</seealso>
</element>
<element name="TTabControl.Notification.AComponent">
<short>Component for the notification.</short>
</element>
<element name="TTabControl.Notification.Operation">
<short>Operation performed for the component.</short>
</element>

<element name="TTabControl.SetDragMode">
<short>Sets the value for the DragMode property.</short>
<descr>
<p>
<var>SetDragMode</var> is an overridden method in <var>TTabControl</var> used 
to set the value for the <var>DragMode</var> property. It calls the inherited 
method on entry, and copies the new property value to the <var>Tabs</var> 
property.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Tabs"/>
<link id="TTabControlNoteBookStrings"/>
<link id="#lcl.controls.TControl.SetDragMode">TControl.SetDragMode</link>
<link id="#lcl.controls.TControl.DragMode">TControl.DragMode</link>
</seealso>
</element>
<element name="TTabControl.SetDragMode.Value">
<short/>
</element>

<element name="TTabControl.SetTabIndex">
<short>Sets the value for the TabIndex property.</short>
<descr/>
<seealso>
<link id="TCustomTabControl.TabIndex"/>
</seealso>
</element>
<element name="TTabControl.SetTabIndex.Value">
<short>New value for the property.</short>
</element>

<element name="TTabControl.UpdateTabImages">
<short>Calls the corresponding method in Tabs.</short>
<descr>
<p>Calls the corresponding method in Tabs.</p>
</descr>
<seealso>
<link id="TCustomTabControl.Tabs"/>
</seealso>
</element>

<element name="TTabControl.ImageListChange">
<short>Calls the corresponding method in Tabs.</short>
<descr>
<p>Calls the corresponding method in Tabs.</p>
</descr>
<seealso>
<link id="TCustomTabControl.Tabs"/>
</seealso>
</element>
<element name="TTabControl.ImageListChange.Sender">
<short>Object (TCustomTabControl) for the event.</short>
</element>

<element name="TTabControl.DoSetBounds">
<short>
Updates the bounds for the control to the specified values.
</short>
<descr>
<p>
<var>DoSetBounds</var> is an overridden method in cv <var>TTabControl</var>. 
It calls the inherited method in entry to adjust the client rectangle for the 
control and its control flags. Calls the <var>TabControlBoundsChange</var> 
method in the <var>Tabs</var> property when it has been assigned.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.Tabs"/>
<link id="#lcl.controls.TWinControl.DoSetBounds">TWinControl.DoSetBounds</link>
</seealso>
</element>
<element name="TTabControl.DoSetBounds.ALeft">
<short>New value for the Left property.</short>
</element>
<element name="TTabControl.DoSetBounds.ATop">
<short>New value for the Top property.</short>
</element>
<element name="TTabControl.DoSetBounds.AWidth">
<short>New value for the Width property.</short>
</element>
<element name="TTabControl.DoSetBounds.AHeight">
<short>New value for the Height property.</short>
</element>

<element name="TTabControl.GetControlClassDefaultSize">
<short>Gets the default size for new instances of the class.</short>
<descr>
<p>
<var>GetControlClassDefaultSize</var> is an overridden <var>TSize</var> class 
function used to get the dimensions for a new instance of the 
<var>TTabControl</var> class. The return value contains the Width (CX) and 
Height (CY) for the class instance.
</p>
<p>
The default size in TTabControl is 200 pixels (width) by 150 pixels (height).
</p>
</descr>
<seealso/>
</element>
<element name="TTabControl.GetControlClassDefaultSize.Result">
<short>TSize instance with the dimensions for the new class instance.</short>
</element>

<element name="TTabControl.PaintWindow">
<short>Updates the canvas handle and paints the control.</short>
<descr>
<p>
<var>PaintWindow</var> is an overridden method in <var>TTabControl</var>. It 
ensures that the specified device context matches the <var>Handle</var> for 
the control canvas. When they differ, the value in <var>DC</var> is 
temporarily used as the canvas handle. The modified canvas handle is reset 
prior to exiting from the method.
</p>
<p>
PaintWindow calls the <var>Paint</var> method to render the control using the 
theme elements details available for a tab control. PaintWindow is called 
when a paint message is received and applied in the <var>PaintHandler</var> 
method.
</p>
<p>
PaintWindow re-implements the method from the ancestor class, and does not 
call the inherited method.
</p>
</descr>
<seealso>
<link id="TTabControl.Paint"/>
<link id="#lcl.controls.TWinControl.PaintWindow">TWinControl.PaintWindow</link>
</seealso>
</element>
<element name="TTabControl.PaintWindow.DC">
<short>Device context for the control canvas.</short>
</element>

<element name="TTabControl.Paint">
<short>Paints the control to its Canvas using theme services.</short>
<descr>
<p>
<var>Paint</var> is a method used to render the tab control to its canvas. It 
handles the background and tabs for the control excluding any button 
decorations. Buttons are handled in a differ component. Paint adjusts the 
display rectangle in ARect to reserved a single pixel on the edge indicated 
in the <var>TabPosition</var> property. This avoids drawing a border on the 
edge where the control is aligned.
</p>
<p>
Paint uses <var>ThemeServices</var> to get theme elements available for a tab 
control, and to draw the control to its <var>Canvas</var> using the theme 
details. A raised 3D frame is drawn around the control. At design-time, the 
<var>Caption</var> for the control is drawn centered in its display area.
</p>
</descr>
<seealso>
<link id="TTabControl.TabPosition"/>
<link id="#lcl.controls.TControl.Caption">TControl.Caption</link>
</seealso>
</element>

<element name="TTabControl.AdjustDisplayRectWithBorder">
<short>Adjust the specified display rectangle to use the size in Tabs.</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.AdjustDisplayRectWithBorder.ARect">
<short/>
</element>

<element name="TTabControl.AdjustClientRect">
<short>Calls the AdjustDisplayRect method.</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.AdjustClientRect.ARect">
<short/>
</element>

<element name="TTabControl.CreateTabNoteBookStrings">
<short>Creates the TTabControlNoteBookStrings instance used in Tabs.</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.CreateTabNoteBookStrings.Result">
<short>TTabControlNoteBookStrings instance created in the method.</short>
</element>

<element name="TTabControl.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance. 
Create calls the inherited constructor, and sets the default values for the 
following properties in the class instance:
</p>
<ul>
<li>Tabs</li>
<li>TabStop</li>
<li>BorderWidth</li>
</ul>
<p>
Create calls GetControlClassDefaultSize and sets the initial bounds for the 
control using SetInitialBounds. Create allocates a TControlCanvas instance 
that is used in the Canvas property.
</p>
</descr>
<seealso/>
</element>
<element name="TTabControl.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TTabControl.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. 
Destroy ensures that resources allocated in the class instance are freed, 
including:
</p>
<ul>
<li>Buttons (and the associated toolbar)</li>
<li>Internal ImageChangeLinks</li>
</ul>
<p>
Destroy calls the inherited destructor prior to exiting from the method.
</p>
</descr>
<seealso/>
</element>

<element name="TTabControl.IndexOfTabAt">
<short>
Gets the position for the tab at the specified mouse coordinates.
</short>
<descr>
<p>
<var>IndexOfTabAt</var> is an overridden overloaded <var>Integer</var> 
function used to get the position for the tab at the specified mouse 
coordinates. The overloaded variants allow the mouse coordinates to be 
specified as a <var>TPoint</var> instance, or two Integer values.
</p>
<p>
IndexOfTabAt re-implements the methods from the ancestor class to use the 
<var>TTabControlNoteBookStrings</var> instance in Tabs. Tabs provides the 
offset for the control from the value in ClientOrigin. The 
<var>IndexOfTabAt</var> method in Tabs is called to get the return value for 
the method.
</p>
<p>
The return value contains the ordinal position in Tabs where the mouse 
pointer is located.
</p>
</descr>
<seealso>
<link id="TCustomTabControl.IndexOfTabAt"/>
</seealso>
</element>
<element name="TTabControl.IndexOfTabAt.Result">
<short>Ordinal position for the hovered tab in the Tabs property.</short>
</element>
<element name="TTabControl.IndexOfTabAt.X">
<short>Horizontal coordinate for the mouse pointer.</short>
</element>
<element name="TTabControl.IndexOfTabAt.Y">
<short>Vertical coordinate for the mouse pointer.</short>
</element>
<element name="TTabControl.IndexOfTabAt.P">
<short>TPoint instance with the mouse coordinates.</short>
</element>

<element name="TTabControl.GetHitTestInfoAt">
<short>
Gets a set of hit test results for the specified mouse coordinates.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.GetHitTestInfoAt.Result">
<short/>
</element>
<element name="TTabControl.GetHitTestInfoAt.X">
<short/>
</element>
<element name="TTabControl.GetHitTestInfoAt.Y">
<short/>
</element>

<element name="TTabControl.GetImageIndex">
<short>
Signals the OnGetImageIndex event handler to get an image for the specified 
tab index.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.GetImageIndex.Result">
<short/>
</element>
<element name="TTabControl.GetImageIndex.ATabIndex">
<short/>
</element>

<element name="TTabControl.IndexOfTabWithCaption">
<short>
Gets the ordinal position for the tab with the specified Caption.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.IndexOfTabWithCaption.Result">
<short/>
</element>
<element name="TTabControl.IndexOfTabWithCaption.TabCaption">
<short/>
</element>

<element name="TTabControl.TabRect">
<short>
Gets the rectangle where the tab at the specified position is drawn.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.TabRect.Result">
<short/>
</element>
<element name="TTabControl.TabRect.Index">
<short/>
</element>

<element name="TTabControl.RowCount">
<short>
Gets the number of rows needed to render the Tabs on the control.
</short>
<descr>
<p>
Always returns 1 in TTabControl.
</p>
</descr>
<seealso/>
</element>
<element name="TTabControl.RowCount.Result">
<short/>
</element>

<element name="TTabControl.ScrollTabs">
<short>
Scrolls the tabs on the control horizontally by the value specified in Delta.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.ScrollTabs.Delta">
<short/>
</element>

<element name="TTabControl.BeginUpdate">
<short>Starts an update process for the control.</short>
<descr>
<p>
No actions are performed in the method if the Tabs property has not been 
assigned.
</p>
<p>
Calls the BeginUpdate method in Tabs to start the update process.
</p>
</descr>
<seealso/>
</element>

<element name="TTabControl.EndUpdate">
<short>Finishes an update process for the control.</short>
<descr>
<p>
No actions are performed in the method if the <var>Tabs</var> property has 
not been assigned.
</p>
<p>
Calls the <var>EndUpdate</var> method in Tabs to complete the update process. 
The <var>Change</var> method is called when there no unfinished updates in 
Tabs and an internal flag is set to trigger the <var>OnChange</var> event 
handler.
</p>
</descr>
<seealso/>
</element>

<element name="TTabControl.IsUpdating">
<short>
Indicates if there are unfinished updates for one of the Tabs on the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TTabControl.IsUpdating.Result">
<short/>
</element>

<element name="TTabControl.Canvas">
<short>
Provides access to the Canvas where the control is drawn.
</short>
<descr>
<p>
<var>Canvas</var> is a read-only <var>TCanvas</var> property in 
<var>TTabControl</var>. It is introduced as a public property, so it can be 
accessed at run-time in program code. It is a platform property, and is 
available on the Windows platform only in the current LCL release. It 
provides code compatibility with the tab control in the Delphi VCL.
</p>
<p>
At run-time, a TControlCanvas instance is created and assigned to the property 
member in the Create constructor.
</p>
<p>
Canvas is used in the Paint method to perform drawing operations which render 
the control. The handle for the Canvas may be temporarily updated in the 
PaintWindow method to use a specified device context. In this case, the canvas 
handle is reset to an unassigned value after the Paint method is called to 
render the control.
</p>
<p>
Use Canvas to access text metrics using the font for the canvas, or to perform 
custom drawing operations on the control.
</p>
</descr>
<version>
Added in LCL version 3.0 for the Windows platform.
</version>
<seealso>
<link id="TTabControl.Paint"/>
<link id="TTabControl.PaintWindow"/>
<link id="TTabControl.Font"/>
<link id="TTabControl.Create"/>
<link id="#lcl.controls.TControlCanvas">TControlCanvas</link>
<link id="#lcl.graphics.TCanvas">TCanvas</link>
</seealso>
</element>

<element name="TTabControl.DisplayRect">
<short>Display area for the tab control.</short>
<descr>
<p>
<var>DisplayRect</var> is a read-only <var>TRect</var> property which 
contains the display area for the page in the tabbed control. It uses the 
client rectangle for the control as the value for the property. Use 
<var>TabRect</var> to get the display area for the tab in the tabbed control.
</p>
</descr>
<seealso/>
</element>

<element name="TTabControl.HotTrack" link="#lcl.comctrls.TCustomTabControl.HotTrack"/>

<element name="TTabControl.Images">
<short>
Contains the images displayed on the tabs for the control.
</short>
<descr>
<p>
<var>Images</var> is a published <var>TCustomImageList</var> property in 
<var>TTabControl</var>. It contains the images displayed on the Tabs for the 
control.
</p>
<p>
Assigning a new image list to the property causes the widgetset class instance 
to be updated; the image list, the tab position, and properties for the page 
objects are sent to the widget. The new value in Images is also copied to the 
Images member in Tabs (TTabControlStrings). No actions are performed when the 
an image list already assigned to the property is assigned to Images again.
</p>
<p>
The Invalidate method is called to cause the control to be redrawn after the 
property value is changed.
</p>
<p>
Use ImagesWidth to set the default width and height for the images in the list.
</p>
<p>
Use the indexed Page property to access each TCustomPage object on the tabbed 
control to read or write its ImageIndex property. Or, Use OnGetImageIndex to 
determine the position in Images for a given page/tab index.
</p>
</descr>
<version>
Modified in LCL version 4.2. Write access is an overridden method where the 
image list is copied to the Images in the Tabs property.
</version>
<seealso>
<link id="TTabControl.Tabs"/>
<link id="TTabControl.ImagesWidth"/>
<link id="TCustomTabControl.Images"/>
<link id="TCustomTabControl.Page"/>
<link id="TCustomTabControl.PageIndex"/>
<link id="TCustomPage.ImageIndex"/>
<link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
</seealso>
</element>

<element name="TTabControl.ImagesWidth" link="#lcl.comctrls.TCustomTabControl.ImagesWidth"/>
<element name="TTabControl.MultiLine" link="#lcl.comctrls.TCustomTabControl.MultiLine"/>
<element name="TTabControl.MultiSelect" link="#lcl.comctrls.TCustomTabControl.MultiSelect"/>
<element name="TTabControl.OnChange" link="#lcl.comctrls.TCustomTabControl.OnChange"/>
<element name="TTabControl.OnChanging" link="#lcl.comctrls.TCustomTabControl.OnChanging"/>
<element name="TTabControl.OnGetImageIndex" link="#lcl.comctrls.TCustomTabControl.OnGetImageIndex"/>
<element name="TTabControl.OwnerDraw" link="#lcl.comctrls.TCustomTabControl.OwnerDraw"/>
<element name="TTabControl.RaggedRight" link="#lcl.comctrls.TCustomTabControl.RaggedRight"/>
<element name="TTabControl.ScrollOpposite" link="#lcl.comctrls.TCustomTabControl.ScrollOpposite"/>
<element name="TTabControl.Style" link="#lcl.comctrls.TCustomTabControl.Style"/>
<element name="TTabControl.TabPosition" link="#lcl.comctrls.TCustomTabControl.TabPosition"/>
<element name="TTabControl.TabHeight" link="#lcl.comctrls.TCustomTabControl.TabHeight"/>
<element name="TTabControl.TabIndex" link="#lcl.comctrls.TCustomTabControl.TabIndex"/>
<element name="TTabControl.Tabs" link="#lcl.comctrls.TCustomTabControl.Tabs"/>
<element name="TTabControl.TabStop" link="#lcl.comctrls.TCustomTabControl.TabStop"/>
<element name="TTabControl.TabWidth" link="#lcl.comctrls.TCustomTabControl.TabWidth"/>
<element name="TTabControl.Align" link="#lcl.controls.TControl.Align"/>
<element name="TTabControl.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TTabControl.BIdiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TTabControl.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TTabControl.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TTabControl.DockSite" link="#lcl.controls.TWinControl.DockSite"/>
<element name="TTabControl.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TTabControl.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TTabControl.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TTabControl.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TTabControl.Font" link="#lcl.controls.TControl.Font"/>
<element name="TTabControl.Options" link="#lcl.comctrls.TCustomTabControl.Options"/>
<element name="TTabControl.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="TTabControl.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TTabControl.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TTabControl.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TTabControl.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TTabControl.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TTabControl.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TTabControl.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TTabControl.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TTabControl.OnDockDrop" link="#lcl.controls.TWinControl.OnDockDrop"/>
<element name="TTabControl.OnDockOver" link="#lcl.controls.TWinControl.OnDockOver"/>
<element name="TTabControl.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TTabControl.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TTabControl.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TTabControl.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TTabControl.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TTabControl.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TTabControl.OnGetSiteInfo" link="#lcl.controls.TWinControl.OnGetSiteInfo"/>
<element name="TTabControl.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TTabControl.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TTabControl.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TTabControl.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TTabControl.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TTabControl.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TTabControl.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TTabControl.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TTabControl.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TTabControl.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TTabControl.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TTabControl.OnUnDock" link="#lcl.controls.TWinControl.OnUnDock"/>

<element name="TCustomDrawTarget">
<short>
<var>TCustomDrawTarget</var> - enumerated type controlling how a target 
object is drawn.
</short>
</element>
<element name="TCustomDrawTarget.dtControl">
<short>Draw the entire control.</short>
</element>
<element name="TCustomDrawTarget.dtItem">
<short>Draw one item (or line in report mode).</short>
</element>
<element name="TCustomDrawTarget.dtSubItem">
<short>Draw one sub-item (except sub-item 0 which is drawn by dtItem).</short>
</element>

<element name="TCustomDrawStage">
<short>
<var>TCustomDrawStage</var> a series of constants to define the drawing 
stages for custom-drawn controls.
</short>
<descr/>
</element>
<element name="TCustomDrawStage.cdPrePaint">
<short/>
</element>
<element name="TCustomDrawStage.cdPostPaint">
<short/>
</element>
<element name="TCustomDrawStage.cdPreErase">
<short/>
</element>
<element name="TCustomDrawStage.cdPostErase">
<short/>
</element>

<element name="TCustomDrawStateFlag">
<short>
<var>TCustomDrawStateFlag</var> - series of flags to define the 
DrawState.</short>
<descr>
<p>
<var>TCustomDrawStateFlag</var> is an enumerated type with values 
representing the drawing states available in custom-drawn controls. Values 
from the enumeration are stored in the <var>TCustomDrawState</var> set type 
passed as an argument to event handlers in list view and tree view controls, 
and stored internally in the controls.
</p>
</descr>
<seealso>
<link id="TCustomDrawState"/>
<link id="TLVCustomDrawItemEvent"/>
<link id="TLVCustomDrawSubItemEvent"/>
<link id="TLVAdvancedCustomDrawItemEvent"/>
<link id="TLVAdvancedCustomDrawSubItemEvent"/>
<link id="TTVCustomDrawItemEvent"/>
<link id="TTVAdvancedCustomDrawItemEvent"/>
</seealso>
</element>
<element name="TCustomDrawStateFlag.cdsSelected">
<short>Control is drawn using the selected style.</short>
</element>
<element name="TCustomDrawStateFlag.cdsGrayed">
<short>Control is drawn using the grayed or unselected style.</short>
</element>
<element name="TCustomDrawStateFlag.cdsDisabled">
<short>Control is drawn using the disabled style.</short>
</element>
<element name="TCustomDrawStateFlag.cdsChecked">
<short>Control is drawn using the checked style.</short>
</element>
<element name="TCustomDrawStateFlag.cdsFocused">
<short>Control is drawn using the focused style.</short>
</element>
<element name="TCustomDrawStateFlag.cdsDefault">
<short>Control is drawn using the default style.</short>
</element>
<element name="TCustomDrawStateFlag.cdsHot">
<short>Control is drawn using the hot tracking style.</short>
</element>
<element name="TCustomDrawStateFlag.cdsMarked">
<short>Control is drawn using the marked (multi-selected) style.</short>
</element>
<element name="TCustomDrawStateFlag.cdsIndeterminate">
<short>Control is drawn using the indeterminate state style.</short>
</element>

<element name="TCustomDrawState">
<short>
<var>TCustomDrawState</var> - set of <var>TCustomDrawStateFlag</var>.
</short>
<descr>
<p>
TCustomDrawState determines how a item will be drawn.
</p>
</descr>
<seealso>
<link id="TCustomDrawStateFlag"/>
<link id="TLVCustomDrawItemEvent"/>
<link id="TLVCustomDrawSubItemEvent"/>
<link id="TLVAdvancedCustomDrawItemEvent"/>
<link id="TLVAdvancedCustomDrawSubItemEvent"/>
<link id="TTVCustomDrawItemEvent"/>
<link id="TTVAdvancedCustomDrawItemEvent"/>
</seealso>
</element>

<element name="TCustomDrawResultFlag">
<short>
Represents flags returned as custom drawing results.
</short>
<seealso>
<link id="TCustomDrawResult"/>
<link id="TCustomListView.IntfCustomDraw"/>
</seealso>
</element>
<element name="TCustomDrawResultFlag.cdrSkipDefault">
<short>
Skips default drawing routines when a custom drawing process has failed.
</short>
</element>
<element name="TCustomDrawResultFlag.cdrNotifyPostpaint">
<short>
Included in the drawing result when a drawing target supports cdPostPaint.
</short>
</element>
<element name="TCustomDrawResultFlag.cdrNotifyItemdraw">
<short>
Included in the drawing result when an item drawing target supports cdPrePaint 
or cdPreErase.
</short>
</element>
<element name="TCustomDrawResultFlag.cdrNotifySubitemdraw">
<short>
Included in the drawing result when a subitem drawing target supports 
cdPrePaint.
</short>
</element>
<element name="TCustomDrawResultFlag.cdrNotifyPostErase">
<short>
Included in the drawing result when an item drawing target supports 
cdPostErase.
</short>
</element>
<element name="TCustomDrawResultFlag.cdrNotifyItemErase">
<short>
Not used in the current LCL implementation.
</short>
</element>

<element name="TCustomDrawResult">
<short>
Set type used to store TCustomDrawResultFlag enumeration values.
</short>
<descr/>
<seealso>
<link id="TCustomDrawResultFlag"/>
<link id="TCustomListView.IntfCustomDraw"/>
</seealso>
</element>

<element name="TSortType">
<short>
Indicates the sort mechanism used for the items in tree view and list view 
controls.
</short>
<descr>
<p>
<var>TSortType</var> is an enumerated type with values indicating the sort 
mechanism used for items in tree view or list view controls. TSortType is the 
type used to implement the <var>SortType</var> property in both 
<var>TCustomTreeView</var> and <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.SortType"/>
<link id="TCustomTreeView.AlphaSort"/>
<link id="TCustomTreeView.CustomSort"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.Sort"/>
</seealso>
</element>
<element name="TSortType.stNone">
<short>Sorting is not used for list items.</short>
</element>
<element name="TSortType.stData">
<short>List items are sorted by their data and not their display text.</short>
</element>
<element name="TSortType.stText">
<short>List items are sorted by their display text and not their data.</short>
</element>
<element name="TSortType.stBoth">
<short>List items are sorted using both display text and data.</short>
</element>

<element name="TListItemState">
<short>Represents state values for items in a list view control.</short>
<descr>
<p>
<var>TListItemState</var> is an enumerated type with values which represent 
the state for items in a list view control. The values reflect the current 
settings for properties in <var>TListItem</var>.
</p>
<p>
Values from TListItemState are stored in the <var>TListItemStates</var> set 
type.
</p>
</descr>
<seealso>
<link id="TListItemStates"/>
<link id="TListItem.StateIndex"/>
</seealso>
</element>
<element name="TListItemState.lisCut">
<short>The list item has its Cut property set to <b>True</b>.</short>
</element>
<element name="TListItemState.lisDropTarget">
<short>The list item has its DropTarget property set to <b>True</b>.</short>
</element>
<element name="TListItemState.lisFocused">
<short>The list item has its Focused property set to <b>True</b>.</short>
</element>
<element name="TListItemState.lisSelected">
<short>The list item has its Selected property set to <b>True</b>.</short>
</element>

<element name="TListItemStates">
<short>
Set type used to store value(s) from the TListItemState enumeration.
</short>
<descr>
<p>
<var>TListItemStates</var> is a set type used to store zero or more values 
from the <var>TListItemState</var> enumeration. TListItemStates is the type 
used to implement the <var>States</var> member in <var>TListItem</var>. 
Values are included in and excluded from the set when the corresponding 
properties in TListItem are changed.
</p>
</descr>
<seealso>
<link id="TListItem.Cut"/>
<link id="TListItem.DropTarget"/>
<link id="TListItem.Focused"/>
<link id="TListItem.Selected"/>
<link id="TListItem.StateIndex"/>
</seealso>
</element>

<element name="TListItemFlag">
<short>
<var>TListItemFlag</var> - enumerated type, a flag denoting a list item is 
being destroyed or created.
</short>
<descr/>
<seealso/>
</element>
<element name="TListItemFlag.lifDestroying">
<short>List item has been marked for destruction by a notify message.</short>
</element>
<element name="TListItemFlag.lifCreated">
<short>List item has been marked as created by a notify message.</short>
</element>

<element name="TListItemFlags">
<short>Set type used to store TListItemFlag enumeration values.</short>
<descr>
<p>
<var>TListItemFlags</var> is a set type used to store zero or more values 
from the <var>TListItemFlag</var> enumeration. It is the type used to 
implement the internal <var>Flags</var> member in <var>TListItem</var>.
</p>
</descr>
<seealso>
<link id="TListItem"/>
<link id="TListItemFlag"/>
</seealso>
</element>

<element name="TDisplayCode">
<short>
<var>TDisplayCode</var> - enumerated type denoting how items are displayed.
</short>
<descr>
<p>
<var>TDisplayCode</var> is an enumerated type with values that denote how the 
item or sub-item is displayed in a list view control. The values are passed 
as arguments to the <var>DisplayRect</var> and <var>DisplayRectSubItem</var> 
methods in <var>TListItem</var>, and allows the widgetset to layout and 
rendering the list items for the platform.
</p>
</descr>
<seealso>
<link id="TListItem.DisplayRect"/>
<link id="TListItem.DisplayRectSubItem"/>
</seealso>
</element>
<element name="TDisplayCode.drBounds">
<short>
List item is rendered using the Bounds for the item display rectangle.
</short>
</element>
<element name="TDisplayCode.drIcon">
<short>
List item is rendered using the width and height for the associated image.
</short>
</element>
<element name="TDisplayCode.drLabel">
<short>
List item is rendered using the text metrics for the caption in the item.
</short>
</element>
<element name="TDisplayCode.drSelectBounds">
<short>
List item is rendered using the selection rectangle for the item.
</short>
</element>

<element name="TIconArrangement">
<short>Represents icon arrangement options in a list view control.</short>
<descr>
<p>
<var>TIconArrangement</var> is an enumerated type with values representing 
the icon arrangement options for a list view control.
</p>
</descr>
<seealso>
<link id="TIconOptions"/>
<link id="TCustomListView"/>
</seealso>
</element>
<element name="TIconArrangement.iaTop">
<short>
Icons are arranged from the top to the bottom, then left to right in the 
control.
</short>
</element>
<element name="TIconArrangement.iaLeft">
<short>
Icons are arranged from left to right, then top to bottom in the control.
</short>
</element>

<element name="TIconOptions">
<short>
Contains text wrapping and icon layout settings for a list view control.
</short>
<descr>
<p>
<var>TIconOptions</var> is a <var>TPersistent</var> descendant which 
represents the text wrapping and icon layout settings in the 
<var>IconOptions</var> property in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.IconOptions"/>
</seealso>
</element>

<element name="TIconOptions.FListView"/>
<element name="TIconOptions.FArrangement"/>

<element name="TIconOptions.GetAutoArrange">
<short>Gets the value for the AutoArrange property.</short>
<descr/>
<seealso/>
</element>
<element name="TIconOptions.GetAutoArrange.Result">
<short>Value for the property.</short>
</element>

<element name="TIconOptions.GetWrapText">
<short>Gets the value for the WrapText property.</short>
<descr/>
<seealso>
<link id="TIconOptions.WrapText"/>
</seealso>
</element>
<element name="TIconOptions.GetWrapText.Result">
<short>Value for the property.</short>
</element>

<element name="TIconOptions.SetArrangement">
<short>Sets the value for the Arrangement property.</short>
<descr/>
<seealso>
<link id="TIconOptions.Arrangement"/>
</seealso>
</element>
<element name="TIconOptions.SetArrangement.Value">
<short>New value for the property.</short>
</element>

<element name="TIconOptions.SetAutoArrange">
<short>Sets the value for the AutoArrange property.</short>
<descr/>
<seealso>
<link id="TIconOptions.AutoArrange"/>
</seealso>
</element>
<element name="TIconOptions.SetAutoArrange.Value">
<short>New value for the property.</short>
</element>

<element name="TIconOptions.SetWrapText">
<short>Sets the value for the WrapText property.</short>
<descr/>
<seealso>
<link id="TIconOptions.WrapText"/>
</seealso>
</element>
<element name="TIconOptions.SetWrapText.Value">
<short>New value for the property.</short>
</element>

<element name="TIconOptions.AssignTo">
<short>
Assign values from the class instance to the specified persistent object.
</short>
<descr>
<p>
<var>AssignTo</var> is an overridden method which implements support for the 
<var>TIconOptions</var> type in the RTL object persistence mechanism. 
AssignTo allows property values from the current class instance to the stored 
to the persistent object in <var>Dest</var>.
</p>
<p>
When Dest is a TIconOptions instance, AssignTo copies the values from the 
current class instance:
</p>
<ul>
<li>Arrangement</li>
<li>AutoArrange</li>
<li>WrapText</li>
</ul>
<p>
If ADest is not derived from TIconOptions, the inherited method is called.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
</seealso>
</element>
<element name="TIconOptions.AssignTo.Dest">
<short>Persistent object where property values are stored.</short>
</element>

<element name="TIconOptions.GetOwner">
<short>Gets the owner of the class instance.</short>
<descr>
<p>
<var>GetOwner</var> is an overridden method in <var>TIconOptions</var> used 
to get the owner of the class instance. It returns the 
<var>TCustomListView</var> instance passed as an argument to the 
<var>Create</var> constructor.
</p>
</descr>
<seealso>
<link id="TIconOptions.Create"/>
<link id="TCustomListView"/>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>
<element name="TIconOptions.GetOwner.Result">
<short>Owner of the class instance.</short>
</element>

<element name="TIconOptions.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance, and 
calls the inherited constructor on entry. Create stores the value in AOwner 
to an internal member used in the class instance, and sets the default value 
for the <var>Arrangement</var> property to <var>iaTop</var>.
</p>
</descr>
<seealso>
<link id="TIconOptions.Arrangement"/>
<link id="TIconArrangement"/>
</seealso>
</element>
<element name="TIconOptions.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TIconOptions.Arrangement">
<short>
Indicates the icon position relative to the caption in a list item.
</short>
<descr>
<p>
<var>Arrangement</var> is a <var>TIconArrangement</var> property which 
indicates the layout for the icon or image in a list item relative to its 
caption text. The default value for the property is <var>iaTop</var>, and 
causes the icon to be displayed above the caption for the list item.
</p>
<p>
See <link id="TIconArrangement">TIconArrangement</link> for other values in 
the enumeration and their usage.
</p>
</descr>
<seealso>
<link id="TIconArrangement"/>
</seealso>
</element>

<element name="TIconOptions.AutoArrange">
<short>
Indicates whether icons in a list view can be automatically arranged.
</short>
<descr>
<p>
AutoArrange is a Boolean property which indicates if icons in a list view 
control can be automatically arranged when items are added to the control. 
The default value for the property is <b>False</b>.
</p>
<p>
AutoArrange is used when the list view uses the vsIcon or vsSmallIcon view 
styles.
</p>
</descr>
<seealso>
<link id="TCustomListView.ViewStyle"/>
<link id="TViewStyle"/>
</seealso>
</element>

<element name="TIconOptions.WrapText">
<short>
Indicates if the caption for a list item can wrap into multiple lines.
</short>
<descr>
<p>
WrapText is a Boolean property which indicates if the Caption for a list view 
item can be wrapped into multiple lines. The default value for the property 
is <b>True</b>.
</p>
<p>
The Caption for the item is wrapped when its length exceeds the width for the 
icon in the list item.
</p>
</descr>
<seealso/>
</element>

<element name="TListItem">
<short>
Represents the items created in TCustomListView and descendants.
</short>
<descr>
<p>
<var>TListItem</var> is the base class for the Items created in 
<var>TCustomListView</var> and <var>TListView</var>.
</p>
<p>
TListItem provides properties which identify the content for the list item, 
like: Caption, SubItems, Data, Index, ImageIndex, and StateIndex. Other 
properties indicate the disposition of the item in the control, like: 
Checked, Cut, DropTarget, Focused, and Selected.
</p>
<p>
Methods are provided that allow the list item to interact with the control 
and the widgetset class.
</p>
<p>
TListItem is the type stored in the TListItems container.
</p>
</descr>
<seealso>
<link id="TListItems"/>
<link id="TCustomListView.Items"/>
<link id="#rtl.classes.TPersistent">TPersistent</link>
<link id="#rtl.objects.TObject">TObject</link>
</seealso>
</element>

<!-- private -->
<element name="TListItem.FOwner"/>
<element name="TListItem.FFlags"/>
<element name="TListItem.FSubItems"/>
<element name="TListItem.FCaption"/>
<element name="TListItem.FData"/>
<element name="TListItem.FImageIndex"/>
<element name="TListItem.FStateIndex"/>
<element name="TListItem.FStates"/>
<element name="TListItem.FChecked"/>

<element name="TListItem.GetCaption">
<short>Gets the value for the Caption property.</short>
<descr/>
<seealso>
<link id="TListItem.Caption"/>
</seealso>
</element>
<element name="TListItem.GetCaption.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.GetChecked">
<short>Gets the value for the Check property.</short>
<descr/>
<seealso>
<link id="TListItem.Checked"/>
</seealso>
</element>
<element name="TListItem.GetChecked.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.GetLeft">
<short>Gets the value for the Left property.</short>
<descr/>
<seealso>
<link id="TListItem.Left"/>
</seealso>
</element>
<element name="TListItem.GetLeft.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.GetListView">
<short>Gets the value for the ListView property.</short>
<descr/>
<seealso>
<link id="TListItem.ListView"/>
</seealso>
</element>
<element name="TListItem.GetListView.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.GetPosition">
<short>Gets the value for the Position property.</short>
<descr/>
<seealso>
<link id="TListItem.Position"/>
</seealso>
</element>
<element name="TListItem.GetPosition.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.GetState">
<short>Gets the value for a state property in the list item.</short>
<descr/>
<seealso>
<link id="TListItem.Selected"/>
</seealso>
</element>
<element name="TListItem.GetState.Result">
<short>Value for the property.</short>
</element>
<element name="TListItem.GetState.AState">
<short>
TListItemState enumeration value which identifies the property value returned 
from the method.
</short>
</element>

<element name="TListItem.GetImageIndex">
<short>Gets the value for the ImageIndex property.</short>
<descr/>
<seealso>
<link id="TListItem.ImageIndex"/>
</seealso>
</element>
<element name="TListItem.GetImageIndex.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.GetIndex">
<short>Gets the value for the Index property.</short>
<descr/>
<seealso>
<link id="TListItem.Index"/>
</seealso>
</element>
<element name="TListItem.GetIndex.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.GetStateIndex">
<short>Gets the value for the StateIndex property.</short>
<descr/>
<seealso>
<link id="TListItem.StateIndex"/>
</seealso>
</element>
<element name="TListItem.GetStateIndex.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.GetSubItemImages">
<short>Gets the value for the indexed SubItemImages property.</short>
<descr/>
<seealso/>
</element>
<element name="TListItem.GetSubItemImages.Result">
<short>Value for the indexed property.</short>
</element>
<element name="TListItem.GetSubItemImages.AIndex">
<short>Ordinal position for the sub-item image in the property value.</short>
</element>

<element name="TListItem.GetSubItems">
<short>Gets the value for the SubItems property.</short>
<descr/>
<seealso>
<link id="TListItem.SubItems"/>
</seealso>
</element>
<element name="TListItem.GetSubItems.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.GetTop">
<short>Gets the value for the Top property.</short>
<descr/>
<seealso>
<link id="TListItem.Top"/>
</seealso>
</element>
<element name="TListItem.GetTop.Result">
<short>Value for the property.</short>
</element>

<element name="TListItem.WSUpdateAllowed">
<short>
Determines whether the list item can be updated in a list view control and 
its widgetset class.
</short>
<descr>
<p>
WSUpdateAllowed is a Boolean function used to determine whether the list item 
can be modified based on internal flags and the state for the owner control. 
It checks the following to determine the return value:
</p>
<dl>
<dt>Internal TListItemsFlags</dt>
<dd>
Must include lifCreated, and must not include lifDestroying.
</dd>
<dt>Container which owns the list item.</dt>
<dd>
The Owner is the TListItems instance in the Items property for a TListView 
control. It must be assigned, meaning the list item is still stored there, 
and its WSUpdateAllowed method must also return <b>True</b>.
</dd>
<dt>List View control which owns the container and the list item.</dt>
<dd>
The Handle for the list view control must be allocated, and the component is 
not being freed.
</dd>
</dl>
<p>
When all of these conditions are met, the return value is set to <b>True</b>.
</p>
<p>
WSUpdateAllowed is called prior to reading or writing values for properties 
including: State, StateIndex, ImageIndex, Checked, Cut, DropTarget, Focused, 
and Selected.
</p>
</descr>
<seealso/>
</element>
<element name="TListItem.WSUpdateAllowed.Result">
<short>
<b>True</b> if access to values in the list item is allowed.
</short>
</element>

<element name="TListItem.WSUpdateText">
<short>
Copies text values from the list item to the corresponding position in the 
widgetset class instance.
</short>
<descr>
<p>
<var>WSUpdateText</var> uses the value in Index to determine which list view 
item is updated in the widget. Methods in the widget are called to store 
values from the Caption and SubItems properties to the corresponding list item 
in the widget.
</p>
<p>
WSUpdateText is called from methods in TListItems, like SetItem and 
WSCreateCacheItem, when WSUpdateText returns <b>True</b>.
</p>
</descr>
<seealso>
<link id="TListItem.Index"/>
<link id="TListItem.Caption"/>
<link id="TListItem.SubItems"/>
<link id="TListItems.SetItem"/>
<link id="TListItems.WSCreateCacheItem"/>
</seealso>
</element>

<element name="TListItem.WSUpdateImages"/>
<element name="TListItem.WSUpdateChecked"/>
<element name="TListItem.WSSetState"/>
<element name="TListItem.WSUpdateState"/>

<element name="TListItem.SetChecked">
<short>Sets the value for the Checked property.</short>
<descr/>
<seealso>
<link id="TListItem.Checked"/>
</seealso>
</element>
<element name="TListItem.SetChecked.AValue">
<short>New value for the property.</short>
</element>

<element name="TListItem.SetState">
<short>
Sets the value for the property identified by the AState argument.
</short>
<descr>
<p>
<var>SetState</var> is used as the write access specifier for the Cut, 
DropTarget, and Focused properties.
</p>
</descr>
<seealso/>
</element>
<element name="TListItem.SetState.AState">
<short>
TListItemState value which identifies the property updated.
</short>
</element>
<element name="TListItem.SetState.AIsSet">
<short>New value for the corresponding property.</short>
</element>

<element name="TListItem.SetData">
<short>Sets the value for the Data property.</short>
<descr/>
<seealso>
<link id="TListItem.Data"/>
</seealso>
</element>
<element name="TListItem.SetData.AValue">
<short>New value for the property.</short>
</element>

<element name="TListItem.SetImageIndex">
<short>Sets the value for the ImageIndex property.</short>
<descr/>
<seealso>
<link id="TListItem.ImageIndex"/>
</seealso>
</element>
<element name="TListItem.SetImageIndex.AValue">
<short>New value for the property.</short>
</element>

<element name="TListItem.SetLeft">
<short>Sets the value for the Left property.</short>
<descr/>
<seealso>
<link id="TListItem.Left"/>
</seealso>
</element>
<element name="TListItem.SetLeft.AValue">
<short>New value for the property.</short>
</element>

<element name="TListItem.SetCaption">
<short>Sets the value for the Caption property.</short>
<descr/>
<seealso>
<link id="TListItem.Caption"/>
</seealso>
</element>
<element name="TListItem.SetCaption.AValue">
<short>New value for the property.</short>
</element>

<element name="TListItem.SetPosition">
<short>Sets the value for the Position property.</short>
<descr/>
<seealso>
<link id="TListItem.Position"/>
</seealso>
</element>
<element name="TListItem.SetPosition.AValue">
<short>New value for the property.</short>
</element>

<element name="TListItem.SetStateIndex">
<short>Sets the value for the StateIndex property.</short>
<descr/>
<seealso>
<link id="TListItem.StateIndex"/>
</seealso>
</element>
<element name="TListItem.SetStateIndex.AValue">
<short>New value for the property.</short>
</element>

<element name="TListItem.SetSubItemImages">
<short>Sets the value for the indexed SubItemImages property.</short>
<descr/>
<seealso>
<link id="TListItem.SubItemImages"/>
</seealso>
</element>
<element name="TListItem.SetSubItemImages.AIndex">
<short>Ordinal position for the new value.</short>
</element>
<element name="TListItem.SetSubItemImages.AValue">
<short>New value for the indexed property.</short>
</element>

<element name="TListItem.SetSubItems">
<short>Sets the value for the SubItems property.</short>
<descr/>
<seealso>
<link id="TListItem.SubItems"/>
</seealso>
</element>
<element name="TListItem.SetSubItems.AValue">
<short>New value for the property.</short>
</element>

<element name="TListItem.SetTop">
<short>Sets the value for the Top property.</short>
<descr/>
<seealso>
<link id="TListItem.Top"/>
</seealso>
</element>
<element name="TListItem.SetTop.Value">
<short>New value for the property.</short>
</element>

<element name="TListItem.IsEqual">
<short>
Determines if the specified list item has the same values as the current 
class instance.
</short>
<descr>
<p>
<var>IsEqual</var> is a <var>Boolean</var> function used to determine if the 
list item has the same values as the list item specified in <var>AItem</var>. 
IsEqual compares the values in the <var>Caption</var>, <var>Data</var>, and 
the internal <var>FStates</var> member in both <var>TListItem</var> 
instances. The return value is <b>True</b> when the content in the instances 
is the same.
</p>
</descr>
<seealso/>
</element>
<element name="TListItem.IsEqual.Result">
<short><b>True</b> when the list items have the same content.</short>
</element>
<element name="TListItem.IsEqual.AItem">
<short>List item compared to the current class instance.</short>
</element>

<element name="TListItem.IsOwnerData">
<short>Determines if the list item has an owner with a valid handle.</short>
<descr>
<p>
<var>IsOwnerData</var> is a <var>Boolean</var> function used to determine if 
the list item has an owner with a valid handle. IsOwnerData always returns 
<b>False</b> in <var>TListItem</var>. It is overridden in descendent classes 
like <var>TOwnerDataListItem</var>.
</p>
</descr>
<seealso>
<link id="TOwnerDataListItem.IsOwnerData"/>
</seealso>
</element>
<element name="TListItem.IsOwnerData.Result">
<short>
<b>True</b> if the list item has an owner with a valid handle.
</short>
</element>

<element name="TListItem.GetCheckedInternal">
<short>
<b>True</b> if the member variable for the Checked property contains 
<b>True</b>.
</short>
<descr>
<p>
Used in methods in the widgetset class.
</p>
</descr>
<seealso/>
</element>
<element name="TListItem.GetCheckedInternal.Result">
<short/>
</element>

<element name="TListItem.GetOwner">
<short>Gets the owner of the class instance.</short>
<descr>
<p>
Returns the value in the <var>Owner</var> property.
</p>
</descr>
<seealso>
<link id="TListItem.Owner"/>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>
<element name="TListItem.GetOwner.Result">
<short>Owner of the class instance.</short>
</element>

<element name="TListItem.Assign">
<short>
Copies values from the specified persistent object into the current class 
instance.
</short>
<descr>
<p>
<var>Assign</var> is an overridden method used copy property values from the 
persistent object in <var>ASource</var> into the current class instance. When 
<var>ASource</var> is a <var>TListItem</var> descendant, the following 
property values are copied:
</p>
<ul>
<li>Caption</li>
<li>Data</li>
<li>ImageIndex</li>
<li>SubItems</li>
</ul>
<p>
If ASource is not descended from TListItem, the inherited method is called to 
handle the assignment.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
</seealso>
</element>
<element name="TListItem.Assign.ASource">
<short>Persistent object with values copied in the method.</short>
</element>

<element name="TListItem.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for the class instance, and calls the 
inherited constructor on entry. <var>AOwner</var> is the 
<var>TListItems</var> instance which acts as the container for the list item.
</p>
<p>
Create sets the default values in member variables used in the class 
instance. The property interfaces are not used before they are not available 
until the list item is added to the TListItems container.
</p>
</descr>
<seealso>
<link id="TListItems"/>
<link id="#rtl.system.TObject.Create">TObject.Create</link>
</seealso>
</element>
<element name="TListItem.Create.AOwner">
<short>Container which owns the list item.</short>
</element>

<element name="TListItem.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance.
</p>
<p>
Destroy sets the internal flag that marks the list item for destruction in 
the <var>Owner</var>. When the Owner is assigned, its 
<var>ItemDestroying</var> method is called to signal destruction of the list 
item in the container.
</p>
<p>
Destroy free and <b>Nil</b>s resources allocated for the <var>SubItems</var> 
property, and calls the inherited destructor prior to exit.
</p>
</descr>
<seealso>
<link id="TListItem.SubItems"/>
<link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
</seealso>
</element>

<element name="TListItem.Delete">
<short>Removes the list item from the container.</short>
<descr>
<p>
<var>Delete</var> checks the internal <var>TListItemFlags</var> values for 
the class instance to ensure that Delete has not already been called for the 
list item.
</p>
<p>
If lifDestroying is not included in the flags, the Free method called to free 
the class instance. No actions are performed in the method if lifDestroying 
is already included in the flag values.
</p>
<p>
Delete is called from the Delete method in TListItems. It is also called when 
TListItems is notified that the list item has been freed in Destroy.
</p>
</descr>
<seealso>
<link id="TListItem.Destroy"/>
<link id="TListItems.Delete"/>
<link id="TListItemFlags"/>
</seealso>
</element>

<element name="TListItem.MakeVisible">
<short>
Makes the item visible in the list view control which owns the list item.
</short>
<descr>
<p>
<var>MakeVisible</var> is a method used to make the list item partially or 
fully visible in a list view control. MakeVisible checks for valid Owners in 
both the <var>TListItems</var> container and the <var>TCustomListView</var> 
control. When both are available, and the handle for the list view control 
has been allocated, the widgetset class is notified to display the list item.
</p>
<p>
When <var>PartialOK</var> is set to <b>True</b>, the list item does not have 
to become fully visible.
</p>
</descr>
<seealso>
<link id="TListItem.Owner"/>
<link id="TListItems.Owner"/>
</seealso>
</element>
<element name="TListItem.MakeVisible.PartialOK">
<short>
<b>True</b> is the list item can be partially visible in the control.
</short>
</element>

<element name="TListItem.DisplayRect">
<short>
Gets the display rectangle for the specified region of the list item on its 
list view control.
</short>
<descr>
<p>
<var>DisplayRect</var> calls methods in the widgetset class to get the TRect 
instance with the coordinates for the item region in Code. Code can contain 
one of the values from the TDisplayCode type, including:
</p>
<dl>
<dt>drBounds</dt>
<dd>Bounds for the list item.</dd>
<dt>drIcon</dt>
<dd>Width and height for the icon on the list item.</dd>
<dt>drLabel</dt>
<dd>Text metrics for the label or caption on the list item.</dd>
<dt>drSelectBounds</dt>
<dd>Bounds for the selection rectangle on the list view control.</dd>
</dl>
</descr>
</element>
<element name="TListItem.DisplayRect.Result">
<short>
TRect instance with the coordinates for the specified display region.
</short>
</element>
<element name="TListItem.DisplayRect.Code">
<short>Identifies the region for the coordinates in the return value.</short>
</element>

<element name="TListItem.DisplayRectSubItem">
<short>
Gets the display rectangle coordinates for a region in the specified 
sub-item on its list view control.
</short>
<descr>
<p>
<var>DisplayRectSubItem</var> calls methods in the widgetset class to get the 
TRect instance with the coordinates for the sub-item region in Code. Code can 
contain one of the values from the TDisplayCode type, including:
</p>
<dl>
<dt>drBounds</dt>
<dd>Bounds for the sub-item.</dd>
<dt>drIcon</dt>
<dd>Width and height for the icon on the sub-item.</dd>
<dt>drLabel</dt>
<dd>Text metrics for the label or caption on the sub-item.</dd>
<dt>drSelectBounds</dt>
<dd>
Bounds for the selection rectangle for the sub-item on the list view control.
</dd>
</dl>
<p>
SubItem contains the ordinal position in SubItems property with the text for 
the sub-item.
</p>
<remark>
DisplayRectSubItem is not used in the current LCL implementation (2.2.0).
</remark>
</descr>
</element>
<element name="TListItem.DisplayRectSubItem.Result">
<short/>
</element>
<element name="TListItem.DisplayRectSubItem.SubItem">
<short/>
</element>
<element name="TListItem.DisplayRectSubItem.Code">
<short/>
</element>

<element name="TListItem.EditCaption">
<short>
Selects the list item and displays its editor when possible.
</short>
<descr>
<p>
<var>EditCaption</var> is a <b>Boolean</b> function used to select the list 
item on its list view control, and display its Editor control. The return 
value is <b>True</b> if the list item is the Selected item for the control 
and the editor was successfully displayed.
</p>
<p>
EditCaption clears any existing selections in the list view control in Owner, 
and assigns the class instance to the Selected property. No additional action 
are performed in the method when the list view control is ReadOnly, or an 
Editor has not been assigned for the control. The return value is set to 
False.
</p>
<p>
EditCaption calls the private ShowEditor method in the list view control to 
display and set focus to the editor. The editor control may not become 
visible if the OnEditing event handler in the list view control indicates the 
list item cannot be edited.
</p>
<remark>
EditCaption is not used in the current LCL implementation (2.2.0).
</remark>
</descr>
<seealso>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.ReadOnly"/>
<link id="TCustomListView.IsEditing"/>
</seealso>
</element>
<element name="TListItem.EditCaption.Result">
<short>
<b>True</b> if the control is not ReadOnly and the editor is valid, otherwise 
<b>False</b>.
</short>
</element>

<element name="TListItem.GetStates">
<short>Returns all the states for the list item.</short>
<descr>
<p>
<var>GetStates</var> is a <var>TListItemStates</var> function used to get the 
state values for an item in a list view control. The state values are 
retrieved using methods in the widgetset class for the 
<var>TCustomListView</var> control which owns the list item. If the widgetset 
class does not return the values, the return value contains the existing 
values in the States member for the <var>TListItem</var> instance.
</p>
</descr>
<seealso/>
</element>
<element name="TListItem.GetStates.Result">
<short>State values for the list item.</short>
</element>

<element name="TListItem.Caption">
<short>
<var>Caption</var> - the name given to this item on the list.
</short>
<descr>
<p>
<var>Caption</var> is a <var>String</var> property with the text displayed 
for the list item. It is also used as the Name displayed for the class 
instance in the Lazarus Object Inspector.
</p>
<p>
The property value is assigned when TCustomListView.AddItem creates the 
TListItem instance in its Items property. Changing the value for the property 
causes the list view control to be notified when WSUpdateAllowed returns 
<b>True</b>.
</p>
<p>
Caption is used in the <var>TCustomListView.DrawItem</var> method to draw the 
text for the list item. It provides the initial value displayed when the 
editor is activated for an item on the list view control, and is updated when 
editing is completed.
</p>
</descr>
<seealso>
<link id="TCustomListView.DrawItem"/>
<link id="TCustomListView.Edit"/>
<link id="TCustomListView.AddItem"/>
<link id="TCustomListView.Items"/>
<link id="TListItems.AddItem"/>
<link id="TListItems.Add"/>
</seealso>
</element>

<element name="TListItem.Checked">
<short>
Displays a check mark to allow the list item to be include in list view 
operations.
</short>
<descr>
<p>
<var>Checked</var> is a <var>Boolean</var> property which indicates if a 
check mark is displayed for the list item. Checked allows specific list items 
to be marked for inclusion in methods for the list view control, such as Sort.
</p>
<p>
Checked is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid.
</p>
</descr>
<seealso>
<link id="TListItem.Owner"/>
<link id="TListItems.Owner"/>
<link id="TCustomListView.CheckBoxes"/>
<link id="TCustomListView.Sort"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.OnItemChecked"/>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TListItem.Cut">
<short>
Indicates if the list item has been cut from the list but it can be pasted to 
the clipboard.
</short>
<descr>
<p>
<var>Cut</var> is a <var>Boolean</var> property which reflects whether the 
value lisCut has been included in the TListItemState flags for the list item. 
The property value is retrieved from and written to the widgetset class for 
the TCustomTreeView control when its handle has been allocated.
</p>
</descr>
</element>

<element name="TListItem.Data">
<short>Pointer to arbitrary Data associated with the list item.</short>
<descr>
<p>
<var>Data</var> is an untyped <var>Pointer</var> property with a pointer to 
arbitrary data for the list item. The value for the property is stored when 
the list item is created in <var>TCustomListView.AddItem</var>.
</p>
<p>
Data can be used to order list items in <var>TCustomListView.Sort</var> when 
the <var>SortType</var> property is set to <var>[stData]</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.AddItem"/>
<link id="TCustomListView.FindData"/>
<link id="TCustomListView.Sort"/>
<link id="TCustomListView.SortType"/>
<link id="TListItems.FindData"/>
</seealso>
</element>

<element name="TListItem.DropTarget">
<short>
<b>True</b> if the list item is a highlighted drop target in the list view 
control.
</short>
<descr>
<p>
<var>DropTarget</var> is a <var>Boolean</var> property which indicates if the 
list item is a highlighted drop target in the list view control. It value is 
<b>True</b> when the <var>TListItemState</var> values for the item contain 
<var>lisDropTarget</var>.
</p>
<p>
The property value is read from and written to the widgetset class instance 
for the list view control when its handle is valid. It is updated when the 
<var>TCustomListView.GetNextItem</var> method is called for the lisDropTarget 
state.
</p>
</descr>
<seealso/>
</element>

<element name="TListItem.Focused">
<short>
<b>True</b> if the list item is focused on the list view control.
</short>
<descr>
<p>
<var>Focused</var> is a <var>Boolean</var> property which contains 
<b>True</b> when the list item is focused on the list view control. The 
property value is read from and written to the widgetset class instance for 
the list view control when its handle is valid. Changing the value for the 
Focused property in TCustomListView causes the value in the list item to be 
updated.
</p>
</descr>
<seealso/>
</element>

<element name="TListItem.Index">
<short>
Ordinal position for the list item in its TListItems container.
</short>
<descr>
<p>
<var>Index</var> is a read-only <var>Integer</var> property with the position 
where the list item in stored in its TListItems container. The property value 
is retrieved by calling the IndexOf method in the Owner (TListItems) to 
locate the class instance. The property value is -1 if Owner has not been 
assigned, or the list was removed from the container.
</p>
<p>
Use the Move or Exchange methods in TListItems, or the sort routines in 
TCustomListView, to change the position where a list item is stored in its 
container.
</p>
</descr>
<seealso>
<link id="TListItems.IndexOf"/>
<link id="TListItems.Move"/>
<link id="TListItems.Exchange"/>
<link id="TCustomListView.AutoSort"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.Sort"/>
<link id="TCustomListView.AlphaSort"/>
<link id="TCustomListView.CustomSort"/>
</seealso>
</element>

<element name="TListItem.ImageIndex">
<short>
Ordinal position for the image displayed for the list item.
</short>
<descr>
<p>
<var>ImageIndex</var> is a <var>TImageIndex</var> property with the position 
for the image displayed for the list item. It is the ordinal position in the 
LargeImages or SmallImages properties in the ListView for the item.
</p>
<p>
The default value for the property is -1, and indicates that an explicit 
value has not been assigned. ImageIndex can be assigned at design-time in the 
Lazarus Object Inspector, or at run-time. Changing the property value causes 
the ListView widgetset class to be updated when its handle has been assigned.
</p>
<p>
Use StateIndex to specify the position for the state image used on the list 
item.
</p>
</descr>
<seealso>
<link id="TListItem.ListView"/>
<link id="TListItem.StateIndex"/>
<link id="TCustomListView.ViewStyle"/>
<link id="TCustomListView.SmallImages"/>
<link id="TCustomListView.LargeImages"/>
<link id="TCustomListView.StateImages"/>
</seealso>
</element>

<element name="TListItem.Left">
<short>The position of the Left side of the list item.</short>
<descr>
<p>
<var>Left</var> is an <var>Integer</var> property which contains the 
coordinate for the left edge of the list item on its list view control. The 
property value is read from and written to the Position property in the list 
item; it represents the X member in the TPoint instance. Setting a new value 
for the property causes the TPoint instance in Position to be re-allocated, 
and the widgetset class is notified of the change to the value.
</p>
<p>
Values in Left and Top are used in the <var>TCustomListView.DrawItem</var> 
method to position the list item on the canvas for the list view control.
</p>
<p>
Use Top for the coordinate where the top edge of the list item is located.
</p>
<p>
Use Index to access the ordinal position for the list item in its TListItems 
container.
</p>
</descr>
<seealso>
<link id="TListItem.Position"/>
<link id="TListItem.Top"/>
<link id="TListItem.Index"/>
<link id="TCustomListView.DrawItem"/>
</seealso>
</element>

<element name="TListItem.ListView">
<short>The <var>ListView</var> in which this Item is found.</short>
<descr>
<p>
<var>ListView</var> is a read-only <var>TCustomListView</var> property which 
provides access to the list view control where the list item is displayed. It 
allows the list item to access properties and methods in its owner control. 
The property value is determined by checking the TListItems owner for its 
TCustomListView owner.
</p>
</descr>
<seealso>
<link id="TListItem.Owner"/>
<link id="TListItems.Owner"/>
<link id="TCustomListView"/>
</seealso>
</element>

<element name="TListItem.Owner">
<short>Container that is the Owner of the list item.</short>
<descr>
<p>
<var>Owner</var> is a read-only <var>TListItems</var> property with the 
container where the list item is stored. The property value is assigned in 
the Create constructor to the TListItems instance passed as an argument. 
Owner allows the list item to access properties and methods in the container 
class instance from within its implementation. It also provides access to 
properties and methods in the list view control where the list item is 
displayed.
</p>
</descr>
<seealso>
<link id="TListItems"/>
<link id="TListItems.Create"/>
<link id="TListItems.Owner"/>
</seealso>
</element>

<element name="TListItem.Position">
<short>
The coordinates where the list item is located on its list view control.
</short>
<descr>
<p>
<var>Position</var> is a <var>TPoint</var> property with the coordinates 
where the list item is displayed on its ListView control. The property value 
is read from and written to the widgetset class instance for the ListView 
control when its handle has been allocated. The X and Y members in the 
property are used as the values for the Top and Left properties 
(respectively). Changing the values in the X and Y members, or in Top and 
Left, cause the widgetset class to be notified of the new value(s).
</p>
<p>
Use Index to access the ordinal position for the list item in its container.
</p>
</descr>
<seealso>
<link id="TListItem.Left"/>
<link id="TListItem.Top"/>
<link id="TListItem.Index"/>
<link id="TListItem.ListView"/>
<link id="TListItem.Owner"/>
<link id="TListItems"/>
</seealso>
</element>

<element name="TListItem.Selected">
<short>
Whether this Item has been <var>Selected</var> (often denoted by a 
check-mark).
</short>
<descr>
<p>
Selected is a Boolean property which indicates if the list item has been 
selected. The property value is determined by examining the internal 
TListItemStates set for the class instance. When lisSelected has been 
included in the state values, the property is <b>True</b>. Otherwise, the 
property is <b>False</b>.
</p>
<p>
Setting a new value for the property causes the value lisSelected to be 
included in or removed from the internal set. AIsSet indicates whether the 
state value is set. When <b>True</b>, the state value is included in the set. 
Otherwise, the state value is excluded.
</p>
</descr>
<seealso/>
</element>

<element name="TListItem.StateIndex">
<short>
Ordinal position for the image used to represent the state for the list item.
</short>
<descr>
<p>
<var>StateIndex</var> is a <var>TImageIndex</var> property with the position 
for the image used to represent the state for the list item. It is the 
position in the StateImages for the ListView control, or -1 when a value has 
not been explicitly assigned to the property. Changing the property values 
causes the widgetset class instance for the ListView control to be updated.
</p>
<p>
StateIndex is normally updated when the ListView control changes the usage 
context for the list item, and uses the set type returned from the GetStates 
method. StateIndex values and their TListItemStates equivalents:
</p>
<dl>
<dt>-1</dt>
<dd>A value has not been assigned.</dd>
<dt>0</dt>
<dd>Used when GetStates is an empty set ([]).</dd>
<dt>1</dt>
<dd>Used when GetStates contains lisCut. Cut is <b>True</b>.</dd>
<dt>2</dt>
<dd>Used when GetStates contains lisDropTarget. DropTarget is <b>True</b>.</dd>
<dt>3</dt>
<dd>Used when GetStates contains lisSelected. Selected is <b>True</b>.</dd>
<dt>4</dt>
<dd>Used when GetStates contains lisFocused. Focused is <b>True</b>.</dd>
</dl>
</descr>
<seealso>
<link id="TListItem.GetStates"/>
<link id="TCustomListView.StateImages"/>
<link id="TListItemState"/>
</seealso>
</element>

<element name="TListItem.SubItems">
<short>
Contains text displayed as additional columns on the list view control.
</short>
<descr>
<p>
<var>SubItems</var> is a <var>TStrings</var> property with text displayed for 
additional columns when the ListView control sets its ViewStyle property to 
vsReport. Column 0 always contains the Caption for the list item. Values in 
SubItems are displayed starting at column number 1 and continue through the 
number of columns defined on the list view control. In other words, column 1 
is SubItems[0]. Column 2 is SubItems[1]. Ad infinitum.
</p>
<p>
Values in Subitems can assigned at design-time using the Items property 
editor in the Lazarus IDE. They can also be assigned at run-time. Maintain 
the Columns property in the ListView control to match the number of columns 
needed for the values in SubItems.
</p>
</descr>
<seealso>
<link id="TListItem.Caption"/>
<link id="TListItem.SubItemImages"/>
<link id="TCustomListView.Columns"/>
<link id="TCustomListView.ViewStyle"/>
<link id="TViewStyle"/>
</seealso>
</element>

<element name="TListItem.SubItemImages">
<short>
Gets the ImageIndex for the sub-item at the specified position.
</short>
<descr>
<p>
<var>SubItemImages</var> is an indexed <var>Integer</var> property which gets 
the position for an image associated with the value in SubItems at the 
position specified in AIndex. The property value contains the ImageIndex for 
the sub-item assigned at design-time using the Items property editor in the 
Lazarus Object Inspector.
</p>
<p>
The property value is the position in SmallImages in the ListView control. 
The image is displayed to the left of the caption for the sub-item. -1 
indicates that an image index value was not explicitly assigned for the 
sub-item.
</p>
</descr>
<seealso/>
</element>
<element name="TListItem.SubItemImages.AIndex">
<short>Ordinal position in SubItems for the property value.</short>
</element>

<element name="TListItem.Top">
<short>Top coordinate for the list item.</short>
<descr>
<p>
<var>Top</var> is an <var>Integer</var> property which contains the top 
coordinate for the list item on its list view control. The property value is 
read from and written to the Position property in the list item; it 
represents the Y member in the TPoint instance. Setting a new value for the 
property causes the TPoint instance in Position to be re-allocated, and the 
widgetset class is notified of the change to the value.
</p>
<p>
Values in Left and Top are used in the <var>TCustomListView.DrawItem</var> 
method to position the list item on the canvas for the list view control.
</p>
<p>
Use Left for the coordinate where the left edge of the list item is located.
</p>
<p>
Use Index to access the ordinal position for the list item in its TListItems 
container.
</p>
</descr>
<seealso>
<link id="TListItem.Position"/>
<link id="TListItem.Index"/>
<link id="TListItem.Left"/>
<link id="TCustomListView.DrawItem"/>
</seealso>
</element>

<element name="TListItemClass">
<short>Class reference used to create new instances of TListItem.</short>
<descr/>
<seealso>
<link id="TListItem"/>
<link id="TLVCreateItemClassEvent"/>
</seealso>
</element>

<element name="TOwnerDataListItem">
<short>
List item class used in a list view control when OwnerData (virtual) mode is 
enabled.
</short>
<descr>
<p>
TOwnerDataListItem is a TListItem descendant which implements a list item 
used for a list view control in virtual mode. It is the singleton with the 
currently selected list item when the list view control has enabled its 
OwnerData property.
</p>
<p>
TOwnerDataListItem provides overridden methods which allow the list item 
to be maintained in an item cache instead of the Items collection for 
the list view control. The class instance is, however, still owned by the 
TListItems collection in the list view control.
</p>
<p>
An internal TOwnerDataListItem instance is allocated in the TCustomListView 
constructor for use in the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OwnerData"/>
<link id="TCustomListView.Items"/>
<link id="TListItems"/>
<link id="TListItems"/>
</seealso>
</element>

<element name="TOwnerDataListItem.FDataIndex"/>
<element name="TOwnerDataListItem.FCached"/>
<element name="TOwnerDataListItem.GetCaption"/>
<element name="TOwnerDataListItem.GetCaption.Result"/>
<element name="TOwnerDataListItem.GetIndex"/>
<element name="TOwnerDataListItem.GetIndex.Result"/>
<element name="TOwnerDataListItem.GetImageIndex"/>
<element name="TOwnerDataListItem.GetImageIndex.Result"/>
<element name="TOwnerDataListItem.SetCaption"/>
<element name="TOwnerDataListItem.SetCaption.AValue"/>
<element name="TOwnerDataListItem.SetImageIndex"/>
<element name="TOwnerDataListItem.SetImageIndex.AValue"/>
<element name="TOwnerDataListItem.GetSubItems"/>
<element name="TOwnerDataListItem.GetSubItems.Result"/>
<element name="TOwnerDataListItem.DoCacheItem"/>

<element name="TOwnerDataListItem.IsOwnerData">
<short>
Indicates if the virtual list item has an owner collection and allows updates.
</short>
<descr/>
<seealso/>
</element>
<element name="TOwnerDataListItem.IsOwnerData.Result">
<short>
<b>True</b> if the owner for the list item has been assigned, and the widget 
flags allow updates to its values.
</short>
</element>

<element name="TOwnerDataListItem.SetDataIndex">
<short>
Sets the index position for the virtual list item and updates the item cache.
</short>
<descr/>
<seealso/>
</element>
<element name="TOwnerDataListItem.SetDataIndex.ADataIndex">
<short>
New position where the list item is stored in the item cache.
</short>
</element>

<element name="TOwnerDataListItem.SetOwner">
<short>
Sets the TListItems container which owns the virtual list item.
</short>
<descr>
<p>
Changing the owner for the list item causes values in internal members to be 
cleared, including:
</p>
<ul>
<li>Flags (an empty set).</li>
<li>States (an empty set).</li>
<li>ImageIndex (-1 for the unassigned value).</li>
<li>SubItems (frees the TStrings instance for the member).</li>
</ul>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TListItems"/>
</seealso>
</element>
<element name="TOwnerDataListItem.SetOwner.AOwner">
<short>
TListItems instance which owns the virtual list item.
</short>
</element>

<element name="TListItemsEnumerator">
<short>
Implements an enumerator for TListItem values in a TListItems container.
</short>
<descr>
<p>
<var>TListItemsEnumerator</var> is the type returned from the GetEnumerator 
method in TListItems. It implements the enumerator for the indexed Item 
property in TListItems.
</p>
</descr>
<seealso>
<link id="TListItems.GetEnumerator"/>
<link id="TListItems.Item"/>
<link id="TListItem"/>
</seealso>
</element>

<element name="TListItemsEnumerator.FItems"/>
<element name="TListItemsEnumerator.FPosition"/>
<element name="TListItemsEnumerator.GetCurrent"/>
<element name="TListItemsEnumerator.GetCurrent.Result"/>

<element name="TListItemsEnumerator.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
On exit, the internal position for the enumerator is set to -1. Use MoveNext 
to position the enumerator on its initial TListItem value prior to accessing 
the Current property in the enumerator.
</p>
</descr>
<seealso/>
</element>
<element name="TListItemsEnumerator.Create.AItems">
<short>
Container with the list items navigated in the enumerator.
</short>
</element>

<element name="TListItemsEnumerator.MoveNext">
<short>Moves to the next value for the enumerator.</short>
<descr>
<p>
<var>MoveNext</var> is a <var>Boolean</var> function used to move the 
enumerator to the next value in the list items container. The return value is 
<b>True</b> if the new position is valid for the TListItems container. The 
return value is <b>False</b> if the new position is larger than Count-1 from 
the TListItems container.
</p>
</descr>
<seealso>
<link id="TListItems.Count"/>
</seealso>
</element>
<element name="TListItemsEnumerator.MoveNext.Result">
<short>
Returns <b>True</b> if another list item is available using the enumerator.
</short>
</element>

<element name="TListItemsEnumerator.Current">
<short>
Current value for the enumerator.
</short>
<descr>
<p>
<var>Current</var> is a read-only <var>TListItem</var> property which contains 
the list item found at the current position for the enumerator. The property 
value is <b>Nil</b> (and an exception is raised) if Current is used to access 
a position prior to or after a valid position in the list item container.
</p>
<p>
Use MoveNext to move the enumerator to the first/next list item in the 
container. When MoveNext returns <b>False</b>, there are no more list items 
available to the enumerator.
</p>
</descr>
<seealso>
<link id="TListItemsEnumerator.MoveNext"/>
<link id="TListItems.Count"/>
<link id="TListItems"/>
<link id="TListItem"/>
</seealso>
</element>

<element name="TListItemsFlag">
<short>Widgetset flags applied to the TListItems container.</short>
<descr>
<p>
Values from the <var>TListItemsFlag</var> enumeration are stored in the 
<var>TListItemFlags</var> set type, and used to implement the 
<var>Flags</var> property in <var>TListItems</var>.
</p>
</descr>
<seealso>
<link id="TListItemsFlags"/>
<link id="TListItems.Flags"/>
</seealso>
</element>
<element name="TListItemsFlag.lisfWSItemsCreated">
<short>
Indicates the list items in the container have been created in the widgetset 
class.
</short>
</element>

<element name="TListItemsFlags">
<short>Set type used to store TListItemsFlag enumeration values.</short>
<descr>
<p>
TListItemsFlags is a set type used to store zero or more values from the 
<var>TListItemsFlag</var> enumeration. It is used to implement the 
<var>Flags</var> property in <var>TListItems</var>.
</p>
</descr>
<seealso>
<link id="TListItemFlag"/>
<link id="TListItems.Flags"/>
</seealso>
</element>

<element name="TListItems">
<short>
Implements a container for list items on a list view control.
</short>
<descr>
<p>
TListItems is a TPersistent descendant which implements the container used to 
store TListItem instances used in a TCustomListView control. The Owner of the 
container is the TCustomListView control passed as an argument to the 
constructor.
</p>
<p>
TListItems is the type used to implement the Items property in 
TCustomListView.
</p>
<p>
TListItems provides properties and methods needed to maintain and access the 
TListItem instances stored in the list for the container. Item is the default 
property for the class instance and allows access to the list items by their 
ordinal position in the container. It also the target for an enumerator using 
the TListItemsEnumerator supported in the class instance.
</p>
<p>
<var>TListitems</var> has a built-in cache for the last accessed item. This 
will speed up interface updates since <var>Item.Index</var> is often used for 
the same item updating more properties. If <var>FCacheIndex</var> contains -1 
then the cache is not valid.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TListItem"/>
<link id="TListItemsEnumerator"/>
</seealso>
</element>

<element name="TListItems.FOwner"/>
<element name="TListItems.FItems"/>
<element name="TListItems.FFlags"/>
<element name="TListItems.FCacheIndex"/>
<element name="TListItems.FCacheItem"/>

<!-- private -->
<element name="TListItems.WSCreateCacheItem"/>
<element name="TListItems.WSUpdateAllowed"/>
<element name="TListItems.WSUpdateAllowed.Result"/>
<element name="TListItems.WSUpdateAllowed"/>
<element name="TListItems.WSUpdateAllowed.Result"/>
<element name="TListItems.WSUpdateItem"/>
<element name="TListItems.WSUpdateItem.AIndex"/>
<element name="TListItems.WSUpdateItem.AValue"/>
<element name="TListItems.WSSetItemsCount"/>
<element name="TListItems.WSSetItemsCount.ACount"/>
<element name="TListItems.ItemDestroying"/>
<element name="TListItems.ItemDestroying.AItem"/>

<element name="TListItems.ReadData">
<short/>
<descr>
<p>
Reads data in a Delphi compatible way.
</p>
</descr>
<seealso/>
</element>
<element name="TListItems.ReadData.Stream">
<short/>
</element>

<element name="TListItems.ReadLazData">
<short/>
<descr>
<p>
Reads data in a 64-bit safe way.
</p>
</descr>
<seealso/>
</element>
<element name="TListItems.ReadLazData.Stream">
<short/>
</element>

<element name="TListItems.WriteLazData">
<short/>
<descr>
<p>
Writes data in a 64-bit safe way.
</p>
</descr>
<seealso/>
</element>
<element name="TListItems.WriteLazData.Stream">
<short/>
</element>

<element name="TListItems.DefineProperties">
<short>
Defines read and write routines used for binary Data in the list items for 
the container.
</short>
<descr>
<p>
<var>DefineProperties</var> is an overridden method in <var>TListItems</var>. 
It implements the virtual method defined in TPersistent. DefineProperties 
associates property names with the read and write routines used during LCL 
component streaming.
</p>
<p>
In TListItems, DefineProperties identifies the private methods used to read 
and write the binary values with support for 32- or 64-bit integer values and 
the pointer for the Data property (when used).
</p>
</descr>
<seealso>
<link id="TListItem.Data"/>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>
<element name="TListItems.DefineProperties.Filer">
<short/>
</element>

<element name="TListItems.GetCount">
<short>
Gets the value for the Count property.
</short>
<descr/>
<seealso>
<link id="TListItems.Count"/>
</seealso>
</element>
<element name="TListItems.GetCount.Result">
<short>
Value for the Count property.
</short>
</element>

<element name="TListItems.GetItem">
<short>
Gets the value for the indexed Item property.
</short>
<descr/>
<seealso>
<link id="TListItems.Item"/>
<link id="TListItem"/>
</seealso>
</element>
<element name="TListItems.GetItem.Result">
<short>
TListItem instance at the specified position in the indexed property.
</short>
</element>
<element name="TListItems.GetItem.AIndex">
<short>Ordinal position in the list with the property value.</short>
</element>

<element name="TListItems.GetOwner">
<short>Gets the value for the Owner property.</short>
<descr/>
<seealso>
<link id="TListItems.Owner"/>
<link id="TListItems.Create"/>
<link id="TCustomListView"/>
</seealso>
</element>
<element name="TListItems.GetOwner.Result">
<short>TCustomListView instance that owns the container.</short>
</element>

<element name="TListItems.WSCreateItems">
<short>
Creates list items in the widgetset class, and cache entries for the values.
</short>
<descr>
<p>
<var>WSCreateItems</var> is called when the window handle is initialized for a 
list view control, and virtual mode has not been enabled in the control using 
its OwnerData property.
</p>
</descr>
<seealso>
<link id="TCustomListView.InitializeWnd"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.OwnerData"/>
</seealso>
</element>

<element name="TListItems.DoFinalizeWnd">
<short>
Updates flags in the class instance when the widgetset handle is freed.
</short>
<descr>
<p>
Ensures that lisfWSItemsCreated is removed from the Flags property.
</p>
</descr>
<seealso>
<link id="TListItems.Flags"/>
<link id="TListItemsFlag"/>
<link id="TListItemsFlags"/>
</seealso>
</element>

<element name="TListItems.SetCount">
<short>Sets the value for the Count property.</short>
<descr/>
<seealso>
<link id="TListItems.Count"/>
</seealso>
</element>
<element name="TListItems.SetCount.ACount">
<short>New value for the Count property.</short>
</element>

<element name="TListItems.SetItem">
<short>
Set the value in the indexed Item property.
</short>
<descr/>
<seealso>
<link id="TListItems.Item"/>
<link id="TListItem"/>
</seealso>
</element>
<element name="TListItems.SetItem.AIndex">
<short>
Ordinal position in the list for the property value updated in the method.
</short>
</element>
<element name="TListItems.SetItem.AValue">
<short>
New value for the indexed Item property.
</short>
</element>

<element name="TListItems.ClearSelection">
<short>
Clears the selected state for all TListItem instances in the container.
</short>
<descr>
<p>
<var>ClearSelection</var> iterates over the values in <var>Item</var> and 
updates a TListItem instance when its State flags include the value 
lisSelected. The lisSelected flag value is removed from the internal member 
for the TListItem instance(s). The OnSelectItem event handler for the list 
view control is signalled (when assigned) for each of the Item instances 
updated in the method.
</p>
<p>
Use SelectAll to select all of the list items in the container.
</p>
</descr>
<seealso>
<link id="TListItems.Item"/>
<link id="TListItems.SelectAll"/>
<link id="TListItem.Selected"/>
<link id="TCustomListView.OnSelectItem"/>
</seealso>
</element>

<element name="TListItems.SelectAll">
<short>
Sets the selected state to <b>True</b> for all TListItem instances in the 
container.
</short>
<descr>
<p>
SelectAll iterates over the Item values in the container, and enables the 
selected state for any TListItem instance not already selected.
</p>
<p>
SelectAll checks the internal state values for each of the list items to 
determine if lisSelected has been included in the flags. When not present, it 
is added to the TListItemStates set for a list item.
</p>
<p>
The OnSelectItem event handler in the list view control is signalled (when 
assigned) for each of the TListItem instances updated in the method.
</p>
<p>
Use ClearSelection to clear the selected state for all of the list items in 
the container.
</p>
</descr>
<seealso>
<link id="TListItems.Item"/>
<link id="TListItems.ClearSelection"/>
<link id="TListItem.Selected"/>
<link id="TCustomListView.OnSelectItem"/>
</seealso>
</element>

<element name="TListItems.Add">
<short>
Adds a new list item to the container.
</short>
<descr>
<p>
<var>Add</var> is a <var>TListItem</var> function used to create a new list 
item instance and add it to the container. The return value contains the 
TListItem instance created in the method, and stored in the internal list for 
the container.
</p>
<p>
When a list view control has been assigned to Owner, its CreateListItem 
method is called to create the new list item. A custom item class can be 
provided using the OnCreateItemClass event handler in the list view control. 
Otherwise, TListItem.Create is called to create the list item using the 
container class instance as the Owner.
</p>
<p>
Add calls the AddItem method to store the new TListItem instance. The 
widgetset class is notified of the new cached item when its handle is 
available. The ItemInserted method in Owner is called to execute an 
overridden InsertItem method (when available) or signal the OnInsert event 
handler for the list view control (when assigned).
</p>
<p>
Use Insert to create a new list item and store it at a specified position in 
the container.
</p>
</descr>
<seealso>
<link id="TListItems.AddItem"/>
<link id="TListItems.Insert"/>
<link id="TCustomListView.CreateListItem"/>
<link id="TCustomListView.OnCreateItemClass"/>
<link id="TCustomListView.InsertItem"/>
<link id="TCustomListView.ItemInserted"/>
<link id="TCustomListView.OnInsert"/>
</seealso>
</element>
<element name="TListItems.Add.Result">
<short>
The TListItem instance created and stored in the method.
</short>
</element>

<element name="TListItems.AddItem">
<short>
Adds the specified list item to the storage for the container.
</short>
<descr>
<p>
<var>AddItem</var> is method used to add the list item specified in AItem to 
the storage for the container.
</p>
<p>
The position for the list item in internal storage and the class instance are 
stored in local cache entries. The widgetset class for the list view control 
is notified when its handle is allocated of the updated cache values.
</p>
<p>
If a list view control has been assigned to Owner, its ItemInserted method is 
called. ItemInserted can execute an overridden InsertItem method (when 
available) or signal the OnInsert event handler for the list view control 
(when assigned).
</p>
<p>
Use InsertItem to store a list item at a specified position in the internal 
storage for the container.
</p>
</descr>
<seealso>
<link id="TCustomListView.ItemInserted"/>
<link id="TCustomListView.InsertItem"/>
<link id="TCustomListView.OnInsert"/>
</seealso>
</element>
<element name="TListItems.AddItem.AItem">
<short>
TListItem instance added to the container and its cache.
</short>
</element>

<element name="TListItems.BeginUpdate">
<short>
Starts an update process for the container and its list view control.
</short>
<descr>
<p>
BeginUpdate calls the corresponding method for the list view control in Owner.
</p>
<p>
Use EndUpdate to finish an update process.
</p>
</descr>
<seealso>
<link id="TListItems.EndUpdate"/>
<link id="TCustomListView.BeginUpdate"/>
<link id="TCustomListView.EndUpdate"/>
</seealso>
</element>

<element name="TListItems.Clear">
<short>
Removes all list item instances stored in the container.
</short>
<descr>
<p>
<var>Clear</var> calls the Delete method to remove each of the TListItem 
class instances in the internal storage for the container.
</p>
<p>
<var>Clear</var> is called from the TCustomListView.Clear method. It is also 
called immediately before values are loaded into the container during LCL 
component streaming.
</p>
</descr>
<seealso>
<link id="TListItems.Delete"/>
<link id="TCustomListView.Clear"/>
</seealso>
</element>

<element name="TListItems.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance, and 
calls the inherited method on entry. It allocates resources for the list used 
to store the items in the container. The value in AOwner is assigned to the 
Owner property, and the cache index is initialized.
</p>
</descr>
<seealso>
<link id="#rtl.system.TObject.Create">TObject.Create</link>
</seealso>
</element>
<element name="TListItems.Create.AOwner">
<short>
TCustomListView control that is the owner of the container.
</short>
</element>

<element name="TListItems.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
Destroy is the overridden destructor for the class instance. It frees each of 
the TListItem instances in the internal storage for the container and removes 
the cache entries for the items. Resource allocated to the internal list are 
freed as well. Destroy calls the inherited destructor prior to exiting from 
the method.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
</seealso>
</element>

<element name="TListItems.Delete">
<short>
Removes the list item specified in <var>AIndex</var> from the container.
</short>
<descr>
<p>
<var>Delete</var> accesses the list item in the internal storage, casts it to 
the TListItem type, and calls its Delete method to free the class instance.
</p>
</descr>
<seealso>
<link id="TListItem.Delete"/>
</seealso>
</element>
<element name="TListItems.Delete.AIndex">
<short>
Ordinal position in the container for the list item deleted in the method.
</short>
</element>

<element name="TListItems.EndUpdate">
<short>
Ends an update process for the container and its list view control.
</short>
<descr>
<p>
<var>EndUpdate</var> completes the update started in BeginUpdate. Endupdate 
calls the corresponding method for the list view control in Owner.
</p>
</descr>
<seealso>
<link id="TListItems.BeginUpdate"/>
<link id="TCustomListView.EndUpdate"/>
</seealso>
</element>

<element name="TListItems.Exchange">
<short>
Exchanges the positions for the specified list items in the container.
</short>
<descr>
<p>
<var>Exchange</var> is a method used to swap the positions for the list items 
specified in the AIndex1 and AIndex2 arguments. No actions are performed in 
the method when AIndex1 and AIndex2 have the same values.
</p>
<p>
An Exception is raised if AIndex1 or AIndex2 contain a value that is not a 
valid ordinal position in the container. (&amp;lt 1 or &amp;gt Count-1).
</p>
<p>
Values in the Selected and ItemFocused properties for the list view control 
are saved prior to swapping the list items. These properties are restored 
prior to exiting from the method. Flags in the list view control are updated 
to include lffItemsMoving when the operation is started. The flag value is 
removed when the operation is completed.
</p>
<p>
Exchange calls the <var>TFPList.Exchange</var> method to change the positions 
for the specified list items in the internal storage for the container. The 
list item in AIndex1 becomes the active cache item after the values have been 
swapped. The widgetset class for the list view control is notified of the 
change when its handle is allocated.
</p>
<p>
Use Move to relocate a list item to a specific ordinal position in the 
container.
</p>
<p>
Use InsertItem to insert a list item at a specific position in the container.
</p>
</descr>
<errors>
Raises an Exception with the message in rsListIndexExceedsBounds if AIndex1 
or AIndex2 contain a value that is not a valid ordinal position in the 
container.
</errors>
<seealso>
<link id="TListItems.Move"/>
<link id="TListItems.InsertItem"/>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.ItemFocused"/>
<link id="TListViewFlag"/>
<link id="TListViewFlags"/>
</seealso>
</element>
<element name="TListItems.Exchange.AIndex1">
<short>Ordinal position for a list item moved in the method.</short>
</element>
<element name="TListItems.Exchange.AIndex2">
<short>Ordinal position for a list item moved in the method.</short>
</element>

<element name="TListItems.Move">
<short>
Moves the list item at the specified position to a new position in the 
container.
</short>
<descr>
<p>
<var>Move</var> is a method used to relocated a list item at a specified 
position to a new position in the container. The original position is 
specified in AFromIndex. The new position is specified in AToIndex.
</p>
<p>
An Exception is raised if AFromIndex or AToIndex contain a value that is not 
a valid ordinal position in the container. (&amp;lt 1 or &amp;gt Count-1).
</p>
<p>
Values in the Selected and ItemFocused properties for the list view control 
are saved prior to moving the list item. These properties are restored prior 
to exiting from the method. Flags in the list view control are updated to 
include lffItemsMoving when the operation is started. The flag value is 
removed when the operation is completed.
</p>
<p>
Move calls the <var>TFPList.Move</var> method to change the positions for the 
specified list item in the internal storage for the container. The list item 
in AToIndex becomes the active cache item after the item has been moved. The 
widgetset class for the list view control is notified of the change when its 
handle is allocated.
</p>
<p>
Use Exchange to swap the positions for two list items in the container.
</p>
<p>
Use InsertItem to insert a list item at a specific position in the container.
</p>
</descr>
<errors>
Raises an Exception with the message in rsListIndexExceedsBounds if 
AFromIndex or AToIndex contain a value that is not a valid ordinal position 
in the container.
</errors>
<seealso>
<link id="TListItems.Exchange"/>
<link id="TListItems.InsertItem"/>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.ItemFocused"/>
<link id="TListViewFlag"/>
<link id="TListViewFlags"/>
</seealso>
</element>
<element name="TListItems.Move.AFromIndex">
<short>
Ordinal position for the list item on entry.
</short>
</element>
<element name="TListItems.Move.AToIndex">
<short>
Ordinal position for the list item after it has been relocated.
</short>
</element>

<element name="TListItems.FindCaption">
<short>
Locates a list item with the specified caption starting at given position in 
the container.
</short>
<descr>
<p>
<var>FindCaption</var> is a <var>TListItem</var> function used to find the 
first list item in the container which matches the specified search criteria. 
The return value is the TListItem instance with a Caption that matches the 
specified Value, or Nil when a match is not found.
</p>
<p>
No actions are performed in the method, and the return value is Nil, when 
there are no list items in the container (Count = 0), or StartIndex is not 
valid.
</p>
<p>
FindCaption visits the TListItem entries in the container to compare Value to 
the Caption in the list item. Use Partial and PartStart to indicate if (and 
how) partial matches are performed. Case is significant in the comparison.
</p>
<p>
Use FindData to locate a list item which contains the specified binary value 
in its Data property.
</p>
</descr>
<seealso>
<link id="TListItem"/>
</seealso>
</element>
<element name="TListItems.FindCaption.StartIndex">
<short>
Position in the container where the search is started.
</short>
</element>
<element name="TListItems.FindCaption.Value">
<short>
Value to locate in the captions for the list items. Case is significant.
</short>
</element>
<element name="TListItems.FindCaption.Partial">
<short>
<b>True</b> when a partial match in the caption value is allowed. 
<b>False</b> when an exact match is required in the caption value.
</short>
</element>
<element name="TListItems.FindCaption.Inclusive">
<short>
<b>True</b> if StartIndex is included in the search. <b>False</b> if the 
search starts at the position in the container.
</short>
</element>
<element name="TListItems.FindCaption.Wrap">
<short>
<b>True</b> if the search can wrap to the first list item in the container 
when a match has not been found prior to the last item in the container.
</short>
</element>
<element name="TListItems.FindCaption.PartStart">
<short>
<b>True</b> if a partial match must start at the beginning of the caption 
value.
</short>
</element>

<element name="TListItems.FindData">
<short>
Locates the list item which has the specified values in its Data property.
</short>
<descr>
<p>
FindData is an overloaded method used to find the first TListItem instance 
with a Data property that matches the specified value.
</p>
<p>
The overloaded variants allow either a pointer to the value to locate in 
Data, or use of a starting position and wrapping in the search criteria.
</p>
<p>
The variant with a Pointer argument checks the cached list item for a 
matching value. When found, no other actions are performed in the method.
</p>
<p>
Otherwise, each of the TListItem instances in Item is visited to compare the 
pointer value to the Data property in the list item. When a match is found, 
the list item becomes the active cache entry for the container.
</p>
<p>
The variant with search criteria works differently. It does not check the 
active cache entry before starting its search. Use StartIndex to specify the 
initial list item in the container checked as a match for the pointer in 
Value. Use Inclusive to specify whether StartIndex is included in the search, 
or the next list item is used. Set Wrap to <b>True</b> to allow the search to 
continue at the first item in the container when a match is not found. In 
this variant, the active cache entry is <b>not</b> updated when a match is 
found.
</p>
<p>
The return value is <b>Nil</b> if a list item is not found (in the cache or 
in Item) containing the specified value.
</p>
<p>
Use FindCaption to locate a list item with a specified value in its Caption.
</p>
</descr>
<seealso>
<link id="TListItems.FindCaption"/>
<link id="TListItem.Data"/>
</seealso>
</element>
<element name="TListItems.FindData.Result">
<short>
TListItem instance with the specified data, or <b>Nil</b> when not found.
</short>
</element>
<element name="TListItems.FindData.AData">
<short>
Pointer with the values to locate in the Data property for the list items.
</short>
</element>
<element name="TListItems.FindData.StartIndex">
<short>
Ordinal position in the container where the search is started.
</short>
</element>
<element name="TListItems.FindData.Value">
<short>
Pointer with the values to locate in the Data for the list items.
</short>
</element>
<element name="TListItems.FindData.Inclusive">
<short>
<b>True</b> if the list item at StartIndex is included in the search. 
<b>False</b> if the search starts at the next position in the container.
</short>
</element>
<element name="TListItems.FindData.Wrap">
<short>
<b>True</b> if the search can wrap to the start of the container if a match 
is not found prior to the end of the container.
</short>
</element>

<element name="TListItems.GetEnumerator">
<short>
Gets an enumerator for the list items in the container.
</short>
<descr>
<p>
<var>GetEnumerator</var> is a <var>TListItemsEnumerator</var> function which 
returns an enumerator for the TListItem instances in the indexed Item 
property. It creates the TListItemsEnumerator instance in the return value 
using the current class instance as the container with the enumerated values.
</p>
<remark>
The enumerator returned from the method is not pre-positioned on the first 
list item. Call the MoveNext method in the enumerator prior to accessing its 
Current property.
</remark>
</descr>
<seealso>
<link id="TListItems.Item"/>
<link id="TListItem"/>
<link id="TListItemsEnumerator.MoveNext"/>
<link id="TListItemsEnumerator.Current"/>
</seealso>
</element>
<element name="TListItems.GetEnumerator.Result">
<short>
TListItemsEnumerator instance used to access the list item values in the 
container.
</short>
</element>

<element name="TListItems.IndexOf">
<short>
Gets the ordinal position in the container for the specified list item.
</short>
<descr>
<p>
If the container has cached items, the cache index for the list item in AItem 
is used as the return value. If a cached entry is not already assigned, the 
IndexOf method in the internal storage is called locate the specified list 
item.
</p>
<p>
The return value is -1 if the specified list item is not found in the 
container.
</p>
<p>
The list item and its position in the list are stored in the internal cache 
for subsequent use in the container.
</p>
</descr>
<seealso/>
</element>
<element name="TListItems.IndexOf.Result">
<short>
Ordinal position in the container for the specified list item, or -1 when not 
found.
</short>
</element>
<element name="TListItems.IndexOf.AItem">
<short>
TListItem instance to locate in the container.
</short>
</element>

<element name="TListItems.Insert">
<short>
Creates and inserts a list item at the specified ordinal position in the 
container.
</short>
<descr>
<p>
<var>Insert</var> is a <var>TListItem</var> function used to insert a new 
TListItem instance into the container at the ordinal position specified in 
<var>AIndex</var>.
</p>
<p>
If the container has an assigned owner (TCustomListView), its CreateListItem 
method is called to create the new list item. Otherwise, the TListItem is 
created with the container class instance as the owner of the list item.
</p>
<p>
Inserts calls the InsertItem method to store the list item at the position 
specified in AIndex in the internal stage for the container.
</p>
</descr>
<seealso/>
</element>
<element name="TListItems.Insert.Result">
<short>
TListItem instance stored in the method.
</short>
</element>
<element name="TListItems.Insert.AIndex">
<short>
Ordinal position in the container where the list item is stored.
</short>
</element>

<element name="TListItems.InsertItem">
<short>
Inserts the specified list item at the specified position in the internal 
storage for the container.
</short>
<descr>
<p>
<var>InsertItem</var> is a method used to insert the list item in AItem at the 
ordinal position in AIndex in the internal storage for the container. Values 
in AItem and AIndex are also stored in the cached entries for the container.
</p>
<p>
If an owner (TCustomListView) has been assigned for the container, and its 
handle is valid, the widgetset class is updated with the content for the 
inserted list item. This includes the text, images, and checked state for the 
list item.
</p>
<p>
The ItemInserted method in the owner is also called to notify the control of 
the inserted list item. This executes an overridden Insert method (when 
implemented) and signals the OnInsert event handler for the control.
</p>
</descr>
<seealso/>
</element>
<element name="TListItems.InsertItem.AItem">
<short>
List item inserted into the internal storage for the container.
</short>
</element>
<element name="TListItems.InsertItem.AIndex">
<short>
Ordinal position in the internal storage where the list item is inserted.
</short>
</element>

<element name="TListItems.Flags">
<short>Contains the flag values currently assigned to the list.</short>
<descr>
<p>
<var>Flags</var> is a read-only <var>TListItemsFlags</var> property with the 
flag values currently assigned to the list. Values in Flags are added and 
removed as needed in methods for the class instance.
</p>
</descr>
<seealso>
<link id="TListItemsFlags"/>
</seealso>
</element>

<element name="TListItems.Count">
<short>
The number of TListItem instances stored in the container.
</short>
<descr>
<p>
<var>Count</var> is an <var>Integer</var> property with the number of list 
items stored in the container. Its value is read from the Count property in 
the internal list used to store the list items. Setting a new value for the 
property is ignored; the property value is maintained as list items are added 
to or removed from the internal storage.
</p>
<p>
Count determines the upper limit for the positions in the indexed Item 
property. Index values must be in the range 0..Count-1 when Count has a 
non-zero value.
</p>
</descr>
<seealso>
<link id="TListItems.Item"/>
<link id="TListItems.AddItem"/>
<link id="TListItems.InsertItem"/>
<link id="TListItems.Delete"/>
</seealso>
</element>

<element name="TListItems.Item">
<short>
Provides indexed access to the TListItem instance in the container by their 
ordinal position.
</short>
<descr>
<p>
Item is an indexed TListItem property which allows access to the list items 
in the container by their ordinal position. AIndex specified the TListItem 
instance returned as the property value, and must be in the range 0..Count-1.
</p>
<p>
Item is also the default property for the class instance and the target for 
an enumerator.
</p>
<p>
Reading a property value causes the list item cache for the container to be 
checked. If the cached item has the index value in AIndex, it is used as the 
property value. Otherwise, the TListItem instance at AIndex is used. The 
cache is updated with the new list item and its index value.
</p>
<p>
Writing a new property value causes AIndex to validated. No actions are 
performed during property assignment if AIndex exceeds Count-1. In addition, 
no actions are needed when the new property value is the same TListItem 
instance as the existing property value.
</p>
<p>
Otherwise, the new list item is stored at the position in AIndex and the 
cache is updated with the list item and its index value. The widgetset class 
is notified of the changed values when its handle has been allocated. This 
includes changes to Caption, ImageIndex, SubItemImages, and Checked 
properties, as well as internal state flags.
</p>
</descr>
<seealso/>
</element>
<element name="TListItems.Item.AIndex">
<short>
Ordinal position for the requested list item.
</short>
</element>

<element name="TListItems.Owner">
<short>
List view control that is the owner of the container and its list items.
</short>
<descr>
<p>
<var>Owner</var> is a read-only <var>TCustomListView</var> property with the 
list view control that is the owner of the class instance and the list items 
stored in the container. Owner allows both the container and the list items 
in the container to access properties and methods in the list view control 
from within their methods.
</p>
<p>
The value for property is assigned in the Create constructor using the 
argument passed to the method.
</p>
</descr>
<seealso>
<link id="TCustomListView"/>
</seealso>
</element>

<element name="TOwnerDataListItems">
<short>
Container for the items in a list view control when owner data (virtual) mode 
is enabled.
</short>
<descr>
<p>
Only the most recent list item is actually populated in the list view control 
when owner data is enabled.
</p>
</descr>
<seealso/>
</element>

<element name="TOwnerDataListItems.fItemsCount"/>

<element name="TOwnerDataListItems.GetCount">
<short>Gets the value for the Count property.</short>
<descr/>
<seealso/>
</element>
<element name="TOwnerDataListItems.GetCount.Result">
<short>Value for the Count property.</short>
</element>

<element name="TOwnerDataListItems.SetCount">
<short>Sets the value for the Count property.</short>
<descr/>
<seealso/>
</element>
<element name="TOwnerDataListItems.SetCount.ACount">
<short>New value for the Count property.</short>
</element>

<element name="TOwnerDataListItems.GetItem">
<short>Gets the value for the indexed Item property.</short>
<descr/>
<seealso/>
</element>
<element name="TOwnerDataListItems.GetItem.Result">
<short>Value for the property.</short>
</element>
<element name="TOwnerDataListItems.GetItem.AIndex">
<short>Ordinal position for the indexed property value.</short>
</element>

<element name="TOwnerDataListItems.Clear">
<short>
Frees and <b>Nil</b>s the list items stored in the container.
</short>
<descr>
<p>
<var>Clear</var> is an overridden method in <var>TOwnerDataListItems</var>. It 
reimplements the method introduced in the ancestor class (TListItems) to free 
and <b>Nil</b> each of the TListItem instances stored in the internal storage 
for the container. Prior to exit, the Count property is set to 0.
</p>
<p>
Clear does <b>not</b> call the inherited method.
</p>
</descr>
<seealso>
<link id="TListItems.Clear"/>
<link id="TListItems.Count"/>
<link id="TListItem"/>
</seealso>
</element>

<element name="TWidth">
<short>
Range type with values allowed in width propertied in TListColumn.
</short>
<descr>
<p>
<var>TWidth</var> is an <var>Integer</var> range type with values in the 
range <b>0..MaxInt</b>. TWidth is the type used to implement the MinWidth, 
MaxWidth, Width and WidthType properties in TListColumn.
</p>
</descr>
<seealso>
<link id="TListColumn"/>
</seealso>
</element>

<element name="TSortIndicator">
<short>
Represents the sort indicators available for a column in a list view control.
</short>
<descr>
<p>
<var>TSortIndicator</var> is an enumerated type with values that represent 
the sort indicators available in the <var>TListColumn</var> class. 
TSortIndicator is the type used to implement the <var>SortIndicator</var> 
property in <var>TListColumn</var>.
</p>
</descr>
<seealso>
<link id="TListColumn.SortIndicator"/>
</seealso>
</element>
<element name="TSortIndicator.siNone">
<short>No sort indicator is used for the list column.</short>
</element>
<element name="TSortIndicator.siAscending">
<short>Uses an ascending sort indicator for the list column.</short>
</element>
<element name="TSortIndicator.siDescending">
<short>Uses a descending sort indicator for the list column.</short>
</element>

<element name="TListColumn">
<short>
Represents an individual column in a multi-column list control.
</short>
<descr>
<p>
<var>TListColumn</var> is a <var>TCollectionItem</var> descendant which 
represents an individual column in a multi-column list control.
</p>
<p>
TListColumn is the type used for items added to the <var>TListColumns</var> 
collection, and maintained in the <var>TCustomListView.Columns</var> property.
</p>
</descr>
<seealso>
<link id="TListColumns"/>
<link id="TCustomListView.Columns"/>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
</seealso>
</element>

<element name="TListColumn.FAlignment"/>
<element name="TListColumn.FAutoSize"/>
<element name="TListColumn.FCaption"/>
<element name="TListColumn.FMinWidth"/>
<element name="TListColumn.FMaxWidth"/>
<element name="TListColumn.FVisible"/>
<element name="TListColumn.FWidth"/>
<element name="TListColumn.FImageIndex"/>
<element name="TListColumn.FTag"/>
<element name="TListColumn.FSortIndicator"/>

<!-- private -->
<element name="TListColumn.GetWidth"/>
<element name="TListColumn.GetWidth.Result"/>
<element name="TListColumn.WSCreateColumn"/>
<element name="TListColumn.WSDestroyColumn"/>
<element name="TListColumn.WSUpdateAllowed"/>
<element name="TListColumn.WSReadAllowed"/>
<element name="TListColumn.SetVisible"/>
<element name="TListColumn.SetVisible.AValue"/>
<element name="TListColumn.SetAutoSize"/>
<element name="TListColumn.SetAutoSize.AValue"/>
<element name="TListColumn.SetMinWidth"/>
<element name="TListColumn.SetMinWidth.AValue"/>
<element name="TListColumn.SetMaxWidth"/>
<element name="TListColumn.SetMaxWidth.AValue"/>
<element name="TListColumn.SetWidth"/>
<element name="TListColumn.SetWidth.AValue"/>
<element name="TListColumn.SetCaption"/>
<element name="TListColumn.SetCaption.AValue"/>
<element name="TListColumn.SetAlignment"/>
<element name="TListColumn.SetAlignment.AValue"/>
<element name="TListColumn.SetImageIndex"/>
<element name="TListColumn.SetImageIndex.AValue"/>
<element name="TListColumn.SetSortIndicator"/>
<element name="TListColumn.SetSortIndicator.AValue"/>

<element name="TListColumn.SetIndex">
<short>Sets the value for the Index property.</short>
<descr>
<p>
Calls the inherited method to move the collection item to the position 
indicated in the property value. Calls the <var>ColumnMove</var> method in 
the widgetset class to reorder the column in the control.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
</seealso>
</element>
<element name="TListColumn.SetIndex.AValue">
<short>New value for the Index property.</short>
</element>

<element name="TListColumn.GetDisplayName">
<short>Gets the value for the DisplayName property.</short>
<descr>
<p>
<var>GetDisplayName</var> returns the <var>Caption</var> for the control, and 
when blank, calls the inherited method to the property value.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
</seealso>
</element>
<element name="TListColumn.GetDisplayName.Result">
<short>Value for the DisplayName property.</short>
</element>

<element name="TListColumn.GetStoredWidth">
<short>
Gets the value for Width as included in LCL component streaming.
</short>
<descr/>
<seealso/>
</element>
<element name="TListColumn.GetStoredWidth.Result">
<short>Returns the value in the Width property.</short>
</element>

<element name="TListColumn.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for TListColumn, and sets the default 
values for properties, including:
</p>
<ul>
<li>Alignment</li>
<li>Caption</li>
<li>Width</li>
<li>Visible</li>
<li>MinWidth</li>
<li>MaxWidth</li>
<li>AutoSize</li>
<li>Tag</li>
<li>ImageIndex</li>
</ul>
<p>
Create calls the inherited <var>Create</var> method to instantiate the class 
instance and assign the value in ACollection as the owner for the class 
instance.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollectionItem.Create">TCollectionItem.Create</link>
</seealso>
</element>
<element name="TListColumn.Create.ACollection">
<short>
Collection which owns the list column instance.
</short>
</element>

<element name="TListColumn.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the destructor for <var>TListColumn</var>. When the 
collection allows updates, the update is suppressed for the column instance 
that is being destroyed. Calls the inherited method to clear the owner for 
the collection item and destroy the class instance. The columnDelete method 
in the widgetset class is called to remove the column.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollectionItem.Destroy">TCollectionItem.Destroy</link>
</seealso>
</element>

<element name="TListColumn.Assign">
<short>
Copies properties from the specified persistent object to the current class 
instance.
</short>
<descr>
<p>
<var>Assign</var> is an overridden method used to implement object 
persistence for the <var>TListColumn</var> type. It copies property values 
from the persistent object in <var>ASource</var> into the current class 
instance. When ASource is derived from TListColumn, the following properties 
are copied:
</p>
<ul>
<li>Alignment</li>
<li>AutoSize</li>
<li>Caption</li>
<li>MaxWidth</li>
<li>MinWidth</li>
<li>Visible</li>
<li>Width</li>
</ul>
<p>
The Changed method is called to signal a change in the values for the 
collection item.
</p>
<p>
If ASource is not derived from TListColumn, the inherited method is called 
using ASource as an argument. An EConvertError exception is raised if ASource 
has not been assigned (contains <b>Nil</b>).
</p>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
</seealso>
</element>
<element name="TListColumn.Assign.ASource">
<short>
Persistent object with values copied in the method.
</short>
</element>

<element name="TListColumn.WidthType">
<short>Not used in LCL.</short>
<descr>
<p>
WidthType is a read-only TWidth property. Provided for VCL code compatibility.
</p>
</descr>
<seealso/>
</element>

<element name="TListColumn.Alignment">
<short>
Sets the horizontal alignment for the text displayed in the column.
</short>
<descr>
<p>
<var>Alignment</var> is a <var>TAlignment</var> property with the horizontal 
alignment for the text displayed in the column. It affects both the column 
Caption and any list item or SubItem values in the column.
</p>
<p>
Use taRightJustify to align text values to the right edge for the column. Use 
taCenter to center text values in the width for the column.
</p>
<p>
The default value for the property is taLeftJustify. Changing the value for 
the property calls the Changed method to update the column in its Collection. 
The widgetset class for the list view control is notified of the new 
alignment value when its handle is valid.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TAlignment">TAlignment</link>
<link id="#rtl.classes.TCollectionItem.Collection">TCollectionItem.Collection</link>
</seealso>
</element>

<element name="TListColumn.AutoSize">
<short>
Resizes the column to the width needed for the list view Items or SubItems 
displayed in the column.
</short>
<descr>
<p>
<var>AutoSize</var> is a <var>Boolean</var> property which indicates if the 
column is automatically resized to fit the longest text value displayed in 
the column. The default value for the property is <b>False</b>.
</p>
<p>
Set AutoSize to <b>True</b> to enable auto-sizing for the column. Values in 
the Width, MinWidth, and MaxWidth properties are ignored when AutoSize is 
enabled.
</p>
<p>
Changing the value in AutoSize causes the Changed method to be called to 
updated the column in its Collection. The widgetset class for the list view 
control is notified of the changed value when its handle has been allocated.
</p>
<p>
Please note that the length of the Caption is not taken into consideration 
when calculating the auto-sized width. This can result in the Caption being 
truncated when the calculated width is too small.
</p>
<p>
Use the TCustomListView.AutoWidthLastColumn property to resize the last 
column to fill the unused area on the list view control. You cannot use both 
for the last column in the collection. The last property enabled takes 
precedence.
</p>
</descr>
<seealso>
<link id="TCustomListView.AutoWidthLastColumn"/>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
</seealso>
</element>

<element name="TListColumn.Caption">
<short>Caption text (heading) for the column.</short>
<descr>
<p>
<var>Caption</var> is a <var>TTranslateString</var> property with the caption 
text or heading displayed for the column. When the list view control uses 
vsReport in its ViewStyle property and has enabled ShowColumnHeaders, Caption 
is displayed as the column header on the control.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update the list column in its Collection. The widgetset class is notified of 
the changed value when its handle has been allocated. This includes 
forwarding the current value in AutoSize if it has been enabled.
</p>
<p>
Use of the TTranslateString type for the property allows the value to be 
translated using the i18n facilities in the Lazarus IDE.
</p>
</descr>
<seealso>
<link id="TCustomListView.ShowColumnHeaders"/>
<link id="TCustomListView.Columns"/>
<link id="#lcl.lcltype.TTranslateString">TTranslateString</link>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
</seealso>
</element>

<element name="TListColumn.ImageIndex">
<short>
Ordinal position for the image displayed for the column.
</short>
<descr>
<p>
<var>ImageIndex</var> is a <var>TImageIndex</var> property with the ordinal 
position for the image displayed for the column. It refers to a position in 
the SmallImages or LargeImages for the list view control. The default value 
for the property is -1, and indicates that an explicit value has not been 
assigned for the property or that images are not available.
</p>
<p>
Changing the property values causes the Changed method to be called to update 
the list column in its Collection. The widgetset class for the list view 
control is notified of the new property value when its handle has been 
allocated.
</p>
</descr>
<seealso>
<link id="TCustomListView.ViewStyle"/>
<link id="TCustomListView.SmallImages"/>
<link id="TCustomListView.LargeImages"/>
<link id="TCustomListView.ShowColumnHeaders"/>
<link id="TCustomListView.Columns"/>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
</seealso>
</element>

<element name="TListColumn.MaxWidth">
<short>Maximum width for the column in pixels.</short>
<descr>
<p>
MaxWidth is used to constrain the width for the column to a maximum number of 
pixels. It is used, along with MinWidth, to range limit the value in Width at 
design-time or when resized with a mouse.
</p>
<p>
MinWidth, MaxWidth, and Width are not used when AutoSize is enabled; the 
values are ignored and the column width is determined by the content in the 
column.
</p>
</descr>
<seealso>
<link id="TListColumn.Width"/>
<link id="TListColumn.MinWidth"/>
<link id="TListColumn.AutoSize"/>
</seealso>
</element>

<element name="TListColumn.MinWidth">
<short>Minimum width for the column in pixels.</short>
<descr>
<p>
MixWidth is used to constrain the width for the column to a minimum number of 
pixels. It is used, along with MaxWidth, to range limit the value in Width at 
design-time or when resized with a mouse.
</p>
<p>
MinWidth, MaxWidth, and Width are not used when AutoSize is enabled; the 
values are ignored and the column width is determined by the content in the 
column.
</p>
</descr>
<seealso>
<link id="TListColumn.Width"/>
<link id="TListColumn.MaxWidth"/>
<link id="TListColumn.AutoSize"/>
</seealso>
</element>

<element name="TListColumn.Tag">
<short>Arbitrary Integer value with information about the column.</short>
<descr>
<p>
Tag has no predefined meaning or usage. It is available for any 
application-specific purpose. The Clipper cargo cult lives on.
</p>
</descr>
<seealso/>
</element>

<element name="TListColumn.Visible">
<short>
Indicates whether the column is visible on its list view control.
</short>
<descr>
<p>
<var>Visible</var> is a <var>Boolean</var> property which indicates if the 
column is visible on the list view control where it is defined. The default 
value for the property is <b>True</b>.
</p>
<p>
Changing the property value causes the item to updated in its collection, and 
any observers are notified of the change. The widgetset class instance is 
also notified of the change when its handle has been allocated.
</p>
</descr>
<seealso>
<link id="TCustomListView.Columns"/>
</seealso>
</element>

<element name="TListColumn.Width">
<short>Width for the column on a list view control.</short>
<descr>
<p>
<var>Width</var> is an <var>Integer</var> property with the width for the 
column on a list view control. Width is used along with MaxWidth and MinWidth 
to control the amount of space needed or available for the column.
</p>
<p>
The property value is read from and written to the widgetset class instance 
when its handle is allocated.
</p>
<p>
The default value for the property is 50 (pixels). If the property is 
changed, the value is normalized to the range indicated by MinWidth and 
MaxWidth (when assigned). Default values are not assigned for the MinWidth 
and MaxWidth properties. The collection which owns the column instance is 
updated, and the list view and any observers are notified when the column is 
modified.
</p>
<p>
Set AutoSize to <b>True</b> to automatically resize the column to its content 
and the available space on the associated list view control. Values in 
MinWidth, MaxWidth, and Width are ignored when AutoSize is enabled.
</p>
</descr>
<seealso>
<link id="TListColumn.AutoSize"/>
<link id="TListColumn.MaxWidth"/>
<link id="TListColumn.MinWidth"/>
</seealso>
</element>

<element name="TListColumn.SortIndicator">
<short>
Specifies the sort indicator displayed for the column.
</short>
<descr>
<p>
SortIndicator is a TSortIndicator property which indicates the sort direction 
or order for the content displayed in the column. The default value for the 
property is siNone, and means a sort indicator is not displayed for the 
column.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update the column in its Collection. The widgetset class for the list view 
control is notified of the changed value when its handle has been allocated.
</p>
<p>
SortIndicator is used in conjunction with the SortColumn, SortType, AutoSort, 
and AutoSortIndicator properties in TCustomListView. The visual sort 
indicator is displayed in the column heading when the list view uses vsReport 
in its ViewStyle property.
</p>
<p>
Assigning a value other than siNone to the property causes the image in 
ImageIndex to be removed from the column heading. Nota bene: This is the 
observed behavior for the Windows platform. Other platforms may vary.
</p>
</descr>
<seealso>
<link id="TSortIndicator"/>
<link id="TCustomListView.SortColumn"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.AutoSort"/>
<link id="TCustomListView.AutoSortIndicator"/>
</seealso>
</element>

<element name="TListColumns">
<short>
A collection for TListColumn instances defined for a multi-column list view 
control.
</short>
<descr>
<p>
<var>TListColumns</var> is a <var>TCollection</var> descendant which 
implements a container for column definitions on a list view control. It 
provides properties and methods used to create, access, and maintain the 
TListColumn instances in its Items property.
</p>
<p>
Use methods like Add, Insert, Clear, Delete, and Move to maintain the column 
definitions in the collection.
</p>
<p>
TListColumns is the type used to implement the Columns property in 
TCustomListView.
</p>
</descr>
<seealso>
<link id="TCustomListView.Columns"/>
</seealso>
</element>

<element name="TListColumns.FOwner"/>
<element name="TListColumns.FItemNeedsUpdate"/>
<element name="TListColumns.FNeedsUpdate"/>

<!-- private -->
<element name="TListColumns.GetItem"/>
<element name="TListColumns.GetItem.Result"/>
<element name="TListColumns.GetItem.AIndex"/>
<element name="TListColumns.WSCreateColumns"/>
<element name="TListColumns.SetItem"/>
<element name="TListColumns.SetItem.AIndex"/>
<element name="TListColumns.SetItem.AValue"/>
<element name="TListColumns.DoFinalizeWnd"/>

<element name="TListColumns.GetOwner">
<short>Gets the owner of the persistent object.</short>
<descr/>
<seealso>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>
<element name="TListColumns.GetOwner.Result">
<short>TPersistent object instance that owns the collection.</short>
</element>

<element name="TListColumns.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for the class instance, and reimplements 
the inherited method. TheOwner contains the TCustomListView control that owns 
the collection, instead of the item class used in the ancestor. TheOwner is 
assigned as the value for the Owner property.
</p>
<p>
Create calls the inherited constructor using TListColumn as the item class 
type for the collection.
</p>
</descr>
<seealso>
<link id="TListColumns.Owner"/>
<link id="TListColumn"/>
<link id="#rtl.classes.TCollection.Create">TCollection.Create</link>
</seealso>
</element>
<element name="TListColumns.Create.TheOwner">
<short>
List view control that owns the column collection and its collection items.
</short>
</element>

<element name="TListColumns.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. It 
ensures that BeginUpdate and EndUpdate are used to enclose actions performed 
in the method. Destroy calls the inherited destructor to clear and free the 
internal storage for the collection.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollection.Destroy">TCollection.Destroy</link>
<link id="#rtl.classes.TCollection.BeginUpdate">TCollection.BeginUpdate</link>
<link id="#rtl.classes.TCollection.EndUpdate">TCollection.EndUpdate</link>
</seealso>
</element>

<element name="TListColumns.Update">
<short>
Checks whether the collection update is actually need and calls the inherited 
method.
</short>
<descr>
<p>
<var>Update</var> is an overridden method in <var>TListColumns</var>. It 
checks whether the update is actually needed for the collection when the 
value in Item is <b>Nil</b>. If the collection update is required, Item is 
set to the internal collection item that has been cached for the action. This 
occurs when the collection calls its Changed method with its AllItems 
argument set to <b>True</b>.
</p>
<p>
Update calls the inherited method using the value in Item as an argument.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollection">TCollection</link>
</seealso>
</element>
<element name="TListColumns.Update.Item">
<short>
Collection item (TListColumn) updated in the method, or <b>Nil</b>.
</short>
</element>

<element name="TListColumns.Add">
<short>
Creates and returns a new TListColumn instance for the collection.
</short>
<descr>
<p>
<var>Add</var> is a <var>TListColumn</var> function used to create and return 
a new <var>TListColumn</var> instance. It calls the inherited method to 
create a new instance of the ItemClass for the collection, and casts it to 
the TListColumn type used in the return value.
</p>
<p>
At design-time, the form designer surface for Owner (TCustomListView) is 
notified of the change when Owner has been assigned.
</p>
</descr>
<seealso>
<link id="TListColumns.Owner"/>
<link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
<link id="#rtl.classes.TCollection.ItemClass">TCollection.ItemClass</link>
</seealso>
</element>
<element name="TListColumns.Add.Result">
<short>
TListColumn instance created in the method.
</short>
</element>

<element name="TListColumns.Owner">
<short>Owner of the collection instance.</short>
<descr>
<p>
<var>Owner</var> is a read-only <var>TCustomListView</var> property which 
contains the control that is the owner of the column collection. Its value is 
set to the argument passed to the Create constructor.
</p>
</descr>
<seealso>
<link id="TCustomListView"/>
</seealso>
</element>

<element name="TListColumns.Items">
<short>Provides indexed access to the items in the column collection.</short>
<descr>
<p>
Items is a TListColumn property used to provide indexed access to TListColumn 
instances in the collection by their ordinal position. The read and write 
access specifiers for the property are reimplemented to use the TListColumn 
type used as the ItemClass in the collection.
</p>
<p>
<var>Items</var> is the default property for the collection, and the target 
for an enumerator created for the collection.
</p>
<p>
Use Add to create and store a new TListColumn instance in the collection.
</p>
<p>
Free a TListColumn instance to remove it from the values in Items.
</p>
</descr>
<seealso>
<link id="TListColumns.Add"/>
<link id="TListColumn.Destroy"/>
<link id="#rtl.classes.TCollection.Items">TCollection.Items</link>
<link id="#rtl.classes.TCollectionEnumerator">TCollectionEnumerator</link>
</seealso>
</element>
<element name="TListColumns.Items.AIndex">
<short>Ordinal position in the collection for the property value.</short>
</element>

<element name="TListColumns.Assign">
<short>
Adds column definitions in Source to the current class instance.
</short>
<descr>
<p>
<var>Assign</var> checks that source is of correct type, then adds new 
columns and copies items from source into them; otherwise calls inherited 
<var>Assign</var> which probably raises an exception.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollection.Assign">TCollection.Assign</link>
</seealso>
</element>
<element name="TListColumns.Assign.Source">
<short>
Persistent object with the values stored in the current class instance.
</short>
</element>

<element name="TItemChange">
<short>
<var>TItemChange</var> - enumerated type for kind of change: in text, in 
image, or in state.
</short>
<descr>
<p>
Values in the enumeration are passed as an argument to TLVChangeEvent event 
handler routines.
</p>
</descr>
<seealso>
<link id="TLVChangeEvent"/>
</seealso>
</element>
<element name="TItemChange.ctText">
<short>
The text for the item was changed.
</short>
</element>
<element name="TItemChange.ctImage">
<short>
The image for the item was changed.
</short>
</element>
<element name="TItemChange.ctState">
<short>
The state for the item was changed.
</short>
</element>

<element name="TViewStyle">
<short>
Represents the view styles available for the items in a list view control.
</short>
<descr>
<p>
<var>TViewStyle</var> is an enumerated type with values representing the view 
styles available for the items in a List View control. TViewStyle is the type 
used for the <var>ViewStyle</var> property in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.ViewStyle"/>
<link id="TCustomListView.Columns"/>
<link id="TCustomListView.Column"/>
<link id="TCustomListView.Items"/>
<link id="TListItem.Caption"/>
<link id="TListItem.SubItems"/>
</seealso>
</element>
<element name="TViewStyle.vsIcon">
<short>
Displays a large icon and the caption for each list view item. The icon is 
centered above the caption text. List items are displayed from left to right, 
and wrap to a new row when space is not available at the right edge of the 
control.
</short>
</element>
<element name="TViewStyle.vsSmallIcon">
<short>
Displays a small icon and caption text for each list view item. Caption text is 
aligned to the right-hand side of the icon. List items are displayed from left 
to right, and wrap to a new row when space is not available at the right edge 
of the control.
</short>
</element>
<element name="TViewStyle.vsList">
<short>
Displays a small icon with caption text to its right-hand side. The list items 
are arranged in columns filled from top to bottom, and then left to right.
</short>
</element>
<element name="TViewStyle.vsReport">
<short>
Displays each list item as a series of columns with a small icon on the 
left-hand side of the row. The Caption text for the list item is displayed in 
the first column, with the text for subsequent columns coming from the Caption 
property in the SubItems in the list item. Each column has a header at the top 
of the list view control. List items are displayed from top to bottom on the 
control.
</short>
</element>

<element name="TItemFind">
<short>
Represents a search mechanism used to locate the data for a list view item.
</short>
<descr>
<p>
<var>TItemFind</var> is the type passed as an argument to 
<var>TLVDataFindEvent</var> and used to implement the <var>OnDataFind</var> 
event handler in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnDataFind"/>
<link id="TLVDataFindEvent"/>
</seealso>
</element>
<element name="TItemFind.ifData">
<short>
Uses the Pointer to a data structure with the search values.
</short>
</element>
<element name="TItemFind.ifPartialString">
<short>
Uses a partial string match to locate a list item.
</short>
</element>
<element name="TItemFind.ifExactString">
<short>
Uses an exact string match to locate a list item.
</short>
</element>
<element name="TItemFind.ifNearest">
<short>
Locates the list item that is the nearest match to a value in a specified 
search direction.
</short>
</element>

<element name="TSearchDirection">
<short>
Represents a search direction used to locate the list view item that is the 
nearest match.
</short>
<descr>
<p>
A value from TSearchDirection is passed as an argument to the GetNearestItem 
method and the OnDataFind event handler in TCustomListView.
</p>
</descr>
<seealso>
<link id="TCustomListView.GetNearestItem"/>
<link id="TCustomListView.OnDataFind"/>
<link id="TCustomListView.DoOwnerDataFind"/>
</seealso>
</element>
<element name="TSearchDirection.sdLeft">
<short>Searches to the left of the specified list view item.</short>
</element>
<element name="TSearchDirection.sdRight">
<short>Searches to the right of the specified list view item.</short>
</element>
<element name="TSearchDirection.sdAbove">
<short>Searches above the specified list view item.</short>
</element>
<element name="TSearchDirection.sdBelow">
<short>Searches below the specified list view item.</short>
</element>
<element name="TSearchDirection.sdAll">
<short>
Searches in all directions for the list view item that is the nearest match.
</short>
</element>

<element name="TLVChangeEvent">
<short>
Event handler signalled when a property value for a list view item is changed.
</short>
<descr>
<p>
<var>TLVChangeEvent</var> is an object procedure which specifies an event 
handler signalled when a property value for a list view item is changed. 
Arguments passed to the method identify the list view control, the list view 
item, and the specific property for the event notification.
</p>
<p>
TLVChangeEvent is the type used for the <var>OnChange</var> property in 
<var>TCustomListView</var>.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TItemChange"/>
<link id="TCustomListView.OnChange"/>
</seealso>
</element>
<element name="TLVChangeEvent.Sender">
<short>Object instance (TCustomListView) for the notification.</short>
</element>
<element name="TLVChangeEvent.Item">
<short>List item for the notification.</short>
</element>
<element name="TLVChangeEvent.Change">
<short>Indicates the property value that was changed in Item.</short>
</element>

<element name="TLVChangingEvent">
<short>
Defines an event handler signalled when a widgetset class is updating an item 
on a list view control.
</short>
<descr>
<p>
<var>TLVChangingEvent</var> is an object procedure used to define the event 
handler signalled when a list item on a TListView is being updated by the 
widgetset class instance. It is the type used to implement the OnChanging 
property in TCustomListView, and allows the pending change to be accepted or 
rejected on an item-by-item basis.
</p>
<p>
The <var>Sender</var> argument contains the object for the event notification, 
It must be cast to TCustomListView to access properties and methods specific to 
the list view control.
</p>
<p>
<var>Item</var> contains the TListItem instance on the list view control which 
is being updated, and the values for the modified list item.
</p>
<p>
<var>Change</var> indicates which value in Item is being modified: the caption 
text, the image for the item, or the item drawing state. See TItemChange for 
the values used in the argument, and their meanings.
</p>
<p>
<var>AllowChange</var> is a variable Boolean argument which allows the handler 
to indicate whether the change is accepted or rejected. Set AllowChange to 
<b>False</b> to reject the modified value in Item.
</p>
<p>
See <link id="TCustomListView.OnChanging">TCustomListView.OnChanging</link> 
for more information about the event notification for the list view control.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TItemChange"/>
<link id="TListItem"/>
<link id="TCustomListView.OnChanging"/>
<link id="TCustomListView.Items"/>
</seealso>
</element>
<element name="TLVChangingEvent.Sender">
<short>
Object (TCustomListView control) for the event notification.
</short>
</element>
<element name="TLVChangingEvent.Item">
<short>
List item with the pending change,
</short>
</element>
<element name="TLVChangingEvent.Change">
<short>
Identifies the list item value changed in the notification.
</short>
</element>
<element name="TLVChangingEvent.AllowChange">
<short>
Indicates whether the change is accepted or rejected in the event handler. 
<b>True</b> for an accepted change.
</short>
</element>

<element name="TLVDataFindEvent">
<short>
Specifies an event handler used to locate a list view item using the 
specified search parameters and criteria.
</short>
<descr>
<p>
<var>TLVDataFindEvent</var> is the type used for the <var>OnDataFind</var> 
property in TCustomListView. Use the arguments to the handler to determine 
the actions performed in its implementation.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnDataFind"/>
<link id="TCustomListView.DoOwnerDataFind"/>
</seealso>
</element>
<element name="TLVDataFindEvent.Sender">
<short>Object for the event notification. (TCustomListView)</short>
</element>
<element name="TLVDataFindEvent.AFind">
<short>
TItemFInd value with the search type or strategy used in the handler routine.
</short>
</element>
<element name="TLVDataFindEvent.AFindString">
<short>
String value to locate in the list items.
</short>
</element>
<element name="TLVDataFindEvent.AFindPosition">
<short>
TPoint instance with the initial position for a find nearest search.
</short>
</element>
<element name="TLVDataFindEvent.AFindData">
<short>
Find parameter flag values used in the search. Includes the content provided 
by the widgetset class instance.
</short>
</element>
<element name="TLVDataFindEvent.AStartIndex">
<short>
Initial position in the list item storage where the search is started. The 
default value (0) starts at the first list item.
</short>
</element>
<element name="TLVDataFindEvent.ADirection">
<short>
Indicates the search direction when using a find nearest search type.
</short>
</element>
<element name="TLVDataFindEvent.AWrap">
<short>
<b>True</b> if the search can continue at the beginning of the list item 
storage when a match is not found.
</short>
</element>
<element name="TLVDataFindEvent.AIndex">
<short>
Returns the position where the matching list item was found, or -1 when no 
match is found.
</short>
</element>

<element name="TLVDataHintEvent">
<short>
Specifies a handler routine for data hint events in TListView.
</short>
<descr>
<p>
<var>TLVDataHintEvent</var> is an object procedure type which specifies a 
handler routine for data hints in TListView controls. TLVDataHintEvent is the 
type used for the OnDataHint event handler in TCustomListView and descendent 
classes.
</p>
<p>
An application can implement and assign a handler routine to perform actions 
needed to pre-load or cache values from an external source. It is used when 
virtual mode is enabled in the list view control.
</p>
<p>
The arguments passed to the handler routine identify the list view control for 
the event, and the range of list item positions currently visible on the list 
view control.
</p>
<p>
TLVDataHintEvent and OnDataHint events are used on the Windows platform only. 
Other widgetsets do not implement the data hinting mechanism.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnDataHint"/>
<link id="TCustomListView.OwnerData"/>
</seealso>
</element>
<element name="TLVDataHintEvent.Sender">
<short>
Object (TCustomListView) for the event notification.
</short>
</element>
<element name="TLVDataHintEvent.StartIndex">
<short>
Initial position for visible list items on the list view control.
</short>
</element>
<element name="TLVDataHintEvent.EndIndex">
<short>
Final position for visible list items on the list view control.
</short>
</element>

<element name="TLVDataStateChangeEvent">
<short>Not used in the current LCL implementation.</short>
<descr/>
<seealso/>
</element>
<element name="TLVDataStateChangeEvent.Sender">
<short/>
</element>
<element name="TLVDataStateChangeEvent.StartIndex">
<short/>
</element>
<element name="TLVDataStateChangeEvent.EndIndex">
<short/>
</element>
<element name="TLVDataStateChangeEvent.OldState">
<short/>
</element>
<element name="TLVDataStateChangeEvent.NewState">
<short/>
</element>

<element name="TLVColumnClickEvent">
<short>
Specifies an event handler signalled for a mouse click on a list view column.
</short>
<descr>
<p>
<var>TLVColumnClickEvent</var> is the type used to implement the 
<var>OnColumnClick</var> property in <var>TCustomListView</var>. 
TLVColumnClickEvent allows an application to perform actions needed when a 
click event is handled for a column on the list view control.
</p>
<p>
Use <var>Sender</var> (cast to a TCustomListView type) to access properties 
and methods in the list view control. Use <var>Column</var> to access 
properties and methods in the TListColumn instance for the event.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnColumnClick"/>
<link id="TListColumn"/>
</seealso>
</element>
<element name="TLVColumnClickEvent.Sender">
<short>Object (TCustomListView) for the event.</short>
</element>
<element name="TLVColumnClickEvent.Column">
<short>TListColumn instance for the event.</short>
</element>

<element name="TLVColumnRClickEvent">
<short>
Specifies an event handler signalled for a right mouse click on a list view 
column.
</short>
<descr>
<p>
Not used in the current LCL version.
</p>
</descr>
<seealso/>
</element>
<element name="TLVColumnRClickEvent.Sender">
<short/>
</element>
<element name="TLVColumnRClickEvent.Column">
<short/>
</element>
<element name="TLVColumnRClickEvent.Point">
<short/>
</element>

<element name="TLVCompare">
<short>
Specifies a routine used to compare the values in two items in a list view 
control.
</short>
<descr>
<p>
<var>TLVCompare</var> is a routine used to determine the relative sort order 
for the list items passed in the Item1 and Item2, and allows an optional 
Integer parameter value used in the comparison. The return value is the 
relative sort order for the <var>TListItem</var> instances. For example:
</p>
<dl>
<dt>-1</dt>
<dd>Item1 comes before Item2 in the sort order.</dd>
<dt>0</dt>
<dd>
Item1 and Item2 have the same sort order value.
</dd>
<dt>1</dt>
<dd>
Item1 comes after Item2 in the sort order.
</dd>
</dl>
<p>
A TLVCompare type is passed as an argument to the <var>CustomSort</var> 
method in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.CustomSort"/>
<link id="TListItem"/>
<link id="TLVCompareEvent"/>
</seealso>
</element>
<element name="TLVCompare.Result">
<short>Relative sort order for the specified list items.</short>
</element>
<element name="TLVCompare.Item1">
<short>First list item for the comparison.</short>
</element>
<element name="TLVCompare.Item2">
<short>Second list item for the comparison.</short>
</element>
<element name="TLVCompare.AOptionalParam">
<short>Pointer to an optional Integer value used in the comparison.</short>
</element>

<element name="TLVCompareEvent">
<short>
Specifies an event handler signalled to compare two items in a List View 
control.
</short>
<descr>
<p>
<var>TLVCompareEvent</var> is the type used to implement the 
<var>OnCompare</var> event handler in <var>TCustomListView</var>, and 
implements the <var>Sort</var> method for the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnCompare"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.Sort"/>
</seealso>
</element>
<element name="TLVCompareEvent.Sender">
<short>
Object generating the event notification. It must be cast to the 
TCustomListView type to access properties or methods specific to the list 
view control.
</short>
</element>
<element name="TLVCompareEvent.Item1">
<short>
First list item for the comparison.
</short>
</element>
<element name="TLVCompareEvent.Item2">
<short>
Second list item for the comparison.
</short>
</element>
<element name="TLVCompareEvent.Data">
<short>
Contains an Integer value indicating where the items or their data is used in 
the comparison. The value is normally 0 when signalled, indicating that the 
list items are used.
</short>
</element>
<element name="TLVCompareEvent.Compare">
<short>
Indicates the relative order for the list items. Negative values indicate 
Item1 occurs first in the sort order. Positive values indicates Item2 occurs 
first in the sort order. Zero (0) indicates the list items have the same 
value.
</short>
</element>

<element name="TLVDeletedEvent">
<short>
Specifies an event handler signalled when a list view item is deleted.
</short>
<descr>
<p>
<var>TLVDeletedEvent</var> is the type used to implement the OnDeletion event 
handler in TCustomListView.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnDeletion"/>
</seealso>
</element>
<element name="TLVDeletedEvent.Sender">
<short>
Object (TCustomListView) for the event notification.
</short>
</element>
<element name="TLVDeletedEvent.Item">
<short>
TListItem instance for the delete notification.
</short>
</element>

<element name="TLVEditingEvent">
<short>
Specifies an event handler signalled when an edit action is started for an 
item on a list view control.
</short>
<descr>
<p>
<var>TLVEditingEvent</var> is the type used to implement the 
<var>OnEditing</var> event handler in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnEditing"/>
</seealso>
</element>
<element name="TLVEditingEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVEditingEvent.Item">
<short>
TListItem instance for the event notification.
</short>
</element>
<element name="TLVEditingEvent.AllowEdit">
<short>
Set to <b>True</b> to allow the list item to be edited. Set to 
<var>False</var> to reject the edit request.
</short>
</element>

<element name="TLVEditedEvent">
<short>
Specifies an event handler signalled when an edit action is completed for an 
item on a list view control.
</short>
<descr>
<p>
<var>TLVEditedEvent</var> is the type used to implement the 
<var>OnEdited</var> event handler in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnEdited"/>
<link id="TListItem.Caption"/>
</seealso>
</element>
<element name="TLVEditedEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVEditedEvent.Item">
<short>
TListItem for the event notification.
</short>
</element>
<element name="TLVEditedEvent.AValue">
<short>
The new value from the editor for the list item. Can be modified in the 
handler routine. Ultimately, it is assigned to the Caption for the list item.
</short>
</element>

<element name="TLVInsertEvent">
<short>
Specifies an event handler signalled when a list item is added to a list view 
control.
</short>
<descr>
<p>
<var>TLVInsertEvent</var> is an alias for the <var>TLVDeletedEvent</var> 
type, and uses the same arguments. TLVInsertEvent is the type used to 
implement the <var>OnInsert</var> event handler in 
<var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TLVDeletedEvent"/>
<link id="TCustomListView.OnInsert"/>
</seealso>
</element>

<element name="TLVDataEvent">
<short>
Specifies an event handler signalled to get the arbitrary data for an item on 
a list view control.
</short>
<descr>
<p>
<var>TLVDataEvent</var> is an alias to the <var>TLVDeletedEvent</var> type, 
and uses the same arguments. TLVDataEvent is the type used to implement the 
<var>OnData</var> event handler in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TLVDeletedEvent"/>
<link id="TCustomListView.OnData"/>
<link id="TCustomListView.OwnerData"/>
</seealso>
</element>

<element name="TLVCheckedItemEvent">
<short>
Specifies an event handler signalled when the checked state for an item on a 
list view control has been changed.
</short>
<descr>
<p>
<var>TLVCheckedItemEvent</var> is the type used to implement the 
<var>OnItemChecked</var> event handler in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnItemChecked"/>
<link id="TListItem.Checked"/>
</seealso>
</element>
<element name="TLVCheckedItemEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVCheckedItemEvent.Item">
<short>
List item for the event notification.
</short>
</element>

<element name="TLVSelectItemEvent">
<short>
Specifies an event handler signalled when the selected state is changed for 
an item on a list view control.
</short>
<descr>
<p>
<var>TLVSelectItemEvent</var> is the type used to implement the 
<var>OnSelectItem</var> event handler in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnSelectItem"/>
<link id="TListItem.Checked"/>
</seealso>
</element>
<element name="TLVSelectItemEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVSelectItemEvent.Item">
<short>
TListItem for the event notification,
</short>
</element>
<element name="TLVSelectItemEvent.Selected">
<short>
<b>True</b> if the list item is selected.
</short>
</element>

<element name="TLVCustomDrawEvent">
<short>
Specifies an event handler signalled to custom draw a list view control.
</short>
<descr>
<p>
<var>TLVCustomDrawEvent</var> is the type used to implement the 
<var>OnCustomDraw</var> event handler in <var>TCustomListView</var>. See 
<var>TLVAdvancedCustomDrawEvent</var> for the event handler signalled to draw 
a list view control with state.
</p>
</descr>
<seealso>
<link id="TLVAdvancedCustomDrawEvent"/>
<link id="TCustomListView.OnCustomDraw"/>
<link id="TCustomListView.OnAdvancedCustomDraw"/>
</seealso>
</element>
<element name="TLVCustomDrawEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVCustomDrawEvent.ARect">
<short>
Rectangle with the bounds for the list view control.
</short>
</element>
<element name="TLVCustomDrawEvent.DefaultDraw">
<short>
<b>True</b> if default drawing should be performed in the list view control.
</short>
</element>

<element name="TLVCustomDrawItemEvent">
<short>
Specifies an event handler signalled to custom draw an item on a list view 
control.
</short>
<descr>
<p>
<var>TLVCustomDrawItemEvent</var> is the type used to implement the 
<var>OnCustomDrawItem</var> event handler in <var>TCustomListView</var>. See 
<var>TLVAdvancedCustomDrawItemEvent</var> for the event signalled to draw a 
list item using a specific drawing state or stage.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnCustomDrawItem"/>
<link id="TCustomListView.OnAdvancedCustomDrawItem"/>
<link id="TCustomListView.IntfCustomDraw"/>
<link id="TLVAdvancedCustomDrawItemEvent"/>
</seealso>
</element>
<element name="TLVCustomDrawItemEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVCustomDrawItemEvent.Item">
<short>
List item for the event notification.
</short>
</element>
<element name="TLVCustomDrawItemEvent.State">
<short>
Drawing state (like focused, selected, disabled) for the list item.
</short>
</element>
<element name="TLVCustomDrawItemEvent.DefaultDraw">
<short>
<b>True</b> if default drawing should be performed in the list view control.
</short>
</element>

<element name="TLVCustomDrawSubItemEvent">
<short>
Specifies an event handler signalled to draw the SubItem value for a list 
item on a list view control.
</short>
<descr>
<p>
<var>TLVCustomDrawSubItemEvent</var> is the type used to implement the 
<var>OnCustomDrawSubItem</var> event handler in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnCustomDrawSubItem"/>
<link id="TCustomListView.OnAdvancedCustomDrawSubItem"/>
<link id="TCustomListView.CustomDrawSubItem"/>
<link id="TCustomListView.Columns"/>
<link id="TListItem.SubItems"/>
</seealso>
</element>
<element name="TLVCustomDrawSubItemEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVCustomDrawSubItemEvent.Item">
<short>
TListItem for the event notification.
</short>
</element>
<element name="TLVCustomDrawSubItemEvent.SubItem">
<short>
Ordinal position for the sub-item draw in handler routine.
</short>
</element>
<element name="TLVCustomDrawSubItemEvent.State">
<short>
Drawing state for the sub-item (like selected, focused, disabled).
</short>
</element>
<element name="TLVCustomDrawSubItemEvent.DefaultDraw">
<short>
<b>True</b> if default drawing should be performed in the list view control.
</short>
</element>

<element name="TLVDrawItemEvent">
<short>
Specifies an event handler signalled to perform default drawing for an item 
on a list view control.
</short>
<descr>
<p>
<var>TLVDrawItemEvent</var> is the type used to implement the 
<var>OnDrawItem</var> event handler in <var>TCustomListView</var>. See 
<var>TLVCustomDrawItemEvent</var> and 
<var>TLVAdvancedCustomDrawItemEvent</var> for event types signalled for 
custom-drawn items on a list view control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnDrawItem"/>
<link id="TCustomListView.DrawItem"/>
<link id="TLVCustomDrawItemEvent"/>
<link id="TLVAdvancedCustomDrawItemEvent"/>
</seealso>
</element>
<element name="TLVDrawItemEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVDrawItemEvent.AItem">
<short>
TListItem for the event notification.
</short>
</element>
<element name="TLVDrawItemEvent.ARect">
<short>
Rectangle with the bounds where the list item is drawn.
</short>
</element>
<element name="TLVDrawItemEvent.AState">
<short>
Drawing state (like selected, focused, disabled) for the owner-drawn list 
item.
</short>
</element>

<element name="TLVAdvancedCustomDrawEvent">
<short>
Specifies an event handler signalled to perform advanced custom drawing for 
an owner-drawn list view control.
</short>
<descr>
<p>
<var>TLVAdvancedCustomDrawEvent</var> is the type used to implement the 
<var>OnAdvancedCustomDraw</var> event handler in <var>TCustomListView</var>. 
See <var>TLVDrawItemEvent</var> and <var>TLVAdvancedCustomDrawItemEvent</var> 
for event types signalled to draw items on a list view control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnAdvancedCustomDraw"/>
<link id="TCustomListView.OnCustomDraw"/>
<link id="TCustomListView.CustomDraw"/>
<link id="TLVCustomDrawEvent"/>
<link id="TLVCustomDrawItemEvent"/>
<link id="TLVAdvancedCustomDrawItemEvent"/>
<link id="TCustomDrawStage"/>
</seealso>
</element>
<element name="TLVAdvancedCustomDrawEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVAdvancedCustomDrawEvent.ARect">
<short>
Rectangle with the bounds for the list view control.
</short>
</element>
<element name="TLVAdvancedCustomDrawEvent.Stage">
<short>
Drawing stage for the list view control. Generally not cdPrePaint.
</short>
</element>
<element name="TLVAdvancedCustomDrawEvent.DefaultDraw">
<short>
<b>True</b> if default drawing should be performed in the list view control.
</short>
</element>

<element name="TLVAdvancedCustomDrawItemEvent">
<short>
Specifies an event handler signalled to perform advanced custom drawing for a 
list view item with stage and state information.
</short>
<descr>
<p>
<var>TLVAdvancedCustomDrawItemEvent</var> is the type used to implement the 
<var>OnAdvancedCustomDrawItem</var> event handler in 
<var>TCustomListView</var>. See <var>TLVCustomDrawItemEvent</var> for the 
event type signalled to draw a list item in its pre-paint stage.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnAdvancedCustomDrawItem"/>
<link id="TCustomListView.OnCustomDrawItem"/>
<link id="TLVCustomDrawItemEvent"/>
</seealso>
</element>
<element name="TLVAdvancedCustomDrawItemEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVAdvancedCustomDrawItemEvent.Item">
<short>
List item for the event notification.
</short>
</element>
<element name="TLVAdvancedCustomDrawItemEvent.State">
<short>
Custom drawing state for the list item (like Selected, Focused, Disabled).
</short>
</element>
<element name="TLVAdvancedCustomDrawItemEvent.Stage">
<short>
Drawing stage for the list item. The advanced handler is interested in stages 
other than cdPrePaint.
</short>
</element>
<element name="TLVAdvancedCustomDrawItemEvent.DefaultDraw">
<short>
<b>True</b> if default drawing should be performed in the list view control.
</short>
</element>

<element name="TLVAdvancedCustomDrawSubItemEvent">
<short>
Specifies an event handler signalled to perform advancing drawing for a list 
view sub-item with stage and state information.
</short>
<descr>
<p>
<var>TLVAdvancedCustomDrawSubItemEvent</var> is the type used to implement 
the OnAdvancedCustomDrawSubItem event handler in TCustomListView.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnAdvancedCustomDrawSubItem"/>
<link id="TCustomListView.OnCustomDrawSubItem"/>
</seealso>
</element>
<element name="TLVAdvancedCustomDrawSubItemEvent.Sender">
<short>
Object for the event notification. It must be cast to the TCustomListView 
type to access properties or methods specific to the list view control.
</short>
</element>
<element name="TLVAdvancedCustomDrawSubItemEvent.Item">
<short>
List item for the event notification.
</short>
</element>
<element name="TLVAdvancedCustomDrawSubItemEvent.SubItem">
<short>
Ordinal position for the value in SubItem drawn in the handler.
</short>
</element>
<element name="TLVAdvancedCustomDrawSubItemEvent.State">
<short>
Drawing state for the custom-drawn sub-item.
</short>
</element>
<element name="TLVAdvancedCustomDrawSubItemEvent.Stage">
<short>
Drawing stage for the sub-item. The advanced handler is used for stages other 
than cdPrePaint.
</short>
</element>
<element name="TLVAdvancedCustomDrawSubItemEvent.DefaultDraw">
<short>
<b>True</b> if default drawing should be performed in the list view control.
</short>
</element>

<element name="TLVCreateItemClassEvent">
<short>
Specifies an event handler signalled to get the class type needed to create a 
new list view item.
</short>
<descr>
<p>
Arguments to the object procedure identify the list view control 
(<var>Sender</var>) and the class type (<var>ItemClass</var>) used to create 
new list view items. ItemClass is a variable parameter which is updated in 
the event handler with the TListItemClass class reference needed for the list 
view control.
</p>
<p>
<var>TLVCreateItemClassEvent</var> is the type used for the 
<var>OnCreateItemClass</var> property in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnCreateItemClass"/>
<link id="TCustomListView.CreateListItem"/>
<link id="TListItemClass"/>
</seealso>
</element>
<element name="TLVCreateItemClassEvent.Sender">
<short>Object (TCustomListView) for the event notification.</short>
</element>
<element name="TLVCreateItemClassEvent.ItemClass">
<short>Class for the new list view item.</short>
</element>

<element name="TListViewProperty">
<short>
Represents Boolean properties used in TCustomListView.
</short>
<descr>
<p>
<var>TListViewProperty</var> is an enumerated type with values representing 
Boolean properties used in TCustomListView. This includes the following:
</p>
<ul>
<li>ColumnClick</li>
<li>HideSelection</li>
<li>OwnerDraw</li>
<li>ShowColumnHeaders</li>
<li>ShowWorkAreas</li>
<li>ToolTips</li>
<li>CheckBoxes</li>
<li>FlatScrollBars</li>
<li>FullDrag</li>
<li>GridLines</li>
<li>HotTrack</li>
<li>MultiSelect</li>
<li>ReadOnly</li>
<li>RowSelect</li>
<li>AutoArrange</li>
<li>WrapText</li>
</ul>
<p>
Values from the enumeration are included in or excluded from the 
<var>TListViewProperties</var> set type. When a value is included in the set, 
the corresponding Boolean property has been set to <b>True</b>. When a value 
is excluded from the set, the corresponding Boolean property has been set to 
<var>False</var>.
</p>
</descr>
<seealso/>
</element>
<element name="TListViewProperty.lvpAutoArrange">
<short>Represents the AutoArrange property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpCheckboxes">
<short>Represents the CheckBoxes property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpColumnClick">
<short>Represents the ColumnClick property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpFlatScrollBars">
<short>Represents the FlatScrollBars property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpFullDrag">
<short>Represents the FullDrag property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpGridLines">
<short>Represents the GridLines property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpHideSelection">
<short>Represents the HideSelection property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpHotTrack">
<short>Represents the HotTrack property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpMultiSelect">
<short>Represents the MultiSelect property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpOwnerDraw">
<short>Represents the OwnerDraw property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpReadOnly">
<short>Represents the ReadOnly property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpRowSelect">
<short>Represents the RowSelect property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpShowColumnHeaders">
<short>Represents the ShowColumnHeaders property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpShowWorkAreas">
<short>Represents the ShowWorkAreas property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpWrapText">
<short>Represents the WrapText property in TCustomListView.</short>
</element>
<element name="TListViewProperty.lvpToolTips">
<short>Represents the ToolTips property in TCustomListView.</short>
</element>

<element name="TListViewProperties">
<short>
Set type used to store values from the TListViewProperty enumeration.
</short>
<descr>
<p>
<var>TListViewProperties</var> is a set type used to store zero or more 
values from the <var>TListViewProperty</var> enumeration.
</p>
<p>
The set represents Boolean property values found in TCustomListView / 
TListView. When a value is included in the set, the corresponding property in 
TCustomListView has been set to <b>True</b>. The value is excluded from the 
set when the corresponding property in TCustomListView is set to 
<b>False</b>. The following properties in TCustomListView are presented in 
the set type:
</p>
<ul>
<li>ColumnClick</li>
<li>HideSelection</li>
<li>OwnerDraw</li>
<li>ShowColumnHeaders</li>
<li>ShowWorkAreas</li>
<li>ToolTips</li>
<li>CheckBoxes</li>
<li>FlatScrollBars</li>
<li>FullDrag</li>
<li>GridLines</li>
<li>HotTrack</li>
<li>MultiSelect</li>
<li>ReadOnly</li>
<li>RowSelect</li>
<li>AutoArrange</li>
<li>WrapText</li>
</ul>
<p>
TListViewProperties is the type used to implement the internal FProperties 
member in TCustomListView.
</p>
</descr>
<seealso>
<link id="TListViewProperty"/>
<link id="TCustomListView"/>
</seealso>
</element>

<element name="TListViewImageList">
<short>
Represents the image list sizes used in TCustomListView.
</short>
<descr>
<p>
<var>TListViewImageList</var> is an enumeration type with values that 
represent image list sizes used in TCustomListView.
</p>
</descr>
<seealso/>
</element>
<element name="TListViewImageList.lvilSmall">
<short>Represents the SmallImages property in TCustomListView.</short>
</element>
<element name="TListViewImageList.lvilLarge">
<short>Represents the LargeImages property in TCustomListView.</short>
</element>
<element name="TListViewImageList.lvilState">
<short>Represents the StateImages property in TCustomListView.</short>
</element>

<element name="TListHotTrackStyle">
<short>
Represents cursor shapes displayed during hot tracking in a control.
</short>
<descr>
<p>
<var>TListHotTrackStyle</var> is an enumerated type with values for cursor 
shapes displayed for the "hot tracking" state in a TCustomListView control. 
Hot tracking occurs when the mouse pointer hovers over an item in a control, 
and it is highlighted (aka hot-lighted). Values from TListHotTrackStyle are 
stored in the TListHotTrackStyles set type used for the 
TCustomListView.HotTrackStyles property.
</p>
</descr>
<seealso>
<link id="TListHotTrackStyles"/>
<link id="TCustomListView.HotTrackStyles"/>
</seealso>
</element>
<element name="TListHotTrackStyle.htHandPoint">
<short>For current ListView item, show the HandPoint mouse cursor.</short>
</element>
<element name="TListHotTrackStyle.htUnderlineCold">
<short>For current ListView item, show the pale underline.</short>
</element>
<element name="TListHotTrackStyle.htUnderlineHot">
<short>For current ListView item, show the bold underline.</short>
</element>

<element name="TListHotTrackStyles">
<short>
Set type used to store values from <var>TListHotTrackStyle</var>.
</short>
<descr>
<p>
<var>TListHotTrackStyles</var> is a set type used to store zero or more 
values from the <var>TListHotTrackStyle</var> enumeration. 
TListHotTrackStyles is the type used to implement the 
<var>TCustomListView.HotTrackStyles</var> property.
</p>
</descr>
<seealso>
<link id="TListHotTrackStyle"/>
<link id="TCustomListView.HotTrackStyles"/>
</seealso>
</element>

<element name="TListViewFlag">
<short>
Represents flag values used in TCustomListView when sorting or validating 
items in the control.
</short>
</element>
<element name="TListViewFlag.lffSelectedValid">
<short>The value in the Selected property is valid.</short>
</element>
<element name="TListViewFlag.lffItemsMoving">
<short>Items in the control are being moved.</short>
</element>
<element name="TListViewFlag.lffItemsSorting">
<short>Items in the control are being sorted.</short>
</element>
<element name="TListViewFlag.lffPreparingSorting">
<short>Sort parameters are being prepared.</short>
</element>

<element name="TListViewFlags">
<short>
Set type used to store values from the TListViewFlag enumeration.
</short>
<descr>
<p>
<var>TListViewFlags</var> is the type used to implement the internal flags 
for the <var>TCustomListView</var> control.
</p>
</descr>
<seealso>
<link id="TCustomListView"/>
</seealso>
</element>

<element name="TSortDirection">
<short>
Represents the sort direction used for items in a list view control.
</short>
<descr>
<p>
TSortDirection is the type used to implement the SortDirection property in 
TCustomListView.
</p>
</descr>
<seealso>
<link id="TCustomListView.SortDirection"/>
<link id="TCustomListView.SortColumn"/>
<link id="TCustomListView.Sort"/>
<link id="TCustomListView.AlphaSort"/>
<link id="TCustomListView.CustomSort"/>
</seealso>
</element>
<element name="TSortDirection.sdAscending">
<short>Sorts list items in ascending order.</short>
</element>
<element name="TSortDirection.sdDescending">
<short>Sorts list items in descending order.</short>
</element>

<element name="TCustomListViewEditor">
<short>
Provides multi-platform editing capabilities for a list view control.
</short>
<descr>
<p>
Used to provide multi-platform editing capabilities for 
<var>TCustomListView</var>. It implements the internal editor control in 
TCustomListView.
</p>
</descr>
<seealso>
<link id="TCustomListView.Edit"/>
</seealso>
</element>

<element name="TCustomListViewEditor.FItem"/>

<element name="TCustomListViewEditor.ListViewEditorKeyDown">
<short>
Implements the OnKeyDown event handler for the editor control.
</short>
<descr>
<p>
Ensures that the VK_ESCAPE and VK_RETURN virtual key codes are handled for 
the editor. VK_ESCAPE causes the editor to be hidden, and focused is returned 
to the parent control. VK_RETURN does not hide the editor, but focus is 
returned to the parent control. In both cases, Key is set to 0 to indicate 
that the key was handled in the method.
</p>
</descr>
<seealso>
<link id="TCustomListViewEditor.Create"/>
<link id="#lcl.controls.TWinControl.OnKeyDown">TWinControl.OnKeyDown</link>
</seealso>
</element>
<element name="TCustomListViewEditor.ListViewEditorKeyDown.Sender">
<short>Object for the event notification.</short>
</element>
<element name="TCustomListViewEditor.ListViewEditorKeyDown.Key">
<short>Virtual key code examined in the method.</short>
</element>
<element name="TCustomListViewEditor.ListViewEditorKeyDown.Shift">
<short>Shift / Ctrl / Alt modifier for the key code.</short>
</element>

<element name="TCustomListViewEditor.DoExit">
<short>Performs actions needed when the editor loses focus.</short>
<descr>
<p>
Calls the HideEditor method in the parent control (TCustomListView).
Calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="#lcl.stdctrls.TCustomEdit.DoExit">TCustomEdit.DoExit</link>
</seealso>
</element>

<element name="TCustomListViewEditor.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
Create is the overridden constructor for the class instance, and calls the 
inherited method on entry.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListViewEditor.Create.AOwner">
<short>
Component (TCustomListView) which owns the class instance.
</short>
</element>

<element name="TCustomListViewEditor.Item">
<short>List item updated in the editor control.</short>
<descr>
<p>
<var>Item</var> is a <var>TListItem</var> property with the list item updated 
in the editor control. The value in Item is assigned in the ShowEditor method 
in the parent control (TCustomListView). Item is set to <b>Nil</b> when the 
editor control is hidden.
</p>
</descr>
<seealso>
<link id="TCustomListViewEditor.DoExit"/>
<link id="TListItem"/>
</seealso>
</element>

<element name="TCustomListView">
<short>
<var>TCustomListView</var> is the base class for <var>TListView</var>.
</short>
<descr>
<p>
<var>TCustomListView</var> is the base class for <var>TListView</var>. It 
provides a multi-platform implementation of the List View control from the 
Windows API. TCustomListView allows a collection of items to be displayed 
using different view styles. For instance:
</p>
<dl>
<dt>Icon View</dt>
<dd>Each list item has an large icon with a caption.</dd>
<dt>Small Icon View</dt>
<dd>Each list item has a small icon with a caption.</dd>
<dt>List View</dt>
<dd>
Each list item has a small icon with a caption, and is displayed in a single 
column in the control.
</dd>
<dt>Report View</dt>
<dd>
Each list item is displayed on a single line, with sub-items displayed as 
additional columns. The first column has a small icon and a caption. Other 
columns contain the text for the sub-items.
</dd>
</dl>
<remark>
TCustomListView does <b>not</b> implement some features available for Windows 
version 6 or higher, including: the Tile View style, List View Item Grouping, 
and List View Work Areas.
</remark>
</descr>
</element>

<element name="TCustomListView.FEditor"/>
<element name="TCustomListView.FAllocBy"/>
<element name="TCustomListView.FAutoSort"/>
<element name="TCustomListView.FAutoSortIndicator"/>
<element name="TCustomListView.FAutoWidthLastColumn"/>
<element name="TCustomListView.FCanvas"/>
<element name="TCustomListView.FDefaultItemHeight"/>
<element name="TCustomListView.FHotTrackStyles"/>
<element name="TCustomListView.FIconOptions"/>
<element name="TCustomListView.FOnEdited"/>
<element name="TCustomListView.FOnEditing"/>
<element name="TCustomListView.FOwnerData"/>
<element name="TCustomListView.FOwnerDataItem"/>
<element name="TCustomListView.FListItems"/>
<element name="TCustomListView.FColumns"/>
<element name="TCustomListView.FImages"/>
<element name="TCustomListView.FImagesWidth"/>
<element name="TCustomListView.FImageChangeLink"/>
<element name="TCustomListView.FFlags"/>
<element name="TCustomListView.FShowEditorQueued"/>
<element name="TCustomListView.FSortDirection"/>
<element name="TCustomListView.FViewStyle"/>
<element name="TCustomListView.FSortType"/>
<element name="TCustomListView.FSortColumn"/>
<element name="TCustomListView.FCustomSort_Func"/>
<element name="TCustomListView.FCustomSort_Param"/>
<element name="TCustomListView.FScrollBars"/>
<element name="TCustomListView.FViewOriginCache"/>
<element name="TCustomListView.FSelected"/>
<element name="TCustomListView.FFocused"/>
<element name="TCustomListView.FSelectedIdx"/>
<element name="TCustomListView.FHoverTime"/>
<element name="TCustomListView.FUpdateCount"/>
<element name="TCustomListView.FOnChange"/>
<element name="TCustomListView.FOnChanging"/>
<element name="TCustomListView.FOnColumnClick"/>
<element name="TCustomListView.FOnCompare"/>
<element name="TCustomListView.FOnData"/>
<element name="TCustomListView.FOnDataFind"/>
<element name="TCustomListView.FOnDataHint"/>
<element name="TCustomListView.FOnDataStateChange"/>
<element name="TCustomListView.FOnDeletion"/>
<element name="TCustomListView.FOnInsert"/>
<element name="TCustomListView.FOnItemChecked"/>
<element name="TCustomListView.FOnSelectItem"/>
<element name="TCustomListView.FOnCustomDraw"/>
<element name="TCustomListView.FOnCustomDrawItem"/>
<element name="TCustomListView.FOnCustomDrawSubItem"/>
<element name="TCustomListView.FOnAdvancedCustomDraw"/>
<element name="TCustomListView.FOnAdvancedCustomDrawItem"/>
<element name="TCustomListView.FOnAdvancedCustomDrawSubItem"/>
<element name="TCustomListView.FProperties"/>

<element name="TCustomListView.GetBoundingRect">
<short>Gets the value for the BoundingRect property.</short>
<descr/>
<seealso>
<link id="TCustomListView.tBoundingRect"/>
</seealso>
</element>
<element name="TCustomListView.GetBoundingRect.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetColumnCount">
<short>Gets the value for the ColumnCount property.</short>
<descr/>
<seealso>
<link id="TCustomListView.ColumnCount"/>
</seealso>
</element>
<element name="TCustomListView.GetColumnCount.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetColumnFromIndex">
<short>Gets the value for the indexed Column property.</short>
<descr/>
<seealso>
<link id="TCustomListView.Column"/>
</seealso>
</element>
<element name="TCustomListView.GetColumnFromIndex.Result">
<short>Value for the property.</short>
</element>
<element name="TCustomListView.GetColumnFromIndex.AIndex">
<short>Ordinal position for the indexed property value.</short>
</element>

<element name="TCustomListView.GetDropTarget">
<short>Gets the value for the DropTarget property.</short>
<descr/>
<seealso>
<link id="TCustomListView.DropTarget"/>
</seealso>
</element>
<element name="TCustomListView.GetDropTarget.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetFocused">
<short>Gets the value for the ItemFocused property.</short>
<descr/>
<seealso>
<link id="TCustomListView.ItemFocused"/>
</seealso>
</element>
<element name="TCustomListView.GetFocused.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetImageList">
<short>Gets the value for the indexed LargeImages property.</short>
<descr/>
<seealso>
<link id="TCustomListView.LargeImages"/>
</seealso>
</element>
<element name="TCustomListView.GetImageList.Result">
<short>Value for the property.</short>
</element>
<element name="TCustomListView.GetImageList.ALvilOrd">
<short>Ordinal position for the indexed property value.</short>
</element>

<element name="TCustomListView.GetHoverTime">
<short>Gets the value for the HoverTime property.</short>
<descr/>
<seealso>
<link id="TCustomListView.HoverTime"/>
</seealso>
</element>
<element name="TCustomListView.GetHoverTime.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetItemIndex">
<short>Gets the value for the ItemIndex property.</short>
<descr/>
<seealso>
<link id="TCustomListView.ItemIndex"/>
</seealso>
</element>
<element name="TCustomListView.GetItemIndex.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetProperty">
<short>
Determines if the specified Boolean property has been set in the control.
</short>
<descr>
<p>
<var>GetProperty</var> is a <var>Boolean</var> method used to determine if 
the specified property value has been set to <b>True</b> in the control.
</p>
<p>
<var>ALvpOrd</var> contains a value from the <var>TListViewProperty</var> 
enumeration which identifies the property value accessed in the method. The 
return value is <b>True</b> when ALvpOrd has been included in the internal 
<var>TListViewProperties</var> set.
</p>
<p>
This technique allows multiple Boolean properties to be represented using a 
single set type member variable. It avoids allocating a Boolean member for 
each of the property values.
</p>
<p>
GetProperty is used as the read access specifier for several properties in 
<var>TCustomListView</var>, including:
</p>
<ul>
<li>ColumnClick</li>
<li>HideSelection</li>
<li>OwnerDraw</li>
<li>ShowColumnHeaders</li>
<li>ShowWorkAreas</li>
<li>ToolTips</li>
<li>CheckBoxes</li>
<li>FlatScrollBars</li>
<li>FullDrag</li>
<li>GridLines</li>
<li>HotTrack</li>
<li>MultiSelect</li>
<li>ReadOnly</li>
<li>RowSelect</li>
<li>AutoArrange</li>
<li>WrapText</li>
</ul>
<p>
See <var>SetProperty</var> for the write access specifier equivalent.
</p>
</descr>
<seealso>
<link id="TCustomListView.SetProperty"/>
<link id="TListViewProperty"/>
<link id="TListViewProperties"/>
</seealso>
</element>
<element name="TCustomListView.GetProperty.Result">
<short>Value for the property.</short>
</element>
<element name="TCustomListView.GetProperty.ALvpOrd">
<short>
Ordinal TListViewProperty value used to access the property value.
</short>
</element>

<element name="TCustomListView.GetSelCount">
<short>Gets the value for the SelCount property.</short>
<descr/>
<seealso>
<link id="TCustomListView.SelCount"/>
</seealso>
</element>
<element name="TCustomListView.GetSelCount.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetSelection">
<short>Gets the value for the Selected property.</short>
<descr/>
<seealso>
<link id="TCustomListView.Selected"/>
</seealso>
</element>
<element name="TCustomListView.GetSelection.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetTopItem">
<short>Gets the value for the TopItem property.</short>
<descr/>
<seealso>
<link id="TCustomListView.TopItem"/>
</seealso>
</element>
<element name="TCustomListView.GetTopItem.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetViewOrigin">
<short>Gets the value for the ViewOrigin property.</short>
<descr/>
<seealso>
<link id="TCustomListView.ViewOrigin"/>
</seealso>
</element>
<element name="TCustomListView.GetViewOrigin.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.GetVisibleRowCount">
<short>Gets the value for the VisibleRowCount property.</short>
<descr/>
<seealso>
<link id="TCustomListView.VisibleRowCount"/>
</seealso>
</element>
<element name="TCustomListView.GetVisibleRowCount.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomListView.ResizeLastColumn">
<short>
Makes the last visible column fill the remaining width in the control.
</short>
<descr>
<p>
<var>ResizeLastColumn</var> is a method used to make the last visible column 
fill the remaining unused width for the control.
</p>
<p>
ResizeLastColumn is relevant when <var>ViewStyle</var> is set to 
<var>vsList</var> or <var>vsReport</var>, and <var>ColumnCount</var> is not 
set to 0 (zero). No actions are performed in the method if both conditions 
are not met.
</p>
<p>
ResizeLastColumn examines the values in <var>Columns</var> (in reverse order) 
to find the last <var>TListColumn</var> instance with its <var>Visible</var> 
property set to <b>True</b>. The accumulated width for the preceding visible 
columns (and borders) is calculated. The difference between ClientWidth and 
the accumulated width is used for the last column when it is a positive 
non-zero value.
</p>
<p>
The column affected in the method has its <var>AutoSize</var>, 
<var>MinWidth</var>, and <var>MaxWidth</var> properties reset before applying 
the new <var>Width</var>.
</p>
<p>
ResizeLastColumn is used when <var>AutoWidthLastColumn</var> is set to 
<b>True</b>. The method is called when the bounds for the control have been 
changed, or when the value in AutoWidthLastColumn has been changed.
</p>
</descr>
<seealso>
<link id="TCustomListView.AutoWidthLastColumn"/>
<link id="TCustomListView.Columns"/>
<link id="TCustomListView.ColumnCount"/>
<link id="TCustomListView.ViewStyle"/>
<link id="TListColumn.AutoSize"/>
<link id="TListColumn.MaxWidth"/>
<link id="TListColumn.MinWidth"/>
<link id="TListColumn.Width"/>
<link id="TListColumn.Visible"/>
</seealso>
</element>

<element name="TCustomListView.SetAllocBy">
<short>Sets the value for the AllocBy property.</short>
<descr/>
<seealso>
<link id="TCustomListView.AllocBy"/>
</seealso>
</element>
<element name="TCustomListView.SetAllocBy.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetAutoWidthLastColumn">
<short>Sets the value for the AutoWidthLastColumn property.</short>
<descr/>
<seealso>
<link id="TCustomListView.AutoWidthLastColumn"/>
</seealso>
</element>
<element name="TCustomListView.SetAutoWidthLastColumn.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetColumns">
<short>Sets the value for the Columns property.</short>
<descr/>
<seealso>
<link id="TCustomListView.Columns"/>
</seealso>
</element>
<element name="TCustomListView.SetColumns.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetDefaultItemHeight">
<short>Sets the value for the DefaultItemHeight property.</short>
<descr/>
<seealso>
<link id="TCustomListView.DefaultItemHeight"/>
</seealso>
</element>
<element name="TCustomListView.SetDefaultItemHeight.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetDropTarget">
<short>Sets the value for the DropTarget property.</short>
<descr/>
<seealso>
<link id="TCustomListView.DropTarget"/>
</seealso>
</element>
<element name="TCustomListView.SetDropTarget.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetFocused">
<short>Sets the value for the ItemFocused property.</short>
<descr/>
<seealso>
<link id="TCustomListView.ItemFocused"/>
</seealso>
</element>
<element name="TCustomListView.SetFocused.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetHotTrackStyles">
<short>Sets the value for the HotTrackStyles property.</short>
<descr/>
<seealso>
<link id="TCustomListView.HotTrackStyles"/>
</seealso>
</element>
<element name="TCustomListView.SetHotTrackStyles.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetHoverTime">
<short>Sets the value for the HoverTime property.</short>
<descr/>
<seealso>
<link id="TCustomListView.HoverTime"/>
</seealso>
</element>
<element name="TCustomListView.SetHoverTime.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetIconOptions">
<short>Sets the value for the IconOptions property.</short>
<descr/>
<seealso>
<link id="TCustomListView.IconOptions"/>
</seealso>
</element>
<element name="TCustomListView.SetIconOptions.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetImageList">
<short>
Sets the value for properties like LargeImages, SmallImages, and StateImages.
</short>
<descr>
<p>
<var>SetImageList</var> is the write access specifier for properties 
including <var>LargeImages</var>, <var>SmallImages</var>, and 
<var>StateImages</var>. The value in <var>ALvilOrd</var> indicates which 
image list is updated in the method.
</p>
</descr>
<seealso>
<link id="TCustomListView.LargeImages"/>
<link id="TCustomListView.SmallImages"/>
<link id="TCustomListView.StateImages"/>
<link id="TCustomListView.GetImageList"/>
<link id="TListViewImageList"/>
<link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
</seealso>
</element>
<element name="TCustomListView.SetImageList.ALvilOrd">
<short>
TListViewImageList value which identifies the image list updated in the 
method.
</short>
</element>
<element name="TCustomListView.SetImageList.AValue">
<short>New value for the indexed property.</short>
</element>

<element name="TCustomListView.SetImageListWidth">
<short>Sets the value for the LargeImagesWidth property.</short>
<descr/>
<seealso>
<link id="TCustomListView.LargerImagesWidth"/>
</seealso>
</element>
<element name="TCustomListView.SetImageListWidth.ALvilOrd">
<short>Identifier for the image list affected in the method.</short>
</element>
<element name="TCustomListView.SetImageListWidth.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetImageListWS">
<short>
Notifies the widgetset class when an image list for the control has been 
changed.
</short>
<descr/>
<seealso>
<link id="TCustomListView.SetImageList"/>
<link id="TCustomListView.LargeImages"/>
<link id="TCustomListView.SmallImages"/>
<link id="TCustomListView.StateImages"/>
<link id="TCustomListView.DoAutoAdjustLayout"/>
</seealso>
</element>
<element name="TCustomListView.SetImageListWS.ALvil">
<short>Identifies the image list updated in the method.</short>
</element>

<element name="TCustomListView.SetItemIndex">
<short>Sets the value for the ItemIndex property.</short>
<descr/>
<seealso>
<link id="TCustomListView.ItemIndex"/>
</seealso>
</element>
<element name="TCustomListView.SetItemIndex.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetItems">
<short>Sets the value for the Items property.</short>
<descr/>
<seealso>
<link id="TCustomListView.Items"/>
</seealso>
</element>
<element name="TCustomListView.SetItems.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetItemVisible">
<short>
Notifies the widgetset class when the visibility for a list item has been 
changed.
</short>
<descr>
<p>
Calls the ItemShow method in the widgetset class.
</p>
<p>
No actions are performed in the method during LCL component streaming, or 
when the Handle has not been allocated for the control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.SetItemVisible.AValue">
<short>List item with the changed visibility.</short>
</element>
<element name="TCustomListView.SetItemVisible.APartialOK">
<short>
<b>True</b> when the list item can be partially visible in the control; 
<b>False</b> requires the item to be fully visible to be displayed.
</short>
</element>

<element name="TCustomListView.SetOwnerData">
<short>Sets the value for the OwnerData property.</short>
<descr/>
<seealso>
<link id="TCustomListView.OwnerData"/>
</seealso>
</element>
<element name="TCustomListView.SetOwnerData.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetProperty">
<short>
Sets the value for the specified Boolean property.
</short>
<descr>
<p>
<var>SetProperty</var> is a method used to set the Boolean value for the 
property represented by the value in <var>ALvpOrd</var>.
</p>
<p>
<var>ALvpOrd</var> contains a value from the <var>TListViewProperty</var> 
enumeration which identifies the property updated in the method. 
<var>AIsSet</var> contains the new Boolean value for the property.
</p>
<p>
SetProperty is used as the write access specifier for several properties in 
<var>TCustomListView</var>, including:
</p>
<ul>
<li>ColumnClick</li>
<li>HideSelection</li>
<li>OwnerDraw</li>
<li>ShowColumnHeaders</li>
<li>ShowWorkAreas</li>
<li>ToolTips</li>
<li>CheckBoxes</li>
<li>FlatScrollBars</li>
<li>FullDrag</li>
<li>GridLines</li>
<li>HotTrack</li>
<li>MultiSelect</li>
<li>ReadOnly</li>
<li>RowSelect</li>
<li>AutoArrange</li>
<li>WrapText</li>
</ul>
<p>
This technique allows multiple Boolean properties to be represented using a 
single set type member variable. It avoids allocating a Boolean member for 
each of the property values.
</p>
<p>
See <var>GetProperty</var> for the read access specifier equivalent.
</p>
<p>
SetProperty ensures the internal multi-selection list is freed and recreated 
when the MultiSelect property will be enabled in the method.
</p>
</descr>
<version>
Modified in LCL version 4.4 to free and populate the internal multi-selection 
list when MultiSelect is enabled in the method.
</version>
<seealso>
<link id="TCustomListView.GetProperty"/>
<link id="TListViewProperty"/>
<link id="TListViewProperties"/>
</seealso>
</element>
<element name="TCustomListView.SetProperty.ALvpOrd">
<short>Identifies the property updated in the method.</short>
</element>
<element name="TCustomListView.SetProperty.AIsSet">
<short>Value for the specified property.</short>
</element>

<element name="TCustomListView.SetScrollBars">
<short>Sets the value in the ScrollBars property.</short>
<descr/>
<seealso>
<link id="TCustomListView.ScrollBars"/>
</seealso>
</element>
<element name="TCustomListView.SetScrollBars.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetSelection">
<short>Sets the value in the Selected property.</short>
<descr/>
<seealso>
<link id="TCustomListView.Selected"/>
</seealso>
</element>
<element name="TCustomListView.SetSelection.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetShowEditorQueued">
<short>Sets the value for the ShowEditorQueued property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomListView.SetShowEditorQueued.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetSortColumn">
<short>Sets the value for the SortColumn property.</short>
<descr/>
<seealso>
<link id="TCustomListView.SortColumn"/>
</seealso>
</element>
<element name="TCustomListView.SetSortColumn.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetSortDirection">
<short>Sets the value for the SortDirection property.</short>
<descr/>
<seealso>
<link id="TCustomListView.SortDirection"/>
</seealso>
</element>
<element name="TCustomListView.SetSortDirection.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetSortType">
<short>Sets the value for the SortType property.</short>
<descr/>
<seealso>
<link id="TCustomListView.SortType"/>
</seealso>
</element>
<element name="TCustomListView.SetSortType.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetViewOrigin">
<short>Sets the value for the ViewOrigin property.</short>
<descr/>
<seealso>
<link id="TCustomListView.ViewOrigin"/>
</seealso>
</element>
<element name="TCustomListView.SetViewOrigin.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.SetViewStyle">
<short>Sets the value for the ViewStyle property.</short>
<descr/>
<seealso>
<link id="TCustomListView.ViewStyle"/>
</seealso>
</element>
<element name="TCustomListView.SetViewStyle.Avalue">
<short>New value for the property.</short>
</element>

<element name="TCustomListView.QueuedShowEditor">
<short>Performs an asynchronous display of the editor for the control.</short>
<descr>
<p>
Toggles the Boolean value in the ShowEditorQueued property, and calls the 
ShowEditor method.
</p>
<p>
QueuedShowEditor is called when the ShowEditorQueued property is set to 
<b>True</b>. Application.QueueAsyncCall is used to asynchronously execute the 
method.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.QueuedShowEditor.Data">
<short>Not used in the current implementation.</short>
</element>

<element name="TCustomListView.SortWithParams">
<short>
Sorts the Items in the list view control using the specified sort compare 
function.
</short>
<descr>
<p>
<var>SortWithParams</var> is a method used to sort entries in the Items 
property using the sort compare function in <var>ACompareFunc</var> to 
determine the order for the Items on the control. ACompareFunc normally 
contains the routine needed for the setting in SortType, and may refer to the 
OnCompare handler (when assigned).
</p>
<p>
No actions are performed in the method if Items has fewer than 2 TListItem 
instances in the property, or when lffPreparingSorting has already been 
included in the internal flags for the control.
</p>
<p>
SortWithParams ensures that state information for the class instance and its 
Items is stored / restored when the handle for the widget has been allocated. 
This includes the selected, focused, and checked list item(s) for the control.
</p>
<p>
SortWithParams calls the Sort method in Items using ACompareFunc as the sort 
compare routine.
</p>
<p>
If the widget Handle has been assigned, the widget is updated with the sort 
parameters such as SortType, SortColumns, and SortDirection. The saved state 
information is used to set values in the widget instance when the sort 
operation is completed. This includes settings like ItemFocused, Selected, and 
the Checked or Selected state for individual TListItem entries in Items. These 
actions are not performed (or needed) if the handle for the widget has not 
been assigned.
</p>
<p>
SortWithParams is called from the Sort and CustomSort methods.
</p>
</descr>
<seealso>
<link id="TCustomListView.CustomSort"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.ItemFocused"/>
<link id="TCustomListView.ItemIndex"/>
<link id="TCustomListView.MultiSelect"/>
<link id="TCustomListView.OnCompare"/>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.Sort"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.SortColumn"/>
<link id="TCustomListView.SortDirection"/>
<link id="TListItems.Sort"/>
<link id="TListItem.Checked"/>
<link id="TListItem.Selected"/>
</seealso>
</element>
<element name="TCustomListView.SortWithParams.ACompareFunc">
<short>
Sort compare routine used to determine the sorted order for the values in Items.
</short>
</element>

<element name="TCustomListView.UpdateScrollbars">
<short>Not implemented in the current LCL version.</short>
<descr>
<p>
Not implemented in the current LCL version. Updates to scroll bar visibility, 
position, or range are handled in the widgetset class.
</p>
</descr>
<seealso/>
</element>

<!-- private -->
<element name="TCustomListView.CNNotify">
<short>Handles the CN_NOTIFY message for the control.</short>
<descr>
<p>
<var>CNNotify</var> is a method used to handle control notification 
(CN_NOTIFY) messages received from the widgetset class for the control. The 
message in the <var>AMessage</var> argument contains additional information 
that tells the control the action to perform, and control-specific values for 
the action.
</p>
<p>
For TCustomListView and TListView, the message may contain List View 
Notification codes like the following:
</p>
<dl>
<dt>LVN_DELETEITEM</dt>
<dd>Deletes a specific list item on the control.</dd>
<dt>LVN_DELETEALLITEMS</dt>
<dd>Deletes all list items on the control.</dd>
<dt>LVN_COLUMNCLICK</dt>
<dd>Handles a mouse click on a column header.</dd>
<dt>LVN_ITEMCHANGED</dt>
<dd>
Updates the control when the focus, selection(s), or state values for a list 
item are changed.
</dd>
</dl>
<p>
CNNotify updates property values and calls methods in the class instance as 
needed to respond to the notification message.
</p>
<p>
Please note that LVN_ITEMCHANGING control notification is handled in the 
ListViewParentMsgHandler routine in the widgetset class for the Windows 
platform. Changes are accepted and applied when CanChange in the list view 
control returns <b>True</b>. No additional processing is performed for the 
notification message in the Windows message process loop.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.CNNotify.AMessage">
<short>Message examined in the method.</short>
</element>

<element name="TCustomListView.CNDrawItem">
<short>
Handles the CN_DRAWITEM control notification message for the control.
</short>
<descr>
<p>
<var>CNDrawItem</var> is a method used to handle the CN_DRAWITEM control 
notification message for the list view control. CNDrawItem uses the Canvas 
for the control to perform drawing operations needed to draw a list item or 
area on the control. No actions are performed in the method if the control 
Canvas has not been assigned.
</p>
<p>
Message contains information about the list item or area drawn on the 
control, including:
</p>
<dl>
<dt>DC</dt>
<dd>The device context (handle) assigned to the control Canvas.</dd>
<dt>ItemID</dt>
<dd>
Ordinal position in Items for the list item drawn in the method, or -1 when a 
given area on the control is filled.
</dd>
<dt>ItemState</dt>
<dd>Drawing state for the list item.</dd>
<dt>Area</dt>
<dd>Rectangular area filled with the Brush for the control.</dd>
</dl>
<p>
If the message contains a valid ItemID (not -1), the DrawItem method is 
called to draw the list item in the specified state. If the ItemID is -1, the 
FillRect method in Canvas is called to fill the specified Area using the 
Brush for the control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.CNDrawItem.Message">
<short>Message examined in the method.</short>
</element>

<element name="TCustomListView.InvalidateSelected">
<short>Clears the current selection for the control.</short>
<descr>
<p>
<var>InvalidateSelected</var> is a method used to clear the current selection 
for the control. It sets the value in the Selected property to <b>Nil</b>, 
and resets the internal member used to track the selected item in OwnerData 
mode. It also updates the control flags to remove the value lffSelectedValid.
</p>
<p>
InvalidateSelected is called when a list item is deleted which is the current 
value in Selected, or when all list items are deleted for the control. It is 
also called when a new value is assigned to Selected.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.ImageResolutionHandleDestroyed">
<short>
Implements the event handler signalled when the handle for an image list 
resolution is freed.
</short>
<descr>
<p>
<var>ImageResolutionHandleDestroyed</var> is assigned (in the constructor) as 
the <var>OnDestroyResolutionHandle</var> event handler in the change links 
for image lists used in the list view control.
</p>
<p>
It ensures that the handle for the control is valid before the image lists 
are set to <b>Nil</b> in the widgetset class instance, and the application is 
notified of the change. No actions are performed in the method when the 
handle has not been allocated for the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.SmallImages"/>
<link id="TCustomListView.LargeImages"/>
<link id="TCustomListView.StateImages"/>
<link id="TListViewImageList"/>
<link id="#lcl.imglist.TChangeLink.OnDestroyResolutionHandle">TChangeLink.OnDestroyResolutionHandle</link>
</seealso>
</element>
<element name="TCustomListView.ImageResolutionHandleDestroyed.Sender">
<short>
Object for the event notification. It must be case to TCustomImageList to 
access properties and methods specific to the class instance.
</short>
</element>
<element name="TCustomListView.ImageResolutionHandleDestroyed.AWidth">
<short>
Width for the image resolution being freed.
</short>
</element>
<element name="TCustomListView.ImageResolutionHandleDestroyed.AReferenceHandle">
<short>
Reference to the handle for the image resolution being freed.
</short>
</element>

<element name="TCustomListView.SetImageListAsync">
<short>
Performs an asynchronous notification when an image list in the control is 
changed.
</short>
<descr>
<p>
Calls SetImageListWS using the TListViewImageList value passed in the Data 
argument.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.SetImageListAsync.Data">
<short>Identifies the image list updated in the control.</short>
</element>

<element name="TCustomListView.FOnCreateItemClass"/>
<element name="TCustomListView.FOnDrawItem"/>

<element name="TCustomListView.HideEditor">
<short>Hides the editor control for the list view.</short>
<descr>
<p>
<var>HideEditor</var> is a method used to hide the 
<var>TCustomListViewEditor</var> instance used as the editor in the list view 
control.
</p>
<p>
HideEditor applies the current text in the editor to the selected Item by 
calling <var>DoEndEdit</var>. The Visible property in the editor is set to 
<b>False</b>. Values in the editor are reset, including the reference to the 
list item and the bounds for the editor control.
</p>
<p>
HideEditor is called when the list view control loses focus. It is also 
called when horizontal and vertical scroll messages are handled in the 
control, and when a column has been clicked.
</p>
<p>
Use <var>ShowEditor</var> to configure and display the editor for the current 
item in the list view control.
</p>
</descr>
<seealso>
<link id="TCustomListView.DoEndEdit"/>
<link id="TCustomListView.DoExit"/>
<link id="TCustomListView.ColClick"/>
<link id="TCustomListView.WmHScroll"/>
<link id="TCustomListView.WmVScroll"/>
<link id="TCustomListViewEditor"/>
</seealso>
</element>

<element name="TCustomListView.ShowEditor">
<short>Displays the editor for the list view control.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomListView.WMHScroll">
<short>Handles the LM_HSCROLL message for the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomListView.WMHScroll.Message">
<short>Message examined in the method.</short>
</element>

<element name="TCustomListView.WMVScroll">
<short>Handles the LM_VSCROLL message for the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomListView.WMVScroll.Message">
<short>Message examined in the method.</short>
</element>

<element name="TCustomListView.ShowEditorQueued">
<short>
Indicates if ShowEditor has been called asynchronously for the control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomListView.ItemDeleted">
<short>Called when the specified list item is removed from the list.</short>
<descr>
<p>
<var>ItemDeleted</var> is a method called when the specified list item is 
removed from the Items for the control.
</p>
<p>
ItemDeleted ensures that the list item in AItem is not referenced as a 
selected or focused item on the control. If AItem is the value in Selected, 
Selected is set to <b>Nil</b> and the control flags are updated to removed 
the valid selection flag (ffSelectedValid). If AItem is the focused list item 
on the control, the focus reference is set to <b>Nil</b>.
</p>
<p>
ItemDeleted is called when the TListItem instance in AItem is freed from the 
container in Items. ItemDeleted calls DoDeletion to execute the Delete method 
in TCustomListView (when not overridden) or signal the OnDeletion event 
handler (when assigned).
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.ItemDeleted.AItem">
<short>TListItem instance deleted from the Items for the control.</short>
</element>

<element name="TCustomListView.ItemInserted">
<short>
Performs actions when a list item has been inserted in the Items collection.
</short>
<descr>
<p>
Calls the <var>DoInsert</var> method to execute an overridden 
<var>InsertItem</var> method, or to signal the <var>OnInsert</var> event 
handler for the list item in <var>AItem</var>. Called from the 
<var>InsertItem</var> method in <var>TListItems</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.DoInsert"/>
<link id="TCustomListView.InsertItem"/>
<link id="TCustomListView.OnInsert"/>
<link id="TListItems.InsertItem"/>
<link id="TListItem"/>
</seealso>
</element>
<element name="TCustomListView.ItemInserted.AItem">
<short>List item for the insert notification.</short>
</element>

<element name="TCustomListView.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomListView.GetControlClassDefaultSize">
<short>Gets the default size for new instances of the class.</short>
<descr>
<p>
<var>GetControlClassDefaultSize</var> is an overridden TSize class function 
used to get the default size for new instances of the class type. In 
TCustomListView, the default dimensions are 250 pixels wide by 150 pixels 
high.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.GetControlClassDefaultSize.Result">
<short>
TSize instance with the default dimensions for a new instance of the class.
</short>
</element>

<element name="TCustomListView.InitializeWnd">
<short>
Calls the inherited method, and sets default values in properties.
</short>
<descr>
<p>
<var>InitializeWnd</var> - calls inherited method, then sets style, adds 
columns, sets imagelists and item depending properties (scroll bars, sorting 
etc), adds items and sets other miscellaneous properties (default item 
height, hot track styles, hover time etc).
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
</seealso>
</element>

<element name="TCustomListView.FinalizeWnd">
<short>Frees the window handle and other resources for the control.</short>
<descr>
<p>
<var>FinalizeWnd</var> retrieves the cached origin for the list view and 
finalizes the items and columns for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.FinalizeWnd">TWinControl.FinalizeWnd</link>
</seealso>
</element>

<element name="TCustomListView.DestroyWnd" link="#lcl.controls.TWinControl.DestroyWnd"/>
<element name="TCustomListView.BeginAutoDrag" link="#lcl.controls.TControl.BeginAutoDrag"/>

<element name="TCustomListView.CreateListItem">
<short>
Signals the OnCreateItemClass event handler to get the class type used for 
new list items, and creates a new list item.
</short>
<descr>
<p>
<var>TListItemClass</var> is the default class reference used to create the 
list item in the method. Use the <var>OnCreateItemClass</var> event handler 
to provide an alternate class type used for list Items in the control.
</p>
<p>
<var>Items</var> is assigned as the owner for the list item instance created 
in the method.
</p>
<p>
CreateListItem is called from the <var>Add</var> method in 
<var>TListItems</var> when an <var>Owner</var> has been assigned for the 
container.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnCreateItemClass"/>
<link id="TCustomListView.Items"/>
<link id="TListItem"/>
<link id="TListItemClass"/>
<link id="TListItems.Add"/>
<link id="TListItems.Owner"/>
</seealso>
</element>
<element name="TCustomListView.CreateListItem.Result">
<short>List item created in the method.</short>
</element>

<element name="TCustomListView.CreateListItems">
<short>
Creates a new TListItems instance used in the Items property.
</short>
<descr>
<p>
<var>CreateListItems</var> allocates the container used for the 
<var>Items</var> property when <var>OwnerData</var> is set to <b>False</b>. 
It creates and returns a new <var>TListItems</var> instance using the list 
view control as the Owner of the items in the container. A 
<var>TOwnerDataListItems</var> instance is allocated for use in Items when
OwnerData is changed to <b>True</b>.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.OwnerData"/>
<link id="TListItems"/>
<link id="TOwnerDataListItems"/>
</seealso>
</element>
<element name="TCustomListView.CreateListItems.Result">
<short>TListItems instance created in the method.</short>
</element>

<element name="TCustomListView.CanEdit">
<short>
Determines if the specified list Item can be edited in the control.
</short>
<descr>
<p>
<var>CanEdit</var> is a <var>Boolean</var> function used to determine if the 
editor can be displayed and activated for the specified list Item. The 
default return value is <b>True</b>.
</p>
<p>
CanEdit signals the <var>OnEditing</var> event handler (when assigned) where 
the return value can be modified. The event handler can examine values in the 
<var>Item</var> argument, the list view instance, or use other user-specified 
criteria to determine the return value.
</p>
<p>
CanEdit is called from the <var>ShowEditor</var> method, and occurs before 
the Editor in the control is configured and displayed. Use the 
<var>Readonly</var> property to prevent ShowEditor from being called when 
keyboard (F2) and mouse click events are handled in the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnEditing"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.OwnerData"/>
<link id="TCustomListView.Readonly"/>
<link id="TCustomListView.SelCount"/>
<link id="TListItem"/>
</seealso>
</element>
<element name="TCustomListView.CanEdit.Result">
<short>
<b>True</b> if the editor can be displayed and activated for the specified 
list item.
</short>
</element>
<element name="TCustomListView.CanEdit.Item">
<short>List item to examine in the method.</short>
</element>

<element name="TCustomListView.Change">
<short>
<var>Change</var> - Internal procedure to simulate the <var>OnChange</var> 
event.
</short>
<descr>
<p>
This is an internal procedure which is called after an item has been changed. 
It is a programmatic method for simulating the <var>OnChange</var> event if 
the programmer has assigned a method to this event.
</p>
</descr>
</element>
<element name="TCustomListView.Change.AItem">
<short/>
</element>
<element name="TCustomListView.Change.AChange">
<short/>
</element>

<element name="TCustomListView.CanChange">
<short>
Indicates whether a change notification can be applied for an item on the list 
view control.
</short>
<descr>
<p>
<var>CanChange</var> is a <var>Boolean</var> function used to determine whether 
a change notification message for an item in a list view control can be 
accepted and applied. CanChange is called from the widgetset class instance, 
and occurs when change notification messages are handled for the list view 
control.
</p>
<p>
CanChange signals the OnChanging event handler (when assigned) to determine the 
return value for the method. The return value is <b>True</b> if the changed 
value in AItem is accepted and can be applied to the list item. The return 
value is <b>False</b> if the modification is rejected in the OnChanging event 
handler.
</p>
<remark>
Interestingly, the return value is True if AChange contains an Integer value 
that is <b>not</b> represented in the TItemChange enumeration. In this case, 
the OnChanging event is <b>not</b> signalled.
</remark>
<p>
In the current LCL implementation, CanChange and OnChanging apply to the 
Windows widgetset only. Other platforms do not currently generate change 
notifications for item values.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomListView.OnChanging"/>
<link id="TLVChangingEvent"/>
<link id="TItemChange"/>
</seealso>
</element>
<element name="TCustomListView.CanChange.Result">
<short>
Returns <b>True</b> if the modified value in the list item is accepted.
</short>
</element>
<element name="TCustomListView.CanChange.AItem">
<short>
List item with the modified value examined in the method.
</short>
</element>
<element name="TCustomListView.CanChange.AChange">
<short>
Indicates which value in the list item has been modified. Corresponds to the 
ordinal values in the TItemChange enumeration.
</short>
</element>

<element name="TCustomListView.ColClick">
<short>
Performs actions to handle a mouse click on a Report view column header.
</short>
<descr>
<p>
<var>ColClick</var> is a method used to handle a mouse click on a column 
header when the list view control is in Report view (ViewStyle = vsReport).
</p>
<p>
ColClick ensures that the Editor for the control is hidden when it has been 
assigned and displayed for the control.
</p>
<p>
AColumn is the TListColumn instance representing the column header clicked on 
the control. The OnColumnClick event handler is signalled (when assigned) if 
ColumnClick is set to <b>True</b>. The event handler can be used to adjust 
property values in the column argument or the list view control as needed.
</p>
<p>
ColClick uses the value in AutoSort to determine if the control is updated to 
reflect a change to the sort column or its order indicator. No additional 
actions are performed when AutoSort is <b>False</b> or SortType is stNone.
</p>
<p>
When AutoSort is set to <b>True</b>, the Index in AColumn is used to set the 
value for the SortColumn property. When AutoSortIndicator is enabled, the 
Columns for the control are updated to clear any previous sort indicators 
when a new sort column has been clicked. The sort indicator in the AColumn 
argument is also updated. If AColumn was already the SortColumn for the 
control, the value in SortDirection is toggled between it ascending and 
descending values.
</p>
<p>
ColClick is called when the LVN_COLUMNCLICK control notification message is 
handled for the list view control.
</p>
</descr>
</element>
<element name="TCustomListView.ColClick.AColumn">
<short>List view column clicked in the header for the control.</short>
</element>

<element name="TCustomListView.Delete">
<short>Deletes the specified list item.</short>
<descr>
<p>
<var>Delete</var> is a method used to delete the list item specified in AItem.
</p>
<p>
In Delphi, Delete is called when Items.Delete is executed. The OnDeletion 
event handler is signalled each time the method is called, even when list 
items are freed from the Items container.
</p>
<p>
The Lazarus implementation differs. It uses a flag value in AItem to 
determine if the method has been called when the list item is freed, or when 
the Delete method in the list item has been called explicitly.
</p>
<p>
Delete is called from the DoDeletion method if an overridden Delete method 
has been implemented. The OnDeletion event handler is signalled when Delete 
has been explicitly called, and when the Delete method has not been 
overridden.
</p>
<p>
While not 100% Delphi compatible, it is more compatible than previous LCL 
versions.
</p>
</descr>
<seealso>
<link id="TCustomListView.DoDeletion"/>
<link id="TCustomListView.OnDeletion"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.ItemDeleted"/>
<link id="TListItem.Delete"/>
<link id="TListItems.Delete"/>
</seealso>
</element>
<element name="TCustomListView.Delete.AItem">
<short>List item deleted in the method.</short>
</element>

<element name="TCustomListView.DoDeletion">
<short>Performs actions needed to delete the specified list item.</short>
<descr>
<p>
<var>DoDeletion</var> ensures an overridden <var>Delete</var> method in a 
descendent class is always executed for the list item in AItem. If the method 
has been overridden, the <var>OnDeletion</var> event handler is signalled 
(when assigned).
</p>
<p>
DoDeletion is called from <var>ItemDeleted</var>, and occurs after the value 
in <var>LastSelected</var> has been updated.
</p>
</descr>
<seealso>
<link id="TCustomListView.Delete"/>
<link id="TCustomListView.ItemDeleted"/>
<link id="TCustomListView.OnDeletion"/>
<link id="TCustomListView.Items"/>
<link id="TListItem.Delete"/>
<link id="TListItems.Delete"/>
</seealso>
</element>
<element name="TCustomListView.DoDeletion.AItem">
<short>List view item deleted in the method.</short>
</element>

<element name="TCustomListView.DoInsert">
<short>Performs actions needed to insert the specified list item.</short>
<descr>
<p>
<var>DoInsert</var> ensures an overridden <var>Insert</var> method in a 
descendent class is always executed for the list item in AItem. If the method 
has been overridden, the <var>OnInsert</var> event handler is signalled (when 
assigned).
</p>
<p>
DoInsert is called from the ItemInserted method which occurs when the list 
item is stored in the Items property.
</p>
</descr>
<seealso>
<link id="TCustomListView.ItemInserted"/>
<link id="TCustomListView.OnInsert"/>
<link id="TCustomListView.Items"/>
<link id="TListItems.Insert"/>
<link id="TListItems.InsertItem"/>
</seealso>
</element>
<element name="TCustomListView.DoInsert.AItem">
<short>List view item inserted in the method.</short>
</element>

<element name="TCustomListView.InsertItem">
<short>Inserts an Item into the List.</short>
<descr>
<p>
Signals the OnInsert event handler (when assigned) using the value in AItem 
as an argument.
</p>
<p>
InsertItem is called from the DoInsert method when an overridden method has 
been implemented in a descendent class and called from ItemInserted.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnInsert"/>
<link id="TCustomListView.DoInsert"/>
<link id="TCustomListView.ItemInserted"/>
<link id="TListItem"/>
</seealso>
</element>
<element name="TCustomListView.InsertItem.AItem">
<short>
Item with the values inserted into the Items for the control.
</short>
</element>

<element name="TCustomListView.DoItemChecked">
<short>
Synchronizes the checked state for an item with the widgetset class.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomListView.DoItemChecked.AItem">
<short>
List item with the checked state updated in the method.
</short>
</element>

<element name="TCustomListView.DoSelectItem">
<short>
Signals the OnSelectItem event handler when the current selection is changed.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomListView.DoSelectItem.AItem">
<short>
List item for the event notification.
</short>
</element>
<element name="TCustomListView.DoSelectItem.ASelected">
<short>
<b>True</b> if the list item is selected.
</short>
</element>

<element name="TCustomListView.DoAutoAdjustLayout">
<short>
Adjusts the layout for the list view using the specified arguments.
</short>
<descr>
<p>
<var>DoAutoAdjustLayout</var> is an overridden procedure used to adjust the 
layout for the list view using the specified arguments. DoAutoAdjustLayout 
calls the inherited method.
</p>
<p>
DoAutoAdjustLayout extends the ancestor method to include support for sizing 
the columns in the list view using the proportions specified in AXProportion 
and AYProportion for the display density (DPI). DoAutoAdjustLayout also 
ensures that the widgetset class is initialized for each of the image list 
sizes represented by the TListViewImageList enumeration.
</p>
<p>
No actions are performed in the method if AMode does not include one of the 
following values: lapAutoAdjustWithoutHorizontalScrolling or 
lapAutoAdjustForDPI.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.DoAutoAdjustLayout">TControl.DoAutoAdjustLayout</link>
</seealso>
</element>
<element name="TCustomListView.DoAutoAdjustLayout.AMode">
<short>Layout adjustment policy used in the method.</short>
</element>
<element name="TCustomListView.DoAutoAdjustLayout.AXProportion">
<short>Factor used to adjust widths.</short>
</element>
<element name="TCustomListView.DoAutoAdjustLayout.AYProportion">
<short>Factor used to adjust heights.</short>
</element>

<element name="TCustomListView.DoSetBounds">
<short>Set the bounds for the control to the specified values.</short>
<descr>
<p>
Resizes the last column (if enabled) when the bounds for the control have 
been changed.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.DoSetBounds.ALeft">
<short>Left coordinate for the control.</short>
</element>
<element name="TCustomListView.DoSetBounds.ATop">
<short>Top coordinate for the control.</short>
</element>
<element name="TCustomListView.DoSetBounds.AWidth">
<short>Width for the control.</short>
</element>
<element name="TCustomListView.DoSetBounds.AHeight">
<short>Height for the control.</short>
</element>

<element name="TCustomListView.DoEndEdit">
<short>
Performs actions when editing has been completed for a list item.
</short>
<descr>
<p>
Calls an overridden Edit method when available, or signals the OnEdited event 
handler (when assigned).
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.DoEndEdit.AItem">
<short/>
</element>
<element name="TCustomListView.DoEndEdit.AValue">
<short/>
</element>

<element name="TCustomListView.Edit">
<short>
Signals OnEdited to validate the editor text, and updates the caption for the 
specified list item.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomListView.Edit.AItem">
<short>List item updated in the method.</short>
</element>

<element name="TCustomListView.ImageChanged">
<short>
Implements the event handler signalled when an image on the control is 
changed.
</short>
<descr>
<p>
Assigned in the constructor as the OnChange event handler in TChangeLink 
instances used for the control.
</p>
<p>
Please note that the current implementation is empty. This needs to be moved 
to the LCL interface since image changes can occur there.
</p>
</descr>
<seealso>
<link id="TCustomListView.Create"/>
<link id="#lcl.imglist.TChangeLink.OnChange">TChangeLink.OnChange</link>
</seealso>
</element>
<element name="TCustomListView.ImageChanged.Sender">
<short>Object for the event notification.</short>
</element>

<element name="TCustomListView.Loaded">
<short>
Performs actions when LCL component streaming is completed for the component.
</short>
<descr>
<p>
Creates columns in the widgetset class when the Handle for the control has 
been allocated. Calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
</seealso>
</element>

<element name="TCustomListView.Notification">
<short>
Handles the notification when a component is added to or removed from the 
class instance.
</short>
<descr>
<p>
Ensures that members for the LargeImages, SmallImages, and StateImages are 
set to <b>Nil</b> when the corresponding image list is removed.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.Notification.AComponent">
<short>Component for the notification.</short>
</element>
<element name="TCustomListView.Notification.Operation">
<short>Operation performed for the component.</short>
</element>

<element name="TCustomListView.IsCustomDrawn">
<short>
Returns <b>True</b> if a target is custom-drawn in the control.
</short>
<descr>
<p>
Indicates whether the control, items, or sub-items are custom-drawn using the 
event handlers available in the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnCustomDraw"/>
<link id="TCustomListView.OnCustomDrawItem"/>
<link id="TCustomListView.OnCustomDrawSubItem"/>
<link id="TCustomListView.OnAdvancedCustomDraw"/>
<link id="TCustomListView.OnAdvancedCustomDrawItem"/>
<link id="TCustomListView.OnAdvancedCustomDrawSubItem"/>
<link id="TCustomDrawTarget"/>
<link id="TCustomDrawStage"/>
</seealso>
</element>
<element name="TCustomListView.IsCustomDrawn.Result">
<short>
<b>True</b> when Target is a custom-drawn using event handlers in the control.
</short>
</element>
<element name="TCustomListView.IsCustomDrawn.ATarget">
<short>
Identifies which event handlers are checked for custom drawing routines.
</short>
</element>
<element name="TCustomListView.IsCustomDrawn.AStage">
<short>
Identifies the drawing stage and the corresponding event handlers examined in 
the method. Advanced event handlers are checked when set to a value other 
than cdPrePaint.
</short>
</element>

<element name="TCustomListView.CustomDraw">
<short>
Performs custom drawing in the specified rectangle and returns <b>True</b> on 
success.
</short>
<descr>
<p>
<var>CustomDraw</var> draws the list view control using the OnCustomDraw or 
OnAdvancedCustomDraw event handlers. OnCustomDraw is signalled (when 
assigned) if the drawing stage in AStage is cdPrePaint. OnAdvancedCustomDraw 
is signalled (when assigned).
</p>
<p>
The default return value is <b>True</b>, but may be modified in the event 
handlers if it is not able to render the control in the handler routine.
</p>
<p>
Use OnDrawItem and OnAdvancedCustomDrawItem to draw an individual list item 
on the control.
</p>
<p>
CustomDraw is called from the IntfCustomDraw method and occurs when the 
widgetset class instance redraws the LCL control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnCustomDraw"/>
<link id="TCustomListView.OnCustomDrawItem"/>
<link id="TCustomListView.OnAdvancedCustomDraw"/>
<link id="TCustomListView.OnAdvancedCustomDrawItem"/>
<link id="TCustomListView.IntfCustomDraw"/>
</seealso>
</element>
<element name="TCustomListView.CustomDraw.Result">
<short>
<b>True</b> if default drawing should be performed in the list view control. 
<b>False</b> is default drawing was handled in an event handler and can be 
skipped by the control.
</short>
</element>
<element name="TCustomListView.CustomDraw.ARect">
<short>
Bounds rectangle for the drawing operation.
</short>
</element>
<element name="TCustomListView.CustomDraw.AStage">
<short>
Drawing stage for the control. Affects the OnCustomDraw event handler.
</short>
</element>

<element name="TCustomListView.CustomDrawItem">
<short>
Custom draws the specified item and returns <b>True</b> on success.
</short>
<descr>
<p>
<var>CustomDrawItem</var> draws an item on the list view control using the 
OnCustomDrawItem or OnAdvancedCustomDrawItem event handlers (when assigned).
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.CustomDrawItem.Result">
<short>
<b>True</b> if default drawing should be performed in the list view control. 
<b>False</b> if default drawing was performed in the event handler and can be 
skipped by the control.
</short>
</element>
<element name="TCustomListView.CustomDrawItem.AItem">
<short>
List item drawn using the event handlers for the control.
</short>
</element>
<element name="TCustomListView.CustomDrawItem.AState">
<short>
Drawing state for the list item (Selected, Focused, Disabled, et. al.).
</short>
</element>
<element name="TCustomListView.CustomDrawItem.AStage">
<short>
Drawing stage for the list item. A value other than cdPrePaint causes the 
advanced event handler to be used.
</short>
</element>

<element name="TCustomListView.CustomDrawSubItem">
<short>
Performs custom drawing for the specified sub-item using the event handlers 
for the control.
</short>
<descr>
<p>
<var>CustomDrawSubItem</var> is a Boolean function used to
custom draw a sub-item on the list view control. The OnCustomDrawSubItem and 
OnAdvancedCustomDrawSubItem event handlers are signalled (when assigned) to 
perform the drawing operations needed for the item, sub-item, stage, and 
state arguments.
</p>
<p>
OnCustomDrawSubItem is signalled when Stage contains cdPrePaint. 
OnAdvancedCustomDrawSubItem is signalled for any of the values in the 
TCustomDrawStage enumeration.
</p>
<p>
CustomDrawSubItem is called from the IntfCustomDraw method.
</p>
</descr>
<seealso>
<link id="TCustomListView.IsCustomDrawn"/>
<link id="TCustomListView.OnCustomDrawSubItem"/>
<link id="TCustomListView.OnAdvancedCustomDrawSubItem"/>
<link id="TCustomListView.IntfCustomDraw"/>
<link id="TListItem.SubItems"/>
<link id="TCustomDrawStage"/>
<link id="TCustomDrawState"/>
</seealso>
</element>
<element name="TCustomListView.CustomDrawSubItem.Result">
<short>
<b>True</b> if default drawing for the sub-item needs to be performed in the 
list view control.
</short>
</element>
<element name="TCustomListView.CustomDrawSubItem.AItem">
<short>
List view item with the sub-item drawn in the method.
</short>
</element>
<element name="TCustomListView.CustomDrawSubItem.ASubItem">
<short>
Ordinal position for the sub-item drawn in the method.
</short>
</element>
<element name="TCustomListView.CustomDrawSubItem.AState">
<short>
Drawing state for the sub-item (selected, focused, disabled, et. al.).
</short>
</element>
<element name="TCustomListView.CustomDrawSubItem.AStage">
<short>
Drawing stage for the sub-item. cdPrePaint allows the OnCustomDrawSubItem 
event handler to be signalled.
</short>
</element>

<element name="TCustomListView.IntfCustomDraw">
<short>
<var>IntfCustomDraw</var> - uses the interface to perform custom drawing
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomListView.IntfCustomDraw.Result">
<short/>
</element>
<element name="TCustomListView.IntfCustomDraw.ATarget">
<short/>
</element>
<element name="TCustomListView.IntfCustomDraw.AStage">
<short/>
</element>
<element name="TCustomListView.IntfCustomDraw.AItem">
<short/>
</element>
<element name="TCustomListView.IntfCustomDraw.ASubItem">
<short/>
</element>
<element name="TCustomListView.IntfCustomDraw.AState">
<short/>
</element>
<element name="TCustomListView.IntfCustomDraw.AStage">
<short/>
</element>
<element name="TCustomListView.IntfCustomDraw.ARect">
<short/>
</element>

<element name="TCustomListView.GetUpdateCount">
<short>Gets the value for the internal update counter.</short>
<descr>
<p>
The internal counter is maintained when the BeginUpdate and EndUpdate methods 
are called.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.GetUpdateCount.Result">
<short>Value for the internal update counter in the control.</short>
</element>

<element name="TCustomListView.DrawItem">
<short>Draws the specified list item with a given state.</short>
<descr>
<p>
Signals the OnDrawItem event handler (when assigned) to draw the list item. 
Calls the FillRect and TextOut methods in the control Canvas if the event 
handler has not been assigned.
</p>
<p>
DrawItem is called when a CN_DRAWITEM message us received and handled for the 
control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnDrawItem"/>
<link id="TCustomListView.Canvas"/>
<link id="#lcl.graphics.TCanvas.FillRect">TCanvas.FillRect</link>
<link id="#lcl.graphics.TCanvas.TextOut">TCanvas.TextOut</link>
<link id="#lcl.lcltype.TOwnerDrawState">TOwnerDrawState</link>
</seealso>
</element>
<element name="TCustomListView.DrawItem.AItem">
<short>
List view item drawn in the method.
</short>
</element>
<element name="TCustomListView.DrawItem.ARect">
<short>
TRect instance with the bounds for the list item.
</short>
</element>
<element name="TCustomListView.DrawItem.AState">
<short>
Drawing state applied to the list item in the OnDrawItem event handler. 
Ignored when default drawing is performed for the list item.
</short>
</element>

<element name="TCustomListView.DoGetOwnerData">
<short>
Performs actions needed to get list item data when OwnerData is <b>True</b>.
</short>
<descr>
<p>
Signals the OnData event handler (when assigned) to get the data for a list 
item. Properties in Item should be updated in the event handler with the 
values for the list item.
</p>
<p>
DoGetOwnerData is called when the internal TOwnerDataListItem instance in the 
control loads its value(s) by signalling the OnData event handler in the 
control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.DoGetOwnerData.Item">
<short>List item updated in the method.</short>
</element>

<element name="TCustomListView.DoOwnerDataHint">
<short>
Signals the OnDataHint event handler (when assigned).
</short>
<descr>
<p>
The AStartIndex and AEndIndex parameters are passed as arguments to the 
OnDataHint event handler. They contain the index positions for the virtual 
list items which are visible on the control. The values are extracted from a 
caching hint provided by the widgetset class instance.
</p>
<p>
The return value is <b>True</b> if the OnDataHint event handler has been 
assigned for the control.
</p>
<p>
Use OnDataHint to perform actions needed to pre-load the content for the 
specified range of list items into the virtual data source when OwnerData is 
enabled.
</p>
<p>
Use the OnData event handler to populate properties in the currently selected 
list item when OwnerData is enabled.
</p>
</descr>
<version>
Modified in LCL 3.0 to provide support for caching hints in the widgetset 
class on the Windows platform.
</version>
<seealso>
<link id="TCustomListView.OnDataHint"/>
<link id="TCustomListView.OnData"/>
</seealso>
</element>
<element name="TCustomListView.DoOwnerDataHint.Result">
<short>
<b>True</b> if the OnDataHint event handler is assigned.
</short>
</element>
<element name="TCustomListView.DoOwnerDataHint.AStartIndex">
<short>
First index position needed for the visible virtual list items when OwnerData 
is enabled.
</short>
</element>
<element name="TCustomListView.DoOwnerDataHint.AEndIndex">
<short>
Final index position needed for the visible virtual list items when OwnerData 
is enabled.
</short>
</element>

<element name="TCustomListView.DoOwnerDataStateChange">
<short>
Signals the OnDataStateChange event handler (when assigned).
</short>
<descr>
<remark>
Not used in the current LCL implementation.
</remark>
</descr>
<seealso/>
</element>
<element name="TCustomListView.DoOwnerDataStateChange.Result">
<short>
Returns <b>True</b> if the OnDataStateChange event handler has been assigned 
for the control.
</short>
</element>
<element name="TCustomListView.DoOwnerDataStateChange.AStartIndex">
<short/>
</element>
<element name="TCustomListView.DoOwnerDataStateChange.AEndIndex">
<short/>
</element>
<element name="TCustomListView.DoOwnerDataStateChange.AOldState">
<short/>
</element>
<element name="TCustomListView.DoOwnerDataStateChange.ANewState">
<short/>
</element>

<element name="TCustomListView.DoOwnerDataFind">
<short>
Implements incremental search in list items when OwnerData has been enabled.
</short>
<descr>
<p>
<var>DoOwnerDataFind</var> is an Integer function used to implement 
incremental search features in the list view control when OwnerData (or 
virtual mode) has been enabled. Incremental search is activated when normal 
data keys (not control or navigation keys) are pressed while the control is 
not editing a list item. DoOwnerDataFind is called when a LVN_ODFINDITEM 
message is received in the key handler for the list view control.
</p>
<p>
The arguments to the method specify the search parameters and criteria, and 
are passed to the OnDataFind event handler. The return value contains the 
ordinal position in the external virtual data where list item with the 
specified value was located, or -1 when a match is not found. An application 
must implement a handler routine in OnDataFind to perform the search using 
the specified values.
</p>
<p>
No actions are performed in the method, and the return value is -1, when 
OnDataFind has not been assigned.
</p>
<remark>
DoOwnerDataFind is implemented for the Windows platform only in the current 
LCL version.
</remark>
</descr>
<version>
Implemented in version 2.2.2 for the Windows platform.
</version>
<seealso>
<link id="TCustomListView.OnDataFind"/>
</seealso>
</element>
<element name="TCustomListView.DoOwnerDataFind.AFind">
<short>
Type of search, such as partial or exact string match or find nearest item.
</short>
</element>
<element name="TCustomListView.DoOwnerDataFind.AFindString">
<short>
Value used to locate a list item in the owner data.
</short>
</element>
<element name="TCustomListView.DoOwnerDataFind.AFindPosition">
<short>
TPoint instance with the initial position where the search is performed (used 
for find nearest item searches).
</short>
</element>
<element name="TCustomListView.DoOwnerDataFind.AFindData">
<short>
Pointer to the data structure with the values used in the search.
</short>
</element>
<element name="TCustomListView.DoOwnerDataFind.AStartIndex">
<short>
Ordinal position in the owner data where the search is started.
</short>
</element>
<element name="TCustomListView.DoOwnerDataFind.ADirection">
<short>
Indicates the search direction.
</short>
</element>
<element name="TCustomListView.DoOwnerDataFind.AWrap">
<short>
<b>True</b> if the search can continue to the beginning of the owner data if 
a match is not found.
</short>
</element>

<element name="TCustomListView.FMultiSelList">
<short>
Member used to store the multi-selection list in the class instance.
</short>
</element>

<element name="TCustomListView.GetFirstSelected">
<short>
Gets the first item in the list view with its Selected property set to 
<b>True</b>.
</short>
<descr>
<p>
The return value is the <var>TListItem</var> instance returned from the 
corresponding method in the widgetset class instance.
</p>
<p>
<var>GetFirstSelected</var> is called when the value for the Selected 
property is read when both MultiSelect and OwnerData are enabled.
</p>
</descr>
<seealso>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.MultiSelect"/>
<link id="TCustomListView.OwnerData"/>
<link id="TListItem"/>
</seealso>
</element>
<element name="TCustomListView.GetFirstSelected.Result">
<short>
The first TListItem instance with its Selected property set to <b>True</b>.
</short>
</element>

<element name="TCustomListView.InitMultiSelList">
<short>
Enables or disables the internal multi-selection list in the control.
</short>
<descr>
<p>
Calls the corresponding method in the widgetset class instance to apply the 
value in the AEnabled argument. When AEnabled is <b>True</b>, the widget 
(re-)creates the internal <var>TIntegerList</var> used for multi-selected 
items when both <var>OwnerData</var> and <var>MultiSelect</var> are set to 
<b>True</b>.
</p>
</descr>
<seealso>
<link id="TCustomListView.MultiSelect"/>
<link id="TCustomListView.OwnerData"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.LastSelected"/>
<link id="TCustomListView.FMultiSelList"/>
<link id="#lazutils.integerlist.TIntegerList">TIntegerList</link>
</seealso>
</element>
<element name="TCustomListView.InitMultiSelList.AEnable">
<short>
<b>True</b> if the internal multi-selection list needs to be initialized. 
<b>False</b> when MultiSelect is not enabled and the list is not required.
</short>
</element>

<element name="TCustomListView.UpdateMultiSelList">
<short>
Updates the specified list item in the multi-selection list for the control.
</short>
<descr>
<p>
<var>UpdateMultiSelList</var> is a method used to add or remove the list item 
specified in <var>AItem</var> in the multi-selection list for the control. It 
calls the corresponding method in the widgetset class instance to apply the 
argument values.
</p>
<p>
The widget ensures that the internal <var>TIntegerList</var> instance used 
for multi-selected items is allocated when needed.
</p>
<p>
AItem is the <var>TListItem</var> instance added or removed in the method. 
When Add is <b>True</b>, the index for the list item is added to the 
multi-selection list if it is not already present. The Sort method in the 
list is called to reorder the index values after the addition. When Add is 
<b>False</b>, the index for the list item is deleted from the multi-selection 
list.
</p>
<p>
UpdateMultiSelList is called from the CNNotify method when LVN_ITEMCHANGED 
messages are handled for the control and both <var>MultiSelect</var> and 
<var>OwnerData</var> are enabled.
</p>
</descr>
<seealso>
<link id="TCustomListView.FMultiSelList"/>
<link id="TCustomListView.MultiSelect"/>
<link id="TCustomListView.OwnerData"/>
<link id="TListItem.Index"/>
<link id="#lazutils.integerlist.TIntegerList">TIntegerList</link>
</seealso>
</element>
<element name="TCustomListView.UpdateMultiSelList.AItem">
<short>
The TListItem instance that is added or removed in the method.
</short>
</element>
<element name="TCustomListView.UpdateMultiSelList.Add">
<short>
<b>True</b> to add the list item to the multi-selection list. <b>False</b> to 
remove the item from the multi-selection list.
</short>
</element>

<element name="TCustomListView.DblClick">
<short>
Performs actions needed when the control is double clicked.
</short>
<descr>
<p>
Calls the inherited DblClick method. Ensures that ShowEditorQueued is set to 
<b>True</b> when the control has an assigned editor and is not marked as 
read-only.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.DblClick">TControl.DblClick</link>
</seealso>
</element>

<element name="TCustomListView.KeyDown">
<short>Handles key down messages for the control.</short>
<descr>
<p>
Handles an F2 function key pressed when the control has focus. Ensures that 
the editor is displayed when the control is not marked as ReadOnly. The 
keystroke is digested (set to zero).
</p>
<p>
If the control is marked as ReadOnly, or Key is not the unshifted F2 function 
key, the inherited KeyDown method is called to handle the values in Key and 
Shift.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.KeyDown">TWinControl.KeyDown</link>
</seealso>
</element>
<element name="TCustomListView.KeyDown.Key">
<short>Virtual key code examined in the method.</short>
</element>
<element name="TCustomListView.KeyDown.Shift">
<short>Shift, Alt, or Ctrl modifier for the key code.</short>
</element>

<element name="TCustomListView.AllocBy">
<short>
Reduces allocation overhead in the widgetset class by increasing the internal 
buffer capacity by this block size.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomListView.AutoSort">
<short>
Controls automatic updates to the sort column and order indicator for the 
control.
</short>
<descr>
<p>
<var>AutoSort</var> is a <var>Boolean</var> property used to determine 
whether the sort column and order indicator are automatically updated when a 
Report view column header on the control is clicked. The default value for 
the property is <b>True</b>.
</p>
<p>
When enabled, the value in SortColumn is set to the position for the clicked 
column header. Use AutoSortIndicator to control whether the sort indicator is 
automatically updated for the Columns defined for the control.
</p>
<p>
AutoSort has no effect when SortType is set to stNone.
</p>
</descr>
<seealso>
<link id="TCustomListView.SortColumn"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.SortDirection"/>
<link id="TCustomListView.AutoSortIndicator"/>
<link id="TCustomListView.Columns"/>
<link id="TCustomListView.ColClick"/>
<link id="TCustomListView.OnColumnClick"/>
<link id="TListColumn.SortIndicator"/>
</seealso>
</element>

<element name="TCustomListView.AutoSortIndicator">
<short>
Indicates if the control automatically changes the column and/or order 
indicator when a column is clicked.
</short>
<descr>
<p>
<var>AutoSortIndicator</var> is a <var>Boolean</var> property which controls 
whether the sort column and order indicator are changed when a Report view 
column header is clicked. The default value for the property is <b>False</b>. 
When set to <b>True</b>, a clicked column causes the sort indicator to be 
updated to reflect the value in <var>SortDirection</var>.
</p>
<p>
AutoSortIndicator is significant when <var>AutoSort</var> has been enabled 
and <var>SortType</var> is not set to <var>stNone</var>.
</p>
</descr>
<seealso>
<link id="TCustomListView.ColClick"/>
<link id="TCustomListView.OnColumnClick"/>
<link id="TCustomListView.SortColumn"/>
<link id="TCustomListView.SortDirection"/>
<link id="TCustomListView.SortType"/>
<link id="TListColumn.SortIndicator"/>
</seealso>
</element>

<element name="TCustomListView.AutoWidthLastColumn">
<short>
Resizes the last visible column to fill the remaining display area for the 
control.
</short>
<descr>
<p>
<var>AutoWidthLastColumn</var> is a <var>Boolean</var> property which 
indicates if the last visible column is expanded to fill any unused display 
area for the list view control. When set to <b>True</b>, the affected column 
is located its Width is calculated and applied.
</p>
<p>
AutoWidthLastColumn is relevant when <var>ViewStyle</var> contains 
<var>vsList</var> or <var>vsReport</var>, and the <var>Columns</var> property 
has been populated for the list view control.
</p>
</descr>
<seealso>
<link id="TCustomListView.ViewStyle"/>
<link id="TCustomListView.Columns"/>
<link id="TCustomListView.DoSetBounds"/>
</seealso>
</element>

<element name="TCustomListView.ColumnClick">
<short>
Enables or disables OnColumnClick events for column headers on the control.
</short>
<descr>
<p>
<var>ColumnClick</var> is an indexed <var>Boolean</var> property which 
controls whether the <var>OnColumnClick</var> event handler is signalled when 
a Report view column header is clicked. It also controls whether a column 
header is drawn using the "pressed" or "down" state while the mouse button is 
down on a column header. The default value for the property is <b>True</b>, and 
enables both the event handler and the header drawing state (on supported 
platforms).
</p>
<p>
ColumnClick is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
<remark>
Changing the property value causes the handle for the widgetset class to be 
recreated on the Windows platform. This causes multi-selections to be cleared - 
but the last item in the multi-selection is retained as the selected item.
</remark>
<p>
ColumnClick is used in the <var>ColClick</var> method, which is called when 
the LVN_COLUMNCLICK control notification message is handled for the list view 
control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnColumnClick"/>
<link id="TCustomListView.ColClick"/>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.Columns">
<short>
Collection with the column definitions for the list view control (size, 
alignment, image index, etc.).
</short>
<descr>
<p>
Columns is a TListColumns property which contains the column definitions for 
the list view control. The TListItem instances in the collection contain 
information about the caption for the column header, column width, image, and 
sort indicator value. Assigning a new collection to the property causes the 
designer for the parent form to be updated at design-time.
</p>
<p>
Column is significant when the ViewStyle for the control is set to vsReport. 
Report view is the only style where the columns are used or displayed. Set 
the value in ShowColumnHeaders to <b>True</b> to display the column header 
defined in the collection.
</p>
<p>
Columns are used at run-time to handle column click notifications and changes 
to the sort indicator. Use AutoSort, AutoSortIndicator, SortColumn, SortType, 
and SortDirection to access or maintain values for items in the collection.
</p>
<p>
The Count property in Columns also provides the value for the ColumnCount 
property in the list view control.
</p>
<p>
Use the indexed Column property to access a column definition by its ordinal 
position in the Columns collection.
</p>
<remark>
The Columns property is not supported for the GTK2 widgetset.
</remark>
</descr>
<seealso>
<link id="TCustomListView.ViewStyle"/>
<link id="TCustomListView.ColumnCount"/>
<link id="TCustomListView.Column"/>
<link id="TCustomListView.SortColumn"/>
<link id="TCustomListView.AutoSort"/>
<link id="TCustomListView.AutoSortIndicator"/>
<link id="TCustomListView.AutoWidthLastColumn"/>
<link id="TListColumns"/>
<link id="TListColumn"/>
</seealso>
</element>

<element name="TCustomListView.DefaultItemHeight">
<short>Default height for items displayed on the list view control.</short>
<descr>
<p>
Used in the widgetset class to render the items on the list view control. If 
the property is set to zero (0) or a negative value, the value defaults to 20 
pixels. Changing the value for the property causes the widgetset class to be 
updated when its Handle has been assigned.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.HideSelection">
<short>
If control looses focus, don't paint selection background for selected 
item(s).
</short>
<descr>
<p>
<var>HideSelection</var> is a <var>Boolean</var> property which indicates if 
the selected item(s) for the list view are highlighted when the control loses 
focus. When set to <b>True</b>, the selected item(s) are redrawn to remove 
the selection highlighting. When set to <b>False</b>, the selection 
highlighting is retained when the control loses focus. The default value for 
the property is <b>True</b>.
</p>
<p>
HideSelection is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
<remark>
The Windows API documentation recommends setting HideSelection to 
<b>False</b> if the application uses Accessibility roles and descriptions.
</remark>
<remark>
HideSelection is not supported for the QT4, QT5, and QT6 widgetsets.
</remark>
</descr>
<seealso>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.HoverTime">
<short>
Time (in milliseconds) that the mouse cursor must hover over an item before 
its tool tip is shown.
</short>
<descr>
<p>
The default value for the property is -1, and indicates that a non-default 
value has not been assigned and that the default for the platform or 
operating system is used. Changing the property value causes the widgetset 
class to be updated when its Handle has been allocated.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.LargeImages">
<short>
Image list which contains "big" icons displayed for view styles on the control.
</short>
<descr>
<p>
A typical application might have two ImageLists: one of <var>LargeImages</var> 
and one of <var>SmallImages</var> containing two versions of the same 
collection of images, in large and small format. The index numbers for images 
in the first list would correspond to the same image with another size in the 
second list. LargeImages are used when the view style is set to vsIcon.
</p>
<p>
The <var>TImageList</var> instance can be created and populated at design-time 
using the editor available on the content menu in the form designer. It can 
also be created, populated, and assigned at run-time if needed. 
</p>
<p>
Use the LargeImagesWidth property to specify the width for the images in the 
list.
</p>
<p>
Use the Items property to access and maintain the ImageIndex used for each of 
the list items.
</p>
<p>
Use ViewStyle to control the layout and content for the list items on the 
control.
</p>
</descr>
<seealso>
<link id="TCustomListView.LargeImagesWidth"/>
<link id="TCustomListView.SmallImages"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.ViewStyle"/>
<link id="TListItem.ImageIndex"/>
<link id="TViewStyle"/>
</seealso>
</element>

<element name="TCustomListView.LargeImagesWidth">
<short>Contains the Width for the large images used in the list view.</short>
<descr>
<p>
<var>LargeImagesWidth</var> is an <var>Integer</var> property with the width 
for large images in the list view. The value indicates the image resolution 
requested from the LargeImages image list. If a resolution using the 
requested width does not already exist, it is created by scaling a candidate 
resolution for the image list.
</p>
<p>
The default value for the property is zero (<b>0</b>), and causes the width 
stored in LargeImages to be used for the large images.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.OwnerDraw">
<short>
Indicates if owner-draw mode is used for the control.
</short>
<descr>
<p>
<var>OwnerDraw</var> is a <var>Boolean</var> property which indicates if the 
control implements is own drawing routines instead of using the default 
drawing routines for list items on the control. The default value for the 
property is <b>False</b>.
</p>
<p>
When set to <b>True</b>, the OnDrawItem event handler is signalled to draw 
list items when the control is using the Report view style (ViewStyle = 
vsReport). The handler is signalled (when assigned) from the DrawItem method, 
and occurs when the CN_DRAWITEM control notification message is handled for 
the control. It should handle all aspects of drawing the list item to the 
control Canvas. If OnDrawItem has not been assigned, a basic default drawing 
routine is used.
</p>
<p>
OwnerDraw is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
</descr>
<seealso>
<link id="TCustomListView.OnDrawItem"/>
<link id="TCustomListView.DrawItem"/>
<link id="TCustomListView.ViewStyle"/>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.ScrollBars">
<short>Specifies the scroll bars visible for the control.</short>
<descr>
<p>
<var>ScrollBars</var> is a <var>TScrollStyle</var> property which specifies 
the scroll bars visible for the control. The default value for the property 
is <var>ssBoth</var>, and indicates that both horizontal and vertical scroll 
bars are always visible on the control.
</p>
<p>
See <var>TScrollStyle</var> for the values available in the property and 
their meanings.
</p>
<p>
Changing the value for the property causes the widgetset class to be updated 
when its Handle has been assigned.
</p>
</descr>
<seealso>
<link id="#lcl.stdctrls.TScrollStyle">TScrollStyle</link>
</seealso>
</element>

<element name="TCustomListView.ShowColumnHeaders">
<short>Show header area in ListView, which shows captions of columns.</short>
<descr>
<p>
<var>ShowColumnHeaders</var> is a <var>Boolean</var> property which indicates 
whether column headers are displayed for the Report view style (ViewStyle = 
vsReport). When enabled, the captions for the Columns defined for the control 
are displayed as column headers. The default value for the property is 
<b>True</b>.
</p>
<p>
ShowColumnHeaders is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
</descr>
<seealso>
<link id="TCustomListView.Columns"/>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
<link id="TListColumn.Caption"/>
</seealso>
</element>

<element name="TCustomListView.ShowWorkAreas">
<short>
Indicates if work area captions and highlights are enabled for the control.
</short>
<descr>
<p>
ShowWorkAreas is an indexed Boolean property used to configure whether work 
areas are displayed on the control.
</p>
<p>
ShowWorkAreas is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
<remark>
Work areas are not implemented (for any platform) in the current LCL version.
</remark>
</descr>
<seealso>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.SmallImages">
<short>
Image list which contains "small" icons used for view styles.
</short>
<descr>
<p>
A typical application might have two ImageLists: one of 
<var>LargeImages</var> and one of <var>SmallImages</var> containing two 
versions of the same collection of images, in large and small format. The 
index numbers for images in the first list would correspond to the same image 
with another size in the second list. SmallImages are displayed beside the text 
strings in the list view, and are used for the vsSmallIcon, vsList, and 
vsReport view styles.
</p>
<p>
The <var>TImageList</var> instance can be created and populated at design-time 
using the editor available on the content menu in the form designer. It can 
also be created, populated, and assigned at run-time if needed. 
</p>
<p>
Use the SmallImagesWidth property to specify the width for the images in the 
list.
</p>
<p>
Use the Items property to access and maintain the ImageIndex used for each of 
the list items.
</p>
<p>
Use ViewStyle to control the layout and content for the list items on the 
control.
</p>
</descr>
<seealso>
<link id="TCustomListView.SmallImagesWidth"/>
<link id="TCustomListView.LargeImages"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.ViewStyle"/>
<link id="TListItem.ImageIndex"/>
<link id="TViewStyle"/>
</seealso>
</element>

<element name="TCustomListView.SmallImagesWidth">
<short>Width for the images in the SmallImages property.</short>
<descr>
<p>
<var>SmallImagesWidth</var> is an <var>Integer</var> property that indicates 
the width for the small images displayed in the list view. The value 
indicates the image resolution requested from the SmallImages image list. If 
a resolution using the requested width does not already exist, it is created 
by scaling a candidate resolution for the image list.
</p>
<p>
The default value for the property is zero (<b>0</b>), and causes the width 
stored in the image list to be used for its images.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.SortType">
<short>
Specifies the sorting mechanism used for the current SortColumn.
</short>
<descr>
<p>
<var>SortType</var> is a <var>TSortType</var> property which specifies the 
sort mechanism used for the items in the list view control.
</p>
<p>
The default value for the property is stNone, and indicates that sorting is 
not performed for the list items on the control. See TSortType for the values 
available for the property and their meanings.
</p>
<p>
Changing the value in SortType causes the Sort method to be called.
</p>
<p>
SortType is used in the ColClick method to determine if SortColumn and 
SortDirection are updated when a column header is clicked for the control. 
Values in SortType, SortColumn, and SortDirection are also passed to the 
widgetset class when its Handle is allocated or updated.
</p>
</descr>
<seealso>
<link id="TCustomListView.ColClick"/>
<link id="TCustomListView.Sort"/>
<link id="TCustomListView.SortColumn"/>
<link id="TCustomListView.SortDirection"/>
<link id="TCustomListView.AutoSort"/>
<link id="TCustomListView.AutoSortIndicator"/>
<link id="TCustomListView.AlphaSort"/>
</seealso>
</element>

<element name="TCustomListView.SortColumn">
<short>
Ordinal position for the column used to sort the list items, or -1 when not 
assigned.
</short>
<descr>
<p>
<var>SortColumn</var> is an <var>Integer</var> property with the ordinal 
position for the column used to sort the list items for the control. The 
default value for the property is <b>-1</b>, and indicates that an explicit 
column position has not been assigned.
</p>
<p>
Changing the value for the property causes the <var>Sort</var> method to be 
called.
</p>
<p>
SortColumn is updated in the <var>ColClick</var> method when a column header 
for the control has been clicked. It also indicates which entry in 
<var>Columns</var> has the sort indicator when <var>AutoSortIndicator</var> 
is enabled.
</p>
<p>
Values in <var>SortType</var>, <var>SortColumn</var>, and 
<var>SortDirection</var> are passed to the widgetset class when its Handle is 
allocated or updated.
</p>
</descr>
<seealso>
<link id="TCustomListView.Sort"/>
<link id="TCustomListView.SortDirection"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.AutoSort"/>
<link id="TCustomListView.AutoSortIndicator"/>
</seealso>
</element>

<element name="TCustomListView.SortDirection">
<short>Sorting direction (order) for the current SortColumn.</short>
<descr>
<p>
<var>SortDirection</var> is a <var>TSortDirection</var> property which 
indicates the sort direction (or order) for the column in the 
<var>SortColumn</var> property. The value can be <var>sdAscending</var> for 
ascending sort order, or <var>sdDescending</var> for descending sort order. 
The default value for the property is <var>sdAscending</var>.
</p>
<p>
Changing the value for the property causes the <var>Sort</var> method to be 
called to display the items on the control in the selected sort order.
</p>
<p>
Use SortType to specify whether the text values, data values, or both are 
used to sort the list items. Set SortType to stNone to disable sorting in the 
control. Use SortColumn to set the column number with the values that are 
sorted.
</p>
<p>
Use AutoSort and AutoSortIndicator to automatically change the sort column 
and indicator when a column header is clicked on the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.Sort"/>
<link id="TCustomListView.SortColumn"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.AutoSort"/>
<link id="TCustomListView.AutoSortIndicator"/>
</seealso>
</element>

<element name="TCustomListView.StateImages">
<short>
Image list with the state images for the items on the control.
</short>
<descr>
<p>
<var>StateImages</var> is a <var>TCustomImageList</var> property which 
contains the images used to display the state for the list items on the 
control. A state image is displayed to the left of the icon for a list item. 
Its meaning or usage is application specific.
</p>
<p>
Assigning a new image list to the property causes the widgetset control to be 
updated.
</p>
<p>
Use StateImagesWidth to override the width for the images in StateImages. If 
StateImagesWidth has not been assigned, the width in the image list is used.
</p>
<p>
Use the OnChange, OnItemChecked, or OnDataStateChange event handlers to 
perform actions like setting the state image index for a list item when a 
list item is modified.
</p>
<remark>
The StateImages property is not supported for the macOS Carbon, Cocoa, 
GTK2, QT4, QT5, and QT6 widgetsets.
</remark>
</descr>
<seealso>
<link id="TCustomListView.StateImagesWidth"/>
<link id="TCustomListView.OnChange"/>
<link id="TCustomListView.OnItemChecked"/>
<link id="TCustomListView.OnDataStateChange"/>
</seealso>
</element>

<element name="TCustomListView.StateImagesWidth">
<short>Width of the images in the StateImages property.</short>
<descr>
<p>
<var>StateImagesWidth</var> is an <var>Integer</var> property that represents 
the width used for state images displayed in the list view. The default value 
for the property is zero (0) and indicates that a default image width has not 
been specified.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.ToolTips">
<short>
Indicates if a hint (tool tip) is automatically displayed for the list item 
under the mouse cursor.
</short>
<descr>
<p>
<var>ToolTips</var> is a <b>Boolean</b> property which enables or disables 
display of a tool tip or hint window when the mouse pointer is hovered over a 
list item on the control. The default value for the property is <b>True</b>, 
and allows the tool tip to be displayed.
</p>
<p>
Use the Hint property for the text displayed in the hint window. Or, use the 
OnShowHint event handler to assign a custom value. For example:
</p>
<code>procedure TForm1.ListView2ShowHint(Sender: TObject; HintInfo: 
PHintInfo);
begin
HintInfo^.HintStr := 'This is the hint for ' + Sender.ClassName;
end;</code>
<p>
ToolTips is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
</descr>
<seealso>
<link id="TCustomListView.HoverTime"/>
<link id="TCustomListView.OnDataHint"/>
<link id="#lcl.controls.TControl.Hint">TControl.Hint</link>
<link id="#lcl.controls.TControl.OnShowHint">TControl.OnShowHint</link>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.ViewStyle">
<short>
Sets one of ListView layouts: List (simple column), Report (few columns with 
full width), Icon (big icons), Small Icon (small icons, 16x16).
</short>
<descr>
<p>
<var>ViewStyle</var> is a <var>TViewStyle</var> property which controls the 
appearance and layout for the list items on the control. The default value for 
the property is vsList, and causes an icon and caption to be displayed for each 
list item. List items are arranged in columns, filled from top to bottom and 
then left to right.
</p>
<p>
See <link id="TViewStyle">TViewStyle</link> for a description of the view 
style values and their meanings.
</p>
<p>
Changing the value for the property causes the widgetset control to be 
updated when its handle has been allocated.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.Columns"/>
<link id="TCustomListView.Column"/>
<link id="TListItem.Caption"/>
<link id="TListItem.SubItems"/>
<link id="TViewStyle"/>
</seealso>
</element>

<element name="TCustomListView.OnChange">
<short>
Event handler signalled when the content for a list item is changed.
</short>
<descr>
<p>
<var>OnChange</var> is a <var>TLVChangeEvent</var> property with the event 
handler signalled when property values for a list item have been changed. 
OnChange is signalled from the <var>Change</var> method, which is called when 
a LVN_ITEMCHANGED control notification message is handled for the control.
</p>
<p>
Argument passed to the event handler identify the list view control, the list 
item updated in the message, and a change constant that identifies the value 
updated in the list item. The constant represents whether the text, image, or 
state for the list item has been altered.
</p>
<p>
Use the <var>OnSelectItem</var> event handler to perform actions needed when 
the selected list item has changed for the control. Use 
<var>OnItemChecked</var> to perform actions needed when the checked state for 
a list item has been changed.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.OnChanging">
<short>
Event handler signalled when a change notification is received for a list item.
</short>
<descr>
<p>
<var>OnChanging</var> is a <var>TLVChangingEvent</var> property with the event 
handler signalled when a change notification is handled for the list view 
control. It allows modifications to list items to be handled on an item-by-item 
basis. It is signalled from the CanChange method (when assigned), and occurs 
when the widgetset class handles change notification messages for the control.
</p>
<p>
An application can implement and assign a handler to the property to determine 
whether a pending change is accepted or rejected for a list item.
</p>
<p>
See <link id="TItemChange">TItemChange</link> for the changes items or states 
available in the event notification.
</p>
<p>
See <link id="TLVChangingEvent">TLVChangingEvent</link> for more information 
about the event type and its arguments.
</p>
<p>
Please note that CanChange and OnChanging are relevant for the Windows platform 
only. Other platforms do not currently generate or handle change notifications 
for list item values.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TCustomListView.CanChange"/>
<link id="TLVChangingEvent"/>
<link id="TItemChange"/>
</seealso>
</element>

<element name="TCustomListView.OnColumnClick">
<short>
Event handler signalled when a column header for the control is clicked.
</short>
<descr>
<p>
<var>OnColumnClick</var> is a <var>TLVColumnClickEvent</var> property with 
the event handler signalled when a column header for the list view control 
has been clicked. OnColumnClick is signalled (when assigned) from the 
<var>ColClick</var> method when <var>ColumnClick</var> has been enabled for 
the control.
</p>
<p>
Arguments passed to the event handler identify the list view control and the 
<var>TListColumn</var> instance clicked in the control. It is signalled 
before values in <var>SortType</var>, <var>SortColumn</var>, and 
<var>SortDirection</var> are checked or updated. It is commonly used to 
enabled or disable <var>AutoSort</var> or <var>AutoSortIndicator</var> when a 
specific column is clicked.
</p>
</descr>
<seealso>
<link id="TCustomListView.ColumnClick"/>
<link id="TCustomListView.ColClick"/>
<link id="TCustomListView.AutoSort"/>
<link id="TCustomListView.AutoSortIndicator"/>
<link id="TCustomListView.SortType"/>
<link id="TCustomListView.SortColumn"/>
<link id="TCustomListView.SortDirection"/>
<link id="TCustomListView.Columns"/>
<link id="TListItem"/>
<link id="TLVColumnClickEvent"/>
</seealso>
</element>

<element name="TCustomListView.OnCompare">
<short>
Event handler signalled to compare list items in the CustomSort method.
</short>
<descr>
<p>
<var>OnCompare</var> is a <var>TLVCompareEvent</var> property with the event 
handler signalled to compare the values for list items. Arguments passed to 
the event handler identify the list view control, the items compared in the 
handler. The relative sort order for the compared items is returned in a 
variable parameter passed to the handler.
</p>
<p>
OnCompare is signalled (when assigned) when the Sort method is called, or 
when CustomSort is called without specifying a custom sort function.
</p>
</descr>
<seealso>
<link id="TCustomListView.Sort"/>
<link id="TCustomListView.CustomSort"/>
<link id="TLVCompareEvent"/>
</seealso>
</element>

<element name="TCustomListView.OnCreateItemClass">
<short>
Event handler signalled to get the class reference used to create new list 
view items.
</short>
<descr>
<p>
<var>OnCreateItemClass</var> is a <var>TLVCreateItemClassEvent</var> property 
with the event handler signalled when a new list item is created in the 
<var>CreateListItem</var> method. It is signalled (when assigned) to allow a 
custom list item class type to be used in the list view control.
</p>
<p>
Arguments passed to the event handler identify the list view control and the 
default class type used for the list items in the control. 
<var>TListItem</var> is the default class type used to create and store the 
values in the Items property.
</p>
</descr>
<seealso>
<link id="TCustomListView.CreateListItem"/>
<link id="TCustomListView.Items"/>
<link id="TListItem"/>
</seealso>
</element>

<element name="TCustomListView.OnData">
<short>
Event handler signalled to the value(s) for a list item when OwnerData 
(virtual mode) has been enabled.
</short>
<descr>
<p>
<var>OnData</var> is a <var>TLVDataEvent</var> property with the event 
handler signalled to get the values for a list item when OwnerData (virtual 
mode) has been enabled for the list view control.
</p>
<p>
An application must implement and assign an object procedure using the 
signature in TLVDataEvent to respond to the event notification. Arguments 
passed to the event handler identify the list view control (Sender) and the 
list item (Item). The Index property in Item is pre-populated with the 
ordinal position for the requested data. The event handler is responsible for 
setting values for any of the other properties in Item.
</p>
<p>
OnData is signalled from the DoGetOwnerData method, and is called when the 
virtual list item accesses its property values.
</p>
<p>
When OwnerData is enabled, the Items property is not used. Only the most 
recently accessed item in ItemIndex is available.
</p>
</descr>
<seealso>
<link id="TCustomListView.OwnerData"/>
<link id="TCustomListView.ItemIndex"/>
<link id="TListItem"/>
<link id="TOwnerDataListItem"/>
<link id="TOwnerDataListItems"/>
<link id="TLVDataEvent"/>
</seealso>
</element>

<element name="TCustomListView.OnDataFind">
<short>
Event handler signalled to locate list item data when OwnerData (virtual) 
mode is enabled.
</short>
<descr>
<p>
<var>OnDataFind</var> is a <var>TLVDataFindEvent</var> property with the 
event handler signalled to locate a list item when OwnerData (or virtual 
mode) has been enabled. Arguments to the event handler define the search 
criteria and parameters used in the implementation of the handler routine.
</p>
<p>
See <link id="TLVDataFindEvent">TLVDataFindEvent</link> for more information 
about the argument values.
</p>
<p>
OnDataFind is signalled from the DoOwnerDataFind method which is implemented 
for the Windows platform only in the current LCL version.
</p>
</descr>
<seealso>
<link id="TCustomListView.OwnerData"/>
<link id="TCustomListView.DoOwnerDataFind"/>
<link id="TCustomListView.OnData"/>
<link id="TLVDataFindEvent"/>
</seealso>
</element>

<element name="TCustomListView.OnDataHint">
<short>
Event handler signalled to load a range of cached list items in the virtual 
storage for the control.
</short>
<descr>
<p>
<var>OnDataHint</var> is a TLVDataHintEvent property with the event handler 
signalled when a caching hint is received for the list view control.
</p>
<p>
In virtual mode (OwnerData = <b>True</b>), only the most recently accessed 
virtual list item exists in the list view control. Data hinting, or 
pre-fetch caching, allows a range of values to be loaded into the virtual 
storage for the list items.
</p>
<p>
Arguments passed to the event handler identify the starting and ending 
positions for the list items needed for the visible area on the control.
</p>
<p>
OnDataHint is signalled from the DoOwnerDataHint method, and occurs when a 
cache hint is received and handled in the widgetset class.
</p>
<p>
Use the OnData event handler to load the values for the selected list item 
from the virtual storage.
</p>
<remark>
OnDataHint is signalled for the Windows platform only. Cache hint information 
is not provided by other widgetsets.
</remark>
</descr>
<seealso>
<link id="TCustomListView.OnData"/>
<link id="TCustomListView.OwnerData"/>
<link id="TLVDataHintEvent"/>
</seealso>
</element>

<element name="TCustomListView.OnDataStateChange">
<short>Not used in the current LCL version.</short>
<descr>
<p>
Not used in the current LCL version.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.OnDeletion">
<short>
Event handler signalled when a list item is deleted from the Items container.
</short>
<descr>
<p>
OnDeletion is a TLVDeletedEvent property with the event handler signalled 
when a list item is deleted from the Items container. It provides better 
compatibility with the Delete method as implemented in Delphi.
</p>
<p>
In Delphi, the Delete method is called when the Items.Delete method is 
called. But calling the method directly will also delete the item and then 
call the OnDeletion handler.
</p>
<p>
In that case we simply call Items.Delete and this will then call Delete again 
and in the second run we call the OnDeletion handler. Not 100% Delphi 
compatible, but more compatible then it was before. (BB)
</p>
</descr>
<seealso>
<link id="TCustomListView.Delete"/>
<link id="TCustomListView.DoDeletion"/>
</seealso>
</element>

<element name="TCustomListView.OnEdited">
<short>
Event handler signalled prior to updating a list item caption when it has 
been edited in the control.
</short>
<descr>
<p>
<var>OnEdited</var> is a <var>TLVEditedEvent</var> property with the event 
handler signalled when the caption for a list item has been updated using the 
editor for the control. It occurs prior to saving the value in the AValue 
argument to the TListItem instance, and allows the new value to be validated 
and optionally modified.
</p>
<p>
OnEdit is signalled from the DoEndEdit method when an overridden Edit method 
is not used in the class instance, and the event handler has been assigned. 
It occurs when the private HideEditor method is called for the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.DoEndEdit"/>
<link id="TCustomListView.Edit"/>
</seealso>
</element>

<element name="TCustomListView.OnEditing">
<short>
Event handler signalled to determine if editing can be performed for a list 
item in the control.
</short>
<descr>
<p>
OnEditing is a TLVEditingEvent property with the event handler used to 
determine if a list item can be edited in the control. Arguments passed to 
the event handler included the control (TCustomListView), the list item 
(TListItem), and an updatable Boolean argument which indicates if editing is 
allowed for the list item. Set the AllowEdit argument to <b>False</b> to 
prevent the list item from being edited.
</p>
<p>
OnEditing is signalled (when assigned) from the CanEdit method, and 
determines the return value for the function. It occurs when the private 
ShowEditor method is called for the list view control.
</p>
</descr>
<seealso>
<link id="TCustomListView.CanEdit"/>
<link id="TLVEditingEvent"/>
</seealso>
</element>

<element name="TCustomListView.OnInsert">
<short>
Event handler signalled when a list item is added to or inserted in the Items 
for the control.
</short>
<descr>
<p>
<var>OnInsert</var> is a <var>TLVInsertEvent</var> property with the event 
handler signalled when a new TListItem instance is stored in the Items 
property. Arguments to the event handler include the object (TCustomListView) 
for the notification and the TListItem instance for the action.
</p>
<p>
OnInsert is signalled (when assigned) from the DoInsert method, and occurs 
when the ItemInserted method is called. This happens after the list item has 
been added to a TListItems container.
</p>
</descr>
<seealso>
<link id="TCustomListView.DoInsert"/>
<link id="TCustomListView.ItemInserted"/>
<link id="TListItems.AddItem"/>
</seealso>
</element>

<element name="TCustomListView.OnItemChecked">
<short>
Event handler signalled when the Checked property for a list item has been 
changed.
</short>
<descr>
<p>
Signalled (when assigned) from the <var>DoItemChecked</var> method when the 
<var>Checked</var> property for a list item has been changed. It occurs when 
the <var>LVN_ITEMCHANGED</var> list view notification message is handled for 
the control..
</p>
</descr>
<seealso>
<link id="TCustomListView.DoItemChecked"/>
</seealso>
</element>

<element name="TCustomListView.OnSelectItem">
<short>
Event handler signalled when the selected list item for the control is 
changed.
</short>
<descr>
<p>
<var>OnSelectItem</var> is signalled from the DoSelectItem method when a 
LVIS_SELECTED message is handled for the control. It occurs after the 
OnChange event handler has been executed (when assigned), and after the value 
in the Selected property has been updated. The Item parameter may be 
<b>Nil</b> when Selected has been cleared for the list view control, or the 
previously selected list item when OwnerData is enabled. The ASelected 
argument is <var>True</var> when the list item is selected.
</p>
</descr>
<seealso>
<link id="TCustomListView.Change"/>
<link id="TCustomListView.OnChange"/>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.LastSelected"/>
<link id="TLVSelectItemEvent"/>
</seealso>
</element>

<element name="TCustomListView.OnCustomDraw">
<short>
Event handler signalled to perform custom drawing for the list view control.
</short>
<descr>
<p>
<var>OnCustomDraw</var> is a <var>TLVCustomDrawEvent</var> property with the 
event handler signalled when a custom draw operation is handled by the LCL 
interface. It is signalled from the CustomDraw method when the drawing stage 
for the control is cdPrePaint.
</p>
<p>
Arguments to the event handler include the control, the display rectangle for 
the operation, and a variable parameter that indicates whether default 
drawing is performed by the list view control.
</p>
<p>
OnCustomDraw occurs when the widgetset class for the control calls the 
IntfCustomDraw method and the list view control is the draw target.
</p>
<p>
Use OnAdvancedCustomDraw to perform custom drawing when the drawing state has 
a value other than cdPrePaint.
</p>
<p>
Use OnCustomDrawItem and OnAdvancedCustomDrawItem to perform custom drawing 
for the list items on the control.
</p>
<p>
Use OnCustomDrawSubItem and OnAdvancedCustomDrawSubItem to perform custom 
drawing for the list sub-items on the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.CustomDraw"/>
<link id="TCustomListView.OnAdvancedCustomDraw"/>
<link id="TCustomListView.IsCustomDrawn"/>
<link id="TCustomListView.IntfCustomDraw"/>
<link id="TLVCustomDrawEvent"/>
<link id="TCustomDrawStage"/>
<link id="TCustomDrawTarget"/>
</seealso>
</element>

<element name="TCustomListView.OnCustomDrawItem">
<short>
Event handler signalled to perform custom drawing for list items on the 
control.
</short>
<descr>
<p>
<var>OnCustomDrawItem</var> is a <var>TLVCustomDrawItemEvent</var> property 
with the event handler used to perform custom drawing for a list item on a 
list view control. It is signalled (when assigned) from the CustomDrawItem 
method when the drawing stage is cdPrePaint, and occurs when the 
IntfCustomDraw method handles callbacks from the widgetset class instance.
</p>
<p>
Arguments to the event handler include the list view control, the list item 
drawn in the handler, and a variable parameter which indicates whether 
default drawing is handled in the list view control.
</p>
<p>
Use OnAdvancedCustomDrawItem to perform custom drawing for list items when 
the drawing stage is a value other than cdPrePaint.
</p>
<p>
Custom drawing event handlers are used when the IntfCustomDraw method handles 
callbacks from the widgetset class instance.
</p>
<p>
Use OnCustomDraw and OnAdvancedCustomDraw to perform custom drawing for the 
entire list view control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.OnCustomDrawSubItem">
<short>
Event handler signalled to perform custom drawing for list sub-item on the 
control.
</short>
<descr>
<p>
<var>OnCustomDrawSubItem</var> is a <var>TLVCustomDrawSubItemEvent</var> 
property with the event handler used to perform custom drawing for sub-items 
on a list view control. These are the values found in the SubItems property 
for each of the TListItem entries on the control.
</p>
<p>
OnCustomDrawSubItem is signalled (when assigned) from the CustomDrawSubItem 
method when the drawing stage is cdPrePaint, and occurs when the 
IntfCustomDraw method handles callbacks from the widgetset class instance.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>The list view control.</dd>

<dt>Item</dt>
<dd>The list item with values drawn in the handler.</dd>

<dt>SubItem</dt>
<dd>The ordinal position for the sub-item in Item.</dd>

<dt>State</dt>
<dd>The draw state for the value.</dd>

<dt>DefaultDraw</dt>
<dd>
Variable parameter which indicates whether default drawing is handled in the 
list view control.
</dd>
</dl>
<p>
Use OnAdvancedCustomDrawSubItem to perform custom drawing for list sub-items 
when the drawing stage is a value other than cdPrePaint.
</p>
<p>
Custom drawing event handlers are used when the IntfCustomDraw method handles 
callbacks from the widgetset class instance.
</p>
<p>
Use OnCustomDraw and OnAdvancedCustomDraw to perform custom drawing for the 
entire list view control.
</p>
<p>
Use OnCustomDrawItem and OnAdvancedCustomDrawItem to perform custom drawing 
for the a list item on the list view control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.OnDrawItem">
<short>Event handler signalled to render an owner drawn item.</short>
<descr>
<p>
<var>OnDrawItem</var> is a <var>TLVDrawItemEvent</var> property which is the 
event handler signalled to render an owner drawn item. The event is triggered 
(when assigned) in the <var>DrawItem</var> method only when 
<var>OwnerDraw</var> is set to <b>True</b> and <var>ViewStyle</var> contains 
<var>vsReport</var>.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>The TCustomListView control.</dd>
<dt>AItem</dt>
<dd>The TListItem to draw in the handler.</dd>
<dt>ARect</dt>
<dd>The display rectangle for the list item.</dd>
<dt>AState</dt>
<dd>The draw state for the list item.</dd>
</dl>
</descr>
<seealso>
<link id="TCustomListView.OwnerDraw"/>
<link id="TCustomListView.DrawItem"/>
<link id="TCustomListView.ViewStyle"/>
</seealso>
</element>

<element name="TCustomListView.OnAdvancedCustomDraw">
<short>
Event handler signalled to custom draw the grid control when the draw state 
is not cdPrePaint.
</short>
<descr>
<p>
<var>OnAdvancedCustomDraw</var> is a <var>TLVAdvancedCustomDrawEvent</var> 
property with the event handler used to custom draw the grid control. It is 
signalled from the CustomDraw method when the draw stage is a value other 
than cdPrePaint, and occurs when the IntfCustomDraw method is called by the 
widgetset class instance.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>The TCustomListView for the event.</dd>
<dt>Item</dt>
<dd>The list item drawn in the handler.</dd>
<dt>State</dt>
<dd>The draw state for the list item.</dd>
<dt>Stage</dt>
<dd>The draw stage for the list item. Will not contain the value 
cdPrePaint.</dd>
<dt>DefaultDraw</dt>
<dd>
Variable parameter which indicates if default drawing is performed by the 
list view control.
</dd>
</dl>
<p>
Use OnCustomDraw to custom draw the control when the draw stage is cdPrePaint.
</p>
<p>
Use OnCustomDrawItem and OnAdvancedCustomDrawItem to custom draw a list item 
on the control.
</p>
<p>
Use OnCustomDrawSubItem and OnAdvancedCustomDrawSubItem to custom draw a 
sub-item for a list item on the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.CustomDraw"/>
<link id="TCustomListView.IntfCustomDraw"/>
<link id="TCustomListView.OnCustomDraw"/>
<link id="TCustomListView.OnCustomDrawItem"/>
<link id="TCustomListView.OnAdvancedCustomDrawItem"/>
<link id="TCustomListView.OnCustomDrawSubItem"/>
<link id="TCustomListView.OnAdvancedCustomDrawSubItem"/>
<link id="TCustomListView.IsCustomDrawn"/>
<link id="TCustomDrawStage"/>
<link id="TCustomDrawTarget"/>
</seealso>
</element>

<element name="TCustomListView.OnAdvancedCustomDrawItem">
<short>
Event handler signalled to custom draw a list item on the grid control when 
the draw state is not cdPrePaint.
</short>
<descr>
<p>
<var>OnAdvancedCustomDrawItem</var> is a 
<var>TLVAdvancedCustomDrawItemEvent</var> property with the event handler 
used to custom draw a list item on the grid control. It is signalled from the 
CustomDrawItem method when the draw stage is a value other than cdPrePaint, 
and occurs when the IntfCustomDraw method is called by the widgetset class 
instance.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>The TCustomListView for the event.</dd>
<dt>Item</dt>
<dd>The list item drawn in the handler.</dd>
<dt>State</dt>
<dd>The draw state for the list item.</dd>
<dt>Stage</dt>
<dd>The draw stage for the list item. Will not contain the value 
cdPrePaint.</dd>
<dt>DefaultDraw</dt>
<dd>
Variable parameter which indicates if default drawing is performed by the 
list view control.
</dd>
</dl>
<p>
Use OnCustomDrawItem to custom draw a list item when the draw stage is 
cdPrePaint.
</p>
<p>
Use OnCustomDraw and OnAdvancedCustomDraw to custom draw the list view 
control.
</p>
<p>
Use OnCustomDrawSubItem and OnAdvancedCustomDrawSubItem to custom draw a 
sub-item for a list item on the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.CustomDrawItem"/>
<link id="TCustomListView.IntfCustomDraw"/>
<link id="TCustomListView.OnCustomDraw"/>
<link id="TCustomListView.OnCustomDrawItem"/>
<link id="TCustomListView.OnCustomDrawSubItem"/>
<link id="TCustomListView.OnAdvancedCustomDraw"/>
<link id="TCustomListView.OnCustomDrawSubItem"/>
<link id="TCustomListView.OnAdvancedCustomDrawSubItem"/>
<link id="TCustomListView.IsCustomDrawn"/>
<link id="TListItem"/>
<link id="TCustomDrawStage"/>
<link id="TCustomDrawState"/>
<link id="TCustomDrawTarget"/>
</seealso>
</element>

<element name="TCustomListView.OnAdvancedCustomDrawSubItem">
<short>
Event handler signalled to custom draw list sub-items when the draw stage is 
not cdPrePaint.
</short>
<descr>
<p>
OnAdvancedCustomDrawSubItem is a TLVAdvancedCustomDrawSubItemEvent property 
with the event handler signalled to draw the SubItems in a list item on the 
control. It is signalled from the CustomDrawSubItem method when the draw 
stage is a value other than cdPrePaint, and occurs when the IntfCustomDraw 
method is called by the widgetset class instance.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>The TCustomListView for the event.</dd>
<dt>Item</dt>
<dd>The list item drawn in the handler.</dd>
<dt>SubItem</dt>
<dd>The ordinal position in SubItems with the text drawn in the handler.</dd>
<dt>State</dt>
<dd>The draw state for the list item.</dd>
<dt>Stage</dt>
<dd>The draw stage for the list item. Will not contain the value 
cdPrePaint.</dd>
<dt>DefaultDraw</dt>
<dd>
Variable parameter which indicates if default drawing is performed by the 
list view control.
</dd>
</dl>
<p>
Use OnCustomDrawItem and OnAdvancedCustomDrawItem to custom draw the caption 
for a list item.
</p>
<p>
Use OnCustomDraw and OnAdvancedCustomDraw to custom draw the list view 
control.
</p>
<p>
Use OnCustomDrawSubItem to custom draw a sub-item for a list item on the 
control when the draw stage is cdPrePaint.
</p>
</descr>
<seealso>
<link id="TCustomListView.CustomDrawSubItem"/>
<link id="TCustomListView.IntfCustomDraw"/>
<link id="TCustomListView.OnCustomDraw"/>
<link id="TCustomListView.OnCustomDrawItem"/>
<link id="TCustomListView.OnCustomDrawSubItem"/>
<link id="TCustomListView.OnAdvancedCustomDraw"/>
<link id="TCustomListView.OnAdvancedCustomDrawItem"/>
<link id="TCustomListView.IsCustomDrawn"/>
<link id="TListItem.SubItems"/>
<link id="TCustomDrawStage"/>
<link id="TCustomDrawState"/>
<link id="TCustomDrawTarget"/>
</seealso>
</element>

<element name="TCustomListView.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for 
<var>TCustomListView</var>. It calls the inherited <var>Create</var> method, 
and allocates resources needed for the class instance.
</p>
<p>
Create sets the default values for properties and control style flags. It 
creates TChangeLink instances for the image lists in SmallImages, 
LargeImages, and StateImages. The change links are configured to use the 
ImageChange and ImageResolutionHandleDestroyed methods in their event 
handlers. It also creates the TCustomListViewEditor instance used to edit 
values in the list view control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
</seealso>
</element>
<element name="TCustomListView.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomListView.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
<var>Destroy</var> is the destructor for <var>TCustomListView</var>. It frees 
the Canvas, and calls the inherited <var>Destroy</var> method to free 
resources allocated in the TWinControl ancestor. It then frees resources 
allocated in TCustomListView like IconOptions, Items, Columns, as well as 
internal resources for the multi-selection list and the owner data item.
</p>
</descr>
<seealso>
<link id="TCustomListView.Columns"/>
<link id="TCustomListView.IconOptions"/>
<link id="TCustomListView.Items"/>
<link id="#lcl.controls.TWinControl.Destroy">TWinControl.Destroy</link>
<link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
</seealso>
</element>

<element name="TCustomListView.AddItem">
<short>
Adds a list item with the specified caption and optional object.
</short>
<descr>
<p>
<var>AddItem</var> is a method used to create and store a new 
<var>TListItem</var> instance in the Items container. AddItem calls the Add 
in Items to create the TListItem instance and store it in the list storage 
for the container.
</p>
<p>
Item contains the text used as the Caption for the list item. AObject is a 
object instance derived from TObject, and its address is stored in the Data 
property for the list item.
</p>
</descr>
<seealso>
<link id="TCustomListView.ItemInserted"/>
<link id="TListItems.Add"/>
<link id="TListItems.AddItem"/>
<link id="TListItem.Caption"/>
<link id="TListItem.Data"/>
</seealso>
</element>
<element name="TCustomListView.AddItem.Item">
<short>Caption for the new list item.</short>
</element>
<element name="TCustomListView.AddItem.AObject">
<short>Optional object instance for the list item.</short>
</element>

<element name="TCustomListView.AlphaSort">
<short>
Sorts the first column for the list view control in ascending alphabetic 
order.
</short>
<descr>
<p>
<var>AlphaSort</var> is <var>Boolean</var> function used to apply an 
ascending alphabetic sort order to the list items in the control. The sort 
order is always applied to Column 0 (the list item and not its sub-items).
</p>
<p>
AlphaSort updates values in the SortDirection, SortType, and SortColumn 
properties. Flag values for the control are updated to include 
lffPreparingSorting prior to setting the property values; this suppresses 
reordering until the changes are completed.
</p>
<p>
SortDirection is toggled to s a new sort order to be applied. The final value 
is sdAscending.
</p>
<p>
SortType is set to stText to use the TListItem.Caption values to determine 
the order for the list items. In the default comparison routine. case is 
significant. Use OnCompare to implement an alternate comparison routine.
</p>
<p>
SortColumn is set to 0 to use the TListItem.Caption values to determine the 
order for the list items.
</p>
<p>
lffPreparingSorting is removed from the flag values to apply the sort 
criteria to the list items in the control.
</p>
<p>
The return value is set to <b>True</b> if the sort criteria is successfully 
applied to the list view control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.AlphaSort.Result">
<short>
<b>True</b> if the sort criteria is successfully applied to the control.
</short>
</element>

<element name="TCustomListView.Sort">
<short>
Sorts the values in Items using the SortType, SortColumn, and SortDirection 
for the control.
</short>
<descr>
<p>
<var>Sort</var> is a method used to reorder list items in the control using 
values in the SortType, SortColumn, and SortDirection properties. No actions 
are performed in the method when SortType is set to stNonem, or when 
SortColumn has a value which is not valid. SortColumn must be in the range 
<b>0..ColCount-1</b>.
</p>
<p>
Sort uses a comparison routine in the implementation section to order the 
values in Items. The comparison routine is passed as argument to the Sort 
method in Items. The routine calls the OnCompare event handler (when 
assigned) to determine the order for list items. If OnCompare has not been 
assigned, it uses the Caption or SubItems (depending on SortColumn) to 
determine the new order for the list items. The value in SortDirection is 
handled when ordering the Items.
</p>
<p>
Sort saves and restores Focused or Selected items on exit. Checked items are 
also restored when OwnerData (or virtual mode) is not enabled.
</p>
<p>
Sort is called when a column header on the list view control is clicked and 
AutoSort is enabled.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.CustomSort">
<short>
Sorts the Items for the list view control using the specified procedure or 
the OnCompare event handler.
</short>
<descr>
<p>
<var>CustomSort</var> is a <var>Boolean</var> function used to sort the list 
items on the control using a custom sort routine to order the items.
</p>
<p>
Use the ASortProc argument to specify the comparison routine needed for the 
custom sort. When omitted, the OnCompare event handler is used to determine 
the order for the list items.
</p>
<p>
Use AOptionalParam to specify a pointer to an optional Integer value passed 
as a parameter to the sort procedure.
</p>
<p>
No actions are performed when Items contains fewer than two list items, or 
when lffPreparingSorting has already been included in the flags for the 
control.
</p>
<p>
CustomSort saves and restores Focused or Selected items on exit. Checked 
items are also restored when OwnerData (or virtual mode) is not enabled.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.CustomSort.Result">
<short>
<b>True</b> when either the sort routine or the OnCompare event handler has 
been assigned.
</short>
</element>
<element name="TCustomListView.CustomSort.ASortProc">
<short>
Sort routine used to compare values in the list items to determine their 
order.
</short>
</element>
<element name="TCustomListView.CustomSort.AOptionalParam">
<short>
An optional Pointer to an Integer value used the sort routine.
</short>
</element>

<element name="TCustomListView.BeginUpdate">
<short>
Starts an update process for the list view control.
</short>
<descr>
<p>
<var>BeginUpdate</var> is a method which increments an internal counter used 
to track active updates to the control. Use this method before performing a 
large number or changes to the control so that the interface will not show 
any single step until the counter reaches 0.
</p>
<p>
BeginUpdate includes the value lffPreparingSorting in the flags for the 
control. This suppresses reordering of list items using sort methods until 
the flag value is removed. When the internal update counter has the value 1, 
the corresponding method in the widgetset class is called when its handle has 
been allocated.
</p>
<p>
Use <var>EndUpdate</var> to decrement the internal counter when an update is 
completed.
</p>
</descr>
<seealso>
<link id="TCustomListView.EndUpdate"/>
</seealso>
</element>

<element name="TCustomListView.Clear">
<short>
Clears the Items for the list view.
</short>
<descr>
<p>
<var>Clears</var> calls the corresponding method in Items to delete and free 
each of the list item instances in the container.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TListItems.Clear"/>
<link id="TListItems.Delete"/>
<link id="TListItem.Delete"/>
</seealso>
</element>

<element name="TCustomListView.EndUpdate">
<short>
Finishes an active update for the list view control.
</short>
<descr>
<p>
<var>EndUpdate</var> is a method which decrements the internal counter used 
to track active updates for the list view control. An catchable debugger 
exception is raised if EndUpdate is called when an the internal counter is 
already 0.
</p>
<p>
EndUpdate removes the value lffPreparingSorting from the flags for the 
control. This allows reordering of list items using sort methods to be 
performed. When the internal update counter reaches 0, the corresponding 
method in the widgetset class is called when its handle has been allocated.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.Repaint">
<short>
Immediately redraws the control.
</short>
<descr>
<p>
<var>Repaint</var> is an overridden method in <var>TCustomListView</var>. It 
ensures that the data index for a list item is reset to -1 when the control 
is using OwnerDraw (or virtual) mode. Repaint calls the inherited method to 
request a repaint in the widgetset class instance when its handle has been 
allocated.
</p>
<p>
Repaint is used to implement the Refresh method for the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OwnerData"/>
<link id="#lcl.controls.TWinControl.Repaint">TWinControl.Repaint</link>
<link id="#lcl.controls.TControl.Refresh">TControl.Refresh</link>
</seealso>
</element>

<element name="TCustomListView.FindCaption">
<short>
<var>FindCaption</var>- search for and return the list item that contains the 
nominated caption.
</short>
<descr>
<p>
<var>FindCaption</var>- search for and return the list item that contains the 
nominated caption.
</p>
<p>
Starting from item at <var>StartIndex</var>
</p>
<p>
Looking for the string with the content in <var>Value</var>
</p>
<p>
<var>Partial, Inclusive, Wrap, PartStart</var>: Boolean arguments that allow 
matches with part of the string, permitting the string to wrap over a line, 
etc.
</p>
</descr>
</element>

<element name="TCustomListView.FindData">
<short>
Locates a list item with a given value starting from the specified position in 
Items.
</short>
<descr>
<p>
<var>FindData</var> is a <var>TListItem</var> function used to locate the list 
item which has the value specified in the Data argument. FindData calls the 
FindData method in Items to get the return value (TListItem) for the method.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TListItems.FindData"/>
<link id="TListItem"/>
</seealso>
</element>
<element name="TCustomListView.FindData.Result">
<short>
TListItem instance which contains the specified Data, or <b>Nil</b> if a list 
item is not found in the method.
</short>
</element>
<element name="TCustomListView.FindData.StartIndex">
<short>
Ordinal position in Items for the first entry examined in the method.
</short>
</element>
<element name="TCustomListView.FindData.Value">
<short>
Pointer to the data for the list item to locate in the method.
</short>
</element>
<element name="TCustomListView.FindData.Inclusive">
<short>
<b>True</b> if the item at the position in StartIndex is included in the 
compared values. <b>False</b> if the comparison starts on the item following 
StartIndex.
</short>
</element>
<element name="TCustomListView.FindData.Wrap">
<short>
<b>True</b> if the search can wrap to the top of the list if an item is not 
found. <b>False</b> if the search ends at the last item in the list.
</short>
</element>

<element name="TCustomListView.GetHitTestInfoAt">
<short>
Gets hit test information from the widgetset class when its Handle has been 
assigned.
</short>
<descr>
<p>
Calls the corresponding method in the widgetset class to get the THitTests 
results for the specified coordinates. The THitTest enumeration values in the 
result indicate the areas on the control that are under the specified X and Y 
coordinates.
</p>
<p>
See <link id="THitTest">THitTest</link> for more information about the values 
and their meanings.
</p>
<p>
The return value is an empty set ([]) if the Handle for the widget has not 
been assigned.
</p>
</descr>
<seealso>
<link id="THitTests"/>
<link id="THitTest"/>
</seealso>
</element>
<element name="TCustomListView.GetHitTestInfoAt.Result">
<short>
Set type with the areas on the control under the specified coordinates.
</short>
</element>
<element name="TCustomListView.GetHitTestInfoAt.X">
<short>
Horizontal coordinate for the hit test.
</short>
</element>
<element name="TCustomListView.GetHitTestInfoAt.Y">
<short>
Vertical coordinate for the hit test.
</short>
</element>

<element name="TCustomListView.GetItemAt">
<short>
Finds and return the list item at the specified coordinates.
</short>
<descr>
<p>
<var>GetItemAt</var> is a <var>TListItem</var> function used to get the list 
item which is located at the coordinates specified in X and Y. GetItemAt calls 
the corresponding method in the widgetset class instance to get the index 
position for the list item at the coordinates. 
</p>
<p>
The return value contains the TListItem instance in Items indicated by the 
widgetset class. The return value may be <b>Nil</b> if the coordinates are not 
within an item found on the list view control, or the handle for the widget 
has not been allocated.
</p>
<p>
GetItemAt is used to implement methods like GetNearestItem.
</p>
</descr>
</element>
<element name="TCustomListView.GetItemAt.Result">
<short>
List item found at the specified coordinates, or <b>Nil</b> if a list item is 
not found.
</short>
</element>
<element name="TCustomListView.GetItemAt.x">
<short>
Horizontal coordinate for the requested list item.
</short>
</element>
<element name="TCustomListView.GetItemAt.y">
<short>
Vertical coordinate for the requested list item.
</short>
</element>

<element name="TCustomListView.GetNearestItem">
<short>Locates the list item closest to the specified position.</short>
<descr>
<p>
<var>GetNearestItem</var> is used to locate a list item from a position 
specified in pixel coordinates relative to the top left corner of the list 
view. It starts looking at the position specified by the Point parameter, and 
moves in the direction indicated by the Direction parameter until it locates 
a list item. If no item is found <b>Nil</b> is returned.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.GetNearestItem.Result">
<short>
List item closest to the specified point, or <b>Nil</b> if a list item is not 
found.
</short>
</element>
<element name="TCustomListView.GetNearestItem.APoint">
<short>
TPoint instance with the coordinates examined in the method.
</short>
</element>
<element name="TCustomListView.GetNearestItem.Direction">
<short>
Search direction when trying to locate the nearest list item.
</short>
</element>

<element name="TCustomListView.GetNextItem">
<short>
Gets the next list item in the given direction from the starting item.
</short>
<descr>
<p>
<var>GetNextItem</var> is a <var>TListItem</var> function used to find the 
next list item after StartItem in the direction given by the Direction 
parameter. Only items which include the state values in the States parameter 
are considered.
</p>
<p>
GetNextItem calls the corresponding method in the widgetset class instance to 
get the TListItem which meets the specified search criteria. If no list item 
is found for the search criteria, the return value is <b>Nil</b>.
</p>
</descr>
<version>
Widgetset implementation modified in LCL version 4.4 to call the 
GetNextSelected method when needed.
</version>
<seealso>
<link id="TListItem"/>
<link id="TSearchDirection"/>
<link id="TListItemState"/>
<link id="TListItemStates"/>
</seealso>
</element>
<element name="TCustomListView.GetNextItem.Result">
<short>
Next list item in the specified direction.
</short>
</element>
<element name="TCustomListView.GetNextItem.StartItem">
<short>
Initial list item used to find the eligible item.
</short>
</element>
<element name="TCustomListView.GetNextItem.Direction">
<short>
Direction of the search for the next list item.
</short>
</element>
<element name="TCustomListView.GetNextItem.States">
<short>
Set of states values for eligible list items in the search.
</short>
</element>

<element name="TCustomListView.GetNextSelected">
<short>
Indicates whether a list item following the list item at the specified 
position can be authoritatively selected for the list view control.
</short>
<descr>
<p>
<var>GetNextSelected</var> is a <var>Boolean</var> function used to indicate 
whether a list item following the specified position in the list view can 
become the selected item in the method. It indicates that the Selected 
property can be updated with the detected list item based on the settings for 
the list view control.
</p>
<p>
The return value is <b>False</b> if neither OwnerData nor MultiSelect are 
enabled for the list view control.
</p>
<p>
The return value is <b>True</b> if the variable parameter in <var>AItem</var> 
was successfully updated with a TListItem instance in the method. This can be 
one of the Items in the current multi-selection list, the next owner data list 
item for the control, or <b>Nil</b> when the multi-selection list is empty or 
OwnerData is not enabled.
</p>
<p>
GetNextSelected visits each of the Items for the control following the 
position specified in <var>LVIndex</var>. It checks whether the Selected 
property for the list item is enabled, and when found, updates AItem with the 
TListItem instance found in the method. If a subsequent list item is not found 
that is selected, AItem is set to <b>Nil</b>.
</p>
<p>
GetNextSelected is used in the widgetset implementation of the GetNextItem 
method.
</p>
</descr>
<version>
Added in LCL version 4.4.
</version>
<seealso>
<link id="TCustomListView.GetNextItem"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.MultiSelect"/>
<link id="TCustomListView.OwnerData"/>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.SelCount"/>
<link id="TListItem.Selected"/>
<link id="TListItems"/>
</seealso>
</element>

<element name="TCustomListView.GetNextSelected.Result">
<short>
Returns <b>True</b> if another item is selected in multi-select or owner data 
(virtual) modes.
</short>
</element>

<element name="TCustomListView.GetNextSelected.LVIndex">
<short>
Ordinal position in the multi-selection list for list items examined in the 
method.
</short>
</element>

<element name="TCustomListView.GetNextSelected.AItem">
<short>
Returns the next selected TListItem instance for the control, or <b>Nil</b> 
when none of the Items in the control are selected.
</short>
</element>

<element name="TCustomListView.ClearSelection">
<short>
Clears the selected items for the list view control.
</short>
<descr>
<p>
<var>ClearSelection</var> is a method used to remove the selected attribute 
for one or more of the Items in the list view control.
</p>
<p>
When <var>MultiSelect</var> is enabled, the widgetset class instance calls 
its SelectAll method to set Selected attributes to <b>False</b>. The 
ClearSelection method in Items is also called to clear the Selected 
attributes stored in the class instance.
</p>
<p>
If MultiSelect is not enabled, the entry in Items at the position in 
ItemIndex sets its Selected property to <b>False</b>.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.MultiSelect"/>
<link id="TListItem.Selected"/>
<link id="TListItems.ClearSelection"/>
</seealso>
</element>

<element name="TCustomListView.SelectAll">
<short>
Selects all Items in the control when MultiSelect has been enabled.
</short>
<descr>
<p>
<var>SelectAll</var> is a method used to mark each of the TListItem instances 
in the Items property as selected on the list view control. No actions are 
performed in the method if MultiSelect is set to <b>False</b>.
</p>
<p>
SelectAll calls the corresponding method in the widgetset class when its 
handle has been allocated. The SelectAll method in Items is called to select 
the items in the class instance. The state flag values in each of the list 
item are updated, and the OnSelectItem event handler is signalled (when 
assigned) for the modified list items. The updates are enclosed by 
BeginUpdate..EndUpdate to minimize screen refreshes when the list item states 
are changed.
</p>
<p>
Use ClearSelection to remove the selected attribute for each of the Items on 
the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.MultiSelect"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.ClearSelection"/>
<link id="TListItems.SelectAll"/>
<link id="TListItem.Selected"/>
</seealso>
</element>

<element name="TCustomListView.IsEditing">
<short>
Indicates if the editor is active in the list view control.
</short>
<descr>
<p>
Delphi compatible function which returns <b>True</b> if the list view editor 
is active.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomListView.IsEditing.Result">
<short>
<b>True</b> if the editor control is active for the list view.
</short>
</element>

<element name="TCustomListView.BoundingRect">
<short>Coordinates for the rectangle containing the list view control.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomListView.BorderStyle">
<short>Line style drawn as a border around the control.</short>
<descr>
<p>
<var>BorderStyle</var> is a <var>TBorderStyle</var> property which indicates 
the line style used to draw the borders for the control. The default value 
for the property is <var>bsSingle</var> in <var>TCustomListView</var>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.BorderStyle">TWinControl.BorderStyle</link>
<link id="#lcl.controls.TBorderStyle">TBorderStyle</link>
<link id="#lcl.controls.TFormBorderStyle">TFormBorderStyle</link>
</seealso>
</element>

<element name="TCustomListView.Canvas">
<short>TCanvas instance used to draw the control.</short>
<descr>
<p>
<var>Canvas</var> is a read-only <var>TCanvas</var> property with the canvas 
used to perform drawing operations for the control. At run-time, a 
<var>TControlCanvas</var> instance is created and assigned to the property.
</p>
<p>
Canvas is used in the <var>DrawItem</var> method, and when the 
<var>CN_DRAWITEM</var> control notification message is handled for the 
control. It is also used to get text metrics when the editor for the control 
is displayed.
</p>
</descr>
<seealso>
<link id="TCustomListView.Create"/>
<link id="TCustomListView.DrawItem"/>
<link id="#lcl.controls.TControlCanvas">TControlCanvas</link>
</seealso>
</element>

<element name="TCustomListView.Checkboxes">
<short>
Displays a check box column for the list items on the control.
</short>
<descr>
<p>
<var>Checkboxes</var> is a <var>Boolean</var> property which indicates if 
check boxes are displayed next to list items on the control. The default 
value for the property is <b>False</b>.
</p>

<p>
CheckBoxes is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
<p>
Use the OnItemChecked event handler to perform actions needed when the check 
state for a list item has been changed.
</p>
<p>
CheckBoxes is used when a LVN_ITEMCHANGED notification message is handled for 
the control with a LVIF_STATE change flag.
</p>
<p>
The value in CheckBoxes is ignored when OwnerData is set to <b>True</b>. 
Check box display cannot be enabled for virtual mode.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.Column">
<short>
Provides indexed access to the columns defined for the control.
</short>
<descr>
<p>
<var>Column</var> is an indexed read-only <var>TListColumn</var> property 
which provides access to the information for a given column by its position. 
The column whose information is to be retrieved is determined by an index 
(AIndex). As with nearly all indexes, this index is 0-based.
</p>
<p>
Use the <var>Columns</var> property to add, change or delete a column 
definition.
</p>
<p>
Use the <var>Items</var> property to access the <var>TListItem</var> 
instances with the data displayed using the column definitions. The Caption 
in a given list item is the value display in Column[0]. Subsequent column 
values use the values in SubItems; i. e. Column[1] is SubItem[0], Column[2] 
is SubItem[1], ad infinitum.
</p>
</descr>
<seealso>
<link id="TCustomListView.Columns"/>
<link id="TCustomListView.Items"/>
<link id="TListColumns"/>
<link id="TListColumn"/>
<link id="TListItems"/>
<link id="TListItem"/>
</seealso>
</element>
<element name="TCustomListView.Column.AIndex">
<short>
Ordinal position in Columns for the column definition.
</short>
</element>

<element name="TCustomListView.ColumnCount">
<short>The number of defined Columns for the control.</short>
<descr>
<p>
<var>ColumnCount</var> is a read-only <var>Integer</var> property which 
indicates the number of columns displayed for the list view. The property 
value is read from the <var>Count</var> property in <var>Columns</var>.
</p>
<p>
Use methods in Columns to maintain the column definitions in the collection, 
such as Add, Insert, Delete, and Clear.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.DropTarget">
<short>The list item that is the drop target on the control.</short>
<descr>
<p>
<var>DropTarget</var> is a <var>TListItem</var> property with the list item 
that is the drop target for the control. Read and write access for the 
property value is redirected to the widgetset class, where the DropTarget 
property in the TListItem instances are maintained.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TListItem.DropTarget"/>
</seealso>
</element>

<element name="TCustomListView.FlatScrollBars">
<short>
Enables scroll bars using a "flat" display style when available for the 
widgetset.
</short>
<descr>
<p>
FlatScrollBars is a Boolean property which indicates if scroll bars are drawn 
using a "flat" display style. Flat scroll bars are not drawn using raised 3-D 
relief with shadowing normally used for borders or edges on the control. It 
also applies color inversion when elements in the control are hovered under 
the mouse pointer. The default value for the property is <b>False</b>.
</p>
<p>
FlatScrollBars is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
</descr>
<seealso>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.FullDrag">
<short>
Indicates whether column headers are redrawn during a column drag or resizing 
operation.
</short>
<descr>
<p>
<var>FullDrag</var> is a <var>Boolean</var> property which indicates whether 
column headers are redrawn when a column drop or a column resize operation is 
in effect. The default value for the property is <b>False</b>.
</p>
<p>
FullDrag is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
</descr>
<seealso>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.GridLines">
<short>
Enables or disables grid lines between rows and columns on the control.
</short>
<descr>
<p>
<var>GridLines</var> is a <var>Boolean</var> property used to enable or 
disable drawing of a 1-pixel grid line between rows and columns on the 
control. The default value for the property is <b>False</b>, and hides the 
grid lines.
</p>
<p>
GridLines is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
</descr>
<seealso>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.HotTrack">
<short>
Enables or disables hot tracking selection when the mouse is hovered over an 
item.
</short>
<descr>
<p>
<var>HotTrack</var> is a <var>Boolean</var> property used to enable or 
disable the hot tracking selection feature for the items in the list view 
control. HotTrack is one of the extended list view styles represented by the 
LVS_EX_TRACKSELECT constant.
</p>
<p>
When enabled, a list item is automatically selected (or de-selected) when the 
mouse pointer is hovered over a list item for a short period of time. It can 
be used in MultiSelect mode when the Shift, Ctrl, or Shift+Ctrl keys are held 
while moving and hovering the mouse pointer.
</p>
<p>
HotTrack is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
<p>
Use HoverTime to specify the hover duration (in milliseconds) before a list 
item toggles its selected state.
</p>
<p>
Use HotTrackStyles to set the cursor shape or font attributes for hot tracked 
items in the control.
</p>
<p>
This feature can be used in List View and in Tab controls.
</p>
</descr>
<seealso>
<link id="TCustomListView.HotTrackStyles"/>
<link id="TListHotTrackStyle"/>
<link id="TListHotTrackStyles"/>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.HotTrackStyles">
<short>Hot tracking styles enabled for the control.</short>
<descr>
<p>
<var>HotTrackStyles</var> is a <var>TListHotTrackStyles</var> property which 
contains the extended list view style options for hot tracking. It contains 
zero or more values from the TListHotTrackStyle enumeration. The values 
control the cursor shape or the font attributes applied to list items when 
the mouse pointer is hovered over the items.
</p>
<p>
See TListHotTrackStyle for more information about the values in the 
enumeration and their meanings.
</p>
<p>
The default value for the property is an empty set ([]). Changing the value 
for the property causes the widgetset class to be updated. The property value 
is posted to the widgetset class when its Handle is allocated or updated.
</p>
<p>
Use the HotTrack property to enable or disable the hot tracking selection 
feature for the list view control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.IconOptions">
<short>
Options for layouts, which show icons. Sets arrangement of icons, 
text-wrapping state.
</short>
<descr>
<p>
<var>IconOptions</var> is a <var>TIconOptions</var> property with the icon 
options used when the list view uses the vsIcon or vsSmallIcon view style. 
Values in IconOptions are passed to the widgetset class to render the control 
using the native style for the platform. Set values in its properties to 
control the icon placement, auto-arrange features, and caption text wrapping 
for a list item on then control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.ItemFocused">
<short>The list item which has focus on the control.</short>
<descr>
<p>
<var>ItemFocused</var> is a <var>ItemFocused</var> property which contains 
the list that has focus on the list view control. The property value is 
<b>Nil</b> if a list item has not been focused on the control. Changing the 
value in the property to a valid list item causes the widgetset class to be 
updated when its Handle has been assigned.
</p>
<p>
ItemFocused is updated when a LVN_ITEMCHANGED notification message with a 
focus state change is handled for the list view control.
</p>
<p>
Use <var>Selected</var> to access the list item which is selected on the list 
view control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.ItemIndex">
<short>Ordinal position for the selected list item on the control.</short>
<descr>
<p>
<var>ItemIndex</var> is an <var>Integer</var> property which contains the 
ordinal position for the selected item on the list view control.
</p>
<p>
When OwnerData is <b>False</b>, the property value contains the value 
received from the widgetset class when the LVN_ITEMCHANGED notification 
message is handled for the control. If OwnerData is <b>True</b>, an internal 
member is locally maintained to track the selected item. In OwnerData 
(virtual) mode, only the most recently accessed item is stored for the 
control.
</p>
<p>
Setting a new value for the property causes the Selected property to be 
updated. In OwnerData mode, this causes the internal member to be updated and 
the virtual item is retrieved to set its Selected property to <b>True</b>. If 
Virtual mode is not enabled, the Selected property is set to corresponding 
value in Items.
</p>
<p>
If the new property value is -1, the value in Selected is set to <b>Nil</b>. 
Setting a new property value when MultiSelect is enabled also causes Selected 
to be set to <b>Nil</b>.
</p>
<p>
An Exception is raised if the new property value is not a value index 
position in Items, or -1.
</p>
</descr>
<seealso>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.OwnerData"/>
</seealso>
</element>

<element name="TCustomListView.Items">
<short>Collection of list items displayed on the list view control.</short>
<descr>
<p>
<var>Items</var> - the list of entries in the list. Held as a linked list 
with a cached index of the last accessed item.
</p>
<p>
<var>Items</var> is of type <var>TListitems</var> which has a built-in cache 
of the last accessed item. This speeds up interface updates since 
<var>Item.Index</var> is often used for the same item updating more 
properties. If <var>FCacheIndex</var> = -1 then the cache is not valid.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.MultiSelect">
<short>
Allows simultaneous selection of one or more list items using Ctrl+Click, 
Shift+Click, Ctrl+Shift+Click, or using program code.
</short>
<descr>
<p>
<var>MultiSelect</var> is a <var>Boolean</var> property which indicates if 
multiple simultaneous item selections are allows in the list view control. 
The default value for the property is <b>False</b>, and allows a single 
selection as reflected in the Selected property.
</p>
<p>
When set to <b>True</b>, multiple entries in the Items property can be marked 
as Selected. This can be achieved in program code by iterating over the 
TListItem instances in Items, and setting the Selected property for the 
appropriate items. At run-time, the mouse can be use toggle the selected 
state for one or more of the list items.
</p>
<dl>
<dt>Click</dt>
<dd>
Toggles the selected state for the list item under the mouse pointer.
</dd>
<dt>Shift+Click</dt>
<dd>
Toggles the selected state for a contiguous block of list items from the 
mouse pointer to the previous item selection.
</dd>
<dt>Ctrl+Click</dt>
<dd>
Toggles the selected state list item under the mouse pointer without altering 
the previously selected list items.
</dd>
<dt>Ctrl+Shift+Click</dt>
<dd>
Toggles the selected state for a contiguous block of list items from the 
mouse pointer to the previously focused list item.
</dd>
</dl>
<p>
MultiSelect is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
<p>
Use SelCount to get the number of selected items when MultiSelect is enabled. 
Use Items to access the list items to check the values in their Selected 
properties.
</p>
<p>
Use SelectAll to set the selected state to <b>True</b> for all of the Items 
on the control.
</p>
<p>
Use ClearSelection to clear the selected state for all of the Items on the 
control.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.SelCount"/>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.SelectAll"/>
<link id="TCustomListView.ClearSelection"/>
<link id="TListItem.Selected"/>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.OwnerData">
<short>
Enables or disables owner data (virtual) mode for the list view control.
</short>
<descr>
<p>
<var>OwnerData</var> is a <var>Boolean</var> property which enables or 
disables virtual mode for the list view control.
</p>
<p>
When set to <b>True</b>, the Items property does not contain the actual data 
displayed on the control. Only the most recently accessed list item exists in 
the list view control. This allows the list view to be used to display a large 
number of items with a minimal amount of overhead. List item content is 
located and retrieved using event handlers in the control. 
</p>
<dl>
<dt>OnData</dt>
<dd>
Retrieves the content for the selected / focused virtual list item.
</dd>
<dt>OnDataFind</dt>
<dd>
Locates a virtual list item with a specified value.
</dd>
<dt>OnDataHint</dt>
<dd>
Notifies the control when a caching hint for virtual data is received and 
handled in the control.
</dd>
</dl>
<p>
Set the value for the Count property in Items to indicate the number of owner 
data items available to the list view control. Assign a routine to OnData to 
populate an individual list item (and sub-items if needed) from the source 
for the owner data.
</p>
<p>
When OwnerData is set to <b>False</b>, all values displayed on the list view 
control are maintained in the Items property.
</p>
<p>
OwnerData is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.Columns"/>
<link id="TCustomListView.Column"/>
<link id="TCustomListView.OnData"/>
<link id="TCustomListView.OnDataFind"/>
<link id="TCustomListView.OnDataHint"/>
<link id="TCustomListView.OnDataHint"/>
<link id="TListItems.Count"/>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.ReadOnly">
<short>
Disables editing of list items on the control when set to <b>True</b>.
</short>
<descr>
<p>
<var>ReadOnly</var> is a <var>Boolean</var> property used to enable or 
disable editing of captions for list items at run-time. When ReadOnly is set 
to <b>True</b>, the editor for the control cannot be activated using a mouse 
double Click or by pressing the F2 function key.
</p>
<p>
The default value for the property is <b>False</b>, and indicates that item 
editing is allowed.
</p>
<p>
ReadOnly is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
</descr>
<seealso>
<link id="TListViewProperties"/>
<link id="TListViewProperty"/>
</seealso>
</element>

<element name="TCustomListView.RowSelect">
<short>
Indicates if the entire row is highlighted when selected on the list view 
control.
</short>
<descr>
<p>
<var>RowSelect</var> is a <var>Boolean</var> property which indicates whether 
all columns in the row are highlighted when the row is selected. The default 
value for RowSelect is <b>False</b>, and indicates that only the row value in 
the first column is displayed using the selected highlighting. RowSelect is 
used in report mode (ViewStyle = vsReport).
</p>
<p>
RowSelect is one of the TListViewProperty values included in the 
TListViewProperties set type and exchanged with the widgetset class. The 
property value is read from and written to the TCustomTreeview widgetset 
class instance when its handle is valid. Changing the value for the property 
causes the widgetset class to be updated with the new value.
</p>
<p>
Use MultiSelect to enable multi-selection of rows and/or columns on the list 
view control.
</p>
</descr>
<seealso>
<link id="TCustomListView.MultiSelect"/>
<link id="TListViewProperty"/>
<link id="TListViewProperties"/>
</seealso>
</element>

<element name="TCustomListView.SelCount">
<short>Number of currently selected Items when MultiSelect is enabled.</short>
<descr>
<p>
<var>SelCount</var> is a read-only <var>Integer</var> property with the 
number selected entries in <var>Items</var>. SelCount is relevant when 
<var>MultiSelect</var> is set to <b>True</b>; otherwise, the single selected 
item is found in the Selected property.
</p>
<p>
If the <var>Handle</var> has been allocated for the widgetset class, the 
value from the <var>GetSelCount</var> method is used as the property value. 
Otherwise, the property value is calculated by counting the number of 
<var>TListItem</var> instances in Items that have their <var>Selected</var> 
property set to <b>True</b>. The return value is 0 when none of the Items 
have a selected property set to <b>True</b>.
</p>
<p>
Use GetNextItem with the lisSelected item state to retrieve a multi-selected 
item that is adjacent to another selected item.
</p>
</descr>
<seealso>
<link id="TCustomListView.MultiSelect"/>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.GetNextItem"/>
<link id="TListItem.Selected"/>
<link id="TListItems"/>
</seealso>
</element>

<element name="TCustomListView.Selected">
<short>Contains the selected list item in the list view control.</short>
<descr>
<p>
<var>Selected</var> is a <var>TListItem</var> property which contains the 
selected list item in the list view control. Assign a value from the Items 
property to select the list item.
</p>
<p>
When MultiSelect is enabled, Selected represents the first entry in Items 
that has its Selected property set to <b>True</b>. If none of the list items 
has its Selected property set to <b>True</b>, or SelCount is <b>0</b>, the 
property value is <b>Nil</b>.
</p>
<p>
When OwnerData (or Virtual Mode) is enabled, Selected refers to the most 
recent owner data item retrieved when the value in ItemIndex was changed. If 
the item index was set to <b>-1</b>, the property value is <b>Nil</b>.
</p>
<p>
When both OwnerData and MultiSelect are enabled, Selected refers to the first 
entry in Items with its Selected property set to <b>True</b>. If none of the 
list items has its Selected property set to <b>True</b>, the property value 
is <b>Nil</b>.
</p>
<p>
Setting a new value for Selected causes the affected list item(s) in the 
Items property to be updated. In single select mode (MultiSelect = 
<b>False</b>), the Selected property in the current list item is set to 
<b>False</b> prior to updating the property value. In MultiSelect mode, a 
list item assigned as the new property value causes its Selected property to 
be set to <b>True</b> in the Items for the control.
</p>
<p>
Set Selected to <b>Nil</b> to clear the current selection(s) in the control. 
When MultiSelect is enabled, this causes all of the entries in Items to reset 
their Selected properties to <b>False</b>. In short, setting Selected to 
<b>Nil</b> clears any existing multi-selections in Items.
</p>
<p>
Setting a new value for the property causes the OnChange and OnSelectItem 
event handlers to be signalled (when assigned) when the LVN_ITEMCHANGED 
notification message is handled for the control. If both handlers are 
assigned, both handlers are signalled.
</p>
<p>
Assigning a list item to Selected that is not owned by the current list view 
control causes an exception to be raised.
</p>
<p>
Use ClearSelection to clear the Selected attribute for all single or 
multi-selected Items in the control.
</p>
</descr>
<seealso>
<link id="TCustomListView.OwnerData"/>
<link id="TCustomListView.MultiSelect"/>
<link id="TCustomListView.ItemIndex"/>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.ClearSelection"/>
<link id="TCustomListView.SelectAll"/>
<link id="TListItem.Selected"/>
<link id="TListItems.Count"/>
<link id="TOwnerDataListItem.SetDataIndex"/>
</seealso>
</element>

<element name="TCustomListView.LastSelected">
<short>
Contains the list item that was the most recently selected item on the 
control.
</short>
<descr>
<p>
<var>LastSelected</var> is a read-only <var>TListItem</var> property with the 
most recently selected item on the control. Its value references the internal 
member used for the <var>Selected</var> property. It is updated when a value 
is assigned to the Selected property, or a list item is selected using the 
keyboard or mouse at run-time. Setting Selected to <b>Nil</b> or calling 
ClearSelection causes LastSelected to return <b>Nil</b>.
</p>
</descr>
<seealso>
<link id="TCustomListView.Selected"/>
<link id="TCustomListView.ClearSelection"/>
</seealso>
</element>

<element name="TCustomListView.TabStop">
<short>
Allows navigation to and from the control by pressing the Tab or Shift+Tab 
keys.
</short>
<descr>
<p>
TabStop is a TabStop property which indicates if the control can be focused 
when using the Tab or Shift+Tab keys to navigate between controls on a form. 
TabStop is reintroduced in TCustomListView; the default value for the 
property is <b>True</b>. Changing the value for the property causes 
UpdateTabOrder to be called (in the ancestor class). A CM_TABSTOPCHANGED 
message is performed for the control.
</p>
<p>
TabStop is used in methods like FindNextControl, and may be updated in 
methods like Insert.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
</seealso>
</element>

<element name="TCustomListView.TopItem">
<short>
The list item which is displayed at the top of the list view control.
</short>
<descr>
<p>
<var>TopItem</var> is a read-only <var>TListItem</var> property with the list 
item that appears at the top of the scrollable, non-fixed area on the control 
when ViewStyle is set to vsReport or vsList. TopItem contains <b>Nil</b> when 
ViewStyle is set to vsSmallIcon or vsIcon.
</p>
<p>
The property value is the TListItem entry in the Items container as reported 
by the widgetset class for the list view control.
</p>
</descr>
<seealso>
<link id="TCustomListView.Items"/>
<link id="TCustomListView.ViewStyle"/>
<link id="TListItem"/>
</seealso>
</element>

<element name="TCustomListView.ViewOrigin">
<short>
Coordinate with the left/top visible point for the list items on the control.
</short>
<descr>
<p>
ViewOrigin is a TPoint property with the left and top coordinates for the 
area currently displayed in the list view control. The TPoint value is 
provided by the widgetset class instance when its handle has been allocated. 
Otherwise, the cached value for ViewOrigin is returned. Changing the value 
for the property causes the widget to notified.
</p>
<p>
ViewOrigin is updated when the list view control is scrolled.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomListView.VisibleRowCount">
<short>
Number of visible rows using the size, position, and layout for the list view 
control.
</short>
<descr/>
<seealso/>
</element>

<element name="TListView">
<short>
<var>TListView</var> - a window showing a list of <var>Items</var> which may 
or may not have associated icons.
</short>
<descr>
<p>
<var>TListView</var>- a window showing a list of items which may or may not 
have associated icons.
</p>
<p>
At first this control looks very like <link 
id="#lcl.stdctrls.TListBox">TListBox</link> but it has a much higher degree 
of complexity. It is capable of displaying Items in <var>Columns</var> of 
<var>Rows</var> and it can have images associated with the list 
<var>Items</var>.
</p>
<p>
The important information is held in <var>Items</var>, a string-list that can 
be created using the string-list editor obtained by right-clicking on the 
ListView in the Form Editor or by clicking on the ellipsis (<b>...</b>) next 
to the <var>Items</var> entry in the Object Inspector.
</p>
<p>
A typical application might have two image lists: <var>LargeImages</var> and 
<var>SmallImages</var>. They contain large and small sizes for the same 
collection of images. The index positions in the first list would correspond 
with those in the second list.
</p>
<p>
<var>SmallImages</var> (if assigned to a string-list) can be displayed beside 
the text strings in the list view and the programmer would supply code to 
ensure that when an item with its associated Small Image was selected, the 
corresponding Large Image would be displayed in another window.
</p>
<p>
One or more <var>TImageList</var> controls need to be added to the Form 
Designer and the ImageList Editor can be opened from the pop-up menu obtained 
by right-clicking on <var>TImageList</var> icon in the Form Designer. The 
image list can be populated by reading from files. Then in the StringList 
editor for <var>Items</var> the correct <var>ImageIndex</var> must be 
assigned to each entry in the list.
</p>
</descr>
<seealso>
<link id="TCustomListView"/>
<link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
</seealso>
</element>

<element name="TListView.Align" link="#lcl.controls.TControl.Align"/>
<element name="TListView.AllocBy" link="#lcl.comctrls.TCustomListView.AllocBy"/>
<element name="TListView.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TListView.AutoSort" link="#lcl.comctrls.TCustomListView.AutoSort"/>
<element name="TListView.AutoSortIndicator" link="#lcl.comctrls.TCustomListView.AutoSortIndicator"/>
<element name="TListView.AutoWidthLastColumn" link="#lcl.comctrls.TCustomListView.AutoWidthLastColumn"/>
<element name="TListView.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TListView.BorderStyle" link="#lcl.comctrls.TCustomListView.BorderStyle"/>
<element name="TListView.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
<element name="TListView.Checkboxes" link="#lcl.comctrls.TCustomListView.Checkboxes"/>
<element name="TListView.Color" link="#lcl.controls.TControl.Color"/>
<element name="TListView.Columns" link="#lcl.comctrls.TCustomListView.Columns"/>
<element name="TListView.ColumnClick" link="#lcl.comctrls.TCustomListView.ColumnClick"/>
<element name="TListView.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TListView.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TListView.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TListView.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TListView.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TListView.Font" link="#lcl.controls.TControl.Font"/>
<element name="TListView.GridLines" link="#lcl.comctrls.TCustomListView.GridLines"/>
<element name="TListView.HideSelection" link="#lcl.comctrls.TCustomListView.HideSelection"/>
<element name="TListView.IconOptions" link="#lcl.comctrls.TCustomListView.IconOptions"/>
<element name="TListView.Items" link="#lcl.comctrls.TCustomListView.Items"/>
<element name="TListView.LargeImages" link="#lcl.comctrls.TCustomListView.LargeImages"/>
<element name="TListView.LargeImagesWidth" link="#lcl.comctrls.TCustomListView.LargeImagesWidth"/>
<element name="TListView.MultiSelect" link="#lcl.comctrls.TCustomListView.MultiSelect"/>
<element name="TListView.OwnerData" link="#lcl.comctrls.TCustomListView.OwnerData"/>
<element name="TListView.OwnerDraw" link="#lcl.comctrls.TCustomListView.OwnerDraw"/>

<element name="TListView.ParentColor">
<short>Uses the Color from the Parent control, when enabled.</short>
<descr>
<p>
<var>ParentColor</var> determines if the control should use the Color from 
the Parent control, when enabled. The default value for the property is 
<b>False</b> in TListView.
</p>
<p>
When this property is <b>True</b>, all changes to the Color of the parent 
will also be applied to the Color of the control, ensuring that they both 
contain same value. If the Color of the control is changed by the 
application, then ParentColor will be automatically set to <b>False</b>.
</p>
<p>
Using ParentColor when the Color value is clDefault can cause problems in 
resolving the actual color value. To obtain the Color property of a control 
while taking into account clDefault and ParentColor, use the 
GetColorResolvingParent method. This method might return a non-RGB color, but 
will never return clDefault. To obtain a purely RGB result use the 
GetRGBColorResolvingParent method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.ParentColor">TControl.ParentColor</link>
<link id="#lcl.controls.TControl.Color">TControl.Color</link>
<link id="#lcl.controls.TControl.GetColorResolvingParent">TControl.GetColorResolvingParent</link>
<link id="#lcl.controls.TControl.GetRGBColorResolvingParent">TControl.GetRGBColorResolvingParent</link>
</seealso>
</element>

<element name="TListView.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TListView.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TListView.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TListView.ReadOnly" link="#lcl.comctrls.TCustomListView.ReadOnly"/>
<element name="TListView.RowSelect" link="#lcl.comctrls.TCustomListView.RowSelect"/>
<element name="TListView.ScrollBars" link="#lcl.comctrls.TCustomListView.ScrollBars"/>
<element name="TListView.ShowColumnHeaders" link="#lcl.comctrls.TCustomListView.ShowColumnHeaders"/>
<element name="TListView.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TListView.SmallImages" link="#lcl.comctrls.TCustomListView.SmallImages"/>
<element name="TListView.SmallImagesWidth" link="#lcl.comctrls.TCustomListView.SmallImagesWidth"/>
<element name="TListView.SortColumn" link="#lcl.comctrls.TCustomListView.SortColumn"/>
<element name="TListView.SortDirection" link="#lcl.comctrls.TCustomListView.SortDirection"/>
<element name="TListView.SortType" link="#lcl.comctrls.TCustomListView.SortType"/>
<element name="TListView.StateImages" link="#lcl.comctrls.TCustomListView.StateImages"/>
<element name="TListView.StateImagesWidth" link="#lcl.comctrls.TCustomListView.StateImagesWidth"/>
<element name="TListView.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TListView.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TListView.ToolTips" link="#lcl.comctrls.TCustomListView.ToolTips"/>
<element name="TListView.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TListView.ViewStyle" link="#lcl.comctrls.TCustomListView.ViewStyle"/>
<element name="TListView.OnAdvancedCustomDraw" link="#lcl.comctrls.TCustomListView.OnAdvancedCustomDraw"/>
<element name="TListView.OnAdvancedCustomDrawItem" link="#lcl.comctrls.TCustomListView.OnAdvancedCustomDrawItem"/>
<element name="TListView.OnAdvancedCustomDrawSubItem" link="#lcl.comctrls.TCustomListView.OnAdvancedCustomDrawSubItem"/>
<element name="TListView.OnChange" link="#lcl.comctrls.TCustomListView.OnChange"/>
<element name="TListView.OnChanging" link="#lcl.comctrls.TCustomListView.OnChanging"/>
<element name="TListView.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TListView.OnColumnClick" link="#lcl.comctrls.TCustomListView.OnColumnClick"/>
<element name="TListView.OnCompare" link="#lcl.comctrls.TCustomListView.OnCompare"/>
<element name="TListView.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TListView.OnCreateItemClass" link="#lcl.comctrls.TCustomListView.OnCreateItemClass"/>
<element name="TListView.OnCustomDraw" link="#lcl.comctrls.TCustomListView.OnCustomDraw"/>
<element name="TListView.OnCustomDrawItem" link="#lcl.comctrls.TCustomListView.OnCustomDrawItem"/>
<element name="TListView.OnCustomDrawSubItem" link="#lcl.comctrls.TCustomListView.OnCustomDrawSubItem"/>
<element name="TListView.OnData" link="#lcl.comctrls.TCustomListView.OnData"/>
<element name="TListView.OnDataFind" link="#lcl.comctrls.TCustomListView.OnDataFind"/>
<element name="TListView.OnDataHint" link="#lcl.comctrls.TCustomListView.OnDataHint"/>
<element name="TListView.OnDataStateChange" link="#lcl.comctrls.TCustomListView.OnDataStateChange"/>
<element name="TListView.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TListView.OnDeletion" link="#lcl.comctrls.TCustomListView.OnDeletion"/>
<element name="TListView.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TListView.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TListView.OnDrawItem" link="#lcl.comctrls.TCustomListView.OnDrawItem"/>
<element name="TListView.OnEdited" link="#lcl.comctrls.TCustomListView.OnEdited"/>
<element name="TListView.OnEditing" link="#lcl.comctrls.TCustomListView.OnEditing"/>
<element name="TListView.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TListView.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TListView.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TListView.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TListView.OnInsert" link="#lcl.comctrls.TCustomListView.OnInsert"/>
<element name="TListView.OnItemChecked" link="#lcl.comctrls.TCustomListView.OnItemChecked"/>
<element name="TListView.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TListView.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TListView.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TListView.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TListView.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TListView.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TListView.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TListView.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TListView.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TListView.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TListView.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TListView.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="TListView.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="TListView.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
<element name="TListView.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TListView.OnSelectItem" link="#lcl.comctrls.TCustomListView.OnSelectItem"/>
<element name="TListView.OnShowHint" link="#lcl.controls.TControl.OnShowHint"/>
<element name="TListView.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TListView.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TListView.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TProgressBarOrientation">
<short>Represents the orientations used for a progress bar.</short>
<descr>
<p>
<var>TProgressBarOrientation</var> is an enumerated type with values that 
represent the orientations used for a progress bar. TProgressBarOrientation 
is the type used to implement the <var>TCustomProgressBar.Orientation</var> 
property.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Orientation"/>
</seealso>
</element>
<element name="TProgressBarOrientation.pbHorizontal">
<short>
Progress bar is oriented horizontally, and displays progress from left to 
right.
</short>
</element>
<element name="TProgressBarOrientation.pbVertical">
<short>
Progress bar is oriented vertically, and displays progress from bottom to top.
</short>
</element>
<element name="TProgressBarOrientation.pbRightToLeft">
<short>
Progress bar is oriented horizontally, and displays progress from right to 
left.
</short>
</element>
<element name="TProgressBarOrientation.pbTopDown">
<short>
Progress bar is oriented vertically, and displays progress from top to bottom.
</short>
</element>

<element name="TProgressBarStyle">
<short>Represents the visual display styles used for a progress bar.</short>
<descr>
<p>
<var>TProgressBarStyle</var> is an enumerated type with values that represent 
visual display styles for a progress bar. TProgressBarStyle is the type used 
to implement the <var>TCustomProgressBar.Style</var> property.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Style"/>
<link id="TCustomProgressBar.Smooth"/>
</seealso>
</element>
<element name="TProgressBarStyle.pbstNormal">
<short>
Progress bar indicator is displayed as a static bar using the native drawing 
style or theme for the platform.
</short>
</element>
<element name="TProgressBarStyle.pbstMarquee">
<short>
Progress bar indicator is displayed as an animated marquee, where movement 
indicates activity but does not reflect the completed portion of a task.
</short>
</element>

<element name="TProgressBarState">
<short>
Represents state values used when drawing a progress bar.
</short>
<descr>
<p>
<var>TProgressBarState</var> is an enumerated type with values that represent 
the states for a progress bar. TProgressBarState is the type used to implement 
the State property in TTaskDialogProgressBar.
</p>
</descr>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="#lcl.dialogs.TTaskDialogProgressBar.State">TTaskDialogProgressBar.State</link>
</seealso>
</element>
<element name="TProgressBarState.pbsNormal">
<short>
Progress bar is rendered using the normal drawing style for the platform.
</short>
</element>
<element name="TProgressBarState.pbsError">
<short>
Progress bar is drawn using a style which indicates an error condition. 
</short>
</element>
<element name="TProgressBarState.pbsPaused">
<short>
Progress bar is drawn using a style which indicates that the bar is paused. 
</short>
</element>

<element name="TCustomProgressBar">
<short>Implements the base class for progress bar controls.</short>
<descr>
<p>
<var>TCustomProgressBar</var> is a <var>TWinControl</var> descendant which 
implements a progress bar control.
</p>
<p>
A progress bar is used to indicate the progress for a lengthy operation. It 
contains an indicator bar that is updated with the completion percentage for 
the task. A progress bar can use either horizontal or vertical orientations. 
The visual appearance of the control can be configured using drawing styles, 
themes, and other property settings.
</p>
<p>
TCustomProgressBar is the ancestor for <var>TProgressBar</var>.
</p>
</descr>
<seealso>
<link id="TProgressBar"/>
<link id="#lcl.controls.TWinControl">TWinControl</link>
</seealso>
</element>

<element name="TCustomProgressBar.FMin"/>
<element name="TCustomProgressBar.FMax"/>
<element name="TCustomProgressBar.FStep"/>
<element name="TCustomProgressBar.FPosition"/>
<element name="TCustomProgressBar.FSmooth"/>
<element name="TCustomProgressBar.FBarShowText"/>
<element name="TCustomProgressBar.FBarTextFormat"/>
<element name="TCustomProgressBar.FOrientation"/>
<element name="TCustomProgressBar.FStyle"/>

<element name="TCustomProgressBar.GetMin">
<short>Gets the value for the Min property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Min"/>
</seealso>
</element>
<element name="TCustomProgressBar.GetMin.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomProgressBar.GetMax">
<short>Gets the value for the Max property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Max"/>
</seealso>
</element>
<element name="TCustomProgressBar.GetMax.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomProgressBar.GetPosition">
<short>Gets the value for the Position property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Position"/>
</seealso>
</element>
<element name="TCustomProgressBar.GetPosition.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomProgressBar.SetParams">
<short>Sets the values for the Min and Max properties.</short>
<descr>
<p>
<var>SetParams</var> is a convenience method used to set new values for both 
the <var>Min</var> and the <var>Max</var> properties.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Max"/>
<link id="TCustomProgressBar.Min"/>
</seealso>
</element>
<element name="TCustomProgressBar.SetParams.AMin">
<short>New value for the Min property.</short>
</element>
<element name="TCustomProgressBar.SetParams.AMax">
<short>New value for the Max property.</short>
</element>

<element name="TCustomProgressBar.SetMin">
<short>Sets the value for the Min property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Min"/>
</seealso>
</element>
<element name="TCustomProgressBar.SetMin.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomProgressBar.SetMax">
<short>Sets the value for the Max property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Max"/>
</seealso>
</element>
<element name="TCustomProgressBar.SetMax.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomProgressBar.SetPosition">
<short>Sets the value for the Position property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Position"/>
</seealso>
</element>
<element name="TCustomProgressBar.SetPosition.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomProgressBar.SetStep">
<short>Sets the value for the Step property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Step"/>
</seealso>
</element>
<element name="TCustomProgressBar.SetStep.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomProgressBar.SetSmooth">
<short>Sets the value for the Smooth property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Smooth"/>
</seealso>
</element>
<element name="TCustomProgressBar.SetSmooth.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomProgressBar.SetBarShowText">
<short>Sets the value for the BarShowText property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.BarShowText"/>
</seealso>
</element>
<element name="TCustomProgressBar.SetBarShowText.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomProgressBar.SetOrientation">
<short>Sets the value for the Orientation property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Orientation"/>
</seealso>
</element>
<element name="TCustomProgressBar.SetOrientation.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomProgressBar.SetStyle">
<short>Sets the value for the Style property.</short>
<descr/>
<seealso>
<link id="TCustomProgressBar.Style"/>
</seealso>
</element>
<element name="TCustomProgressBar.SetStyle.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomProgressBar.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomProgressBar.ApplyChanges">
<short>
<var>ApplyChanges</var> - apply any changes that have occurred.
</short>
<descr>
<p>
<var>ApplyChanges</var> is a method used to apply property values from the 
progress bar to the widgetset class.
</p>
<p>
Values in the <var>Min</var>, <var>Max</var>, and <var>Position</var> 
properties are normalized; i. e. Min &lt;= Position &lt;= Max. When the 
<var>Handle</var> has been allocated for the control, the values are applied 
to the widgetset class by calling its <var>ApplyChanges</var> method.
</p>
<p>
No actions are performed in the method when the component is being loaded 
using the LCL streaming mechanism.
</p>
<p>
ApplyChanges is called when the Handle is created (or re-created) in 
<var>InitializeWnd</var>, and from the <var>Loaded</var> method when 
component streaming has been completed. It is also called when values in 
properties are changed, including: <var>Min</var>, <var>Max</var>, 
<var>Position</var>, <var>Step</var>, <var>Orientation</var>, 
<var>Smooth</var>, and <var>BarShowText</var>.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Min"/>
<link id="TCustomProgressBar.Max"/>
<link id="TCustomProgressBar.Position"/>
<link id="TCustomProgressBar.InitializeWnd"/>
<link id="TCustomProgressBar.Loaded"/>
</seealso>
</element>

<element name="TCustomProgressBar.InitializeWnd">
<short>
Applies property values to the widgetset class when the Handle is 
(re-)created.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
</seealso>
</element>

<element name="TCustomProgressBar.Loaded">
<short>
Applies property values to the widgetset class when component streaming is 
completed.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
</seealso>
</element>

<element name="TCustomProgressBar.GetControlClassDefaultSize">
<short>Gets the default size for new instances of the class.</short>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>

<element name="TCustomProgressBar.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
Create is the overridden constructor for the class instance, and calls the 
inherited constructor on entry. Create sets component style flags needed for 
the control, and sets the default values for properties in the class instance.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
<link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
</seealso>
</element>
<element name="TCustomProgressBar.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomProgressBar.StepIt">
<short>
Increments the Position for the progress bar by the value in Step.
</short>
<descr>
<p>
<var>StepIt</var> is a procedure used to move the progress bar indicator from 
its current <var>Position</var> using the increment specified in the 
<var>Step</var> property. The value is Step is added to the value in 
Position. Position is range limited to the values in <var>Min</var> or 
<var>Max</var> if needed.
</p>
<p>
If the Handle for the control has been allocated, the SetPosition method in 
the widgetset class is called to apply the change in the Position property.
</p>
<p>
Use <var>StepBy</var> to apply an arbitrary increment value to Position.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Step"/>
<link id="TCustomProgressBar.StepBy"/>
<link id="TCustomProgressBar.Position"/>
</seealso>
</element>

<element name="TCustomProgressBar.StepBy">
<short>
Applies an arbitrary increment value to the Position for the progress bar.
</short>
<descr>
</descr>
<seealso/>
</element>
<element name="TCustomProgressBar.StepBy.Delta">
<short>Increment applied to the value in Position.</short>
</element>

<element name="TCustomProgressBar.Max">
<short>
Specifies the maximum value for the Position in the progress bar.
</short>
<descr>
<p>
<var>Max</var> is an <var>Integer</var> property which specifies the maximum 
value allowed in the <var>Position</var> property. The default value for the 
property is <b>100</b>.
</p>
<p>
Set values for the <var>Min</var> and <var>Max</var> properties as needed to 
represent the task or operation. Or, use the <var>SetParams</var> method to 
set both Min and Max values at the same time.
</p>
<p>
Changing the value for the property causes the <var>ApplyChanges</var> method 
to be called.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Min"/>
<link id="TCustomProgressBar.Position"/>
<link id="TCustomProgressBar.ApplyChanges"/>
</seealso>
</element>

<element name="TCustomProgressBar.Min">
<short>
Specifies the minimum value for the Position in the progress bar.
</short>
<descr>
<p>
<var>Min</var> is an <var>Integer</var> property which specifies the minimum 
value allowed in the <var>Position</var> property. The default value for the 
property is <b>0</b>.
</p>
<p>
Set values for the <var>Min</var> and <var>Max</var> properties as needed to 
represent the task or operation. Or, use the <var>SetParams</var> method to 
set both Min and Max values at the same time.
</p>
<p>
Changing the value for the property causes the <var>ApplyChanges</var> method 
to be called.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Max"/>
<link id="TCustomProgressBar.Position"/>
<link id="TCustomProgressBar.ApplyChanges"/>
</seealso>
</element>

<element name="TCustomProgressBar.Orientation">
<short>
Specifies the orientation and direction for the progress bar.
</short>
<descr>
<p>
<var>Orientation</var> is a <var>TProgressBarOrientation</var> property which 
indicates the orientation and direction for the progress bar. The default 
value is <var>pbHorizontal</var>, and orients the progress bar horizontally. 
As the value in <var>Position</var> is increased, the progress bar is moved 
from left to right.
</p>
<p>
See <var>TProgressBarOrientation</var> for the available values and their 
meanings.
</p>
<p>
Changing the value for the property causes the <var>ApplyChanges</var> method 
to be called.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Max"/>
<link id="TCustomProgressBar.Min"/>
<link id="TCustomProgressBar.Position"/>
<link id="TCustomProgressBar.ApplyChanges"/>
<link id="TProgressBarOrientation"/>
</seealso>
</element>

<element name="TCustomProgressBar.Position">
<short>The current position for the progress bar.</short>
<descr>
<p>
<var>Position</var> is an <var>Integer</var> property which contains the 
current position for the progress bar. The values in Position, 
<var>Min</var>, and <var>Max</var> determine the completion percentage and 
the length for the progress bar indicator when <var>Style</var> is set to 
<var>pbstNormal</var>.
</p>
<p>
Position must be in the range specified by the <var>Min</var> and 
<var>Max</var> properties. Setting a new value for the property causes the 
<var>ApplyChanges</var> method to be called. It validates and range limits 
property values before they are applied to the widgetset class.
</p>
<p>
Use <var>StepIt</var> and <var>Step</var> to increment the value in Position 
by a fixed value.
</p>
<p>
Use <var>StepBy</var> to increment the value in Position by an arbitrary 
value.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Min"/>
<link id="TCustomProgressBar.Max"/>
<link id="TCustomProgressBar.Style"/>
<link id="TCustomProgressBar.StepBy"/>
<link id="TCustomProgressBar.Step"/>
<link id="TCustomProgressBar.StepIt"/>
<link id="TCustomProgressBar.ApplyChanges"/>
<link id="TProgressBarStyle"/>
</seealso>
</element>

<element name="TCustomProgressBar.Smooth">
<short>
Indicates if the progress bar indicator is drawn as a smooth solid bar, as 
opposed to individual bar segments.
</short>
<descr>
<p>
The implementation of <var>Smooth</var> drawing is platform-dependent. Some 
widgetsets do not use the segmented drawing style for their progress bars. 
For those platforms, the value in the property is not used.
</p>
<p>
Use <var>Style</var> to control whether a normal progress bar is drawn, or if 
an animated marquee is used in the progress bar indicator.
</p>
</descr>
<seealso>
<link id="TCustomProgressBar.Style"/>
</seealso>
</element>

<element name="TCustomProgressBar.Step">
<short>
Increment applied to the value in Position in the StepIt method.
</short>
<descr>
<p>
<var>Step</var> is an <var>Integer</var> property with the increment applied 
to the value in Position in the StepIt method. The default value for the 
property is 10, and represents 10% of the default range in Min and Max.
</p>
<p>
Changing the value for the property causes the ApplyChanges method to be 
called to normalize the values in Min, Max, and Position. ApplyChanges also 
updates the visual appearance and settings in the widgetset class instance.
</p>
<p>
Update Step when the range of values in Min and Max are changed.
</p>
<remark>
For the macOS Carbon widgetset, the Step property is not supported.
</remark>
</descr>
<seealso/>
</element>

<element name="TCustomProgressBar.Style">
<short>
Drawing style for the progress bar.
</short>
<descr>
<p>
The default value for the property is <var>pbstNormal</var>, and causes a 
solid (or segmented bar) to be displayed. <var>pbstMarquee</var> causes the 
animated marquee-style progress bar to be displayed.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomProgressBar.BarShowText">
<short>
Indicates if status or progress text is draw over the progress bar.
</short>
<descr>
<p>
<var>BarShowText</var> some widgetsets allow text to be displayed on the bar 
to indicate its position and range of values. The implementation of 
BarShowText is platform-specific. If the widgetset does not display text on 
the progress bar, the value in the property is not used.
</p>
</descr>
<seealso/>
</element>

<element name="TProgressBar">
<short>
<var>TProgress Bar</var> - a bar that depicts what proportion of a process 
has been completed.
</short>
<descr>
<p>
<var>TProgress Bar</var> is a <var>TCustomProgressBar</var> descendant that 
implements a control which depicts the progress of a process, or the 
proportion of the process that has been completed. A series of colored 
rectangles appears in the control filling it from left to right or from top 
to bottom to represent the progress for the process.
</p>
</descr>
<seealso>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
</seealso>
</element>

<element name="TProgressBar.Align" link="#lcl.controls.TControl.Align"/>
<element name="TProgressBar.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TProgressBar.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TProgressBar.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
<element name="TProgressBar.Color" link="#lcl.controls.TControl.Color"/>
<element name="TProgressBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TProgressBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TProgressBar.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TProgressBar.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TProgressBar.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TProgressBar.Font" link="#lcl.controls.TControl.Font"/>
<element name="TProgressBar.Hint" link="#lcl.controls.TControl.Hint"/>
<element name="TProgressBar.Max" link="#lcl.comctrls.TCustomProgressBar.Max"/>
<element name="TProgressBar.Min" link="#lcl.comctrls.TCustomProgressBar.Min"/>
<element name="TProgressBar.Orientation" link="#lcl.comctrls.TCustomProgressBar.Orientation"/>
<element name="TProgressBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TProgressBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TProgressBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TProgressBar.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TProgressBar.Position" link="#lcl.comctrls.TCustomProgressBar.Position"/>
<element name="TProgressBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TProgressBar.Smooth" link="#lcl.comctrls.TCustomProgressBar.Smooth"/>
<element name="TProgressBar.Step" link="#lcl.comctrls.TCustomProgressBar.Step"/>
<element name="TProgressBar.Style" link="#lcl.comctrls.TCustomProgressBar.Style"/>
<element name="TProgressBar.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TProgressBar.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TProgressBar.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TProgressBar.BarShowText" link="#lcl.comctrls.TCustomProgressBar.BarShowText"/>
<element name="TProgressBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TProgressBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TProgressBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TProgressBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TProgressBar.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TProgressBar.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TProgressBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TProgressBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TProgressBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TProgressBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TProgressBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TProgressBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TProgressBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TProgressBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TProgressBar.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TProgressBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

<element name="TUDAlignButton">
<short>
Contains values used to align the buttons on a TUpDown control.</short>
<descr>
<p>
<var>TUDAlignButton</var> is an enumerated type with values that indicate the 
alignment for the up/down buttons on a TUpDown control. The value indicates 
where the buttons are positioned relative to the edit on the control. Values 
from TUDAlignButton can be assigned to the AlignButton property in a TUpDown 
control.
</p>
<p>
See TUDOrientation for the orientation of the arrows drawn on a TUpDown 
control.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.AlignButton"/>
<link id="TUpDown.AlignButton"/>
<link id="TUDOrientation"/>
</seealso>
</element>
<element name="TUDAlignButton.udLeft">
<short>
The up/down button is aligned on the left-hand edge of a TUpDown control.
</short>
</element>
<element name="TUDAlignButton.udRight">
<short>
The up/down button is aligned on the right-hand edge of a TUpDown control.
</short>
</element>
<element name="TUDAlignButton.udTop">
<short>
The up/down button is aligned on the top edge of a TUpDown control.
</short>
</element>
<element name="TUDAlignButton.udBottom">
<short>
The up/down button is aligned on the bottom edge of a TUpDown control.
</short>
</element>

<element name="TUDOrientation">
<short>
Indicates the orientation for the arrows on a TUpDown control.
</short>
<descr>
<p>
<var>TUDOrientation</var> is an enumerated type with values that control the 
orientation of the button arrows drawn on a TUpDown control. Values in 
TUDOrientation can be assigned to the Orientation property in TUpDown.
</p>
<p>
See TUDAlignButton for the values used to align the arrow buttons on a TUpDown 
control.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Orientation"/>
<link id="TUpDown.Orientation"/>
<link id="TUDAlignButton"/>
</seealso>
</element>
<element name="TUDOrientation.udHorizontal">
<short>
Button arrows are drawn side-by-side with the arrows pointing to the left and 
right.
</short>
</element>
<element name="TUDOrientation.udVertical">
<short>
Button arrows are stacked vertically with the arrows pointing upward and 
downward.
</short>
</element>

<element name="TUpDownDirection">
<short>
Indicates whether a value in a TUpDown control is being increased, decreased, 
or not changed.
</short>
<descr>
<p>
<var>TUpDownDirection</var> is an enumerated type with values that indicates 
whether a value is being increased, decreased, or not changed in a 
<var>TCustomUpDown</var> control. TUpDownDirection is the type passed as an 
argument to <var>TUDChangingEventEx</var> event handlers.
</p>
</descr>
<seealso/>
</element>
<element name="TUpDownDirection.updNone">
<short>The value is not changed in the control.</short>
</element>
<element name="TUpDownDirection.updUp">
<short>The value is increased in the control.</short>
</element>
<element name="TUpDownDirection.updDown">
<short>The value is decreased in the control.</short>
</element>

<element name="TUDBtnType">
<short>Represents the buttons used in a TCustomUpDown control.</short>
<descr>
<p>
<var>TUDBtnType</var> is an enumerated type with values that represent the 
buttons used in a <var>TCustomUpDown</var> control.
</p>
</descr>
<seealso/>
</element>
<element name="TUDBtnType.btNext">
<short>Represents the Next (Up, Increase Value) button.</short>
</element>
<element name="TUDBtnType.btPrev">
<short>Represents the Previous (Down, Decrease Value) button.</short>
</element>

<element name="TUDClickEvent">
<short>
Specifies an event handler signalled for a button click on a TUpDown control.
</short>
<descr>
<p>
<var>TUDClickEvent</var> is the type used to implement a handler routine in 
the OnClick property in TCustomUpDown.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.OnClick"/>
</seealso>
</element>
<element name="TUDClickEvent.Sender">
<short>
Object (TCustomUpDown) for the click event.
</short>
</element>
<element name="TUDClickEvent.Button">
<short>
Indicates whether the up or down button is applied in the click event.
</short>
</element>

<element name="TUDChangingEvent">
<short>
Specifies an event handler signalled prior to changing the value in a TUpDown 
control.
</short>
<descr>
<p>
<var>TUDChangingEvent</var> allows an application to control whether a pending 
change to the value in TUpDown can be applied to the control. Set the 
AllowChange argument to False in the handler routine to prevent the change 
from being applied to the control.
</p>
<p>
TUDChangingEvent is the type used to implement the OnChanging property in 
TUpDown.
</p>
<p>
Use TUDChangingEventEx and OnChangingEx for the event which includes the new 
value for the control and the direction in which the value will be changed.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.OnChanging"/>
<link id="TCustomUpDown.OnChangingEx"/>
<link id="TUpDown.OnChanging"/>
<link id="TUpDown.OnChangingEx"/>
<link id="TUDChangingEventEx"/>
</seealso>
</element>
<element name="TUDChangingEvent.Sender">
<short>
Object (TCustomUpDown) for the event.
</short>
</element>
<element name="TUDChangingEvent.AllowChange">
<short>
Indicates whether the value change can be applied to the TUpdown control. 
Return <b>False</b> to prevent the change to the control value.
</short>
</element>

<element name="TUDChangingEventEx">
<short>
Specifies an event handler signalled prior to changing the value in a TUpDown 
control.
</short>
<descr>
<p>
<var>TUDChangingEventEx</var> allows an application to control whether a 
pending change to the value in TUpDown can be applied to the control. It is 
similar to TUDChangingEvent, but includes the new value for the control and 
indicates the direction for the pending change. Set the AllowChange argument 
to False in the handler routine to prevent the change from being applied to 
the control.
</p>
<p>
TUDChangingEventEx is the type used to implement the OnChangingEx property in 
TUpDown.
</p>
<p>
Use TUDChangingEvent and OnChanging for the event which provides a simple 
notification of a pending value change in the control.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.OnChangingEx"/>
<link id="TCustomUpDown.OnChanging"/>
<link id="TUpDown.OnChangingEx"/>
<link id="TUpDown.OnChanging"/>
<link id="TUDChangingEvent"/>
</seealso>
</element>
<element name="TUDChangingEventEx.Sender">
<short>
Object (TCustomUpDown) for the event.
</short>
</element>
<element name="TUDChangingEventEx.AllowChange">
<short>
Indicates whether the value change can be applied to the TUpdown control. 
Return <b>False</b> to prevent the change to the control value.
</short>
</element>
<element name="TUDChangingEventEx.NewValue">
<short>
New value for the TUpdown control.
</short>
</element>
<element name="TUDChangingEventEx.Direction">
<short>
Direction for the pending value change (up or down).
</short>
</element>

<element name="TCustomUpDown">
<short>
<var>TCustomUpDown</var> - base class for <var>TUpDown</var> - a pair of 
arrow-like buttons which are used to increment or decrement some controlled 
variable; often attached to a scroll-bar but can also control a digital 
numeric display.
</short>
<descr>
<p>
<var>TCustomUpDown</var> - base class for <var>TUpDown</var> - a pair of 
arrow-like buttons which are used to increment or decrement some controlled 
variable; often attached to a scroll-bar but can also control a digital 
numeric display.
</p>
<p>
The control definition itself does not specify the variable upon which the 
buttons operate. The application programmer is responsible for supplying an 
event handler for <var>OnClick</var> to determine which button has been 
selected (designated <var>btNext</var> or <var>btPrev</var>) and incrementing 
or decrementing the variable in the control with which the UpDown is 
associated.
</p>
<p>
The amount by which the variable is changed is set by the integer property 
<var>Increment</var> with the optional multiplier <var>Thousands</var> (a 
boolean property).
</p>
<p>
For example the UpDown control may be used to move a slider up and down a 
scale by a specified amount for each click; alternatively a number may be 
displayed in a text box and clicking the buttons of the UpDown control may 
increment or decrement the number displayed by a specified amount.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomUpDown.FAlignButton"/>
<element name="TCustomUpDown.FArrowKeys"/>
<element name="TCustomUpDown.FAssociate"/>
<element name="TCustomUpDown.FCanChangeDir"/>
<element name="TCustomUpDown.FCanChangePos"/>
<element name="TCustomUpDown.FIncrement"/>
<element name="TCustomUpDown.FMax"/>
<element name="TCustomUpDown.FMaxBtn"/>
<element name="TCustomUpDown.FMin"/>
<element name="TCustomUpDown.FMinBtn"/>
<element name="TCustomUpDown.FMinRepeatInterval"/>
<element name="TCustomUpDown.FMouseDownBounds"/>
<element name="TCustomUpDown.FMouseTimerEvent"/>
<element name="TCustomUpDown.FMouseInsideComp"/>
<element name="TCustomUpDown.FOnChanging"/>
<element name="TCustomUpDown.FOnChangingEx"/>
<element name="TCustomUpDown.FOnClick"/>
<element name="TCustomUpDown.FOrientation"/>
<element name="TCustomUpDown.FPosition"/>
<element name="TCustomUpDown.FThousands"/>
<element name="TCustomUpDown.FWrap"/>

<element name="TCustomUpDown.FUseWS">
<short>
Indicates if the control depends on access to its WidgetSet class.
</short>
<descr>
<p>
FUseWS is a private Boolean member used to indicate if the control depends on 
access to its WidgetSet class instance. The value in FUseWS is set in the 
constructor for the class instance.
</p>
<p>
FUseWS is used in the constructor to ensure that buttons are created for Prev 
and Next values when they are not part of the widgetset class implementation.
</p>
<p>
FUseWS is used in the InitializeWnd method to determine if the property 
values must be set in the widgetset class, including: MinPosition, 
MaxPosition, Position, Increment, Wrap, Orientation, and UseArrowKeys.
</p>
<p>
FUseWS is used in the UpdateOrientation method to determine whether the 
action is implemented in the widgetset class, or handled in TCustomUpDown.
</p>
<p>
FUseWS is used in the AdjustPos method to determine whether a change in the 
control value using its buttons is handled in the current class instance, or 
forwarded to the appropriate button click method in the widgetset class. 
Similarly, handling for mouse wheel events are determined using the FUseWS 
member.
</p>
</descr>
<version>Introduced in LCL version 2.1.0.</version>
<seealso/>
</element>

<element name="TCustomUpDown.CheckMouseEntering">
<short>Indicates if the mouse pointer has entered the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomUpDown.CheckMouseEntering.Result">
<short>
<b>True</b> when the mouse pointer in within the bounds for the control.
</short>
</element>

<element name="TCustomUpDown.CheckMouseLeaving">
<short>Indicates if the mouse pointer has exited the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomUpDown.CheckMouseLeaving.Result">
<short>
<b>True</b> when the mouse pointer is not in the client rectangle for the 
control.
</short>
</element>

<element name="TCustomUpDown.GetPosition"/>
<element name="TCustomUpDown.GetPosition.Result"/>
<element name="TCustomUpDown.BTimerExec"/>
<element name="TCustomUpDown.BTimerExec.Sender"/>
<element name="TCustomUpDown.GetFlat"/>
<element name="TCustomUpDown.GetFlat.Result"/>
<element name="TCustomUpDown.SetAlignButton"/>
<element name="TCustomUpDown.SetAlignButton.Value"/>
<element name="TCustomUpDown.SetArrowKeys"/>
<element name="TCustomUpDown.SetArrowKeys.Value"/>
<element name="TCustomUpDown.SetAssociate"/>
<element name="TCustomUpDown.SetAssociate.Value"/>
<element name="TCustomUpDown.SetIncrement"/>
<element name="TCustomUpDown.SetIncrement.Value"/>
<element name="TCustomUpDown.SetMax"/>
<element name="TCustomUpDown.SetMax.Value"/>
<element name="TCustomUpDown.SetMin"/>
<element name="TCustomUpDown.SetMin.Value"/>
<element name="TCustomUpDown.SetMinRepeatInterval"/>
<element name="TCustomUpDown.SetMinRepeatInterval.AValue"/>
<element name="TCustomUpDown.SetOrientation"/>
<element name="TCustomUpDown.SetOrientation.Value"/>
<element name="TCustomUpDown.SetPosition"/>
<element name="TCustomUpDown.SetPosition.Value"/>
<element name="TCustomUpDown.SetThousands"/>
<element name="TCustomUpDown.SetThousands.Value"/>
<element name="TCustomUpDown.SetFlat"/>
<element name="TCustomUpDown.SetFlat.Value"/>
<element name="TCustomUpDown.SetWrap"/>
<element name="TCustomUpDown.SetWrap.Value"/>
<element name="TCustomUpDown.UpdateAlignButtonPos"/>
<element name="TCustomUpDown.UpdateOrientation"/>
<element name="TCustomUpDown.UpdateUpDownPositionText"/>

<element name="TCustomUpDown.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomUpDown.AdjustPos">
<short>
Applies changes to the control value using its increment and decrement 
buttons.
</short>
<descr>
<p>
AdjustPos is a method used to apply changes to the value for the control when 
the increment or decrement buttons are clicked. AdjustPos uses the value in 
the FUseWS member to determine if the change in value is handled in the 
widgetset class, or handled in TCustomUpDown.
</p>
</descr>
<version>Introduced in LCL version 2.1.0.</version>
<seealso>
<link id="TCustomUpDown.AssociateKeyDown"/>
<link id="TCustomUpDown.AssociateMouseWheel"/>
</seealso>
</element>
<element name="TCustomUpDown.AdjustPos.incPos">
<short>
<b>True</b> when the position is being incremented. <b>False</b> when being 
decremented.
</short>
</element>

<element name="TCustomUpDown.InitializeWnd">
<short>
Initializes the window handle for the control.
</short>
<descr>
<p>
InitializeWnd is an overridden method used to initialize the widgetset class 
for the control. InitializeWnd calls the inherited method. When the FUseWS 
member contains <b>False</b>, no additional actions are performed in the 
method. When it contains <b>True</b>, methods in its widgetset class are 
called to synchronize values in the Min, Max, Position, Increment, Wrap, 
Orientation, and UseArrowKeys properties.
</p>
</descr>
<version>Introduced in LCL version 2.1.0.</version>
<seealso/>
</element>

<element name="TCustomUpDown.AssociateKeyDown">
<short>
Implements the OnKeyDown event handler assigned to the Associate control in 
the class instance.
</short>
<descr>
<p>
<var>AssociateKeyDown</var> is assigned as an OnKeyDown handler routine for 
the control in the Associate property. It allows cursor keys (like Left, 
Right, Up and Down) entered in the Associate control to be applied to the 
Position in the Up/Down control. This includes using the Min, Max, and 
Increment values as needed for the Orientation in the control.
</p>
<p>
Key is set to 0 if the key down event is handled in the routine.
</p>
<p>
No actions are performed in the method if ArrowKeys is not enabled for the 
control, or when ShiftState is not an empty set (meaning no modifiers for the 
key event).
</p>
</descr>
<seealso/>
</element>
<element name="TCustomUpDown.AssociateKeyDown.Sender">
<short>
Control (Associate) generating the event notification.
</short>
</element>
<element name="TCustomUpDown.AssociateKeyDown.Key">
<short>
Virtual key code for the key down event.
</short>
</element>
<element name="TCustomUpDown.AssociateKeyDown.ShiftState">
<short>
Shift, Ctrl, or Alt modifier for the key down event.
</short>
</element>

<element name="TCustomUpDown.AssociateMouseWheel">
<short>
Implements an OnMouseWheel event handler assigned to the Associate control in 
the class instance.
</short>
<descr>
<p>
<var>AssociateMouseWheel</var> is assigned as an OnMouseWheel handler routine 
for the control in the Associate property. It ensures that a mouse wheel event 
in Associate is applied to the Up/Down control by calling its AdjustPos method.
</p>
<p>
WheelDelta indicates the direction the mouse wheel was scrolled. A positive 
non-zero value indicates the mouse wheel was scrolled upwards. A negative 
non-zero value indicates the mouse wheel was scrolled downwards.
</p>
<p>
AdjustPos is called to apply the change to the control by incrementing or 
decrementing the value in Position as needed. The Handled argument is set to 
True if the wheel event was applied to the control.
</p>
<p>
No actions are performed in the method when WheelDelta contains 0. Handled is 
set to False in this situation.
</p>
<p>
AssociateMouseWheel is assigned when a control is assigned to the Associate 
property.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.AdjustPos"/>
<link id="TCustomUpDown.Associate"/>
<link id="TCustomUpDown.Increment"/>
<link id="TCustomUpDown.Max"/>
<link id="TCustomUpDown.Min"/>
<link id="TCustomUpDown.Position"/>
<link id="TCustomUpDown.Wrap"/>
</seealso>
</element>
<element name="TCustomUpDown.AssociateMouseWheel.Sender">
<short>
Control (Associate) generating the event notification.
</short>
</element>
<element name="TCustomUpDown.AssociateMouseWheel.Shift">
<short>
Shift, Ctrl, or Alt modifier for the mouse wheel event.
</short>
</element>
<element name="TCustomUpDown.AssociateMouseWheel.WheelDelta">
<short>
Units of movement and direction for the mouse wheel event.
</short>
</element>
<element name="TCustomUpDown.AssociateMouseWheel.MousePos">
<short>
Coordinates for the mouse pointer when the mouse wheel event was detected.
</short>
</element>
<element name="TCustomUpDown.AssociateMouseWheel.Handled">
<short>
Returns <b>True</b> if the mouse wheel event was handled in the routine.
</short>
</element>

<element name="TCustomUpDown.OnAssociateChangeBounds">
<short>
Implements an OnChangeBounds event handler assigned to the Associate control 
in the class instance.
</short>
<descr>
<p>
<var>OnAssociateChangeBounds</var> ensures that the control is repositioned 
and realigned to the Associate control when its bounds have been changed.
</p>
<p>
The AlignButton property is used to determine which coordinates (Left, Right, 
Width, or Height) are adjusted to align and position the control adjacent to 
the Associate control.
</p>
<dl>
<dt>udLeft, udRight</dt>
<dd>
Causes the Top and Height properties for the control to be set to the 
corresponding values in Associate. The Left property is calculated to place 
the up/down control relative to the specified edge for the Associate control.
</dd>
<dt>upTop, udBottom</dt>
<dd>
Causes the Left and Width properties for the control to be set to the 
corresponding values in Associate. The Top property is calculated to place the 
up/down control relative to the specified edge for the Associate control.
</dd>
</dl>
<p>
SetBounds is called to apply the calculated Left, Top, Width, and Height 
values to the control.
</p>
<p>
No actions are performed in the method if a control has not been assigned to 
the Associate property in the class instance.
</p>
<p>
OnAssociateChangeBounds is assigned when a control is assigned to the 
Associate property.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.AlignButton"/>
<link id="TCustomUpDown.Associate"/>
<link id="TUDAlignButton"/>
<link id="#lcl.controls.TWinControl.SetBounds">TWinControl.SetBounds</link>
<link id="#lcl.controls.TControl.Width">TControl.Width</link>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
<link id="#lcl.controls.TControl.Left">TControl.Left</link>
<link id="#lcl.controls.TControl.Top">TControl.Top</link>
</seealso>
</element>
<element name="TCustomUpDown.OnAssociateChangeBounds.Sender">
<short>
Control for the event notification. Not used in the method.
</short>
</element>

<element name="TCustomUpDown.OnAssociateChangeEnabled">
<short>
Implements an OnEnabledChanged event handler assigned to the Associate control 
in the class instance.
</short>
<descr>
<p>
<var>OnAssociateChangeEnabled</var> ensures that the Enabled property is 
updated when the corresponding property in the Associate control has been 
changed. When the Enabled property has been changed, the overridden SetEnabled 
method id called to update the enabled state for the speed buttons on the 
control.
</p>
<p>
No actions are performed in the method if a control has not been assigned to 
the Associate property.
</p>
<p>
OnAssociateChangeEnabled is assigned when a new value is stored to the 
Associate property.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Associate"/>
<link id="TCustomUpDown.SetEnabled"/>
<link id="#lcl.controls.TControl.Enabled"/>
</seealso>
</element>
<element name="TCustomUpDown.OnAssociateChangeEnabled.Sender">
<short>
Control (Associate) for the event notification.
</short>
</element>

<element name="TCustomUpDown.OnAssociateChangeVisible">
<short>
Implements an OnVisibleChanged event handler assigned to the Associate control 
in the class instance.
</short>
<descr>
<p>
<var>OnAssociateChangeVisible</var> ensures that the Visible property for the 
control is updated when the corresponding property has been changed in the 
Associate control. It calls the SetVisible method to apply the new property 
value to the control.
</p>
<p>
See <link id="#lcl.controls.TControl.SetVisible">TControl.SetVisible</link> 
for more information about the actions performed when the Visible property is 
updated.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.SetVisible">TControl.SetVisible</link>
<link id="#lcl.controls.TControl.Visible">TControl.Visible</link>
</seealso>
</element>
<element name="TCustomUpDown.OnAssociateChangeVisible.Sender">
<short>
Control (Associate) for the event notification.
</short>
</element>

<element name="TCustomUpDown.DoMouseWheelDown">
<short>
Performs actions when a mouse wheel down event occurs for the control.
</short>
<descr>
<p>
<var>DoMouseWheelDown</var> is an overridden method in 
<var>TCustomUpDown</var>. It calls the inherited method on entry to signal an 
assigned OnMouseWheelDown event handler for the control. If the mouse wheel 
event was not handled in the ancestor class, and a handle for the widget has 
not been assigned, the Click method for the decrement speed button is called 
to apply the mouse wheel event to the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.DoMouseWheelDown">TControl.DoMouseWheelDown</link>
<link id="#lcl.controls.TControl.DoMouseWheel">TControl.DoMouseWheel</link>
</seealso>
</element>
<element name="TCustomUpDown.DoMouseWheelDown.Result">
<short>
Returns <b>True</b> if the mouse wheel event was handled by an OnMouseWheel 
event handler in the ancestor class.
</short>
</element>
<element name="TCustomUpDown.DoMouseWheelDown.Shift">
<short>
Shift, Ctrl, or Alt modifier for the mouse wheel event.
</short>
</element>
<element name="TCustomUpDown.DoMouseWheelDown.MousePos">
<short>
Coordinates for the mouse pointer when the wheel event was received.
</short>
</element>

<element name="TCustomUpDown.DoMouseWheelUp">
<short>
Performs actions when a mouse wheel up event occurs for the control.
</short>
<descr>
<p>
<var>DoMouseWheelUp</var> is an overridden method in <var>TCustomUpDown</var>. 
It calls the inherited method on entry to signal an assigned OnMouseWheelUp 
event handler for the control. If the mouse wheel event was not handled in the 
ancestor class, and a handle for the widget has not been assigned, the Click 
method for the increment speed button is called to apply the mouse wheel event 
to the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.DoMouseWheelUp">TControl.DoMouseWheelUp</link>
<link id="#lcl.controls.TControl.DoMouseWheel">TControl.DoMouseWheel</link>
</seealso>
</element>
<element name="TCustomUpDown.DoMouseWheelUp.Result">
<short>
Returns <b>True</b> if the mouse wheel event was handled by an OnMouseWheelUp
event handler in the ancestor class.
</short>
</element>
<element name="TCustomUpDown.DoMouseWheelUp.Shift">
<short>
Shift, Ctrl, or Alt modifier for the mouse wheel event.
</short>
</element>
<element name="TCustomUpDown.DoMouseWheelUp.MousePos">
<short>
Coordinates for the mouse pointer when the wheel event was received.
</short>
</element>

<element name="TCustomUpDown.DoMouseWheelLeft">
<short>
Performs actions when a mouse wheel left event occurs for the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomUpDown.DoMouseWheelLeft.Result">
<short>
Returns <b>True</b> if the mouse wheel event was handled by an 
OnMouseWheelLeft event handler in the ancestor class.
</short>
</element>
<element name="TCustomUpDown.DoMouseWheelLeft.Shift">
<short>
Shift, Ctrl, or Alt modifier for the mouse wheel event.
</short>
</element>
<element name="TCustomUpDown.DoMouseWheelLeft.MousePos">
<short>
Coordinates for the mouse pointer when the wheel event was received.
</short>
</element>

<element name="TCustomUpDown.DoMouseWheelRight">
<short>
Performs actions when a mouse wheel right event occurs for the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomUpDown.DoMouseWheelRight.Result">
<short>
Returns <b>True</b> if the mouse wheel event was handled by an 
OnMouseWheelRight event handler in the ancestor class.
</short>
</element>
<element name="TCustomUpDown.DoMouseWheelRight.Shift">
<short>
Shift, Ctrl, or Alt modifier for the mouse wheel event.
</short>
</element>
<element name="TCustomUpDown.DoMouseWheelRight.MousePos">
<short>
Coordinates for the mouse pointer when the wheel event was received.
</short>
</element>

<element name="TCustomUpDown.MouseEnter">
<short>
Performs actions when the mouse pointer enters the control.
</short>
<descr>
<p>
<var>MouseEnter</var> is an overridden method in <var>TCustomUpDown</var>. It 
ensures that the inherited method, which signals the OnMouseEnter event, is 
called only once when the mouse pointer enters the control or its Associate 
control. An internal member in the class instance is used to track whether the 
mouse pointer is already in either of the controls.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Associate"/>
<link id="#lcl.controls.TControl.MouseEnter">TControl.MouseEnter</link>
<link id="#lcl.controls.TControl.OnMouseEnter">TControl.OnMouseEnter</link>
</seealso>
</element>

<element name="TCustomUpDown.MouseLeave">
<short>
Performs actions when the mouse pointer leaves the control.
</short>
<descr>
<p>
<var>MouseLeave</var> is an overridden method in <var>TCustomUpDown</var>. It 
ensures that the inherited method, which signals the OnMouseLeave event, is 
called only once when the mouse pointer leaves the control or its Associate 
control. An internal member in the class instance is used to track whether the 
mouse pointer is in either of the controls.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Associate"/>
<link id="#lcl.controls.TControl.MouseLeave">TControl.MouseLeave</link>
<link id="#lcl.controls.TControl.OnMouseLeave">TControl.OnMouseLeave</link>
</seealso>
</element>

<element name="TCustomUpDown.DoSetBounds">
<short>
Applies the specified bounds to the control.
</short>
<descr>
<p>
<var>DoSetBounds</var> is an overridden method in <var>TCustomUpDown</var>. It 
calls the inherited method on entry to apply the origin and size arguments to 
the bounds and client rectangle for the control.
</p>
<p>
If a handle has not been allocated for the widgetset class, the value in 
Orientation is used to update the size and position of the increment and 
decrement speed buttons on the control. Each speed button uses a rectangular 
shape proportional to the Width or Height for the control. The SetBounds 
method in the speed buttons is called to apply the calculated origin and size 
for each.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Orientation"/>
<link id="TUDOrientation"/>
<link id="#lcl.controls.TWinControl.DoSetBounds">TWinControl.DoSetBounds</link>
<link id="#lcl.controls.TControl.ClientWidth">TControl.ClientWidth</link>
<link id="#lcl.controls.TControl.SetBounds">TControl.SetBounds</link>
</seealso>
</element>
<element name="TCustomUpDown.DoSetBounds.ALeft">
<short>
New value for the Left property in the control.
</short>
</element>
<element name="TCustomUpDown.DoSetBounds.ATop">
<short>
New value for the Top property in the control.
</short>
</element>
<element name="TCustomUpDown.DoSetBounds.AWidth">
<short>
New value for the Width property in the control.
</short>
</element>
<element name="TCustomUpDown.DoSetBounds.AHeight">
<short>
New value for the Height property in the control.
</short>
</element>

<element name="TCustomUpDown.SetEnabled">
<short>Sets the value for the Enabled property.</short>
<descr>
<p>
Ensures that the Enabled property for speed buttons on the control are updated 
when a handle has not been assigned for the widget.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Enabled">TControl.Enabled</link>
</seealso>
</element>
<element name="TCustomUpDown.SetEnabled.Value">
<short>New value for the Enabled property.</short>
</element>

<element name="TCustomUpDown.GetControlClassDefaultSize">
<short>
Class function which returns the default size used for the class.
</short>
<descr>
<p>
The width (for the default Orientation) is 17 pixels. The height is 31 pixels.
</p>
</descr>
<seealso>
<link id="#LCL.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>
<element name="TCustomUpDown.GetControlClassDefaultSize.Result">
<short>
TSize instance with the default width and height in its CX and CY members.
</short>
</element>

<element name="TCustomUpDown.CalculatePreferredSize">
<short>
Calculates the preferred width and height for the control.
</short>
<descr>
<p>
Returns the preferred width and height (in pixels) for the class instance. The 
value in Orientation is used to determine the width and height values returned 
in the PreferredWidth and PreferredHeight arguments.
</p>
<dl>
<dt>udHorizontal</dt>
<dd>
PreferredWidth is set to 31 pixels. PreferredHeight is set to 17 pixels.
</dd>
<dt>udVertical (the default)</dt>
<dd>
PreferredWidth is set to 17 pixels. PreferredHeight is set to 31 pixels.
</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TCustomUpDown.CalculatePreferredSize.PreferredWidth">
<short>
Returns the preferred width for the control in pixels.
</short>
</element>
<element name="TCustomUpDown.CalculatePreferredSize.PreferredHeight">
<short>
Returns the preferred height for the control in pixels.
</short>
</element>
<element name="TCustomUpDown.CalculatePreferredSize.WithThemeSpace">
<short>
Not used in the method.
</short>
</element>

<element name="TCustomUpDown.CanChange">
<short>
Indicates whether a change using the control can be applied.
</short>
<descr>
<p>
<var>CanChange</var> is a <var>Boolean</var> function used to determine if a 
change caused by interaction with the control can be applied. CanChange is 
called from the Click method, and occurs prior to applying a new value to the 
Position property and signalling the OnClick event handler. If CanChange 
returns <b>False</b>, the new value is <b>not</b> applied to the Position 
property and the event handler is <b>not</b> signalled.
</p>
<p>
CanChange uses the OnChanging and OnChangingEx event handlers to determine the 
return value for the method. The default return value is <b>True</b> and is 
used if both event handlers are unassigned in the control.
</p>
<remark>
Both events are signalled (when assigned) and both can update the return value 
in their handler routines.
</remark>
<p>
Use OnChanging to handle application logic not tied to the value in Position 
or the direction for the value change. Use OnChangingEx to handle logic where 
the new value and change direction are examined.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Click"/>
<link id="TCustomUpDown.OnChanging"/>
<link id="TCustomUpDown.OnChangingEx"/>
<link id="TCustomUpDown.Position"/>
</seealso>
</element>
<element name="TCustomUpDown.CanChange.Result">
<short>
Returns <b>True</b> if the assigned event handlers allow the Position property 
to be changed.
</short>
</element>

<element name="TCustomUpDown.Notification">
<short>
<var>Notification</var> calls inherited method; if the operation requires 
removal of the associate control, this is performed.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
</seealso>
</element>
<element name="TCustomUpDown.Notification.AComponent">
<short>
Component added or removed in the notification.
</short>
</element>
<element name="TCustomUpDown.Notification.Operation">
<short>
Operation performed in the notification.
</short>
</element>

<element name="TCustomUpDown.Click">
<short>
Handles a mouse click on a speed button in the control.
</short>
<descr>
<p>
<var>Click</var> is an overloaded method in <var>TCustomUpDown</var> used to 
respond to a mouse click on the speed button specified in Button. Click 
ensures that the button click is applied to the value in Position. It uses the 
values in Increment, Min, and Max to validate and range limit the new value 
according to the Button clicked on the control.
</p>
<p>
Click calls CanChange to determine whether the new value can be applied to the 
Position property. If CanChange returns <b>False</b>, the new value is not 
applied. If it returns <b>True</b>, the value is Position is updated and the 
OnClick event handler is signalled (when assigned).
</p>
<remark>
Click does <b>not</b> call the inherited (parameter-less) method in TControl.
</remark>
</descr>
<seealso>
<link id="TCustomUpDown.Position"/>
<link id="TCustomUpDown.Increment"/>
<link id="TCustomUpDown.Min"/>
<link id="TCustomUpDown.Max"/>
<link id="TCustomUpDown.CanChange"/>
<link id="#lcl.controls.TControl.Click">TControl.Click</link>
</seealso>
</element>
<element name="TCustomUpDown.Click.Button">
<short>
Identifies the button clicked on the control.
</short>
</element>

<element name="TCustomUpDown.AlignButton">
<short>
<var>AlignButton</var> - how to align the button: left or right.
</short>
<descr>
<p>
<var>AlignButton</var> is a <var>TUDAlignButton</var> property which specifies 
the alignment for the speed buttons on the control relative to the Associate 
control. The default value for the property is udRight, and causes the buttons 
to be aligned on the right-hand edge of the Associate control. Changing the 
value for the property causes the control to be resized and realigned to the 
Associate control.
</p>
<p>
See <link id="TUDAlignButton">TUDAlignButton</link> for the values allowed in 
the property and their meanings.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Associate"/>
<link id="TUDAlignButton"/>
</seealso>
</element>

<element name="TCustomUpDown.ArrowKeys">
<short>
Enables or disables button clicks when cursor keys are pressed in the 
Associate control.
</short>
<descr>
<p>
<var>ArrowKeys</var> is a <var>Boolean</var> property which indicates whether 
cursor keys pressed while the Associate control has focus are applied as 
button clicks in the control. The default value for the property is 
<b>True</b>. Changing the value for the property causes the widgetset class to 
be updated when its handle has been assigned.
</p>
<p>
ArrowKeys is used in the AssociateKeyDown method which is assigned as an 
OnKeyDown event handler in the Associate control.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Associate"/>
<link id="TCustomUpDown.AssociateKeyDown"/>
<link id="TCustomUpDown.Click"/>
</seealso>
</element>

<element name="TCustomUpDown.Associate">
<short>
Control used to display and edit the Position for the control.
</short>
<descr>
<p>
<var>Associate</var> is a <var>TWinControl</var> property with the control 
used to display and edit the value for the Position property in the control.
</p>
<p>
Changing the value for the property causes a previously assigned control to be 
disconnected; its event handlers are unassigned and the Associate property 
is <b>Nil</b>'d prior to setting the new value for the property.
</p>
<p>
The new control in the property value is connected to the class instance. This 
is done by setting its text to the value in Position, and by assigning event 
handler routines for the control. These include the AssociateKeyDown, 
OnAssociateChangeBounds, OnAssociateChangeEnabled, OnAssociateChangeVisible, 
and AssociateMouseWheel methods in the class.
</p>
<p>
Please note that the Associate control must have the same Parent as the class 
instance. An Exception is raised with the message in rsIsAlreadyAssociatedWith 
if another control on the Parent is already associated with the TUpDown class 
instance.
</p>
<p>
In addition, the value assigned to Associate cannot be derived from 
TCustomUpDown, TCustomTreeView or TCustomListView. The new property value is 
ignored if these controls are assigned to Associate.
</p>
<p>
Since Associate is declared as TWinControl, event handlers may need to cast 
the value to a derived type to access properties or methods specific to the 
descendant.
</p>
</descr>
<errors>
Raises an Exception with the message in rsIsAlreadyAssociatedWith if another 
control on the Parent is already associated with the class instance.
</errors>
<seealso>
<link id="TCustomUpDown.Position"/>
<link id="TCustomUpDown.AssociateKeyDown"/>
<link id="TCustomUpDown.OnAssociateChangeBounds"/>
<link id="TCustomUpDown.OnAssociateChangeEnabled"/>
<link id="TCustomUpDown.OnAssociateChangeVisible"/>
<link id="TCustomUpDown.AssociateMouseWheel"/>
<link id="#lcl.controls.TWinControl">TWinControl</link>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
</seealso>
</element>

<element name="TCustomUpDown.Increment">
<short>
The amount by which Position is increased or decreased for each button click.
</short>
<descr>
<p>
<var>Increment</var> is an <var>Integer</var> property which contains an 
amount by which the value in Position is increased or decreased when a button 
is clicked on the control. It is also used to apply cursor Up or Down keys 
pressed when the Associate control has focus. It is specified as a positive 
value, but is negated when the Down button is clicked or the Down arrow key is 
pressed.
</p>
<p>
The default value for the property is 1. Changing the property value causes 
the widgetset class to be updated when its handle has been assigned.
</p>
<p>
Increment is used in the Click method when the property value is validated and 
range limited to the settings in Min and Max. It is also used in the AdjustPos 
method called when key down events are handled for the Associate control.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Associate"/>
<link id="TCustomUpDown.Min"/>
<link id="TCustomUpDown.Max"/>
<link id="TCustomUpDown.Position"/>
<link id="TCustomUpDown.AdjustPos"/>
<link id="TCustomUpDown.Click"/>
</seealso>
</element>

<element name="TCustomUpDown.Max">
<short>
The largest value allowed in the Position property.
</short>
<descr>
<p>
<var>Max</var> is a <var>SmallInt</var> property which contains the largest 
value allowed in the Position property. The default value for the property is 
100. A new value assigned to the property is also applied to Position if it is 
larger than the new value in Max. The new value is also applied to the 
widgetset class instance when its handle has been assigned.
</p>
<p>
Values in Min and Max are used in the Click method when a new value for 
Position is validated and range limited. It is also used in AdjustPos when key 
down events are handled for the control.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Min"/>
<link id="TCustomUpDown.Position"/>
<link id="TCustomUpDown.Click"/>
<link id="TCustomUpDown.AdjustPos"/>
</seealso>
</element>

<element name="TCustomUpDown.Min">
<short>
The smallest value allowed in the Position property.
</short>
<descr>
<p>
<var>Mix</var> is a <var>SmallInt</var> property which contains the smallest 
value allowed in the Position property. The default value for the property is 
0. A new value assigned to the property is also applied to Position if it is 
smaller than the new value in Min. The new value is also applied to the 
widgetset class instance when its handle has been assigned.
</p>
<p>
Values in Min and Max are used in the Click method when a new value for 
Position is validated and range limited. It is also used in AdjustPos when key 
down events are handled for the control.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Max"/>
<link id="TCustomUpDown.Position"/>
<link id="TCustomUpDown.Click"/>
<link id="TCustomUpDown.AdjustPos"/>
</seealso>
</element>

<element name="TCustomUpDown.MinRepeatInterval">
<short>
Minimum interval that must elapse before the action for the control is 
repeated.
</short>
<descr>
<p>
<var>MinRepeatInterval</var> is a <var>Byte</var> property which contains the 
minimum interval that must elapse before a help button on the control can be 
repeated. The default value for the property is 100. The value is used during 
execution of the mouse timer to adjust the frequency that the timer event 
(Click) is called.
</p>
<p>
MinRepeatInterval cannot be set to a value smaller that 25.
</p>
</descr>
<seealso>
</seealso>
</element>

<element name="TCustomUpDown.OnChanging">
<short>
Event handler signalled prior to changing the value in the Position property.
</short>
<descr>
<p>
<var>OnChanging</var> is a <var>TUDChangingEvent</var> property with the event 
handler signalled prior to setting a new value for the Position property. The 
handler include a Boolean AllowChange argument which indicates if a change to 
the Position property is allowed in the control. Setting AllowChange to 
<b>False</b> in the handler routine prevents a change from being applied to 
the property value.
</p>
<p>
OnChanging is signalled (when assigned) from CanChange, and is used to get the 
return value for the method. It allows the application to accept or reject a 
change to Position using logic specific to the application.
</p>
<p>
Use OnChangingEx to implement an event handler which examines the new property 
value and direction (increase or decrease) for the changed value.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.CanChange"/>
<link id="TCustomUpDown.Position"/>
<link id="TCustomUpDown.OnChangingEx"/>
<link id="TUDChangingEvent"/>
</seealso>
</element>

<element name="TCustomUpDown.OnChangingEx">
<short>
Event handler signalled to determine if the control can change the value in 
the Position property.
</short>
<descr>
<p>
<var>OnChangingEx</var> is a <var>TUDChangingEventEx</var> property with the 
event handler signalled prior to setting a new value for the Position 
property. The handler include a Boolean AllowChange argument which indicates 
if a change to the Position property is allowed in the control. Setting 
AllowChange to <b>False</b> in the handler routine prevents a change from 
being applied to the property value.
</p>
<p>
OnChangingEx also includes arguments with new value for the Position property 
and whether the change is an increase or decrease to the value.
</p>
<p>
OnChangingEx is signalled (when assigned) from CanChange, and is used to get 
the return value for the method.
</p>
<p>
Use OnChanging to implement an event handler which uses logic not based on the 
proposed new value for the Position property.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.CanChange"/>
<link id="TCustomUpDown.Position"/>
<link id="TCustomUpDown.OnChanging"/>
<link id="TUDChangingEventEx"/>
</seealso>
</element>

<element name="TCustomUpDown.OnClick">
<short>
Event handler signalled when a button on the control is clicked.
</short>
<descr>
<p>
<var>OnClick</var> is a <var>TUDClickEvent</var> property with the event 
handler signalled when a button on the control has been clicked. A Button 
argument is passed to the event handler to indicate which button, increment 
or decrement, was clicked on the control.
</p>
<p>
OnClick is signalled from the Click method. It occurs after the new property 
value has been validated and range limited using Min and Max. It also occurs 
after CanChange has been called to determine if the new property value can be 
applied to Position. OnClick occurs immediately after the new value has been 
assigned to the Position property.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Click"/>
<link id="TCustomUpDown.Max"/>
<link id="TCustomUpDown.Min"/>
<link id="TCustomUpDown.Position"/>
<link id="TUDClickEvent"/>
<link id="TUDBtnType"/>
</seealso>
</element>

<element name="TCustomUpDown.Orientation">
<short>
Indicates the horizontal or vertical orientation for the button(s) displayed 
on the control.
</short>
<descr>
<p>
<var>Orientation</var> is a <var>TUDOrientation</var> property which indicates 
the horizontal or vertical orientation for the buttons displayed on the 
control. The default value for the property is udVertical, and causes the 
speed buttons to be stacked vertically with the button glyphs drawn in the 
upwards and downwards directions. Use udHorizontal to orient the buttons 
side-by-side with their glyphs pointing towards the left and right.
</p>
<p>
Changing the value for the property causes the positions and sizes for the 
speed buttons to be updated for the new value in the property. The widgetset 
class is updated when its handle has been assigned.
</p>
<p>
Use AlignButton to specify the edge on the Associate control where the buttons 
are aligned.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.AlignButton"/>
<link id="TCustomUpDown.Associate"/>
</seealso>
</element>

<element name="TCustomUpDown.Position">
<short>
The current position (or value) for the control as a SmallInt type.
</short>
<descr>
<p>
<var>Position</var> is a <var>SmallInt</var> property with the current value 
for the control. Its value is read from the Caption text in the Associate 
control (when assigned), and converted to an Integer value used in the 
property. Values in Min and Max are used as the property value if the 
converted integer exceeds one of these limits.
</p>
<p>
Changing the value for the property causes the numeric value to be converted 
to its string representation and stored in the Caption text for the Associate 
control. When Thousands is enabled, the thousands separator from 
DefaultFormatSettings is included in the string value. The widgetset class 
instance is updated if its handle has been assigned.
</p>
<p>
Use Min and Max to specify the lower and upper limits for the value in 
Position.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Associate"/>
<link id="TCustomUpDown.Max"/>
<link id="TCustomUpDown.Min"/>
<link id="TCustomUpDown.Thousands"/>
</seealso>
</element>

<element name="TCustomUpDown.Thousands">
<short>
Enables or disables use of the thousands separator when displaying the 
text for the Position property.
</short>
<descr>
<p>
When set to <b>True</b>, the thousands separator from DefaultFormatSettings is 
applied to the textual representation for the value in the Position property. 
The string is stored as the Caption for the Associate control. When set to 
<b>False</b>, the text assigned to the Associate control does not include the 
thousands separator.
</p>
<p>
The default value for the Thousands property is <b>True</b>.
</p>
<p>
Thousands is used when a new value is assigned to either the Position or 
Associate property.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Associate"/>
<link id="TCustomUpDown.Position"/>
</seealso>
</element>

<element name="TCustomUpDown.Flat">
<short>
Indicates whether the speed buttons for the control are drawn using a flat 
appearance.
</short>
<descr>
<p>
The default value for the property is <b>False</b>. Changing the property 
value causes the Flat property in each of the speed buttons to be updated.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomUpDown.Wrap">
<short>
Enables or disables wrap-around for the value in Position when it exceeds the 
limits in Min or Max.
</short>
<descr>
<p>
<var>Wrap</var> is a <var>Boolean</var> property which indicates if the value 
in Position is wrapped to the Min or Max value when incremented/decremented 
beyond the limits for the value.
</p>
<p>
The default value for the property is <b>False</b>, and prevents any change to 
the value in Position when it would exceed the lower or upper limit. When set 
to <b>True</b>, incrementing Position beyond the value in Max causes it to be 
reset to the value in Min. Likewise, decrementing Position beyond the value in 
Min causes it to be reset to the value in Max.
</p>
<p>
Changing the value for the property causes the widgetset class to be updated 
when its handle has been assigned.
</p>
<p>
Wrap is used in the Click method when a new value is applied to Position 
following a button click on the control.
</p>
</descr>
<seealso>
<link id="TCustomUpDown.Position"/>
<link id="TCustomUpDown.Max"/>
<link id="TCustomUpDown.Min"/>
<link id="TCustomUpDown.Click"/>
</seealso>
</element>

<element name="TCustomUpDown.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TCustomUpDown</var>. It calls 
the inherited <var>Create</var> method, and initializes properties for the 
class instance. For example:
</p>
<ul>
<li>Orientation</li>
<li>Max</li>
<li>Min</li>
<li>Bounds</li>
<li>Width</li>
<li>Height</li>
<li>Alignment</li>
</ul>
</descr>
<seealso>
<link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
<link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
</seealso>
</element>
<element name="TCustomUpDown.Create.AOwner">
<short>
Owner of the class instance.
</short>
</element>

<element name="TCustomUpDown.Destroy">
<short>
<var>Destroy</var> - destructor for <var>TCustomUpDown</var>: removes 
connection with associate control and calls inherited <var>Destroy</var>.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
<link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
</seealso>
</element>

<element name="TUpDown">
<short>
<var>TUpDown</var> - a pair of arrow-like buttons which are used to increment 
or decrement some controlled variable; often attached to a scroll-bar but can 
also control a digital numeric display.
</short>
<descr>
<p>
<var>TUpDown</var> - a pair of arrow-like buttons which are used to increment 
or decrement some controlled variable; often attached to a scroll-bar but can 
also control a digital numeric display
</p>
<p>
The control definition itself does not specify the variable upon which the 
buttons operate. The application programmer is responsible for supplying an 
event handler for <var>OnClick</var> to determine which button has been 
selected (designated <var>btNext</var> or <var>btPrev</var>) and incrementing 
or decrementing the variable in the control with which the UpDown is 
associated.
</p>
<p>
The amount by which the variable is changed is set by the integer property 
<var>Increment</var> with the optional multiplier <var>Thousands</var> (a 
boolean property).
</p>
<p>
For example the UpDown control may be used to move a slider up and down a 
scale by a specified amount for each click; alternatively a number may be 
displayed in a text box and clicking the buttons of the UpDown control may 
increment or decrement the number displayed by a specified amount.
</p>
</descr>
<seealso/>
</element>

<element name="TUpDown.Align" link="#lcl.controls.TControl.Align"/>
<element name="TUpDown.AlignButton" link="#lcl.comctrls.TCustomUpDown.AlignButton"/>
<element name="TUpDown.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TUpDown.ArrowKeys" link="#lcl.comctrls.TCustomUpDown.ArrowKeys"/>
<element name="TUpDown.Associate" link="#lcl.comctrls.TCustomUpDown.Associate"/>
<element name="TUpDown.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TUpDown.Color" link="#lcl.controls.TControl.Color"/>
<element name="TUpDown.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TUpDown.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TUpDown.Hint" link="#lcl.controls.TControl.Hint"/>
<element name="TUpDown.Increment" link="#lcl.comctrls.TCustomUpDown.Increment"/>
<element name="TUpDown.Max" link="#lcl.comctrls.TCustomUpDown.Max"/>
<element name="TUpDown.Min" link="#lcl.comctrls.TCustomUpDown.Min"/>
<element name="TUpDown.MinRepeatInterval" link="#lcl.comctrls.TCustomUpDown.MinRepeatInterval"/>
<element name="TUpDown.Orientation" link="#lcl.comctrls.TCustomUpDown.Orientation"/>
<element name="TUpDown.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TUpDown.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TUpDown.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TUpDown.Position" link="#lcl.comctrls.TCustomUpDown.Position"/>
<element name="TUpDown.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TUpDown.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TUpDown.TabStop" link="#lcl.controls.TWinControl.TabStop"/>
<element name="TUpDown.Thousands" link="#lcl.comctrls.TCustomUpDown.Thousands"/>
<element name="TUpDown.Flat" link="#lcl.comctrls.TCustomUpDown.Flat"/>
<element name="TUpDown.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TUpDown.Wrap" link="#lcl.comctrls.TCustomUpDown.Wrap"/>
<element name="TUpDown.OnChanging" link="#lcl.comctrls.TCustomUpDown.OnChanging"/>
<element name="TUpDown.OnChangingEx" link="#lcl.comctrls.TCustomUpDown.OnChangingEx"/>
<element name="TUpDown.OnClick" link="#lcl.comctrls.TCustomUpDown.OnClick"/>
<element name="TUpDown.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TUpDown.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TUpDown.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TUpDown.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TUpDown.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TUpDown.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TUpDown.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TUpDown.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TUpDown.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TUpDown.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TUpDown.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TUpDown.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="TUpDown.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="TUpDown.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>

<element name="CN_DROPDOWNCLOSED">
<short>Control notification message constant.</short>
<descr/>
<seealso/>
</element>

<element name="TToolButtonStyle">
<short>
Enumerated type with values representing the display styles and behaviors for 
buttons on a TToolBar control.
</short>
<descr>
<p>
Values in TToolButtonStyle indicate the visual display for a tool button and 
its behavior when clicked. <var>TToolButtonStyle</var> is the type used to 
implement the Style property in the TToolButton class.
</p>
</descr>
<seealso>
<link id="TToolButton.Style"/>
</seealso>
<example file="comctrls/ttoolbutton.pas"/>
</element>
<element name="TToolButtonStyle.tbsButton">
<short>The button appears and functions like a normal button.</short>
</element>
<element name="TToolButtonStyle.tbsCheck">
<short>
Clicking the button toggles the Down property. Once selected, the button 
remains selected until clicked again.
</short>
</element>
<element name="TToolButtonStyle.tbsDropDown">
<short>
The button displays a downwards-pointing arrow (suitable for accessing 
a drop-down menu).
</short>
</element>
<element name="TToolButtonStyle.tbsSeparator">
<short>
The button appears as an empty space on the toolbar (used to separate other 
controls).
</short>
</element>
<element name="TToolButtonStyle.tbsDivider">
<short>
The button appears as a vertical line on the toolbar (used to separate other 
controls).
</short>
</element>

<element name="TToolButtonFlag">
<short>
Represents flag values that can be used in a TToolButton instance.
</short>
<descr>
<p>
Values from TToolButton are stored in the TToolButtonFlags set type.
</p>
</descr>
<seealso>
<link id="TToolButtonFlags"/>
<link id="TToolButton"/>
</seealso>
</element>
<element name="TToolButtonFlag.tbfPressed">
<short>The tool button is in a pressed or down state.</short>
</element>
<element name="TToolButtonFlag.tbfArrowPressed">
<short>The drop-down indicator is in a pressed or down state.</short>
</element>
<element name="TToolButtonFlag.tbfMouseInArrow">
<short>The mouse cursor is hovered over the drop-down indicator.</short>
</element>
<element name="TToolButtonFlag.tbfDropDownMenuShown">
<short>The drop-down menu for the tool button is visible.</short>
</element>

<element name="TToolButtonFlags">
<short>
Set type used to store values from the TToolButtonFlag enumeration.
</short>
<descr/>
<seealso>
<link id="TToolButtonFlag"/>
</seealso>
</element>

<element name="TToolButtonActionLink">
<short>
<var>TToolButtonActionLink</var> - links a ToolButton on the ToolBar to an 
Action on an ActionList.
</short>
<descr/>
<seealso/>
</element>

<element name="TToolButtonActionLink.AssignClient">
<short>
<var>AssignClient</var> calls inherited method then sets client as ToolButton.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TBasicActionLink">TBasicActionLink</link>
</seealso>
</element>
<element name="TToolButtonActionLink.AssignClient.AClient">
<short/>
</element>

<element name="TToolButtonActionLink.SetChecked">
<short>
<var>SetChecked</var> - stores the Checked status (<b>True</b> or 
<b>False</b>).
</short>
<descr/>
<seealso/>
</element>
<element name="TToolButtonActionLink.SetChecked.Value">
<short/>
</element>

<element name="TToolButtonActionLink.SetImageIndex">
<short>
<var>SetImageIndex</var> - stores the index value of the associated image.
</short>
<descr/>
<seealso/>
</element>
<element name="TToolButtonActionLink.SetImageIndex.Value">
<short/>
</element>

<element name="TToolButtonActionLink.IsCheckedLinked" link="#LCL.ActnList.TActionLink.IsCheckedLinked">
<short/>
<descr/>
<seealso/>
</element>
<element name="TToolButtonActionLink.IsCheckedLinked.Result">
<short/>
</element>

<element name="TToolButtonActionLink.IsImageIndexLinked" link="#LCL.ActnList.TActionLink.IsImageIndexLinked">
<short/>
<descr/>
<seealso/>
</element>
<element name="TToolButtonActionLink.IsImageIndexLinked.Result">
<short/>
</element>

<element name="TToolButtonActionLinkClass">
<short>
<var>TToolButtonActionLinkClass</var> - class of 
<var>TToolButtonActionLink</var>.
</short>
<descr/>
<seealso/>
</element>

<element name="TToolButton">
<short>
<var>TToolButton</var> is a button control used in a <var>TToolBar</var> 
object.
</short>
<descr>
<p>
Use <var>TToolButton</var> to implement buttons on a toolbar. While other 
controls (including <var>TButton</var> and <var>TSpeedButton</var>) can be 
placed on toolbars, <var>TToolButton</var> utilizes special toolbar features 
to simplify the configuration of buttons and offers added display options 
such as edge borders and transparency.
</p>
<p>
To place tool buttons on a toolbar at design time, select the toolbar, 
right-click, and choose New Button.
</p>
</descr>
<seealso>
<link id="TToolBar"/>
<link id="#lcl.stdctrls.TButton">TButton</link>
<link id="#lcl.buttons.TSpeedButton">TSpeedButton</link>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
</seealso>
<example file="comctrls/ttoolbutton.pas"/>
</element>

<!-- private -->
<element name="TToolButton.FAllowAllUp"/>
<element name="TToolButton.FDown"/>
<element name="TToolButton.FDropdownMenu"/>
<element name="TToolButton.FGrouped"/>
<element name="TToolButton.FImageIndex"/>
<element name="TToolButton.FIndeterminate"/>
<element name="TToolButton.FMarked"/>
<element name="TToolButton.FMenuItem"/>
<element name="TToolButton.FMouseInControl"/>
<element name="TToolButton.FOnArrowClick"/>
<element name="TToolButton.FShowCaption"/>
<element name="TToolButton.FStyle"/>
<element name="TToolButton.FToolButtonFlags"/>
<element name="TToolButton.FUpdateCount"/>
<element name="TToolButton.FWrap"/>
<element name="TToolButton.FLastDropDownTick"/>
<element name="TToolButton.FLastDown"/>

<element name="TToolButton.GetGroupBounds"/>
<element name="TToolButton.GetGroupBounds.StartIndex"/>
<element name="TToolButton.GetGroupBounds.EndIndex"/>

<element name="TToolButton.GetIndex"/>
<element name="TToolButton.GetIndex.Result"/>

<element name="TToolButton.GetTextSize"/>
<element name="TToolButton.GetTextSize.Result"/>

<element name="TToolButton.IsCheckedStored"/>
<element name="TToolButton.IsCheckedStored.Result"/>

<element name="TToolButton.IsHeightStored"/>
<element name="TToolButton.IsHeightStored.Result"/>

<element name="TToolButton.IsImageIndexStored"/>
<element name="TToolButton.IsImageIndexStored.Result"/>

<element name="TToolButton.IsWidthStored"/>
<element name="TToolButton.IsWidthStored.Result"/>

<element name="TToolButton.SetDown"/>
<element name="TToolButton.SetDown.Value"/>

<element name="TToolButton.SetDropdownMenu"/>
<element name="TToolButton.SetDropdownMenu.Value"/>

<element name="TToolButton.SetGrouped"/>
<element name="TToolButton.SetGrouped.Value"/>

<element name="TToolButton.SetImageIndex"/>
<element name="TToolButton.SetImageIndex.Value"/>

<element name="TToolButton.SetIndeterminate"/>
<element name="TToolButton.SetIndeterminate.Value"/>

<element name="TToolButton.SetMarked"/>
<element name="TToolButton.SetMarked.Value"/>

<element name="TToolButton.SetMenuItem"/>
<element name="TToolButton.SetMenuItem.Value"/>

<element name="TToolButton.SetShowCaption"/>
<element name="TToolButton.SetShowCaption.AValue"/>

<element name="TToolButton.SetStyle"/>
<element name="TToolButton.SetStyle.Value"/>

<element name="TToolButton.SetWrap"/>
<element name="TToolButton.SetWrap.Value"/>

<element name="TToolButton.SetMouseInControl"/>
<element name="TToolButton.SetMouseInControl.NewMouseInControl"/>

<element name="TToolButton.CMEnabledChanged"/>
<element name="TToolButton.CMEnabledChanged.Message"/>

<element name="TToolButton.CMVisibleChanged"/>
<element name="TToolButton.CMVisibleChanged.Message"/>

<element name="TToolButton.CMHitTest"/>
<element name="TToolButton.CMHitTest.Message"/>

<!-- protected -->
<element name="TToolButton.cDefSeparatorWidth">
<short>Default width for tool buttons using the separator style.</short>
</element>
<element name="TToolButton.cDefDividerWidth">
<short>Default width for tool buttons using the divider style.</short>
</element>
<element name="TToolButton.cDefButtonDropDecArrowWidth">
<short>Default width for the drop-down indicator in tool buttons.</short>
</element>

<element name="TToolButton.cHorIconTextDist">
<short>
Default number of pixels between the icon and the text on the tool button. It 
is used when the List property in the parent tool bar is enabled, and 
contains the number of pixels (prior to scaling) between the right edge of 
the icon (when assigned) and the caption text. It is included in the size 
value returned from CalculatePreferredSize (when needed).
</short>
</element>

<element name="TToolButton.cVerIconTextDist">
<short>
Default number of pixels between the icon and the text on the tool button. It 
is used when the List property in the parent tool bar is <b>not</b> enabled 
and an icon is displayed above the text on the control. It contains the 
number of pixels (prior to scaling) between the icon and text for the button 
control. It is included in the size value returned from 
CalculatePreferredSize (when needed).
</short>
</element>

<element name="TToolButton.FToolBar">
<short>
Member variable with the tool bar where the button is used.
</short>
</element>

<element name="TToolButton.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TToolButton.CopyPropertiesFromMenuItem">
<short>Copies properties from the specified menu item.</short>
<descr>
<p>
<var>CopyPropertiesFromMenuItem</var> is a method used to copy property value 
from the menu item in <var>Value</var> into the current class instance. This 
ensures that the button has the same settings and behavior as the menu item 
assigned to the button.
</p>
<p>
No actions are performed in the method when Value has not been assigned 
(<b>Nil</b>). Calls <var>BeginUpdate</var> on entry, and <var>EndUpdate</var> 
when the method is completed.
</p>
<p>
The following properties are copied from the menu item in Value:
</p>
<table>
<th>
<td>Source Property (in TMenuItem)</td>
<td>Target Property (in TToolButton)</td>
</th>
<tr>
<td>Action</td>
<td>Action </td>
</tr>
<tr>
<td>Caption</td>
<td>Caption </td>
</tr>
<tr>
<td>Checked</td>
<td>Down </td>
</tr>
<tr>
<td>Enabled</td>
<td>Enabled</td>
</tr>
<tr>
<td>Enabled</td>
<td>Enabled</td>
</tr>
<tr>
<td>Hint</td>
<td>Hint</td>
</tr>
<tr>
<td>ImageIndex</td>
<td>ImageIndex</td>
</tr>
<tr>
<td>Visible</td>
<td>Visible</td>
</tr>
</table>
<p>
CopyPropertiesFromMenuItem is called from the <var>Loaded</var> method when 
LCL component streaming has been completed, and when a new value is assigned 
to the <var>MenuItem</var> property.
</p>
</descr>
<seealso>
<link id="TToolButton.MenuItem"/>
<link id="TToolButton.Loaded"/>
<link id="TToolButton.BeginUpdate"/>
<link id="TToolButton.EndUpdate"/>
<link id="#lcl.menus.TMenuItem">TMenuItem</link>
</seealso>
</element>
<element name="TToolButton.CopyPropertiesFromMenuItem.Value">
<short>Menu item with the properties copied in the method.</short>
</element>

<element name="TToolButton.GetActionLinkClass">
<short>Gets the class type for the ActionLink in the tool button.</short>
<descr>
<p>
GetActionLinkClass is overridden in TWToolButton to return the 
<var>TToolButtonActionLink</var> type in <var>TToolButton</var>.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.GetActionLinkClass">TControl.GetActionLinkClass</link>
<link id="#lcl.controls.TControlActionLinkClass">TControlActionLinkClass</link>
</seealso>
</element>
<element name="TToolButton.GetActionLinkClass.Result">
<short>Class type for the ActionLink in the tool button.</short>
</element>

<element name="TToolButton.ActionChange">
<short>
Implements the handler signalled when the Action for the tool button is 
changed.
</short>
<descr>
<p>
<var>ActionChange</var> is an overridden method which implements an event 
handler signalled when the <var>Action</var> for the tool button is changed.
</p>
<p>
The <var>Sender</var> argument is the new <var>TCustomAction</var> instance 
assigned to the Action property for the tool button.
</p>
<p>
<var>CheckDefaults</var> indicates when values from the action are copied 
into the control. When set to <b>True</b>, the values in the Action are 
applied only when its property value has been assigned.
</p>
<p>
ActionChange calls the inherited method on entry to copy properties from 
Sender to the control. It provides support for translating the 
<var>Checked</var> property in the action to the <var>Down</var> property 
used in the tool button. It also changes the value in <var>ImageIndex</var> 
only when a valid image index has been assigned in the Action.
</p>
</descr>
<seealso>
<link id="TToolButton.Down"/>
<link id="TToolButton.ImageIndex"/>
<link id="#lcl.actnlist.TCustomAction.Checked">TCustomAction.Checked</link>
<link id="#lcl.controls.TControl.ActionChange">TControl.ActionChange</link>
</seealso>
</element>
<element name="TToolButton.ActionChange.Sender">
<short>New action for the control, or <b>Nil</b>.</short>
</element>
<element name="TToolButton.ActionChange.CheckDefaults">
<short>
Indicates if the property in the action must be assigned (not empty).
</short>
</element>

<element name="TToolButton.AssignTo">
<short>
Implements object persistence used to assign properties from the class 
instance to another persistent object.
</short>
<descr>
<p>
<var>AssignTo</var> is an overridden method used to implement object 
persistence for the <var>TToolButton</var> class type. It allows properties 
in the class instance to be stored to the persistent object in 
<var>Dest</var> when it is a <var>TCustomAction</var> instance.
</p>
<p>
AssignTo calls the inherited method on entry to transfer common TCustomAction 
values to Dest. Additional properties in the tool button, like Down and 
ImageIndex, are handled as well.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.AssignTo">TControl.AssignTo</link>
<link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
<link id="#lcl.actnlist.TCustomAction">TCustomAction</link>
</seealso>
</element>
<element name="TToolButton.AssignTo.Dest">
<short>Persistent object where the property values are stored.</short>
</element>

<element name="TToolButton.BeginUpdate">
<short>Starts an update process for the tool button.</short>
<descr>
<p>
Increments the internal counter used to consolidate calls to methods which 
layout or draw the control, or signal event handlers.
</p>
<p>
Use <var>EndUpdate</var> to end an update process for the control. The 
consolidated process(es) are performed when the internal counter reaches 0 
(zero).
</p>
</descr>
<seealso>
<link id="TToolButton.EndUpdate"/>
</seealso>
</element>

<element name="TToolButton.EndUpdate">
<short>Ends an update process for the tool button.</short>
<descr>
<p>
Decrements the internal update counter used to consolidate calls to methods 
which layout or draw the control, or signal event handlers. The consolidated 
process(es) are performed when the internal counter reaches 0 (zero).
</p>
<p>
Use BeginUpdate to start an update process for the control.
</p>
</descr>
<seealso>
<link id="TToolButton.BeginUpdate"/>
</seealso>
</element>

<element name="TToolButton.MouseMove">
<short>
Detects whether the mouse is hovered over the drop-down indicator for the 
tool button.
</short>
<descr>
<p>
<var>MouseMove</var> is an overridden method in <var>TToolButton</var> used 
to handle mouse movement messages for the control. It provides support for 
detecting when the mouse pointer is hovered over the drop-down indicator for 
a tool bar button.
</p>
<p>
It calls the inherited method on entry to handle drag messages, and to signal 
the <var>OnMouseMove</var> event handler (when assigned).
</p>
<p>
If <var>MouseCapture</var> is not enabled for the control, and the button 
uses <var>tbsDropDown</var> in its <var>Style</var> property, the 
<var>PointInArrow</var> method is called is called to detect whether the 
mouse in inside the display area for the drop-down indicator. The value 
<var>tbfMouseInArrow</var> is include in or excluded from the flags for the 
tool button based on the return value from PointInArrow.
</p>
<p>
<var>Invalidate</var> is called to redraw the button if the flag values were 
modified.
</p>
<p>
MouseMove is called from the <var>WMMouseMove</var> message handler.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseMove">TControl.MouseMove</link>
</seealso>
</element>
<element name="TToolButton.MouseMove.Shift">
<short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
</element>
<element name="TToolButton.MouseMove.X">
<short>Horizontal coordinate for the mouse message.</short>
</element>
<element name="TToolButton.MouseMove.Y">
<short>Vertical coordinate for the mouse message.</short>
</element>

<element name="TToolButton.MouseDown">
<short>Handles mouse click events for the tool button.</short>
<descr>
<p>
<var>MouseDown</var> is an overridden method in <var>TToolButton</var> used 
to perform actions needed when a mouse down (or click) event is handled for 
the button control.
</p>
<p>
MouseDown updates flags for the button control to indicate whether a left 
mouse button event occurred over the Button or its drop-down indicator (when 
used). The inherited method is called to handle a control or a form focus 
change, and to signal the OnMouseDown event handler (when assigned).
</p>
<p>
If the mouse event is over the drop-down indicator, the DropDownMenu when its 
AutoPopUp property is enabled. This requires sending a LM_LBUTTONUP message 
to ensure that the feature works for all widgetsets.
</p>
<p>
If the mouse event is over the button, the Down property is set to 
<b>True</b>.
</p>
<p>
MouseDown is called from window message handlers for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseDown">TControl.MouseDown</link>
</seealso>
</element>
<element name="TToolButton.MouseDown.Button">
<short>Mouse button for the mouse message.</short>
</element>
<element name="TToolButton.MouseDown.Shift">
<short>Shift, Alt, or Ctrl modifier for the mouse message.</short>
</element>
<element name="TToolButton.MouseDown.X">
<short>Horizontal coordinate for the mouse message.</short>
</element>
<element name="TToolButton.MouseDown.Y">
<short>Vertical coordinate for the mouse message.</short>
</element>

<element name="TToolButton.MouseUp">
<short>Handles mouse up events for the tool button.</short>
<descr>
<p>
<var>MouseUp</var> is an overridden method in TToolButton used to handle 
mouse up message events.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseUp">TControl.MouseUp</link>
</seealso>
</element>
<element name="TToolButton.MouseUp.Button">
<short>Mouse button for the event.</short>
</element>
<element name="TToolButton.MouseUp.Shift">
<short>Shift, Ctrl, or Alt modifier for the message.</short>
</element>
<element name="TToolButton.MouseUp.X">
<short>Horizontal coordinate for the mouse message.</short>
</element>
<element name="TToolButton.MouseUp.Y">
<short>Vertical coordinate for the mouse message.</short>
</element>

<element name="TToolButton.MouseEnter">
<short>Handles a message sent when the mouse enters a control.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.MouseEnter">TControl.MouseEnter</link>
</seealso>
</element>

<element name="TToolButton.MouseLeave">
<short>Handles a message sent when the mouse leaves a control.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.MouseLeave">TControl.MouseLeave</link>
</seealso>
</element>

<element name="TToolButton.Notification">
<short>
Handles the notification sent when a component is added to or removed from 
the control.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TComponent.Notification">TComponent.Notification</link>
</seealso>
</element>
<element name="TToolButton.Notification.AComponent">
<short>Component for the notification message.</short>
</element>
<element name="TToolButton.Notification.Operation">
<short>Operation performed for the component.</short>
</element>

<element name="TToolButton.Paint">
<short>Draws the tool bar button to the Canvas for the control.</short>
<descr>
<p>
<var>Paint</var> is an overridden method in <var>TToolButton</var>, and 
provides nested routines used to draw the tool button using the style, 
caption, and image for the control. Paint requires <var>ToolBar</var> to be 
assigned before it can render the button control using the routines in the 
overridden method. When ToolBar is unassigned, only the inherited Paint 
method is called.
</p>
<p>
Paint calculates the area display area for the button, and calls 
GetButtonDrawDetail to get the theme element details for the control.
</p>
<p>
When an OnPaintButton event handler has been assigned for the ToolBar, it is 
used to render the button using theme details. No additional actions are 
performed in the method.
</p>
<p>
When OnPaintButton is unassigned, the default drawing routines are used to 
render the button on the Canvas for the control. This includes decorations 
like a drop-down indicator, an image using the required state, and dividers 
or separators for the button. Space is reserved as padding between the icon 
and text on the control (when both are used). The value in the 
cHorIconTextDist or cVerIconTextDist constant is scaled to the PPI setting 
for the control Font, and applied to the text position based on the setting 
in List. cHorIconTextDist is used when List is <b>True</b>. Methods in 
ThemeServices are called to render the control to the Handle for the Canvas.
</p>
<p>
Paint calls the inherited method prior to exit to signal the OnPaint event 
handler (when assigned).
</p>
</descr>
<seealso>
<link id="TToolBar"/>
<link id="#lcl.controls.TGraphicControl.Canvas">TGraphicControl.Canvas</link>
<link id="#lcl.controls.TGraphicControl.Paint">TGraphicControl.Paint</link>
<link id="#lcl.controls.TGraphicControl.OnPaint">TGraphicControl.OnPaint</link>
<link id="#lcl.themes.TThemeServices.GetElementDetails">TThemeServices.GetElementDetails</link>
<link id="#lcl.themes.TThemeServices.DrawElement">TThemeServices.DrawElement</link>
<link id="#lcl.themes.TThemedElementDetails">TThemedElementDetails</link>
<link id="#lcl.themes.ThemeServices">ThemeServices</link>
</seealso>
</element>

<element name="TToolButton.TextChanged">
<short>
Performs actions needed when the caption text for the tool button has been 
changed.
</short>
<descr>
<p>
<var>TextChanged</var> is an overridden method in <var>TToolButton</var> used 
to perform actions needed when the caption text for the tool button has been 
changed. No actions are performed in the method if the parent tool bar has 
not been assigned for the tool button.
</p>
<p>
When <var>ShowCaptions</var> is enabled, the <var>Invalidate</var> method is 
called to cause the tool button to be redrawn.
</p>
<p>
TextChanged is called when the <var>CM_TEXTCHANGED</var> control message is 
handled for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.TextChanged">TControl.TextChanged</link>
<link id="#lcl.controls.TControl.TextChanged">TControl.CMTextChanged</link>
</seealso>
</element>

<element name="TToolButton.CalculatePreferredSize">
<short>
Calculates the preferred dimensions for new instances of the control.
</short>
<descr>
<p>
<var>CalculatePreferredSize</var> is an overridden method in 
<var>TToolButton</var>. It returns the calculated width and height for the 
control in the <var>PreferredWidth</var> and <var>PreferredHeight</var> 
variable arguments. It re-implements the method introduced in TControl to 
return non-empty values in the arguments.
</p>
<p>
No actions are performed in the method if a TToolBar instance has not been 
assigned as the Parent for the control. In this case, the values in the 
PreferredWidth and PreferredHeight arguments are not changed from their 
values on entry.
</p>
<p>
<var>WithThemeSpace</var> indicates whether additional space is reserved for 
theme element details. It is not used in the current implementation of the 
method.
</p>
<p>
CalculatePreferredSize calculates the size needed to represent the icon and 
text on the control. The value in Style determines whether the icon and/or 
text values are needed in the calculated values. When both are needed, 
additional space is reserved between the icon and text as indicated in the 
cHorIconTextDist or cVerIconTextDist constants. The number of pixels is 
scaled to the PPI setting for the control Font and applied to the calculated 
values.
</p>
<p>
CalculatePreferredSize includes space (when needed) for a frame around the 
control, a drop-down indicator, or the height / width for a divider or 
separator button. The Style property determines which values are required.
</p>
<p>
CalculatePreferredSize is called form the GetPreferredSize method when it has 
not already been called for the class instance.
</p>
</descr>
<seealso>
<link id="TToolButton.Style"/>
<link id="TToolButton.GetPreferredSize"/>
<link id="TToolBar"/>
<link id="#lcl.controls.TControl.CalculatePreferredSize">TControl.CalculatePreferredSize</link>
</seealso>
</element>
<element name="TToolButton.CalculatePreferredSize.PreferredWidth">
<short>
Returns the preferred width for a new instance of the tool button class.
</short>
</element>
<element name="TToolButton.CalculatePreferredSize.PreferredHeight">
<short>
Returns the preferred height for a new instance of the tool button class.
</short>
</element>
<element name="TToolButton.CalculatePreferredSize.WithThemeSpace">
<short>
Not used in the current implementation.
</short>
</element>

<element name="TToolButton.GetControlClassDefaultSize">
<short>
<var>GetControlClassDefaultSize</var> returns its own defaults, overriding 
inherited values.
</short>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>

<element name="TToolButton.Loaded">
<short>
Performs actions needed when LCL component streaming has been completed.
</short>
<descr>
<p>
Calls the inherited method on entry. Calls CopyPropertiesFromMenuItem to 
apply values from MenuItem to the properties in the class instance.
</p>
</descr>
<seealso>
<link id="TToolButton.MenuItem"/>
<link id="TToolButton.CopyPropertiesFromMenuItem"/>
<link id="#lcl.controls.TControl.Loaded">TControl.Loaded</link>
<link id="#lcl.menus.TMenuItem">TMenuItem</link>
</seealso>
</element>

<element name="TToolButton.RefreshControl">
<short>Refreshes the button control by updating it parent tool bar.</short>
<descr/>
<seealso>
<link id="TToolButton.UpdateControl"/>
<link id="TToolBar"/>
</seealso>
</element>

<element name="TToolButton.SetToolBar">
<short>
Sets the value for the internal member with the TToolBar instance for the 
button.
</short>
<descr/>
<seealso/>
</element>
<element name="TToolButton.SetToolBar.NewToolBar">
<short>New value for the internal member.</short>
</element>

<element name="TToolButton.UpdateControl">
<short>
Causes the tool bar to adjust the size and position for its Buttons and 
Controls.
</short>
<descr>
<p>
Calls UpdateVisibleToolbar to adjust the buttons sizes and redraw the tool 
bar which owns the button.
</p>
</descr>
<seealso>
<link id="TToolButton.UpdateVisibleToolbar"/>
<link id="TToolButton.RefreshControl"/>
</seealso>
</element>

<element name="TToolButton.GetButtonDrawDetail">
<short>
Gets the Theme Element Details used for the tool button.
</short>
<descr>
<p>
Uses values in <var>Style</var>, <var>Enabled</var>, and <var>Down</var> to 
determine the theme elements requested in the method. Calls 
<var>ThemeElement.GetElementDetails</var> to retrieve the theme details.
</p>
<p>
Called from the <var>Paint</var> method before the control is drawn.
</p>
</descr>
<seealso/>
</element>

<element name="TToolButton.SetParent">
<short>Sets the value for the Parent property.</short>
<descr>
<p>
<var>SetParent</var> is an overridden method in <var>TToolButton</var> used 
to set the value for the <var>Parent</var> property.
</p>
<p>
SetParent ensures that the control in AParent is assigned, and allows child 
classes using the TToolButton class type. An EInvalidOperation exception is 
raised if the class instance cannot be a child control on AParent, or AParent 
is also the current class instance.
</p>
<p>
When the parent tool bar has been assigned, the tool button must be 
re-parented. The RemoveButton method in the tool bar is called to remove the 
button from its existing Parent. If AParent is a TToolBar instance, its 
properties are used to set the ButtonWidth and ButtonHeight for the control. 
The inherited method is called to update both the old and new Parent 
references and their control flags.
</p>
<p>
The value in the internal tool bar member is set to the value in AParent, and 
the AddButton method in the tool bar is called. The UpdateVisibleToolbar 
method is calls to align and re-display the button control (and its tool bar).
</p>
</descr>
<errors>
Raises an EInvalidOperation exception if the class instance cannot be a child 
control on the new Parent, or the new AParent is also the current class 
instance.
</errors>
<seealso>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
<link id="#lcl.controls.TControl.SetParent">TControl.SetParent</link>
</seealso>
</element>
<element name="TToolButton.SetParent.AParent">
<short>New value for the Parent property.</short>
</element>

<element name="TToolButton.UpdateVisibleToolbar">
<short>
Calls the corresponding method in the tool bar for the button.
</short>
<descr>
<p>
Calls a private method in the Parent control to update the tool bar buttons. 
No actions are performed if Parent is not a TToolBar instance, or unassigned.
</p>
</descr>
<seealso>
<link id="TToolBar"/>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
</seealso>
</element>

<element name="TToolButton.GroupAllUpAllowed">
<short>
Indicates if all buttons in the group are allowed to be in the 'Up' position.
</short>
<descr>
<p>
Adjacent check box-style buttons (and their separators / dividers) with their 
Grouped property set to <b>True</b> are considered to be in the same group. 
GroupAllUpAllowed examines the adjacent tool buttons on the Parent tool bar 
to determine whether any of the grouped buttons have the AllowAllUp property 
set to <b>True</b>. When one grouped check-box button has AllowAllUp set, the 
remaining buttons in the group are treated in the same manner.
</p>
<remark>
Change the Grouped property to <b>False</b> on a separator or divider to 
force the preceding or subsequent check-box buttons to be treated as a 
different group.
</remark>
</descr>
<seealso>
<link id="TToolButton.Style"/>
<link id="TToolButton.Grouped"/>
<link id="TToolButton.AllowAllUp"/>
<link id="TToolButtonStyle"/>
</seealso>
</element>
<element name="TToolButton.GroupAllUpAllowed.Result">
<short>
<b>True</b> when the AllowAllUp property is set for any of the adjacent 
grouped check-box buttons on the tool bar.
</short>
</element>

<element name="TToolButton.DialogChar">
<short>
Clicks the button when the message contains the accelerator key for the 
button control.
</short>
<descr>
<p>
Causes the tool button to be clicked when <var>Message</var> contains the 
accelerator key (shortcut) in the <var>Caption</var> for the button. 
<var>ShowCaptions</var> must be enabled in the <var>Parent</var> tool bar to 
allow the button to be clicked. If the message is not handled in the method, 
the inherited method is called.
</p>
<p>
The return value is <b>True</b> if the key message was handled as an 
accelerator key for the button control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.DialogChar">TControl.DialogChar</link>
</seealso>
</element>
<element name="TToolButton.DialogChar.Result">
<short>
<b>True</b> If the message was handled as an accelerator key for the tool bar 
button.
</short>
</element>

<element name="TToolButton.SetAutoSize">
<short>
Sets the value the AutoSize property and adjusts the control size when needed.
</short>
<descr>
<p>
<var>SetAutoSize</var> is an overridden method in <var>TToolButton</var> used 
to set the value for the <var>AutoSize</var> property. It calls the inherited 
method to apply the new value for the property. It calls RequestAlign to 
adjust the size and alignment for the button control (and its siblings) on 
the Parent control.
</p>
</descr>
<seealso>
<link id="TToolButton.AutoSize"/>
<link id="#lcl.controls.TControl.SetAutoSize">TControl.SetAutoSize</link>
<link id="#lcl.controls.TControl.RequestAlign">TControl.RequestAlign</link>
<link id="#lcl.controls.TControl.Parent">TControl.Parent</link>
</seealso>
</element>
<element name="TToolButton.SetAutoSize.Value">
<short>New value for the AutoSize property.</short>
</element>

<element name="TToolButton.RealSetText" link="#lcl.controls.TControl.RealSetText"/>
<element name="TToolButton.RealSetText.AValue"/>

<element name="TToolButton.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TToolButton</var>. It calls the 
inherited <var>Create</var> method, and sets the initial bounds for the 
control. Default values for style-related properties are also assigned.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TGraphicControl.Create">TGraphicControl.Create</link>
<link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
</seealso>
</element>
<element name="TToolButton.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TToolButton.CheckMenuDropdown">
<short>Checks for and executes a drop-down menu for the tool button.</short>
<descr>
<p>
<var>CheckMenuDropdown</var> is a <var>Boolean</var> function used to check 
whether a drop-down menu can be displayed and executed for the tool button. 
The menu can be represented using either the <var>DropDownMenu</var> property 
(with its <var>AutoPopUp</var> property set to <b>True</b>) or the 
<var>MenuItem</var> property.
</p>
<p>
No actions are performed in the method at design-time, when the parent tool 
bar has not been assigned, or when neither DropDownMenu nor MenuItem has been 
assigned.
</p>
<p>
When a menu is available, the flags for the tool button are updated to 
include the value <var>tbfDropDownMenuShown</var>. The CheckMenuDropdown 
method in the parent tool bar is called to display and execute the drop-down 
menu, and get the return value for the method. The return value is 
<b>True</b> if the menu was successfully display and executed by the parent 
tool bar. The button flags are reverted prior to exiting from the method.
</p>
<p>
CheckMenuDropdown is called from the <var>MouseDown</var> method when the 
left mouse button is clicked on a button (or its drop-down indicator).
</p>
</descr>
<seealso>
<link id="TToolButton.DropDownMenu"/>
<link id="TToolButton.MenuItem"/>
<link id="TToolButton.Style"/>
<link id="TToolButton.MouseDown"/>
<link id="TToolBar.CheckMenuDropdown"/>
</seealso>
</element>
<element name="TToolButton.CheckMenuDropdown.Result">
<short>
<b>True</b> if the drop-down menu for the button was successfully displayed 
and executed.
</short>
</element>

<element name="TToolButton.Click" link="#lcl.controls.TControl.Click"/>

<element name="TToolButton.ArrowClick">
<short>Signals the OnArrowClick event handler for the tool button.</short>
<descr>
<p>
<var>ArrowClick</var> is a method used to execute the <var>OnArrowClick</var> 
event handler (when assigned) for the tool button. ArrowClick is called from 
the <var>MouseDown</var> method when the left mouse button has been clicked 
on the drop-down indicator and the <var>DropDownMenu</var> for the button is 
not already visible.
</p>
<p>
See <var>Click</var> for information about the actions performed when the 
button has been clicked, instead of its drop-down indicator.
</p>
</descr>
<seealso>
<link id="TToolButton.OnArrowClick"/>
<link id="TToolButton.Click"/>
<link id="TToolButton.MouseDown"/>
<link id="TToolButton.Style"/>
<link id="TToolButton.DropDownMenu"/>
<link id="TToolButton.MenuItem"/>
</seealso>
</element>

<element name="TToolButton.GetCurrentIcon">
<short>
Gets the image list, index, and drawing effect for the icon on the tool 
button.
</short>
<descr>
<p>
GetCurrentIcon is a method used to get information for the icon drawn on the 
tool button. It returns values in the variable parameters with the scaled 
image list for the icon, its position in the image list, and the drawing 
effect for the image.
</p>
<p>
ImageList is the scaled image list with the images from the parent tool bar. 
It is re-created in the method and uses the image size from the parent tool 
bar scaled to the run-time display density (PPI). The images in the list are 
retrieved from the Images, HotImages, or DisabledImages properties in the 
parent tool bar and reflect the values in the Enabled property and the tool 
button flags. The default value is <b>Nil</b> (unassigned).
</p>
<p>
TheIndex is the position in the image list for the icon image. It defaults to 
the value in the ImageIndex property.
</p>
<p>
TheEffect is a TGraphicsDrawEffect value that indicates the drawing effect to 
apply to the tool button. It reflects the values in the Enabled property, 
flags for the tool button, and the toUseGlyphEffects setting in 
ThemeServices. The following values are used in TheEffect:
</p>
<dl>
<dt>gdeNormal</dt>
<dd>
Images are drawn using the normal, undecorated drawing effect. This is the 
default value.
</dd>
<dt>gdeShadowed</dt>
<dd>
Images are drawn using the shadowed effect when the button or drop-down 
indicator is pressed.
</dd>
<dt>gdeHighlighted</dt>
<dd>
Images are drawn using highlighting when the button is Enabled and 
auto-effects are used in theme services. Otherwise, the tool bar HotImages or 
DisabledImages are used.
</dd>
<dt>gdeDisabled</dt>
<dd>
Images are drawn using the dimmed effect when the button is not Enabled, or 
tool bar DisabledImages are not available.
</dd>
</dl>
<p>
GetCurrentIcon is called from the Paint method.
</p>
</descr>
<seealso/>
</element>
<element name="TToolButton.GetCurrentIcon.ImageList">
<short>Scaled Image list with the available images for the icon.</short>
</element>
<element name="TToolButton.GetCurrentIcon.TheIndex">
<short>Ordinal position in the image list for the icon image.</short>
</element>
<element name="TToolButton.GetCurrentIcon.TheEffect">
<short>Graphic drawing effect needed for the button state.</short>
</element>

<element name="TToolButton.GetPreferredSize">
<short>
Returns default/preferred height and width, for use in auto-sizing.
</short>
<descr>
<p>
Called during AutoSize calculations. Only positive values are valid. Negative 
or 0 are treated as undefined, and the LCL uses other sizes instead.
</p>
<p>
When WithThemeSpace is <b>True</b>, additional space is reserved for stacking.
</p>
<p>
Calls the inherited method on entry. Values from the ButtonWidth and 
ButtonHeight properties in the parent tool bar may be used in the 
PreferredWidth and PreferredHeight arguments, depending on the orientation 
for the tool bar. No additional actions are performed in the method if the 
parent tool bar has not been assigned.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.GetPreferredSize">TControl.GetPreferredSize</link>
</seealso>
</element>
<element name="TToolButton.GetPreferredSize.PreferredWidth">
<short>
Preferred width for the control used in auto-sizing algorithms.
</short>
</element>
<element name="TToolButton.GetPreferredSize.PreferredHeight">
<short>
Preferred height for the control used in auto-sizing algorithms.
</short>
</element>
<element name="TToolButton.GetPreferredSize.Raw">
<short>
<b>True</b> if the calculated values are used as is. <b>False</b> if the value 
can be adjusted by constraints or set to default values.
</short>
</element>
<element name="TToolButton.GetPreferredSize.WithThemeSpace">
<short>
<b>True</b> to reserve space for stacking and alignment provided in theme 
element details.
</short>
</element>

<element name="TToolButton.Index">
<short>
<var>Index</var>- is the sequence number for the button in ButtonList.
</short>
<descr>
<p>
<var>Index</var> is a read-only <var>Integer</var> property with the sequence 
number for the current button in the list of buttons. When the internal 
toolbar button list has been assigned, its <var>IndexOf</var> method is 
called to get the position for the current class instance in the toolbar 
control. When the internal toolbar is unassigned (contains <b>Nil</b>), the 
value <b>-1</b> is used as the return value.
</p>
</descr>
<seealso>
<link id="TToolBar.Buttons"/>
<link id="TToolBar.ButtonList"/>
</seealso>
</element>

<element name="TToolButton.PointInArrow">
<short>
Indicates if the specified position is within the bounds for the arrow drawn 
on a drop-down button.
</short>
<descr/>
<seealso/>
</element>
<element name="TToolButton.PointInArrow.Result">
<short>
<b>True</b> when the coordinates are within the arrow for the drop-down.
</short>
</element>
<element name="TToolButton.PointInArrow.X">
<short>Horizontal coordinate examined in the method.</short>
</element>
<element name="TToolButton.PointInArrow.Y">
<short>Vertical coordinate examined in the method.</short>
</element>

<element name="TToolButton.Action" link="#lcl.controls.TControl.Action"/>

<element name="TToolButton.AllowAllUp">
<short>
Indicates if all buttons in a group can have their Down property set to 
<b>False</b>.
</short>
<descr>
<p>
<var>AllowAllUp</var>, when <b>True</b>, indicates that all buttons in a 
group are allowed to be 'Up' at the same time. The default value for the 
property is <b>False</b>, and indicates that one of the grouped buttons must 
have its Down property set to <b>True</b>.
</p>
</descr>
<seealso>
<link id="TToolButton.Grouped"/>
<link id="TToolButton.Down"/>
</seealso>
</element>

<element name="TToolButton.AutoSize">
<short>Allows the control to grow to the size for its content.</short>
<descr>
<p>
Allows automatic adjustment of the size for the control, according to its 
content. The action performed depends on the control type. For example, a 
label or button can become bigger or smaller to accommodate a longer or shorter
caption.
</p>
<p>
Default value for the property is <b>False</b>, and disables auto-sizing for 
the control instance.
</p>
<p>
The write access specifier is overridden in TToolButton to resize and align 
the tool button and its parent tool bar when needed.
</p>
</descr>
<seealso>
<link id="TToolButton.SetAutoSize"/>
<link id="#lcl.controls.TControl.AutoSize">TControl.AutoSize</link>
</seealso>
</element>

<element name="TToolButton.Caption" link="#lcl.controls.TControl.Caption"/>

<element name="TToolButton.Down">
<short>
Indicates whether the button is in the "Down" state, i. e. has it been 
selected or clicked. 
</short>
<descr>
<p>
<var>Down</var> is a <var>Boolean</var> property which indicates if the tool 
button is in a "pressed" or "down" state. The default value for the property 
is <b>False</b>, and causes the button to be drawn in its normal non-pressed 
state. Down is updated when mouse down or up messages are handled for the 
button.
</p>
<p>
The Style property determines whether the Down state is temporary or 
persistent. When Style contains tsButton, Down is reset to <b>False</b> when a 
mouse up message occurs for the button. For the tbsCheck style, it is a 
toggle; mouse down changes the state but mouse up does not automatically 
release it.
</p>
<p>
Changing the value for the property causes the control to be redrawn. It may 
also affect adjacent buttons on the tool bar with their Grouped properties 
enabled. When Down is enabled for a Grouped button, the other buttons in the 
group are updated to set their Down states to <b>False</b>.
</p>
<p>
Set Grouped to <b>True</b> to include the button in a group of adjacent 
buttons where only one of them can be in the Down state at any given time. The 
group does not extend beyond separator or divider buttons defined on the tool 
bar. Use AllowAllUp to control whether all of the buttons in a group can have 
their Down properties set to <b>False</b>.
</p>
<p>
Changing the property to <b>True</b> at design-time (or in program code) 
causes a <i>non-grouped</i> tool button to be drawn in the pressed state 
regardless of the setting in style. Display logic for the Style is reapplied 
when mouse messages are handled for the control.
</p>
</descr>
<version>
The implementation was modified in LCL version 3.0 to ensure that an endless 
loop is avoided when Down is changed for grouped button, or when 
GroupAllUpAllowed is called.
</version>
<seealso>
<link id="TToolButton.Grouped"/>
<link id="TToolButton.AllowAllUp"/>
<link id="TToolButton.Style"/>
<link id="TToolButton.GroupAllUpAllowed"/>
<link id="TToolBar.Buttons"/>
<link id="TToolButtonStyle"/>
</seealso>
</element>

<element name="TToolButton.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TToolButton.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TToolButton.DragMode" link="#lcl.controls.TControl.DragMode"/>

<element name="TToolButton.DropdownMenu">
<short>
The drop-down menu displayed when the button is pressed.
</short>
<descr>
<p>
<var>DropdownMenu</var> is a <var>TPopupMenu</var> property which contains the 
drop-down menu displayed for the button when its Style property is set to one 
of the drop-down styles:
</p>
<dl>
<dt>tbsDropDown</dt>
<dd>
Displays the menu when the drop-down indicator for the button is clicked.
</dd>
<dt>tbsButtonDrop</dt>
<dd>
Displays the menu when any part of the button is clicked. This style also 
omits the divider between the button surface and the drop-down indicator.
</dd>
</dl>
<p>
DropdownMenu is displayed or hidden when the TToolBar.CheckMenuDropdown method 
examines the flag values set when mouse messages are handled for the control.
</p>
<p>
Create a TPopupMenu instance with the menu items or sub-menus needed, and 
assign it to the property. Changing the value for the property causes the 
TPopupMenu menu instance to be added to the free notifications for the 
component.
</p>
</descr>
<seealso>
<link id="TToolButton.Style"/>
<link id="TToolButton.CheckMenuDropdown"/>
<link id="TToolBar.CheckMenuDropdown"/>
<link id="TToolButtonStyle"/>
<link id="#lcl.menus.TPopupMenu">TPopupMenu</link>
</seealso>
</element>

<element name="TToolButton.Enabled">
<short>
Determines whether the button can respond to click events, and how it is 
displayed.
</short>
<descr>
<p>
<var>Enabled</var> is a <var>Boolean</var> property which determines whether 
the tool button can respond to mouse click events at run-time. Enabled, along 
with <var>Down</var>, <var>Style</var>, and values in the tool bar flags 
influence how the button is rendered in the <var>Paint</var> method.
</p>
<p>
The value for the property may be changed in the 
<var>CopyPropertiesFromMenuItem</var> method, or when the 
<var>CM_ENABLEDCHANGED</var> control message is handled for the button.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Enabled">TControl.Enabled</link>
</seealso>
</element>

<element name="TToolButton.Grouped">
<short>
Indicates if the tool button is a member of a group. The default value is 
<b>False</b>.
</short>
<descr>
<p>
<var>Grouped</var> is a <var>Boolean</var> property which indicates that the 
button is a member of a group when its value is set to <b>True</b>. A button 
group is a range of adjacent tool buttons with their Grouped properties set to 
<b>True</b>. The button range cannot extend beyond separators and dividers 
used on a tool bar control.
</p>
<p>
While Grouped can be assigned for any button style, it is significant when 
Style is set to tbsCheck. If Grouped is enabled, the checked-style button 
behaves like a check box in TCheckGroup or a radio button in TRadioGroup 
where only one of the grouped controls can be selected or checked at a time.
</p>
<p>
Changing the value for the property causes adjacent buttons on the TToolBar 
instance to be examined to ensure that only one of the grouped buttons has its 
Down property set to <b>True</b>.
</p>
<p>
Use AllowAllUp to indicate whether all of the buttons in a group can have 
their Down properties set to <b>False</b>.
</p>
</descr>
<seealso>
<link id="TToolButton.Style"/>
<link id="TToolButton.Down"/>
<link id="TToolButton.AllowAllUp"/>
<link id="TToolButtonStyle"/>
</seealso>
</element>

<element name="TToolButton.Height">
<short>Contains the height for the control in pixels.</short>
<descr>
<p>
<var>Height</var> is an <var>Integer</var> property with the vertical size in 
pixels for the tool button. Height is normally set to the value in the 
ButtonHeight property for the parent tool bar.
</p>
</descr>
<seealso>
<link id="TToolBar.ButtonHeight"/>
<link id="TToolBar.ButtonWidth"/>
<link id="TToolButton.Width"/>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
</seealso>
</element>

<element name="TToolButton.ImageIndex">
<short>
Ordinal position in an image list for the icon displayed on the tool button.
</short>
<descr>
<p>
<var>ImageIndex</var> is a <var>TImageIndex</var> property with the ordinal 
position in an image list for the icon displayed on the tool button. It 
refers to a position in <var>Images</var>, <var>HotImages</var>, or 
<var>DisabledImages</var> in the parent tool bar. The default value for the 
property is <b>-1</b>, and indicates that an image has not been specified for 
the tool button. Changing the value for the property causes the tool button 
to be redrawn.
</p>
<p>
The property value may be changed in the 
<var>CopyPropertiesFromMenuItem</var> method when a <var>MenuItem</var> is 
assigned to the tool button.
</p>
<p>
ImageIndex is used in the <var>Paint</var> method to select the icon drawn on 
the tool button.
</p>
</descr>
<seealso>
<link id="TToolButton.Paint"/>
<link id="TToolButton.GetCurrentIcon"/>
<link id="TToolButton.MenuItem"/>
<link id="TToolButton.CopyPropertiesFromMenuItem"/>
<link id="TToolBar.Images"/>
<link id="TToolBar.HotImages"/>
<link id="TToolBar.DisabledImages"/>
</seealso>
</element>

<element name="TToolButton.Indeterminate">
<short>Indicates if the tool button is in an undetermined state.</short>
<descr>
<p>
<var>Indeterminate</var> is a <var>Boolean</var> property which indicates if 
the tool button is in an undetermined state and may not be applicable to the 
current context. Indeterminate means that the button is neither selected nor 
unselected, and normally causes it to be displayed with a "grayed" or 
"dimmed" appearance.
</p>
<p>
The default value for the property is <b>False</b>. When the property value 
is changed to <b>True</b>, the <var>Down</var> property is automatically set 
to <b>False</b> and the tool button is redrawn.
</p>
</descr>
<seealso/>
</element>

<element name="TToolButton.Marked">
<short>Indicates if the tool button is marked.</short>
<descr>
<p>
<var>Marked</var> is a <var>Boolean</var> property which indicates if the 
tool button is marked. The default value for the property is <b>False</b>.
</p>
<p>
Marked is provided for Delphi code compatibility; it is not used in the 
implementation of <var>TToolButton</var> or <var>TToolBar</var>.
</p>
</descr>
<seealso/>
</element>

<element name="TToolButton.MenuItem">
<short>Contains a menu item associated with the tool button.</short>
<descr>
<p>
<var>MenuItem</var> is a <var>TMenuItem</var> property which contains a menu 
item associated with the tool button.
</p>
<p>
Normally, a button on an application tool bar is associated with a menu item 
in the application. When a TMenuItem instance is assigned to the property, 
its property values are copied into the <var>TToolButton</var> instance using 
the <var>CopyPropertiesFromMenuItem</var> method. If MenuItem is set to 
<b>Nil</b>, a free notification is performed for the tool button instance.
</p>
<p>
When MenuItem has sub-menu <var>Items</var>, they are displayed as a 
drop-down when the tool button uses a drop-down <var>Style</var>.
</p>
<p>
Use <var>DropDownMenu</var> to specify a <var>TPopupMenu</var> instance that 
is displayed when the button (or drop-down indicator) for the tool button is 
clicked.
</p>
</descr>
<seealso/>
</element>


<element name="TToolButton.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TToolButton.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>

<element name="TToolButton.ShowCaption">
<short>
Indicates whether the Caption text is displayed on the tool button.
</short>
<descr>
<p>
<var>ShowCaption</var> is a <var>Boolean</var> property which indicates 
whether the value in the Caption property is displayed on the button surface. 
The default value for the property is <b>True</b>, and enables the text on 
buttons with a Style value that is are not a divider or a separator.
</p>
<p>
ShowCaption is used in conjunction with the ShowCaptions property in the tool 
bar where the button is displayed. The ShowCaptions property in the parent 
tool bar takes precedence. Setting ShowCaption to <var>False</var> for the 
button is relevant when the List property in the tool bar is <b>True</b>.
</p>
<p>
ShowCaption is used in the Paint method when the text size for the Caption is 
calculated.
</p>
</descr>
<seealso>
<link id="TToolButton.Caption"/>
<link id="TToolButton.Style"/>
<link id="TToolButton.Paint"/>
<link id="TToolBar.ShowCaptions"/>
<link id="TToolBar.List"/>
<link id="TToolButtonStyle"/>
</seealso>
</element>

<element name="TToolButton.ShowHint" link="#lcl.controls.TControl.ShowHint"/>

<element name="TToolButton.Style">
<short>
Determines the display style for the tool button.
</short>
<descr>
<p>
<var>Style</var> is a <var>TToolButtonStyle</var> property which controls the 
visual display style and behavior for the button on its tool bar. Values 
allowed in the property include:
</p>
<ul>
<li>tbsButton</li>
<li>tbsCheck</li>
<li>tbsDropDown</li>
<li>tbsSeparator</li>
<li>tbsDivider</li>
<li>tbsButtonDrop</li>
</ul>
<p>
The default value for the property is tbsButton. This causes the button to be 
displayed using the behavior for a TSpeedButton class instance. In other 
words, it is a momentary button which performs its Click method when the left 
mouse button is clicked and released.
</p>
<p>
See <link id="TToolButtonStyle">TToolButtonStyle</link> for more information 
about the values for the property.
</p>
<p>
Changing the value for the property causes the Width, Height, and preferred 
size for the button to be recalculated. If the button is Visible, the visible 
area on the Parent tool bar is redisplayed by calling UpdateVisibleToolbar.
</p>
<p>
Use Grouped and AllowAllUp to control button behavior for adjacent grouped 
buttons on the tool bar using the checked style.
</p>
<p>
Use the Caption and ShowCaption properties to control the text displayed on 
the button.
</p>
</descr>
<seealso>
<link id="TToolButton.Grouped"/>
<link id="TToolButton.AllowAllUp"/>
<link id="TToolButton.DropdownMenu"/>
<link id="TToolButton.Visible"/>
<link id="TToolButton.Width"/>
<link id="TToolButton.Height"/>
<link id="TToolButton.UpdateVisibleToolbar"/>
<link id="TToolBar.List"/>
<link id="TToolBar.ShowCaptions"/>
<link id="TToolButtonStyle"/>
</seealso>
<example file="comctrls/ttoolbutton.pas"/>
</element>

<element name="TToolButton.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TToolButton.Width" link="#lcl.controls.TControl.Width"/>

<element name="TToolButton.Wrap">
<short>
Indicates whether the tool button is forced onto the next row on the parent 
tool bar.
</short>
<descr/>
<seealso/>
</element>

<element name="TToolButton.OnArrowClick">
<short>
Event handler signalled when the drop-down indicator for a tool button is 
clicked.
</short>
<descr>
<p>
<var>OnArrowClick</var> is a <var>TNotifyEvent</var> property with the event 
handler signalled when the drop-down indicator is clicked on a tool button 
using a drop-down <var>Style</var>.
</p>
<p>
OnArrowClick is signalled from the <var>ArrowClick</var> method (when 
assigned), and occurs when the left mouse button was clicked on the drop-down 
indicator. It is not executed if the <var>DropDownMenu</var> has already been 
displayed.
</p>
<p>
Use <var>OnClick</var> (or OnExecute in the Action) for the event handler 
signalled when the tool button was clicked.
</p>
</descr>
<seealso>
<link id="TToolButton.Style"/>
<link id="TToolButton.ArrowClick"/>
<link id="TToolButton.Click"/>
<link id="TToolButton.DropDownMenu"/>
<link id="#lcl.controls.TControl.OnClick">OnClick</link>
</seealso>
</element>

<element name="TToolButton.OnClick">
<short>Event handler signalled when the tool button has been clicked.</short>
<descr>
<p>
<var>OnClick</var> is a <var>TNotifyEvent</var> property with the event 
handler signalled when the left mouse button is clicked on the tool button.
</p>
</descr>
<seealso>
<link id="TToolButton.Style"/>
<link id="TToolButton.OnArrowClick"/>
<link id="#lcl.controls.TControl.OnClick">TControl.OnClick</link>
</seealso>
</element>

<element name="TToolButton.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TToolButton.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TToolButton.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TToolButton.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TToolButton.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TToolButton.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TToolButton.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TToolButton.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TToolButton.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TToolButton.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TToolButton.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TToolButton.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TToolButton.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TToolButton.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TToolButton.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

<element name="TToolBarEnumerator">
<short>Implements an enumerator for the buttons defined on a tool bar.</short>
<descr/>
<seealso/>
</element>

<element name="TToolBarEnumerator.FToolBar"/>
<element name="TToolBarEnumerator.FPosition"/>

<element name="TToolBarEnumerator.GetCurrent">
<short>
Gets the value for the Current property.
</short>
<descr/>
<seealso>
<link id="TToolBarEnumerator.Current"/>
</seealso>
</element>
<element name="TToolBarEnumerator.GetCurrent.Result">
<short>
Value for the Current property.
</short>
</element>

<element name="TToolBarEnumerator.Create">
<short>Constructor for the class instance.</short>
<descr/>
<seealso>
<link id="TToolBar"/>
<link id="TToolButton"/>
</seealso>
</element>
<element name="TToolBarEnumerator.Create.AToolBar">
<short>Tool bar with the buttons for the enumerator.</short>
</element>

<element name="TToolBarEnumerator.MoveNext">
<short>
Moves to the internal position to the next button instance for the enumerator.
</short>
<descr/>
<seealso>
<link id="TToolBar.ButtonCount"/>
</seealso>
</element>
<element name="TToolBarEnumerator.MoveNext.Result">
<short>
Returns <b>True</b> if the internal position for the next button is valid for 
the button count on the tool bar. Returns <b>False</b> if there are no more 
tool buttons available to the enumerator.
</short>
</element>

<element name="TToolBarEnumerator.Current">
<short>
Current tool button instance for the enumerator.
</short>
<descr>
<p>
<var>Current</var> is a read-only <var>TToolButton</var> property with the 
current tool button for the enumerator.
</p>
<p>
Call MoveNext to position the enumerator on the first tool button when the 
enumerator is created. Failure to do so before accessing Current will result 
in a run-time error.
</p>
</descr>
<seealso>
<link id="TToolBarEnumerator.Create"/>
<link id="TToolBarEnumerator.MoveNext"/>
<link id="TToolBar.Buttons"/>
<link id="TToolBar.ButtonCount"/>
<link id="TToolButton"/>
</seealso>
</element>

<element name="TToolBarOnPaintButton">
<short>
Specifies an event handler signalled to draw a button on a tool bar with a 
given state.
</short>
<descr>
<p>
<var>TToolBarOnPaintButton</var> is an object procedure type that specifies 
an event handler signalled to draw a button on a tool bar with a given state. 
TToolBarOnPaintButton is the type used for the <var>OnPaintButton</var> 
property in <var>TToolBar</var>.
</p>
</descr>
<seealso>
<link id="TToolButton.Paint"/>
<link id="TToolBar.OnPaintButton"/>
</seealso>
</element>
<element name="TToolBarOnPaintButton.Sender">
<short>Object (TToolButton instance) for the event notification.</short>
</element>
<element name="TToolBarOnPaintButton.State">
<short>Drawing state for the button.</short>
</element>

<element name="TToolBarFlag">
<short>
Contains values used as status flags in the TToolBar control.
</short>
<descr/>
<seealso>
<link id="TToolBarFlags"/>
<link id="TToolBar"/>
</seealso>
</element>
<element name="TToolBarFlag.tbfUpdateVisibleBarNeeded">
<short>Indicates the tool bar control needs to be redrawn.</short>
</element>
<element name="TToolBarFlag.tbfPlacingControls">
<short>
Indicates a button or other control has been moved on a tool bar control.
</short>
</element>

<element name="TToolBarFlags">
<short>
Set type used to store values from the TToolBarFlag enumeration.
</short>
<descr/>
<seealso>
<link id="TToolBarFlag"/>
</seealso>
</element>

<element name="TToolBar">
<short>
Implements an application tool bar with buttons or other visual controls.
</short>
<descr>
<p>
<var>TToolBar</var> is <var>TToolWindow</var> descendant which implements a 
control used to arrange and display buttons and other controls. The buttons 
are used to provide direct access to features or functions in the 
application, much like a menu.
</p>
<p>
A tool bar is normally aligned to an edge for the parent control so that it 
spans its width or height. The default alignment places the tool bar along 
the top edge of the parent control.
</p>
<p>
In basic usage, TToolBar allows TToolButton instances with the same height 
and width to be added to the control. The buttons can be displayed as check 
boxes, drop downs (combo-boxes), or drop down buttons as well. The tool bar 
can be configured to display images and/or captions, as well as dividers 
(thin) or separators (dividers with extra spacing) between buttons.
</p>
<p>
Other visual controls can be created using the tool bar as the parent 
control. These controls are resized to the width or height (depending on 
alignment) for the tool bar.
</p>
<p>
The tool bar can be configured to wrap buttons or child controls when the 
controls will not fit within the dimension for the tool bar alignment. Other 
visual aspects can be controlled, like use of edges around the tool bar or a 
flat appearance.
</p>
<p>
Use the Buttons property to access and maintain the tool buttons on the 
control. Use Controls to access other visual control types on the tool bar.
</p>
<p>
Use the OnPaint event handler to perform custom drawing on the tool bar 
control when the Paint method is called. Use the OnPaintButton event handler 
to perform custom drawing for individual tool buttons on the control.
</p>
<p>
TToolBar is the ancestor for the TExtendedTabToolBar in the LazControls 
package.
</p>
</descr>
<seealso>
<link id="TToolButton"/>
<link id="#lcl.toolwin.TToolWindow">TToolWindow</link>
</seealso>
</element>

<element name="TToolBar.FOnPaint"/>
<element name="TToolBar.FOnPaintButton"/>
<element name="TToolBar.FButtonHeight"/>
<element name="TToolBar.FRealizedButtonHeight"/>
<element name="TToolBar.FRealizedButtonWidth"/>
<element name="TToolBar.FRealizedDropDownWidth"/>
<element name="TToolBar.FRealizedButtonDropWidth"/>
<element name="TToolBar.FButtons"/>
<element name="TToolBar.FButtonWidth"/>
<element name="TToolBar.FDisabledImageChangeLink"/>
<element name="TToolBar.FDisabledImages"/>
<element name="TToolBar.FDropDownWidth"/>
<element name="TToolBar.FThemeDropDownWidth"/>
<element name="TToolBar.FThemeButtonDropWidth"/>
<element name="TToolBar.FDropDownButton"/>
<element name="TToolBar.FFlat"/>
<element name="TToolBar.FHotImageChangeLink"/>
<element name="TToolBar.FHotImages"/>
<element name="TToolBar.FImageChangeLink"/>
<element name="TToolBar.FImages"/>
<element name="TToolBar.FIndent"/>
<element name="TToolBar.FList"/>
<element name="TToolBar.FNewStyle"/>
<element name="TToolBar.FRowCount"/>
<element name="TToolBar.FShowCaptions"/>
<element name="TToolBar.FCurrentMenu"/>
<element name="TToolBar.FCurrentMenuAutoFree"/>
<element name="TToolBar.FSrcMenu"/>
<element name="TToolBar.FSrcMenuItem"/>
<element name="TToolBar.FToolBarFlags"/>
<element name="TToolBar.FWrapable"/>
<element name="TToolBar.FImagesWidth"/>

<element name="TToolBar.ApplyFontForButtons">
<short>Assigns the Font for the control to each of its Buttons.</short>
<descr>
<p>
Called from the <var>FontChanged</var> method.
</p>
</descr>
<seealso>
<link id="TToolBar.ButtonCount"/>
<link id="TToolBar.Buttons"/>
<link id="TToolBar.FontChanged"/>
<link id="TToolBarButton"/>
<link id="#lcl.controls.TControl.Font">TControl.Font</link>
</seealso>
</element>

<element name="TToolBar.CloseCurrentMenu"/>

<element name="TToolBar.GetButton"/>
<element name="TToolBar.GetButton.Result"/>
<element name="TToolBar.GetButton.Index"/>

<element name="TToolBar.GetButtonCount"/>
<element name="TToolBar.GetButtonCount.Result"/>

<element name="TToolBar.GetButtonDropWidth"/>
<element name="TToolBar.GetButtonDropWidth.Result"/>

<element name="TToolBar.GetButtonWidth"/>
<element name="TToolBar.GetButtonWidth.Result"/>

<element name="TToolBar.GetButtonHeight"/>
<element name="TToolBar.GetButtonHeight.Result"/>

<element name="TToolBar.GetDropDownWidth"/>
<element name="TToolBar.GetDropDownWidth.Result"/>

<element name="TToolBar.GetTransparent"/>
<element name="TToolBar.GetTransparent.Result"/>

<element name="TToolBar.SetButtonHeight"/>
<element name="TToolBar.SetButtonHeight.AValue"/>

<element name="TToolBar.SetButtonWidth"/>
<element name="TToolBar.SetButtonWidth.AValue"/>

<element name="TToolBar.SetDisabledImages"/>
<element name="TToolBar.SetDisabledImages.AValue"/>

<element name="TToolBar.SetDropDownWidth"/>
<element name="TToolBar.SetDropDownWidth.ADropDownWidth"/>

<element name="TToolBar.SetFlat"/>
<element name="TToolBar.SetFlat.AValue"/>

<element name="TToolBar.SetHotImages"/>
<element name="TToolBar.SetHotImages.AValue"/>

<element name="TToolBar.SetImages"/>
<element name="TToolBar.SetImages.AValue"/>

<element name="TToolBar.SetImagesWidth"/>
<element name="TToolBar.SetImagesWidth.AImagesWidth"/>

<element name="TToolBar.SetIndent"/>
<element name="TToolBar.SetIndent.AValue"/>

<element name="TToolBar.SetList"/>
<element name="TToolBar.SetList.AValue"/>

<element name="TToolBar.SetShowCaptions"/>
<element name="TToolBar.SetShowCaptions.AValue"/>

<element name="TToolBar.SetTransparent"/>
<element name="TToolBar.SetTransparent.AValue"/>

<element name="TToolBar.SetWrapable"/>
<element name="TToolBar.SetWrapable.AValue"/>

<element name="TToolBar.ImageListChange"/>
<element name="TToolBar.ImageListChange.Sender"/>

<element name="TToolBar.DisabledImageListChange"/>
<element name="TToolBar.DisabledImageListChange.Sender"/>

<element name="TToolBar.HotImageListChange"/>
<element name="TToolBar.HotImageListChange.Sender"/>

<element name="TToolBar.UpdateVisibleBar"/>

<element name="TToolBar.MoveSubMenuItems"/>
<element name="TToolBar.MoveSubMenuItems.SrcMenuItem"/>
<element name="TToolBar.MoveSubMenuItems.DestMenuItem"/>

<element name="TToolBar.AddButton"/>
<element name="TToolBar.AddButton.Button"/>

<element name="TToolBar.RemoveButton"/>
<element name="TToolBar.RemoveButton.Button"/>

<element name="TToolBar.cDefButtonWidth">
<short>Default width for tool buttons on the control.</short>
<descr/>
<seealso/>
</element>

<element name="TToolBar.cDefButtonHeight">
<short>Default height for tool buttons on the control.</short>
<descr/>
<seealso/>
</element>

<element name="TToolBar.FPrevVertical">
<short>
Member which indicates if the previous tool bar orientation was vertical.
</short>
<descr/>
<seealso/>
</element>

<element name="TToolBar.IsVertical">
<short>
Indicates if the tool bar is oriented to display buttons and controls 
vertically.
</short>
<descr>
<p>
<var>IsVertical</var> is a <var>Boolean</var> function in <var>TToolBar</var> 
used to determine if the tool bar displays its buttons or controls using a 
vertical orientation. The return value is determined by the value in the 
Align property, as follows:
</p>
<dl>
<dt>alLeft, alRight</dt>
<dd>The return value is <b>True</b>.</dd>
<dt>alNone, alClient, alCustom</dt>
<dd>The return value is <b>True</b> when Height is larger than Width.</dd>
</dl>
<p>
If the tool bar is parented by a <var>TCoolBar</var> control, the value in 
its <var>Vertical</var> property is used as the return value.
</p>
</descr>
<seealso/>
</element>
<element name="TToolBar.IsVertical.Result">
<short>
<b>True</b> when the buttons on the control are displayed vertically.
</short>
</element>

<element name="TToolBar.WSRegisterClass">
<short>Registers the tool bar class in the widgetset.</short>
<descr>
<p>
Calls the inherited method on entry. Calls RegisterToolBar in the widgetset 
class to ensure that the TToolBar component is registered with the factory 
methods (when needed).
</p>
</descr>
<seealso>
<link id="#lcl.lclclasses.TLCLComponent.WSRegisterClass">TLCLComponent.WSRegisterClass</link>
</seealso>
</element>

<element name="TToolBar.AdjustClientRect">
<short>Adjusts the client rectangle when the tool bar is drawn.</short>
<descr>
<p>
<var>AdjustClientRect</var> is an overridden method in <var>TToolBar</var> 
used to adjust the display area in <var>ARect</var> for the tool bar when the 
control is drawn.
</p>
<p>
It calls the inherited method on entry to shrink ARect when values have been 
specified in the <var>EdgeBorders</var>, <var>EdgeInner</var>, and 
<var>EdgeOuter</var> properties. It also increases the left coordinate for 
the rectangle by the value specified in the <var>Indent</var> property.
</p>
<p>
AdjustClientRect is called from the <var>AlignControls</var> and 
<var>WrapButtons</var> methods.
</p>
</descr>
<seealso>
<link id="TToolBar.EdgeBorders"/>
<link id="TToolBar.EdgeInner"/>
<link id="TToolBar.EdgeOuter"/>
<link id="TToolBar.Indent"/>
<link id="TToolBar.AlignControls"/>
<link id="TToolBar.WrapButtons"/>
<link id="#lcl.controls.TWinControl.AdjustClientRect">TWinControl.AdjustClientRect</link>
</seealso>
</element>
<element name="TToolBar.AdjustClientRect.ARect">
<short>Rectangle with the client display area.</short>
</element>

<element name="TToolBar.ButtonHeightIsStored">
<short>Implements the storage specifier for the ButtonHeight property.</short>
<descr/>
<seealso/>
</element>
<element name="TToolBar.ButtonHeightIsStored.Result">
<short><b>True</b> when ButtonHeight is 0 or larger.</short>
</element>

<element name="TToolBar.ButtonWidthIsStored">
<short>Implements the storage specifier for the ButtonWidth property.</short>
<descr/>
<seealso/>
</element>
<element name="TToolBar.ButtonWidthIsStored.Result">
<short><b>True</b> when ButtonWidth is 0 or larger.</short>
</element>

<element name="TToolBar.DropDownWidthIsStored">
<short>
Implements the storage specifier for the DropDownWidth property.
</short>
<descr/>
<seealso/>
</element>
<element name="TToolBar.DropDownWidthIsStored.Result">
<short><b>True</b> when DropDownWidth is 0 or larger.</short>
</element>

<element name="TToolBar.GetControlClassDefaultSize">
<short>Gets the default size for new instances of the class type.</short>
<descr>
<p>
Uses a default size of 150 pixels (Width) by 26 pixels (Height).
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>

<element name="TToolBar.DoAutoSize">
<short>Defers auto-sizing actions to the AlignControls method.</short>
<descr>
<p>
Child controls are positioned in the AlignControls method independent of the 
setting in AutoSize.
</p>
</descr>
<seealso>
<link id="TToolBar.AlignControls"/>
<link id="TToolBar.AutoSize"/>
<link id="#lcl.controls.TWinControl.DoAutoSize">TWinControl.DoAutoSize</link>
</seealso>
</element>

<element name="TToolBar.CalculatePreferredSize" link="#lcl.controls.TControl.CalculatePreferredSize"/>

<element name="TToolBar.CheckMenuDropdown">
<short>
Determines whether the specified button has a drop-down menu item which must 
be checked.
</short>
<descr>
<p>
Called from the <var>TToolButton.CheckMenuDropdown</var> method when the tool 
button is clicked.
</p>
</descr>
<seealso>
<link id="TToolButton.CheckMenuDropdown"/>
</seealso>
</element>
<element name="TToolBar.CheckMenuDropdown.Result">
<short>
<b>True</b> if the menu item for the button was checked (clicked) in the 
method.
</short>
</element>
<element name="TToolBar.CheckMenuDropdown.Button">
<short>Tool button examined in the method.</short>
</element>

<element name="TToolBar.ClickButton">
<short>Calls the Click method for the specified tool button.</short>
<descr/>
<seealso/>
</element>
<element name="TToolBar.ClickButton.Button">
<short>Tool bar button executed in the method.</short>
</element>

<element name="TToolBar.CreateWnd">
<short>
Performs actions needed when the Handle for the control is created.
</short>
<descr>
<p>
Disables auto-sizing on entry, and re-enables auto-sizing prior to exiting 
from the method.
</p>
<p>
Calls the inherited method to update creation parameters and flags, and to 
initialize the window handle for the control. Calls UpdateVisibleToolbar to 
size and align the buttons and controls on the tool bar.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
</seealso>
</element>

<element name="TToolBar.AlignControls">
<short>
Performs actions to align the tool bar buttons in the specified rectangle.
</short>
<descr>
<p>
<var>AlignControls</var> is an overridden method in <var>TToolBar</var> and 
re-implements the method from the ancestor class. It does not call the 
inherited method.
</p>
<p>
No actions are performed in the method when <var>tbfPlacingControls</var> has 
already been included in the flags for the tool bar. This indicates that 
AlignControls has already been called, but not yet completed.
</p>
<p>
<var>DisableAlign</var> is called to prevent automatic alignment while the 
method is active. <var>WrapButtons</var> is called to position the buttons 
and controls in <var>RemainingClientRect</var> using the setting in 
<var>Wrapable</var> and the value from <var>IsVertical</var>. 
<var>EnableAlign</var> is called to re-enable alignment when the buttons have 
been positioned.
</p>
<p>
<var>tbfPlacingControls</var> is removed from the tool bar flags prior to 
exiting from the method.
</p>
</descr>
<seealso>
<link id="TToolBar.IsVertical"/>
<link id="TToolBar.Wrapable"/>
<link id="TToolBar.WrapButtons"/>
<link id="#lcl.controls.TWinControl.AlignControls">TWinControl.AlignControls</link>
</seealso>
</element>
<element name="TToolBar.AlignControls.AControl">
<short>Not used in the overridden method</short>
</element>
<element name="TToolBar.AlignControls.RemainingClientRect">
<short>
Rectangle with the bounds where the tool bar and its buttons are aligned.
</short>
</element>

<element name="TToolBar.FindButtonFromAccel">
<short>Gets the tool bar button with the specified accelerator key.</short>
<descr>
<p>
<var>FindButtonFromAccel</var> is a <var>TToolButton</var> function used to 
find the tool button with the accelerator key (virtual key code) value 
specified in <var>Accel</var>. FindButtonFromAccel visits the Visible and 
Enabled <var>Buttons</var> to find the TToolButton instance using the 
specified accelerator key in its caption. The return value is <b>Nil</b> if a 
tool button is not found using the specified accelerator key.
</p>
</descr>
<seealso>
<link id="TToolButton.Enabled"/>
<link id="TToolButton.Visible"/>
<link id="#lcl.forms.IsAccel">IsAccel</link>
</seealso>
</element>
<element name="TToolBar.FindButtonFromAccel.Result">
<short>
Tool button using the specified shortcut, or <b>Nil</b> when not found.
</short>
</element>
<element name="TToolBar.FindButtonFromAccel.Accel">
<short>
Shortcut or accelerator key to locate in the tool bar buttons.
</short>
</element>

<element name="TToolBar.FontChanged">
<short>
Performs actions needed when the Font has changed for the control.
</short>
<descr>
<p>
<var>FontChanged</var> is an overridden procedure which performs action 
needed when the <var>Font</var> for the control has been changed. FontChanged 
calls the inherited FontChanged method, and applies the new font to the 
Buttons in the tool bar. Values are reset in internal members used to track 
the realized height and width for buttons and drop downs in the tool bar.
</p>
</descr>
<seealso>
<link id="TToolBar.Buttons"/>
<link id="#lcl.controls.TCustomControl.FontChanged">TCustomControl.FontChanged</link>
</seealso>
</element>

<element name="TToolBar.Loaded">
<short>
Performs actions needed when the control has finished loading from the LCL 
streaming mechanism.
</short>
<descr>
<p>
Calls the inherited method on entry. Calls UpdateVisibleBar to adjust the 
size and layout for Buttons on the tool bar.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
</seealso>
</element>

<element name="TToolBar.Notification">
<short>
Handles notifications for components added or removed from the control.
</short>
<descr>
<p>
Calls the inherited method on entry. Ensures that the 
<var>DisabledImages</var>, <var>HotImages</var>, and <var>Images</var> 
properties are <b>Nil</b>'d if their image list is removed from the control.
</p>
</descr>
<seealso>
<link id="TToolBar.DisabledImages"/>
<link id="TToolBar.HotImages"/>
<link id="TToolBar.Images"/>
<link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
</seealso>
</element>
<element name="TToolBar.Notification.AComponent">
<short>Component of the notification message.</short>
</element>
<element name="TToolBar.Notification.Operation">
<short>Action which triggered the notification.</short>
</element>

<element name="TToolBar.Paint">
<short>Draws the tool bar on the Canvas for the control.</short>
<descr>
<p>
<var>Paint</var> is an overridden procedure used to display the tool bar. At 
design-time, a Red rectangle is drawn as a frame for the control. Paint calls 
the inherited Paint method to draw the inner and outer borders defined for 
the control. Paint signals the <var>OnPaint</var> event handler (when 
assigned) to perform drawing operations required for the tool bar.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TCustomControl.Paint">TCustomControl.Paint</link>
</seealso>
</element>

<element name="TToolBar.RepositionButton">
<short>
Repositions the tool button at the specified position in Buttons.
</short>
<descr>
<p>
Causes the entire tool bar to be redrawn. Not used in the current 
implementation.
</p>
</descr>
<seealso/>
</element>
<element name="TToolBar.RepositionButton.Index">
<short>
Ordinal position in Buttons for the tool button moved in the method.
</short>
</element>

<element name="TToolBar.RepositionButtons">
<short>
Repositions the tool buttons on the tool bar.
</short>
<descr>
<p>
Causes the entire tool bar to be redrawn. Not used in the current 
implementation.
</p>
</descr>
<seealso/>
</element>
<element name="TToolBar.RepositionButtons.Index">
<short>Not used in the method.</short>
</element>

<element name="TToolBar.WrapButtons">
<short>
Adjusts tool button sizes and positions, and handles wrapping to new rows or 
columns.
</short>
<descr>
<p>
<var>WrapButtons</var> is a <var>Boolean</var> function used to resize and 
position buttons on the tool bar. WrapButtons positions buttons from left to 
right in the client display area, and repositions any child control with its 
<var>Align</var> property set to <var>clNone</var>.
</p>
<p>
When <var>Simulate</var> is <b>True</b>, the child control sizes and 
positions are calculated but not applied to the tool bar.
</p>
<p>
Set Wrapable to <b>True</b> to allow a new row or column to be created when 
the cumulative button width is larger than the width for the tool bar. Or set 
the <var>Wrap</var> property in a specific tool button to <b>True</b> to 
force it and subsequent controls onto a new row.
</p>
</descr>
<seealso/>
</element>
<element name="TToolBar.WrapButtons.Result">
<short>
Always returns <b>True</b> in WrapButtons.
</short>
</element>
<element name="TToolBar.WrapButtons.UseSize">
<short>
Size requested for the tool buttons (height for vertical orientation, width 
for horizontal orientation).
</short>
</element>
<element name="TToolBar.WrapButtons.NewWidth">
<short>
Returns the new width calculated for the buttons.
</short>
</element>
<element name="TToolBar.WrapButtons.NewHeight">
<short>
Returns the new height calculated for the buttons.
</short>
</element>
<element name="TToolBar.WrapButtons.Simulate">
<short>
True when the tool button sizes are being recalculated but not actually drawn 
on the control.
</short>
</element>

<element name="TToolBar.CNDropDownClosed">
<short>Handles the CN_DROPDOWNCLOSED control notification message.</short>
<descr>
<p>
Calls <var>CloseCurrentMenu</var> to hide an active drop-down menu displayed 
for the control.
</p>
</descr>
<seealso/>
</element>
<element name="TToolBar.CNDropDownClosed.Message">
<short>
The CN_DROPDOWNCLOSED message and parameters handled in the method.
</short>
</element>

<element name="TToolBar.DoAutoAdjustLayout" link="#lcl.controls.TControl.DoAutoAdjustLayout"/>
<element name="TToolBar.DoAutoAdjustLayout.AMode"/>
<element name="TToolBar.DoAutoAdjustLayout.AXProportion"/>
<element name="TToolBar.DoAutoAdjustLayout.AYProportion"/>

<element name="TToolBar.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> - constructor for <var>TToolBar</var>: calls inherited 
<var>Create</var> and sets many formatting and size defaults.
</p>
<p>
Among the variables initialized and defaults set are the list of buttons, 
button width and height, style, indentation, alignment, links for image 
change, the bounds and the edge borders.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
</seealso>
</element>
<element name="TToolBar.Create.TheOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TToolBar.Destroy">
<short>
<var>Destroy</var> - destructor for <var>TToolBar</var>: frees buttons and 
links then calls inherited <var>Destroy</var>.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
<link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
</seealso>
</element>

<element name="TToolBar.EndUpdate">
<short>Finishes an update process for the tool bar.</short>
<descr>
<p>
Calls the inherited method on entry. Updates the size and layout for 
<var>Buttons</var> when the internal update counter is <b>0</b> (<b>zero</b>) 
and <var>tbfUpdateVisibleBarNeeded</var> has been included in the flags for 
the control.
</p>
</descr>
<seealso>
<link id="TToolBar.Buttons"/>
<link id="TToolBar.AlignControls"/>
<link id="TToolBarFlag"/>
<link id="#lcl.toolwin.TToolWindow.EndUpdate">TToolWindow.EndUpdate</link>
<link id="#lcl.toolwin.TToolWindow.BeginUpdate">TToolWindow.BeginUpdate</link>
</seealso>
</element>

<element name="TToolBar.FlipChildren">
<short>Disables reversing right and left alignment for child controls.</short>
<descr/>
<seealso>
<link id="TToolBar.AlignControls"/>
<link id="#lcl.controls.TWinControl.FlipChildren">TWinControl.FlipChildren</link>
</seealso>
</element>
<element name="TToolBar.FlipChildren.AllLevels">
<short>Not used in the overridden method.</short>
</element>

<element name="TToolBar.GetEnumerator">
<short>Gets a TToolBarEnumerator enumerator for the class instance.</short>
<descr>
<p>
Creates a new <var>TToolBarEnumerator</var> instance using the current 
control as the owner.
</p>
</descr>
<seealso>
<link id="TToolBarEnumerator"/>
</seealso>
</element>
<element name="TToolBar.GetEnumerator.Result">
<short>Tool bar enumerator created in the method.</short>
</element>

<element name="TToolBar.SetButtonSize">
<short>
Sets the width and height for Buttons on the control to the specified values.
</short>
<descr>
<p>
SetButtonSize is a convenience method used to assign values for the 
ButtonWidth and ButtonHeight properties in a single method call. It is called 
when a new value is assigned to the <var>ButtonWidth</var> or 
<var>ButtonHeight</var> properties.
</p>
<p>
For example:
</p>
<code>
AToolbar.SetButtonSize(32, 30);
</code>
<p>
is equivalent to:
</p>
<code>
AToolbar.ButtonWidth := 32;
AToolbar.ButtonHeight := 30;
</code>
<p>
The existing value in the property is kept when it is the same as the new 
value. No actions are performed in the method when neither value has been 
changed, or when BeginUpdate has already been called.
</p>
<p>
SetButtonSize visits each of the Buttons on the control to apply the changed 
values to the corresponding TToolButton properties. The button might not be 
updated if any of the following conditions are found.
</p>
<p>
For button width:
</p>
<ul>
<li>The new value is 0.</li>
<li>
The new value is too small for the width needed in a check box or drop-down 
style button.
</li>
<li>The tool button has AutoSize enabled.</li>
<li>The control is not derived from TToolButton.</li>
</ul>
<p>
For button height:
</p>
<ul>
<li>
In horizontal toolbars the height is set by the toolbar independent of the 
assigned size.
</li>
</ul>
<p>
SetButtonSize calls the SetBounds method in each tool bar button to apply the 
values in NewButtonWidth and NewButtonHeight.
</p>
</descr>
<seealso>
<link id="TToolBar.ButtonWidth"/>
<link id="TToolBar.ButtonHeight"/>
<link id="TToolBar.Buttons"/>
</seealso>
</element>
<element name="TToolBar.SetButtonSize.NewButtonWidth">
<short>New value for the ButtonWidth property.</short>
</element>
<element name="TToolBar.SetButtonSize.NewButtonHeight">
<short>New value for the ButtonHeight property.</short>
</element>

<element name="TToolBar.CanFocus">
<short>Always returns <b>False</b> for TToolBar.</short>
<descr>
<p>
The tool bar cannot be given focus, but its buttons or controls can.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.CanFocus">TWinControl.CanFocus</link>
</seealso>
</element>
<element name="TToolBar.CanFocus.Result">
<short>Always returns <b>False</b> for TToolBar.</short>
</element>

<element name="TToolBar.ButtonCount">
<short>Number of Buttons defined for the tool bar control.</short>
<descr>
<p>
The property value is read from the <var>Count</var> property in 
<var>ButtonList</var>.
</p>
</descr>
<seealso>
<link id="TToolBar.ButtonList"/>
<link id="#rtl.classes.TList.Count">TList.Count</link>
</seealso>
</element>

<element name="TToolBar.Buttons">
<short>Lists with the tool buttons on the tool bar.</short>
<descr>
<p>
<var>Buttons</var> maintains a list of <var>TToolButton</var> instances. All 
tool buttons that share a <var>TToolBar</var> parent have the same height and 
(except for separators and dividers) the same width. Other controls on a 
toolbar are held in place by invisible separators, which are automatically 
created and destroyed.
</p>
<p>
To add tool buttons to the toolbar at design time, select the toolbar, 
right-click, and choose New Button. To create a space (separator) between one 
button and the next, select New Separator. To create a divider between 
buttons, add a button and set its <var>Style</var> property to 
<var>tbsDivider</var>. Other controls may be added to the toolbar directly 
from the Component palette.
</p>
</descr>
<seealso>
<link id="TToolButton.Style"/>
</seealso>
<example file="comctrls/ttoolbutton.pas"/>
</element>
<element name="TToolBar.Buttons.Index">
<short>
Ordinal position for the tool button in the property value.
</short>
</element>

<element name="TToolBar.ButtonList">
<short>
Contains the Buttons defined for the tool bar control.
</short>
<descr>
<p>
<var>ButtonList</var> is a read-only <var>TList</var> property which contains 
the <var>TToolButton</var> instances for the tool bar. It contains the values 
for the indexed <var>Buttons</var> property. It is also used in widgetset 
classes to access the buttons defined for the tool bar.
</p>
</descr>
<seealso>
<link id="TToolBar.Buttons"/>
<link id="TToolButton"/>
</seealso>
</element>

<element name="TToolBar.RowCount">
<short>Number of rows needed to display the buttons for the control.</short>
<descr>
<p>
<var>RowCount</var> is a read-only <var>Integer</var> property with the 
number of rows needed to display the <var>Buttons</var> and 
<var>Controls</var> on the tool bar using its display settings. The value in 
RowCount is calculated in the <var>WrapButtons</var> method.
</p>
</descr>
<seealso>
<link id="TToolBar.Buttons"/>
<link id="TToolBar.ButtonHeight"/>
<link id="TToolBar.ButtonWidth"/>
<link id="TToolBar.WrapButtons"/>
<link id="TToolBar.Wrapable"/>
</seealso>
</element>

<element name="TToolBar.ButtonDropWidth">
<short>Width for the drop-down button indicator.</short>
<descr>
<p>
<var>ButtonDropWidth</var> is a read-only <var>Integer</var> property with 
the number of pixels needed for a drop-down button and its drop-down 
indicator.
</p>
</descr>
<seealso>
<link id="TToolBar.DropDownWidth"/>
<link id="TToolBar.FontChanged"/>
<link id="TToolButton.Paint"/>
<link id="TToolButton.PointInArrow"/>
<link id="TToolButton.CalculatePreferredSize"/>
</seealso>
</element>

<element name="TToolBar.Align">
<short>Specifies the placement of the control inside its Parent.</short>
<descr>
<p>
Align is a TAlign property which specifies how the control is aligned to its 
parent control. The default value for the property is alTop in TToolBar.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Align">TControl.Align</link>
</seealso>
</element>

<element name="TToolBar.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TToolBar.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TToolBar.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TToolBar.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>

<element name="TToolBar.ButtonHeight">
<short>Contains the height for buttons on the tool bar control.</short>
<descr>
<p>Use 0 for auto-sized value.</p>
<p>
An internal member with the real height for buttons is maintained when 
reading or writing the value for the property.
</p>
</descr>
<seealso/>
</element>

<element name="TToolBar.ButtonWidth">
<short>Contains the width for buttons on the tool bar control.</short>
<descr>
<p>Use 0 for auto-sized value</p>
<p>
An internal member is maintained when reading or writing the value for the 
property.
</p>
</descr>
<seealso/>
</element>

<element name="TToolBar.Caption" link="#lcl.controls.TControl.Caption"/>
<element name="TToolBar.ChildSizing" link="#lcl.controls.TWinControl.ChildSizing"/>
<element name="TToolBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TToolBar.Color" link="#lcl.controls.TControl.Color"/>

<element name="TToolBar.DisabledImages">
<short>List with images displayed when a tool button is not enabled.</short>
<descr>
<p>
<var>DisabledImages</var> is a <var>TCustomImageList</var> property with icon 
images displayed on tool buttons when they are not Enabled. Use 
<var>Images</var> for the images displayed when the tool button are enabled 
but not hovered. Use <var>HotImages</var> for the images displayed when tool 
buttons are hovered under the mouse cursor.
</p>
<p>
The image position for a tool button is stored in the ImageIndex property in 
the TToolButton instance.This requires the image at a given position in the 
image lists to target the same button on the tool bar control.
</p>
<p>
The image list should contain images which uses the sames width and height, 
and appropriately sized for the ButtonWidth and ButtonHeight for the tool 
bar. Use <var>ImagesWidth</var> to specify the size needed for tool button 
icons independent of the actual image size stored in the image lists.
</p>
<p>
When a new image list is assigned to the property, the tool bar is redrawn.
</p>
<p>
The image lists are used when the tool buttons get the current icon drawn in 
the Paint method.
</p>
</descr>
<seealso>
<link id="TToolBar.Images"/>
<link id="TToolBar.HotImages"/>
<link id="TToolBar.ImagesWidth"/>
<link id="TToolButton.GetCurrentIcon"/>
<link id="TToolButton.Paint"/>
<link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
</seealso>
</element>

<element name="TToolBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TToolBar.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TToolBar.DragMode" link="#lcl.controls.TControl.DragMode"/>

<element name="TToolBar.DropDownWidth">
<short>Width of the drop down arrow button.</short>
<descr>
<p>Use 0 for auto-sized value.</p>
</descr>
</element>

<element name="TToolBar.EdgeBorders">
<short>
Indicates which edges on the tool bar are drawn with a border.
</short>
<descr>
<p>
<var>EdgeBorders</var> is a <var>TEdgeBorders</var> property which indicates 
the edges to be drawn with a border on the control. It is redeclared in 
TToolBar to use the default value <b>[ebTop]</b>.
</p>
<p>
Use <var>EdgeInner</var> and <var>EdgeOuter</var> to control the drawing 
style for the visible borders.
</p>
<p>
EdgeBorders is used in the inherited <var>Paint</var> method to render the 
control with borders in the specified positions using the drawing style in 
EdgeInner and EdgeOuter.
</p>
</descr>
<seealso>
<link id="TToolBar.Paint"/>
<link id="#lcl.toolwin.TToolWindow.Paint">TToolWindow.Paint</link>
<link id="#lcl.toolwin.TToolWindow.EdgeBorders">TToolWindow.EdgeBorders</link>
<link id="#lcl.toolwin.TEdgeBorders">TEdgeBorders</link>
<link id="#lcl.toolwin.TEdgeBorder">TEdgeBorder</link>
</seealso>
</element>

<element name="TToolBar.EdgeInner" link="#lcl.toolwin.TToolWindow.EdgeInner"/>
<element name="TToolBar.EdgeOuter" link="#lcl.toolwin.TToolWindow.EdgeOuter"/>
<element name="TToolBar.Enabled" link="#lcl.controls.TControl.Enabled"/>

<element name="TToolBar.Flat">
<short>
Indicates if the control is drawn with a flat appearance.
</short>
<descr>
<p>
<var>Flat</var> is a <var>Boolean</var> property which indicates if the 
control is drawn using a flat appearance (when <b>True</b>), or a raised 
drawing style (when <b>False</b>). The default value for the property is 
<b>True</b>.
</p>
<p>
Changing the value for the property causes the inherited 
<var>Invalidate</var> method to be called to refresh the control.
</p>
</descr>
<seealso>
<link id="#lcl.Controls.TWinControl.Invalidate">TWinControl.Invalidate</link>
</seealso>
</element>

<element name="TToolBar.Font" link="#lcl.controls.TControl.Font"/>

<element name="TToolBar.Height">
<short>Height for the tool bar control.</short>
<descr>
<p>
<var>Height</var> is an <var>Integer</var> property re-declared in 
<var>TToolBar</var> to use a default value. The default value for the 
property is 32 (pixels).
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
</seealso>
</element>

<element name="TToolBar.HotImages">
<short>List with images displayed when a button is "hot" or hovered.</short>
<descr>
<p>
<var>HotImages</var> is a <var>TCustomImageList</var> property with icon 
images displayed on tool buttons when the mouse is hovered over the controls. 
Use <var>Images</var> for the images displayed when the tool button are 
enabled but not hovered. Use <var>DisabledImages</var> for the images 
displayed when tool buttons are not enabled.
</p>
<p>
The image position for a tool button is stored in the ImageIndex property in 
the TToolButton instance.This requires the image at a given position in the 
image lists to target the same button on the tool bar control.
</p>
<p>
The image list should contain images which uses the sames width and height, 
and appropriately sized for the ButtonWidth and ButtonHeight for the tool 
bar. Use <var>ImagesWidth</var> to specify the size needed for tool button 
icons independent of the actual image size stored in the image lists.
</p>
<p>
When a new image list is assigned to the property, the tool bar is redrawn.
</p>
<p>
The image lists are used when the tool buttons get the current icon drawn in 
the Paint method.
</p>
</descr>
<seealso>
<link id="TToolBar.DisabledImages"/>
<link id="TToolBar.Images"/>
<link id="TToolBar.ImagesWidth"/>
<link id="TToolButton.GetCurrentIcon"/>
<link id="TToolButton.Paint"/>
<link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
</seealso>
</element>

<element name="TToolBar.Images">
<short>List with images displayed when a tool button is enabled.</short>
<descr>
<p>
<var>Images</var> is a <var>TCustomImageList</var> property with icon images 
displayed on tool buttons when they are enabled. Use 
<var>DisabledImages</var> for the images displayed when the tool button are 
not enabled. Use <var>HotImages</var> for the images displayed when tool 
buttons are enabled and hovered under the mouse cursor.
</p>
<p>
The image position for a tool button is stored in the ImageIndex property in 
the TToolButton instance.This requires the image at a given position in the 
image lists to target the same button on the tool bar control.
</p>
<p>
The image list should contain images which uses the sames width and height, 
and appropriately sized for the ButtonWidth and ButtonHeight for the tool 
bar. Use <var>ImagesWidth</var> to specify the size needed for tool button 
icons independent of the actual image size stored in the image lists.
</p>
<p>
When a new image list is assigned to the property, the tool bar is redrawn.
</p>
<p>
The image lists are used when the tool buttons get the current icon drawn in 
the Paint method.
</p>
</descr>
<seealso>
<link id="TToolBar.DisabledImages"/>
<link id="TToolBar.HotImages"/>
<link id="TToolBar.ImagesWidth"/>
<link id="TToolButton.GetCurrentIcon"/>
<link id="TToolButton.Paint"/>
<link id="#lcl.imglist.TCustomImageList">TCustomImageList</link>
</seealso>
</element>

<element name="TToolBar.ImagesWidth">
<short>Width for the images displayed on the tool bar.</short>
<descr>
<p>
<var>ImagesWidth</var> is an <var>Integer</var> property which indicates the 
width for images displayed on the tool bar. The default value for the 
property is zero (0).
</p>
<p>
Changing the value in the property causes the private 
<var>UpdateVisibleBar</var> method to be called to update control flags, and 
to resize both the control and its <var>Buttons</var>.
</p>
</descr>
<seealso>
<link id="TToolBar.Buttons"/>
<link id="TToolButton"/>
</seealso>
</element>

<element name="TToolBar.Indent">
<short>
Number of pixels reserved as indentation spacing before buttons and controls 
on the tool bar.
</short>
<descr>
<p>
<var>Indent</var> is an <var>Integer</var> property with the number of pixels 
reserved as indentation spacing before buttons and controls on the tool bar. 
The default value for the property is <b>1</b>.
</p>
<p>
When the value for the property is changed, the tool bar is redrawn.
</p>
<p>
Indent is used in the <var>AdjustClientRect</var> method to increment the 
left edge of the display area for tool buttons on the control.
</p>
</descr>
<seealso/>
</element>

<element name="TToolBar.List">
<short>
Indicates whether buttons on the tool bar are displayed using a list style.
</short>
<descr>
<p>
<var>List</var> is a <var>Boolean</var> property which indicates if the 
buttons on the tool bar are displayed using a list style.
</p>
<p>
When List is set to <b>True</b>, the icon for a tool button is displayed on 
the left edge of the button immediately before the Caption text (when 
enabled). When set to <b>False</b>, the icon is centered in the button width 
and above the Caption text for the button.
</p>
<p>
The default value for the property is <b>False</b>. Changing the value for 
the property causes the tool bar to be resized and redrawn.
</p>
<p>
Set <var>ShowCaptions</var> to <b>True</b> to enable Caption text on the tool 
bar buttons.
</p>
</descr>
<seealso/>
</element>

<element name="TToolBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TToolBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TToolBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TToolBar.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>

<element name="TToolBar.ShowCaptions">
<short>Indicates whether captions are displayed on tool bar buttons.</short>
<descr>
<p>
<var>ShowCaptions</var> is a <var>Boolean</var> property which indicates 
whether caption text is displayed on tool bar buttons. The default value for 
the property is <b>False</b>. Changing the value for the property causes the 
tool bar to be redrawn.
</p>
<p>
ShowCaptions is used in the <var>Paint</var> method for the tool buttons on 
the control. When set to <b>True</b>, the caption text for a button is 
centered aligned at the bottom edge of the button. The icon for a button is 
drawn center aligned at the top edge of the button.
</p>
<p>
Use the <var>List</var> property (along with <var>ShowCaption</var> in the 
tool buttons) to display captions and icons using a list-style format where 
the icon and caption are on a single line.
</p>
</descr>
<seealso>
<link id="TToolBar.DisabledImages"/>
<link id="TToolBar.HotImages"/>
<link id="TToolBar.Images"/>
<link id="TToolBar.List"/>
<link id="TToolButton.Paint"/>
<link id="TToolButton.Caption"/>
<link id="TToolButton.ImageIndex"/>
<link id="TToolButton.ShowCaption"/>
</seealso>
</element>

<element name="TToolBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TToolBar.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TToolBar.TabStop" link="#lcl.controls.TWinControl.TabStop"/>

<element name="TToolBar.Transparent">
<short>
Indicates whether the control is drawn with transparency.
</short>
<descr>
<p>
<var>Transparent</var> is a <var>Boolean</var> property which indicates 
whether the tool bar is drawn with transparency. The default value for the 
property is <b>False</b>.
</p>
<p>
When set to <b>True</b>, the content for the <var>Parent</var> control can be 
seen beneath the unused areas on tool bar. Changing the value for the 
property causes control flags to be updated to add or remove 
<var>csOpaque</var> as needed, and the tool bar to be redrawn.
</p>
</descr>
<seealso/>
</element>

<element name="TToolBar.Visible" link="#lcl.controls.TControl.Visible"/>

<element name="TToolBar.Wrapable">
<short>
Controls wrapping of tool buttons to the next row when they are too long for 
the
orientation on the tool bar.
</short>
<descr>
<p>
<var>Wrapable</var> is a <var>Boolean</var> property which indicates if tool 
buttons can be wrapped to a new line when they are too long for the Align 
setting in the tool bar. The default value for the property is <b>True</b>. 
Changing the property value causes the child controls to be re-aligned, and 
the tool bar is redrawn.
</p>
<p>
Wrapable is used in the <var>WrapButtons</var> method.
</p>
</descr>
<seealso>
<link id="TToolBar.WrapButtons"/>
<link id="TToolBar.AlignControls"/>
<link id="#lcl.controls.TWinControl.ReAlign">TWinControl.ReAlign</link>
</seealso>
</element>

<element name="TToolBar.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TToolBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TToolBar.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TToolBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TToolBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>

<element name="TToolBar.OnPaintButton">
<short>Event handler signalled to draw a button on the tool bar.</short>
<descr>
<p>
<var>OnPaintButton</var> is a <var>TToolBarOnPaintButton</var> property which 
contains the event handler signalled when one of the <var>Buttons</var> on 
the tool bar is drawn.
</p>
<p>
OnPaintButton is signalled (when assigned) from the <var>Paint</var> method 
in <var>TToolButton</var>, and is used instead of the default drawing 
routines for the tool button. The <var>Sender</var> argument contains the 
TToolButton instance for the event notification. It is assumed that the event 
handler handles all aspects of drawing the button on the tool bar using the 
theme element details passed as an argument.
</p>
</descr>
<seealso>
<link id="TToolButton.Paint"/>
<link id="TToolBar.Paint"/>
<link id="TToolBar.OnPaint"/>
<link id="TToolBarOnPaintButton"/>
</seealso>
</element>

<element name="TToolBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TToolBar.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TToolBar.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TToolBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TToolBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TToolBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TToolBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TToolBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TToolBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TToolBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TToolBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>

<element name="TToolBar.OnPaint">
<short>
Event handler signalled when the Paint method is called for the control.
</short>
<descr>
<p>
Signalled after the inherited <var>Paint</var> method has been performed. The 
<var>Sender</var> argument contains the <var>TToolBar</var> instance for the 
notification.
</p>
</descr>
<seealso/>
</element>

<element name="TToolBar.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TToolBar.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TToolBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>

<element name="TGrabStyle">
<short>
Represent drawing styles available for the grab bar in TCustomCoolBar.
</short>
<descr>
<p>
<var>TGrabStyle</var> is an enumerated type with values used to represent 
drawing styles used for the grab bar (or gripper) in 
<var>TCustomCoolBar</var>. TGrabStyle is the type used to implement the 
<var>GrabStyle</var> property in TCustomCoolBar.
</p>
</descr>
<seealso>
<link id="TCustomCoolBar.GrabStyle"/>
</seealso>
</element>
<element name="TGrabStyle.gsSimple">
<short>Drawn as a simple raised block.</short>
</element>
<element name="TGrabStyle.gsDouble">
<short>Drawn as two thin raised blocks.</short>
</element>
<element name="TGrabStyle.gsHorLines">
<short>Drawn as equidistant horizontal lines.</short>
</element>
<element name="TGrabStyle.gsVerLines">
<short>Drawn as equidistant vertical lines.</short>
</element>
<element name="TGrabStyle.gsGripper">
<short>Drawn as parallel rows of raised dots.</short>
</element>
<element name="TGrabStyle.gsButton">
<short>Drawn with a push button appearance.</short>
</element>

<element name="TDragBand">
<short>Represents the drag actions for TCoolBar.</short>
<descr>
<p>
<var>TDragBand</var> is an enumerated type with values that indicates the 
action performed when a <var>TCoolBar</var> band control is dragged. 
TDragBand is used in the implementation of <var>TCustomCoolBar</var> / 
<var>TCoolBar</var>.
</p>
</descr>
<seealso>
<link id="TCustomCoolBar.MouseDown"/>
<link id="TCustomCoolBar.MouseMove"/>
<link id="TCustomCoolBar.RemoveControl"/>
</seealso>
</element>
<element name="TDragBand.dbNone">
<short>No action. Do not allow dragging.</short>
</element>
<element name="TDragBand.dbMove">
<short>Move or re-order the band.</short>
</element>
<element name="TDragBand.dbResize">
<short>Resize the band.</short>
</element>

<element name="TCoolBand">
<short>Implements a band displayed on the TCoolBar control.</short>
<descr>
<p>
<var>TCoolBand</var> is a <var>TCollectionItem</var> descendant which 
implements a band displayed on the <var>TCoolBar</var> control.
</p>
<p>
A band contains a single Control that is displayed as a movable, sizable area 
on the TCoolBar control. It has a Grabber (sizing grip) that is used to move 
and resize the band. It can also have a bitmap image and text displayed at 
the start of the band prior its Control. The band be configured with a fixed 
size, and may occupy the entire width for the TCoolBar.
</p>
<p>
TCoolBand is the type used for the items in the TCoolBands collection.
</p>
</descr>
<seealso>
<link id="TCoolBands"/>
<link id="TCoolBar.Bands"/>
</seealso>
</element>

<element name="TCoolBand.FCoolBar"/>
<element name="TCoolBand.FControl"/>
<element name="TCoolBand.FBitmap"/>
<element name="TCoolBand.FBorderStyle"/>
<element name="TCoolBand.FBreak"/>
<element name="TCoolBand.FColor"/>
<element name="TCoolBand.FFixedBackground"/>
<element name="TCoolBand.FFixedSize"/>
<element name="TCoolBand.FHeight"/>
<element name="TCoolBand.FHorizontalOnly"/>
<element name="TCoolBand.FImageIndex"/>
<element name="TCoolBand.FMinHeight"/>
<element name="TCoolBand.FMinWidth"/>
<element name="TCoolBand.FParentBitmap"/>
<element name="TCoolBand.FParentColor"/>
<element name="TCoolBand.FRealLeft"/>
<element name="TCoolBand.FRealWidth"/>
<element name="TCoolBand.FText"/>
<element name="TCoolBand.FVisible"/>
<element name="TCoolBand.FWidth"/>
<element name="TCoolBand.FLeft"/>
<element name="TCoolBand.FTop"/>

<element name="TCoolBand.IsBitmapStored">
<short>Implements the storage specifier for the Bitmap property.</short>
<descr/>
<seealso/>
</element>
<element name="TCoolBand.IsBitmapStored.Result">
<short><b>True</b> when ParentBitmap is not set.</short>
</element>

<element name="TCoolBand.IsColorStored">
<short>Implements the storage specifier for the Color property.</short>
<descr/>
<seealso/>
</element>
<element name="TCoolBand.IsColorStored.Result">
<short><b>True</b> when ParentColor is not set.</short>
</element>

<element name="TCoolBand.GetRight">
<short>Gets the value for the Right property.</short>
<descr/>
<seealso>
<link id="TCoolBand.Right"/>
</seealso>
</element>
<element name="TCoolBand.GetRight.Result">
<short>Value for the property.</short>
</element>

<element name="TCoolBand.GetVisible">
<short>Gets the value for the Visible property.</short>
<descr/>
<seealso>
<link id="TCoolBand.Visible"/>
</seealso>
</element>
<element name="TCoolBand.GetVisible.Result">
<short>Value for the property.</short>
</element>

<element name="TCoolBand.SetBitmap">
<short>Sets the value for the Bitmap property.</short>
<descr/>
<seealso>
<link id="TCoolBand.Bitmap"/>
</seealso>
</element>
<element name="TCoolBand.SetBitmap.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetBorderStyle">
<short>Sets the value for the BorderStyle property.</short>
<descr/>
<seealso>
<link id="TCoolBand.BorderStyle"/>
</seealso>
</element>
<element name="TCoolBand.SetBorderStyle.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetBreak">
<short>Sets the value for the Break property.</short>
<descr/>
<seealso>
<link id="TCoolBand.Break"/>
</seealso>
</element>
<element name="TCoolBand.SetBreak.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetColor">
<short>Sets the value for the Color property.</short>
<descr/>
<seealso>
<link id="TCoolBand.Color"/>
</seealso>
</element>
<element name="TCoolBand.SetColor.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetControl">
<short>Sets the value for the Control property.</short>
<descr/>
<seealso>
<link id="TCoolBand.Control"/>
</seealso>
</element>
<element name="TCoolBand.SetControl.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetFixedBackground">
<short>Sets the value for the FixedBackground property.</short>
<descr/>
<seealso>
<link id="TCoolBand.FixedBackground"/>
</seealso>
</element>
<element name="TCoolBand.SetFixedBackground.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetHorizontalOnly">
<short>Sets the value for the HorizontalOnly property.</short>
<descr/>
<seealso>
<link id="TCoolBand.HorizontalOnly"/>
</seealso>
</element>
<element name="TCoolBand.SetHorizontalOnly.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetImageIndex">
<short>Sets the value for the ImageIndex property.</short>
<descr/>
<seealso>
<link id="TCoolBand.ImageIndex"/>
</seealso>
</element>
<element name="TCoolBand.SetImageIndex.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetMinHeight">
<short>Sets the value for the MinHeight property.</short>
<descr/>
<seealso>
<link id="TCoolBand.MinHeight"/>
</seealso>
</element>
<element name="TCoolBand.SetMinHeight.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetMinWidth">
<short>Sets the value for the MinWidth property.</short>
<descr/>
<seealso>
<link id="TCoolBand.MinWidth"/>
</seealso>
</element>
<element name="TCoolBand.SetMinWidth.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetParentBitmap">
<short>Sets the value for the ParentBitmap property.</short>
<descr/>
<seealso>
<link id="TCoolBand.ParentBitmap"/>
</seealso>
</element>
<element name="TCoolBand.SetParentBitmap.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetParentColor">
<short>Sets the value for the ParentColor property.</short>
<descr/>
<seealso>
<link id="TCoolBand.ParentColor"/>
</seealso>
</element>
<element name="TCoolBand.SetParentColor.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetText">
<short>Sets the value for the Text property.</short>
<descr/>
<seealso>
<link id="TCoolBand.Text"/>
</seealso>
</element>
<element name="TCoolBand.SetText.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetVisible">
<short>Sets the value for the Visible property.</short>
<descr/>
<seealso>
<link id="TCoolBand.Visible"/>
</seealso>
</element>
<element name="TCoolBand.SetVisible.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.SetWidth">
<short>Sets the value for the Width property.</short>
<descr/>
<seealso>
<link id="TCoolBand.Width"/>
</seealso>
</element>
<element name="TCoolBand.SetWidth.AValue">
<short>New value for the property.</short>
</element>

<element name="TCoolBand.cDefMinHeight">
<short>Default value for the MinHeight property.</short>
</element>

<element name="TCoolBand.cDefMinWidth">
<short>Default value for the MinWidth property.</short>
</element>

<element name="TCoolBand.cDefWidth">
<short>Default value for the Width property.</short>
</element>

<element name="TCoolBand.cDivider">
<short>Default width used for dividers on the control.</short>
</element>

<element name="TCoolBand.cGrabIndent">
<short>Default indentation used for the grabber (sizing grip).</short>
</element>

<element name="TCoolBand.FControlLeft">
<short>Left coordinate for the Control in the band.</short>
</element>

<element name="TCoolBand.FControlTop">
<short>Top coordinate for the Control in the band.</short>
</element>

<element name="TCoolBand.FTextWidth">
<short>Width (pixels) for the value in the Text property.</short>
</element>

<element name="TCoolBand.CalcControlLeft">
<short>Calculates the left coordinate for the Control in the band.</short>
<descr>
<p>
Reserves space needed for elements in the TCoolBand instance, including:
</p>
<ul>
<li>Indent spacing for the Grabber (Sizing Grip)</li>
<li>Horizontal spacing</li>
<li>The space needed for the Text</li>
<li>The space needed for the Image (scaled to the current PPI)</li>
</ul>
<p>
The return value contains the offset in the band where the Control is 
displayed.
</p>
</descr>
<seealso/>
</element>
<element name="TCoolBand.CalcControlLeft.Result">
<short>Offset in the band where the Control is displayed.</short>
</element>

<element name="TCoolBand.CalcPreferredHeight">
<short>
Calculates the band height using the orientation and settings in the parent 
control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCoolBand.CalcPreferredHeight.Result">
<short>
Number of pixels needed to display the band on its parent control. Includes 
the space needed for the image, text, and vertical spacing when assigned / 
used.
</short>
</element>

<element name="TCoolBand.CalcPreferredWidth">
<short>
Calculates the band width using the orientation and settings in the parent 
control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCoolBand.CalcPreferredWidth.Result">
<short>
Number of pixels needed to display the band on its parent control. Includes 
the space needed for horizontal spacing and dividers when assigned / used.
</short>
</element>

<element name="TCoolBand.CalcTextWidth">
<short>
Gets the number of pixels needed for Text using the Font in the parent 
control.
</short>
<descr>
<p>
Updates the internal value used in the class instance when the parent TCoolBar 
control has been assigned. The TextWidth method in the Canvas on the parent 
control is used to get width for the value in the Text property.
</p>
</descr>
<seealso>
<link id="TCoolBand.Text"/>
<link id="TCoolBands"/>
<link id="TCoolBar"/>
<link id="#lcl.controls.TCustomControl.Canvas">TCustomControl.Canvas</link>
</seealso>
</element>

<element name="TCoolBand.GetDisplayName">
<short>
Gets the display name for the collection item.
</short>
<descr>
<p>
Uses the value in Text (when assigned). Otherwise, the ClassName is used as 
the display name for the collection item.
</p>
</descr>
<seealso>
<link id="TCoolBand.Text"/>
<link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
<link id="#rtl.system.TObject.ClassName">TObject.ClassName</link>
</seealso>
</element>
<element name="TCoolBand.GetDisplayName.Result">
<short>
Display name for the Cool Band collection item.
</short>
</element>

<element name="TCoolBand.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
Create is the overridden constructor for the class instance. Create sets the 
default values for properties in the collection item, including:
</p>
<ul>
<li>Break (True)</li>
<li>Color (clDefault)</li>
<li>Control (set to <b>Nil</b>)</li>
<li>FixedBackground (True)</li>
<li>ImageIndex (-1)</li>
<li>MinHeight (cDefMinHeight)</li>
<li>MinWidth (cDefMinWidth)</li>
<li>ParentBitmap (True)</li>
<li>ParentColor (True)</li>
<li>Visible (True)</li>
<li>Width (cDefWidth)</li>
</ul>
<p>
Create calls the inherited method using aCollection as the owner of the 
collection item. An exception is raised if ACollection is not a TCoolBands 
descendant.
</p>
<p>
The internal TCoolBar reference in the class instance is set to the reference 
used in aCollection.
</p>
<p>
Create allocates resource needed for the Bitmap property, and sets its 
OnChange event handler to the InvalidateCoolBar method.
</p>
</descr>
<seealso/>
</element>
<element name="TCoolBand.Create.ACollection">
<short>Collection which owns the items in the class instance.</short>
</element>

<element name="TCoolBand.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
Frees resources allocated for the Bitmap property, and calls the inherited 
destructor.
</p>
</descr>
<seealso/>
</element>

<element name="TCoolBand.Assign">
<short>
Copies property values from the specified persistent object to the current 
class instance.
</short>
<descr>
<p>
Assign is an overridden method which implements object persistence for the 
TCoolBand type. When ASource is a TCoolBand instance, the following 
properties in ASource are copied:
</p>
<ul>
<li>Bitmap</li>
<li>Break</li>
<li>Color</li>
<li>FixedBackground</li>
<li>FixedSize</li>
<li>HorizontalOnly</li>
<li>ImageIndex</li>
<li>MinHeight</li>
<li>MinWidth</li>
<li>ParentBitmap</li>
<li>ParentColor</li>
<li>Text</li>
<li>Visible</li>
<li>Control (when it exists in the parent control)</li>
</ul>
<p>
If ASource is not a TCoolBar instance, the inherited method is called to copy 
values in ASource.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>
<element name="TCoolBand.Assign.ASource">
<short>Persistent object with property values copied in the method.</short>
</element>

<element name="TCoolBand.AutosizeWidth">
<short>
Gets the width needed for the band when its parent Control is auto-sized.
</short>
<descr/>
<seealso/>
</element>

<element name="TCoolBand.InvalidateCoolBar">
<short>
Causes the parent control to be redrawn when the collection item is changed.
</short>
<descr>
<p>
Calls the inherited Changed method to update the current collection item, and 
to notify the parent control of a change to the collection.
</p>
</descr>
<seealso/>
</element>
<element name="TCoolBand.InvalidateCoolBar.Sender">
<short/>
</element>

<element name="TCoolBand.Height">
<short>Height needed for the band and its visual elements.</short>
<descr>
<p>
<var>Height</var> is a read-only <var>Integer</var> property with the height 
needed for the band and its visual elements including the Control. The value 
in Height is updated when the <var>TCoolBar</var> instance calls its 
<var>CalculateAndAlign</var> method, which occurs when the <var>Update</var> 
method for the collection is called.
</p>
</descr>
<seealso/>
</element>

<element name="TCoolBand.Left">
<short>Left coordinate for the band.</short>
<descr>
<p>
<var>Left</var> is a read-only <var>Integer</var> property with the 
horizontal coordinate for the band. Its value is relative to the corresponding 
coordinate in the TCoolBar control. The value is assigned when the 
<var>CalculateAndAlign</var> method in the <var>TCoolBar</var> control is 
called, which occurs when the <var>Update</var> method for the collection is 
called.
</p>
</descr>
<seealso/>
</element>

<element name="TCoolBand.Right">
<short>Right coordinate for the band.</short>
<descr>
<p>
<var>Right</var> is a read-only <var>Integer</var> property with the 
coordinate for the right-hand edge of the band. The property value is derived 
using the values in the Left and Width properties.
</p>
</descr>
<seealso>
<link id="TCoolBand.Left"/>
<link id="TCoolBand.Width"/>
</seealso>
</element>

<element name="TCoolBand.Top">
<short>Top coordinate for the band.</short>
<descr>
<p>
<var>Top</var> is a read-only <var>Integer</var> property with the coordinate 
for the top edge of the band. Its value is relative to the corresponding 
coordinate in the TCoolBar control. The value is assigned when the 
<var>CalculateAndAlign</var> method in the <var>TCoolBar</var> control is 
called, which occurs when the <var>Update</var> method for the collection is 
called.
</p>
</descr>
<seealso>
<link id="TCoolBand.Left"/>
<link id="TCoolBand.Width"/>
<link id="TCoolBand.Height"/>
<link id="TCustomCoolBar.VerticalSpacing"/>
<link id="TCustomCoolBar.CalculateAndAlign"/>
</seealso>
</element>

<element name="TCoolBand.Bitmap">
<short>Bitmap image displayed for the band.</short>
<descr>
<p>
<var>Bitmap</var> is a <var>TBitmap</var> property with the graphic displayed 
on the band. Its value is stored in component resource stream when the 
ParentBitmap property is not enabled for the band. Changing the value for the 
property causes the Changed method to be called to update the item in the band 
collection for the TCoolBar instance. ParentBitmap is set to <b>False</b> when 
a value is assigned to the property - even if it is <b>Nil</b>.
</p>
<p>
The value in Bitmap is used in the Paint method in TCustomCoolBar. It contains 
the image that is drawn as the tiled background for the band. If Bitmap has 
not been assigned, the Bitmap for the TCoolBar instance is used when 
ParentBitmap is enabled. If neither bitmap has been assigned, the band is 
filled with the Color assigned to the band.
</p>
</descr>
<seealso>
<link id="TCoolBand.ParentBitmap"/>
<link id="TCoolBand.Color"/>
<link id="TCustomCoolBar.Bitmap"/>
<link id="TCustomCoolBar.Paint"/>
</seealso>
</element>

<element name="TCoolBand.BorderStyle">
<short>Border style drawn around the band.</short>
<descr>
<p>
The default value for the property is bsNone, and indicates that borders are 
not drawn around the band.
</p>
</descr>
<seealso/>
</element>

<element name="TCoolBand.Break">
<short>
Indicates whether the band starts a new row (or column) in the TCoolBar 
control.
</short>
<descr>
<p>
Set Break to <b>True</b> to force the band to be placed onto a new row (or 
column depending on the orientation) on the TCoolBar control. The default 
value for the property is <b>True</b>.
</p>
<p>
Setting a new value for the property causes the Changed method to be called to 
update the item in the band collection for the parent control.
</p>
<p>
The value in Break is used in the CalculateAndAlign method in TCustomCoolBar. 
It is also used in the MouseUp method for TCustomCoolBar when a drag operation 
for a band is completed.
</p>
</descr>
<seealso/>
</element>

<element name="TCoolBand.Color">
<short>
Background color for the band.
</short>
<descr>
<p>
The default value for the property is clDefault. Please note that the default 
value for ParentColor is <b>True</b>, and causes the color defined for the 
TCoolBar control to be used. Changing the value for the property causes 
ParentColor to be reset to False, and the Changed method is called to update 
the item in its bands collection.
</p>
<p>
The value in Color is ignored if a Bitmap is drawn as the background on the 
band.
</p>
</descr>
<seealso>
<link id="TCoolBand.ParentColor"/>
<link id="TCoolBand.ParentBitmap"/>
<link id="TCoolBand.Bitmap"/>
<link id="TCoolBand.FixedBackground"/>
<link id="TCustomCoolBar.Paint"/>
</seealso>
</element>

<element name="TCoolBand.Control">
<short>Control displayed on the band.</short>
<descr>
<p>
Setting a new value for the property causes the Collection for the class to 
be updated. The existing control on the band is <b>Nil</b>'d and the new 
value is assigned. The Parent property in the control is set to the TCoolBar 
instance.
</p>
</descr>
<seealso/>
</element>

<element name="TCoolBand.FixedBackground">
<short>Indicates if a fixed background is drawn for the band.</short>
<descr>
<p>
<var>FixedBackground</var> is a <var>Boolean</var> property which indicates 
whether a Bitmap drawn as the background for the band has a fixed position and 
size. The default value for the property is <b>True</b> and causes the bitmap 
graphic to be displayed at a fixed position using the size for the image. When 
set to <b>False</b>, the bitmap is tiled to fill the display area for the band.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update the item in the bands collection for the parent cool bar control.
</p>
<p>
FixedBackground is used, along with Bitmap and ParentBitmap, when the Paint 
method in TCustomCoolBar is called to render the control to its canvas. Use 
Color to specify the background color for the band when a bitmap is not used.
</p>
</descr>
<seealso>
<link id="TCoolBand.Bitmap"/>
<link id="TCoolBand.Color"/>
<link id="TCoolBand.FixedSize"/>
<link id="TCoolBand.ParentBitmap"/>
<link id="TCustomCoolBar.Paint"/>
</seealso>
</element>

<element name="TCoolBand.FixedSize">
<short>Indicates whether the band is drawn with a fixed size.</short>
<descr>
<p>
<var>FixedSize</var> is a <var>Boolean</var> property which indicates if the 
band has a fixed size and cannot be resized on the TCoolBar control. The 
default value for the property is <b>False</b>.
</p>
<p>
FixedSize is used in the MouseDown and MouseMove methods in TCustomCoolBar to 
determine whether the mouse action initiates a drag or resize operation for a 
band.
</p>
</descr>
<seealso/>
</element>

<element name="TCoolBand.HorizontalOnly">
<short>Indicates if the band is limited to the horizontal orientation.</short>
<descr>
<p>
<var>HorizontalOnly</var> is a <var>Boolean</var> property which indicates 
whether the band can be displayed when the Vertical property in the TCoolbar 
control is set to <b>True</b>. The default value for the property is 
<b>False</b>, and allows the band to be displayed in the vertical orientation. 
When set to <b>True</b>, the band is not visible in the vertical orientation.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update the item in the bands collection for the tool bar.
</p>
</descr>
<seealso>
<link id="TCoolBand.Visible"/>
<link id="TCustomCoolBar.Vertical"/>
</seealso>
</element>

<element name="TCoolBand.ImageIndex">
<short>
Ordinal position for the image displayed for the band.
</short>
<descr>
<p>
<var>ImageIndex</var> is a <var>TImageIndex</var> property which contains the 
ordinal position for the image displayed for the band. The value refers to the 
position in the Images property in TCoolBar where the image is stored. The 
default value for the property is -1 and indicates an image has not been 
assigned for the band.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update the item in the bands collection in the parent control.
</p>
<p>
ImageIndex is used (when assigned) in the CalcControlLeft method when the 
positions for the image and text, and horizontal spacing are calculated for 
the band. It is also used when the preferred width and height are calculated 
for the band. It is used in the Paint method in TCustomCoolBar when the icon 
for the band is drawn.
</p>
</descr>
<seealso>
<link id="TCoolBand.CalcControlLeft"/>
<link id="TCoolBand.CalcPreferredHeight"/>
<link id="TCustomCoolBar.Images"/>
<link id="TCustomCoolBar.Paint"/>
<link id="#lcl.imglist.TImageIndex">TImageIndex</link>
</seealso>
</element>

<element name="TCoolBand.MinHeight">
<short>
Minimum height for the band.
</short>
<descr>
<p>
<var>MinHeight</var> is an <var>Integer</var> property which contains the 
minimum number of pixels used as the height of the band when it is drawn on 
its parent TCoolBar control. The default value for the property is defined in 
the cDefMinHeight constant in the class instance.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update the item in the bands collection for the parent control (TCoolBar).
</p>
<p>
MinHeight is used in the CalcPreferredHeight method where the preferred height 
with vertical spacing is calculated for the band.
</p>
</descr>
<seealso>
<link id="TCoolBand.MinWidth"/>
<link id="TCoolBand.CalcPreferredHeight"/>
</seealso>
</element>

<element name="TCoolBand.MinWidth">
<short>
Minimum width for the band.
</short>
<descr>
<p>
<var>MinWidth</var> is an <var>Integer</var> property which contains the 
minimum number of pixels used as the width of the band when it is drawn on 
its parent TCoolBar control. The default value for the property is defined in 
the cDefMinWidth constant in the class instance.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update the item in the bands collection for the parent control (TCoolBar).
</p>
<p>
MinWidth is used in the CalcPreferredWidth method where the preferred width 
with vertical spacing is calculated for the band.
</p>
</descr>
<seealso>
<link id="TCoolBand.MinHeight"/>
<link id="TCoolBand.CalcPreferredWidth"/>
</seealso>
</element>

<element name="TCoolBand.ParentColor">
<short>
Indicates if the Color in the Parent control (TCoolBar) is used for the band.
</short>
<descr>
<p>
<var>ParentColor</var> is a <var>Boolean</var> property which controls the 
Color used to fill the background for the band. When ParentColor is set to 
<b>True</b>, the Color property from the parent control (TCoolBar) is used to 
fill the background for the band. When set to <b>False</b>, the Color property 
in the band is used as the background color. The default value for the 
property is <b>True</b>.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update the item in the bands collection for the parent control (TCoolBar). 
Please note that ParentColor is automatically set to <b>False</b> when an 
explicit value is assigned to the Color property.
</p>
<p>
ParentColor and Color are used in the Paint method in TCustomCoolBar when the 
band is rendered on the canvas for the parent control.
</p>
<p>
Use Bitmap and ParentBitmap to enable use of a bitmap graphic as the 
background for the band.
</p>
</descr>
<seealso>
<link id="TCoolBand.Color"/>
<link id="TCoolBand.Bitmap"/>
<link id="TCoolBand.ParentBitmap"/>
<link id="TCustomCoolBar.Paint"/>
<link id="#lcl.controls.TControl.Color">TControl.Color</link>
</seealso>
</element>

<element name="TCoolBand.ParentBitmap">
<short>
Indicates if the Bitmap for the TCoolBar control is used as the background for 
the band.
</short>
<descr>
<p>
<var>ParentBitmap</var> is a <var>Boolean</var> property which allows the 
Bitmap assigned to the parent control (TCoolBar) to be used as the background 
image for the band. The default value for the property is <b>True</b>, and 
enables use of the Bitmap assigned to the parent control.
</p>
<p>
Use Bitmap to assign the bitmap graphic displayed on the band. Please note 
that ParentBitmap is automatically set to False when an explicit value is 
assigned to the Bitmap property in the class instance.
</p>
<p>
ParentBitmap and Bitmap are used in the Paint method in TCustomCoolBar when 
the background is drawn for the band.
</p>
<p>
Use FixedBackground to control whether the background is drawn at a fixed 
position instead of tiled.
</p>
<p>
Use Color and ParentColor to specify the color for the band when a bitmap 
background is not used.
</p>
</descr>
<seealso>
<link id="TCoolBand.FixedBackground"/>
<link id="TCoolBand.Bitmap"/>
<link id="TCoolBand.Color"/>
<link id="TCoolBand.ParentColor"/>
<link id="TCustomCoolBar.Bitmap"/>
<link id="#lcl.controls.TControl.Color">TControl.Color</link>
</seealso>
</element>

<element name="TCoolBand.Text">
<short>
Text displayed as the identifier or caption for the band.
</short>
<descr>
<p>
<var>Text</var> is a <var>TTranslateString</var> property which contains the 
text displayed on the band when the ShowText property in the parent control 
(TCoolBar) is enabled. As a TTranslateString value, it can be translated using 
the LCL localization mechanism when enabled for the project.
</p>
<p>
Changing the value for the property causes the width for the text to be 
calculated using the canvas font on the parent control. The Changed method is 
called to update the item in the bands collection for the parent control.
</p>
<p>
Text is used in the Paint method in TCustomCoolBar when the band is rendered 
onto the canvas for the parent control.
</p>
<p>
Use ImageIndex to specify the position for the image drawn as the icon for the 
band.
</p>
</descr>
<link id="TCoolBand.ImageIndex"/>
<link id="TCustomCoolBar.Images"/>
<link id="TCustomCoolBar.ShowText"/>
<link id="TCustomCoolBar.Paint"/>
<link id="#lcl.lcltype.TTranslateString">TTranslateString</link>
<seealso>
</seealso>
</element>

<element name="TCoolBand.Visible">
<short>
Indicates whether the band is visible on the parent control.
</short>
<descr>
<p>
<var>Visible</var> is a <var>Boolean</var> property which controls whether the 
band is displayed on the parent control (TCoolBar) when its Paint method is 
called. The default value for the property is <b>True</b>.
</p>
<p>
Changing the value for the property causes the Visible property for the 
associated Control to be updated with the new value. The Changed method is 
also called to update all of the items in the bands collection for the parent 
control.
</p>
<remark>
Visible always contains <b>False</b> when HorizontalOnly is enabled in the 
band and the parent control has its Vertical property set to <b>True</b>.
</remark>
</descr>
<seealso>
<link id="TCoolBand.Control"/>
<link id="TCoolBand.HorizontalOnly"/>
<link id="TCustomCoolBar.Vertical"/>
<link id="TCustomCoolBar.Paint"/>
</seealso>
</element>

<element name="TCoolBand.Width">
<short>
Width for the band in pixels.
</short>
<descr>
<p>
<var>Width</var> is an <var>Integer</var> property with the width of the band 
in pixels. The default value for the property is defined in the cDefWidth 
constant in the class instance.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update all of the items in the bands collection for the parent control.
</p>
<p>
The value in Width is updated when methods like CalculateAndAlign and 
AutosizeWidth are called, and when the bands collection in the parent control 
is updated. The value in the property includes the space needed for the icon 
image, caption text, the associated control, and borders or spacing.
</p>
<p>
Use MinWidth to specify a minimum width in pixels for the band.
</p>
</descr>
<seealso>
<link id="TCoolBand.MinWidth"/>
<link id="TCoolBand.AutosizeWidth"/>
<link id="TCoolBand.FixedSize"/>
<link id="TCoolBand.Text"/>
<link id="TCoolBand.ImageIndex"/>
<link id="TCoolBand.Height"/>
<link id="TCustomCoolBar.CalculateAndAlign"/>
<link id="TCustomCoolBar.HorizontalSpacing"/>
<link id="TCustomCoolBar.VerticalSpacing"/>
<link id="TCustomCoolBar.FixedSize"/>
<link id="TCustomCoolBar.BandMaximize"/>
</seealso>
</element>

<element name="TCoolBands">
<short>Implements a collection for TCoolBand items.</short>
<descr>
<p>
<var>TCoolBands</var> is a <var>TCollection</var> descendant used to store 
<var>TCoolBand</var> instances used the <var>TCoolBar</var> control. 
TCoolBands is the type used for the <var>TCoolBar.Bands</var> property.
</p>
</descr>
<seealso>
<link id="TCoolBand"/>
<link id="TCoolBar.Bands"/>
<link id="#rtl.classes.TCollection">TCollection</link>
</seealso>
</element>

<element name="TCoolBands.FCoolBar"/>

<element name="TCoolBands.GetItem">
<short>Gets the value for the indexed Items property.</short>
<descr/>
<seealso>
<link id="TCoolBands.Items"/>
</seealso>
</element>
<element name="TCoolBands.GetItem.Result">
<short>Value for the indexed property.</short>
</element>
<element name="TCoolBands.GetItem.Index">
<short>Ordinal position for the collection item in the property value.</short>
</element>

<element name="TCoolBands.SetItem">
<short>Sets the value for the indexed Items property.</short>
<descr/>
<seealso>
<link id="TCoolBands.Items"/>
</seealso>
</element>
<element name="TCoolBands.SetItem.Index">
<short>Ordinal position in the collection for the property value.</short>
</element>
<element name="TCoolBands.SetItem.Value">
<short>New value for the indexed Items property.</short>
</element>

<element name="TCoolBands.GetOwner">
<short>Gets the owner for the persistent object.</short>
<descr/>
<seealso>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>
<element name="TCoolBands.GetOwner.Result">
<short>Persistent object which owns the collection.</short>
</element>

<element name="TCoolBands.Update">
<short>
Updates the specified item in the collection, and updates the cool bar when 
needed.
</short>
<descr>
<p>
<var>Update</var> is an overridden method in <var>TCoolBands</var>. It calls 
the inherited method on entry to notify observers that the collection item 
has changed. If a TCoolBar instance was assigned as the owner for the 
collection, its CalculateAndAlign method is called to layout and resize the 
visible bands for the control. The cool bar control is redrawn prior to 
exiting from the method.
</p>
</descr>
<seealso/>
</element>
<element name="TCoolBands.Update.AItem">
<short>Collection item updated in the collection.</short>
</element>

<element name="TCoolBands.Notify">
<short>
Handles the notification that occurs when a collection item is added, 
extracted, or deleted.
</short>
<descr>
<p>
<var>Notify</var> is an overridden method in TCoolBands, and calls the 
inherited method on entry to notify observers of the change to the collection 
item. If the collection item was added, its owner is set to the TCoolBar 
instance that owns the collection.
</p>
</descr>
<seealso>
<link id="TCoolBand"/>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
<link id="#rtl.classes.TCollection">TCollection</link>
<link id="#rtl.classes.TCollectionNotification">TCollectionNotification</link>
</seealso>
</element>
<element name="TCoolBands.Notify.AItem">
<short>Collection item for the notification.</short>
</element>
<element name="TCoolBands.Notify.AAction">
<short>Action performed for the collection item.</short>
</element>

<element name="TCoolBands.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for the class instance. It 
calls the inherited method using <var>TCoolBand</var> as the 
<var>ItemClass</var> for the collection. It sets the owner of the collection 
to the value passed in the <var>ACoolBar</var> argument.
</p>
</descr>
<seealso>
<link id="TCoolBand"/>
<link id="TCoolBar"/>
<link id="#rtl.classes.TCollection.Create">TCollection.Create</link>
<link id="#rtl.classes.TCollection.ItemClass">TCollection.ItemClass</link>
</seealso>
</element>
<element name="TCoolBands.Create.ACoolBar">
<short>Control which owns the class instance.</short>
</element>

<element name="TCoolBands.Add">
<short>Creates a new collection item and adds it to the collection.</short>
<descr>
<p>
<var>Add</var> is a <var>TCoolBand</var> function used to create and store a 
new collection item in the collection. The return value is the TCoolBand 
created and stored in the method. Add re-implements the method from the 
ancestor class to ensure that the collection item is a TCoolBand instance.
</p>
</descr>
<seealso/>
</element>
<element name="TCoolBands.Add.Result">
<short>Collection item created and stored in the method.</short>
</element>

<element name="TCoolBands.FindBand">
<short>Gets the collection item which contains the specified control.</short>
<descr>
<p>
<var>FindBand</var> iterates over the values in <var>Items</var> to locate 
the <var>TCoolBand</var> instance which contains the control specified in 
<var>AControl</var>. The return value is the TCoolBand instance in the 
collection, or <b>Nil</b> if AControl is not used in one of the collection 
Items.
</p>
<p>
Use <var>FindBandIndex</var> to get the ordinal position in the collection 
for the collection item which contains a specified control.
</p>
</descr>
<seealso>
<link id="TCoolBands.Items"/>
<link id="TCoolBands.FindBandIndex"/>
<link id="TCoolBand"/>
</seealso>
</element>
<element name="TCoolBands.FindBand.Result">
<short>
TCoolBand instance with the specified control, or <b>Nil</b> when not found.
</short>
</element>
<element name="TCoolBands.FindBand.AControl">
<short>Control to locate in the collection items.</short>
</element>

<element name="TCoolBands.FindBandIndex">
<short>
Gets the ordinal position for the collection item which contains the 
specified control.
</short>
<descr>
<p>
<var>FindBandIndex</var> is an Integer function used to get the ordinal 
position for the collection item which contains the control specified in 
AControl. FindBandIndex iterates over the values in <var>Items</var> to 
locate the <var>TCoolBand</var> instance whose Control property is the 
control specified in <var>AControl</var>. The return value is the position in 
the Items, or <b>-1</b> if AControl is not used in one of the collection 
Items.
</p>
<p>
Use <var>FindBand</var> to get the collection item which contains a specified 
control.
</p>
</descr>
<seealso>
<link id="TCoolBands.Items"/>
<link id="TCoolBands.FindBand"/>
<link id="TCoolBand"/>
</seealso>
</element>
<element name="TCoolBands.FindBandIndex.Result">
<short>
Ordinal position for the collection item with the specified control, or -1 
when not found.
</short>
</element>
<element name="TCoolBands.FindBandIndex.AControl">
<short>Control to locate in the collection items.</short>
</element>

<element name="TCoolBands.Items">
<short>
Provides indexed access to the TCoolBand instances in the collection.
</short>
<descr>
<p>
<var>Items</var> is a <var>TCoolBand</var> property which provides indexed 
access to the class instances in the collection. Values in the collection are 
accessed by their ordinal position. Items is the default property for the 
collection.
</p>
<p>
Use Add to create a new TCoolBand instance in the collection.
</p>
<p>
Use Delete and Clear to remove one or all items in the collection.
</p>
</descr>
<seealso/>
</element>
<element name="TCoolBands.Items.Index">
<short>Ordinal position for the collection item.</short>
</element>

<element name="TCoolBandMaximize">
<short>Not used in the current LCL implementation.</short>
<descr>
<p>
BandMaximize is not used now but is needed for Delphi compatibility.
It is not used in Delphi's TCoolBar implementation either.
</p>
</descr>
<seealso/>
</element>
<element name="TCoolBandMaximize.bmNone">
<short/>
</element>
<element name="TCoolBandMaximize.bmClick">
<short/>
</element>
<element name="TCoolBandMaximize.bmDblClick">
<short/>
</element>

<element name="TCustomCoolBar">
<short>Defines a Rebar-like control with resizable bands.</short>
<descr>
<p>
<var>TCustomCoolBar</var> is a <var>TToolWindow</var> descendant which 
defines a control like the Windows Rebar control. It provides a collection of 
windowed controls which are displayed in movable, resizable bands.
</p>
<p>
Each band (or <var>TCoolBand</var>) on the control can have a configurable 
sizing grip (or grabber), a bitmap, a text label, and a single windowed 
control. The CoolBar handles the size and position for the control when its 
band is moved. Each band can have a fixed size, or can automatically re-size 
to the contained control. Bands can be displayed one band per line, or 
re-sized and positioned to fill the available width or height for the CoolBar 
control.
</p>
<p>
A common use case is hosting multiple toolbars in an application. Separate 
TToolbar instance are created and configured with event handlers or actions 
as needed. Each toolbar is assigned as the control for a band. A perfect 
example is the Lazarus IDE, which uses TCoolbar to host the file, view and 
run toolbars in its interface.
</p>
<p>
Do not create instances of TCustomCoolBar; use the TCoolBar descendant which 
sets the visibility for the properties in the control.
</p>
</descr>
<seealso>
<link id="TCoolBar"/>
<link id="TCoolBand"/>
<link id="TCoolBands"/>
</seealso>
</element>

<element name="TCustomCoolBar.FBands"/>
<element name="TCustomCoolBar.FBandBorderStyle"/>
<element name="TCustomCoolBar.FBandMaximize"/>
<element name="TCustomCoolBar.FBitmap"/>
<element name="TCustomCoolBar.FFixedSize"/>
<element name="TCustomCoolBar.FFixedOrder"/>
<element name="TCustomCoolBar.FGrabStyle"/>
<element name="TCustomCoolBar.FGrabWidth"/>
<element name="TCustomCoolBar.FHorizontalSpacing"/>
<element name="TCustomCoolBar.FImages"/>
<element name="TCustomCoolBar.FImageChangeLink"/>
<element name="TCustomCoolBar.FOnChange"/>
<element name="TCustomCoolBar.FShowText"/>
<element name="TCustomCoolBar.FThemed"/>
<element name="TCustomCoolBar.FVertical"/>
<element name="TCustomCoolBar.FVerticalSpacing"/>
<element name="TCustomCoolBar.FImagesWidth"/>

<element name="TCustomCoolBar.GetAlign">
<short>Gets the value for the Align property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.Align"/>
</seealso>
</element>
<element name="TCustomCoolBar.GetAlign.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomCoolBar.RowEndHelper">
<short>Determines if a band should wrap during alignment.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.RowEndHelper.Result">
<short/>
</element>
<element name="TCustomCoolBar.RowEndHelper.ALeft">
<short/>
</element>
<element name="TCustomCoolBar.RowEndHelper.AVisibleIdx">
<short/>
</element>

<element name="TCustomCoolBar.SetBandBorderStyle">
<short>Sets the value for the BandBorderStyle property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.BandBorderStyle"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetBandBorderStyle.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomCoolBar.SetBands">
<short>Sets the value for the Bands property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.Bands"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetBands.aValue">
<short>New value for the property.</short>
</element>

<element name="TCustomCoolBar.SetBitmap">
<short>Sets the value for the Bitmap property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.Bitmap"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetBitmap.aValue">
<short>New value for the property.</short>
</element>

<element name="TCustomCoolBar.SetGrabStyle">
<short>Sets the value for the GrabStyle property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.GrabStyle"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetGrabStyle.aValue">
<short>New value for the GrabStyle property.</short>
</element>

<element name="TCustomCoolBar.SetGrabWidth">
<short>Sets the value for the GrabWidth property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.GrabWidth"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetGrabWidth.aValue">
<short>New value for the GrabWidth property.</short>
</element>

<element name="TCustomCoolBar.SetHorizontalSpacing">
<short>Sets the value for the HorizontalSpacing property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.HorizontalSpacing"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetHorizontalSpacing.aValue">
<short>New value for the HorizontalSpacing property.</short>
</element>

<element name="TCustomCoolBar.SetImages">
<short>Sets the value for the Images property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.Images"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetImages.aValue">
<short>New value for the Images property.</short>
</element>

<element name="TCustomCoolBar.SetImagesWidth">
<short>Sets the value for the ImagesWidth property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.ImagesWidth"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetImagesWidth.AImagesWidth">
<short>New value for the ImagesWidth property.</short>
</element>

<element name="TCustomCoolBar.SetShowText">
<short>Sets the value for the ShowText property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.ShowText"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetShowText.aValue">
<short>New value for the ShowText property.</short>
</element>

<element name="TCustomCoolBar.SetThemed">
<short>Sets the value for the Themed property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.Themed"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetThemed.aValue">
<short>New value for the Themed property.</short>
</element>

<element name="TCustomCoolBar.SetVertical">
<short>Sets the value for the Vertical property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.Vertical"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetVertical.aValue">
<short>Sets the value for the Vertical property.</short>
</element>

<element name="TCustomCoolBar.SetVerticalSpacing">
<short>Sets the value for the VerticalSpacing property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.VerticalSpacing"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetVerticalSpacing.aValue">
<short>New value for the VerticalSpacing property.</short>
</element>

<element name="TCustomCoolBar.cDefGrabStyle">
<short>Default value for the GrabStyle property.</short>
</element>
<element name="TCustomCoolBar.cDefGrabWidth">
<short>Default value for the GrabWidth property.</short>
</element>
<element name="TCustomCoolBar.cDefHorSpacing">
<short>Default value for the HorizontalSpacing property.</short>
</element>
<element name="TCustomCoolBar.cDefVertSpacing">
<short>Default value for the VerticalSpacing property.</short>
</element>
<element name="TCustomCoolBar.cNewRowBelow">
<short>Free space below the last row.</short>
</element>
<element name="TCustomCoolBar.cNewRowAbove">
<short>Free space above the first row.</short>
</element>

<element name="TCustomCoolBar.FBorderEdges">
<short>Members used for the realized EdgeBorders for the control.</short>
</element>
<element name="TCustomCoolBar.FBorderLeft">
<short>Member used for the realized left border on the control.</short>
</element>
<element name="TCustomCoolBar.FBorderTop">
<short>Member used for the realized top border on the control.</short>
</element>
<element name="TCustomCoolBar.FBorderRight">
<short>Member used for the realized right border on the control.</short>
</element>
<element name="TCustomCoolBar.FBorderBottom">
<short>Member used for the realized bottom border on the control.</short>
</element>
<element name="TCustomCoolBar.FBorderWidth">
<short>
Member used for the total width of realized borders on the control.
</short>
</element>
<element name="TCustomCoolBar.FCursorBkgnd">
<short>
Member with the cursor shape when the mouse is over the cool bar background.
</short>
</element>
<element name="TCustomCoolBar.FDragBand">
<short>Member with the band being dragged in the control.</short>
</element>
<element name="TCustomCoolBar.FDraggedBandIndex">
<short>
-1 indicates the space below the last row; other negative values are an 
invalid area.
</short>
</element>
<element name="TCustomCoolBar.FDragInitPos">
<short>Initial mouse X - position (for resizing Bands).</short>
</element>
<element name="TCustomCoolBar.FLockCursor">
<short>
Member which indicates if the cursor shape can be changed for the control.
</short>
</element>
<element name="TCustomCoolBar.FRightToLeft">
<short>
Member which indicates is bands are aligned in reverse (right-to-left) order.
</short>
</element>
<element name="TCustomCoolBar.FTextHeight">
<short>Member with the calculated text height used on the control.</short>
</element>
<element name="TCustomCoolBar.FVisiBands">
<short>Member with the visible bands for the control.</short>
</element>

<element name="TCustomCoolBar.AlignControls">
<short>
Aligns the bands (and their controls) using the orientation, layout order, 
and anchors for the control.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.AlignControls">TWinControl.AlignControls</link>
</seealso>
</element>
<element name="TCustomCoolBar.AlignControls.AControl">
<short/>
</element>
<element name="TCustomCoolBar.AlignControls.RemainingClientRect">
<short/>
</element>

<element name="TCustomCoolBar.BitmapOrImageListChange">
<short>Implements the OnChange handler used for Bitmap and Images.</short>
<descr>
<p>
Causes the control to be redrawn when an image or an image list is changed 
for the control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomCoolBar.BitmapOrImageListChange.Sender">
<short>Object (TCoolBar) for the event notification.</short>
</element>

<element name="TCustomCoolBar.CalculatePreferredSize">
<short>Calculates the preferred width and height for the control.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.CalculatePreferredSize">TWinControl.CalculatePreferredSize</link>
</seealso>
</element>
<element name="TCustomCoolBar.CalculatePreferredSize.PreferredWidth">
<short/>
</element>
<element name="TCustomCoolBar.CalculatePreferredSize.PreferredHeight">
<short/>
</element>
<element name="TCustomCoolBar.CalculatePreferredSize.WithThemeSpace">
<short>
<b>True</b> to reserve additional space for theme elements.
</short>
</element>

<element name="TCustomCoolBar.CalculateAndAlign">
<short>
Calculates the size and position for visible bands using the orientation, 
layout, and order for the control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.CalculateRealIndex">
<short>
Gets the real position for the band at the specified visible position.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.CalculateRealIndex.Result">
<short/>
</element>
<element name="TCustomCoolBar.CalculateRealIndex.AVisibleIndex">
<short/>
</element>

<element name="TCustomCoolBar.ChangeCursor">
<short>
Changes the cursor shape when a band, a grabber, or the control background is 
active.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.ChangeCursor.ABand">
<short><b>True</b> is a band is under the mouse pointer.</short>
</element>
<element name="TCustomCoolBar.ChangeCursor.AGrabber">
<short><b>True</b> is the grabber is under the mouse pointer.</short>
</element>

<element name="TCustomCoolBar.CMBiDiModeChanged">
<short>Handles the CM_BIDIMODECHANGED message for the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.CMBiDiModeChanged.Message">
<short>Message examined in the method.</short>
</element>

<element name="TCustomCoolBar.CreateWnd">
<short>
Creates the window handle for the control, and sets the cursor shape for the 
control background.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.DoFontChanged">
<short>
Calculates the text height and width in each of the bands when the font has 
been changed.
</short>
<descr>
<p>
Uses the Canvas to get the text height for the control. No actions are 
performed in the method if the handle has not been allocated for the control 
Canvas.
</p>
<p>
Calls the CalcTextWidth method for each of the Bands on the control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomCoolBar.DrawTiledBitmap">
<short>
Tile draws the specified bitmap on the control Canvas to fill the area in 
ARect.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.DrawTiledBitmap.ARect">
<short>Rectangle where the bitmap is tiled.</short>
</element>
<element name="TCustomCoolBar.DrawTiledBitmap.ABitmap">
<short>Bitmap image drawn on the Canvas for the control.</short>
</element>

<element name="TCustomCoolBar.FontChanged">
<short>
Re-implements the OnChange event handler for the Font in the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.FontChanged.Sender">
<short>Object (TCustomCoolBar) for the event notification.</short>
</element>

<element name="TCustomCoolBar.IsFirstAtRow">
<short>
Checks whether the band at the specified position is the first one on a row.
</short>
<descr>
<p>
IsFirstAtRow is a Boolean function which indicates if the visible band at the 
specified position is the first band on its row.
</p>
<p>
ABand is the ordinal position for the requested band in the visible bands for 
the control. It represents an element in the internal array of visible 
TCoolBand instances populated in the CalculateAndAlign method.
</p>
<p>
IsFirstAtRow uses values from Vertical and IsRightToLeft to determine the 
orientation and order for the bands. The return value is <b>True</b> when the 
band at the specified position is the first one visually displayed on a given 
row.
</p>
<p>
IsFirstAtRow is used in MouseDown and MouseMove when handling drag messages 
to order the bands in the control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomCoolBar.IsFirstAtRow.Result">
<short>
<b>True</b> is the requested band is the left edge of the visible display 
area for the control.
</short>
</element>
<element name="TCustomCoolBar.IsFirstAtRow.ABand">
<short>Ordinal position for the visible band examined in the method.</short>
</element>

<element name="TCustomCoolBar.IsRowEnd">
<short>
Indicates whether the band at the specified position is the last one on a row.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.IsRowEnd.Result">
<short/>
</element>
<element name="TCustomCoolBar.IsRowEnd.ALeft">
<short/>
</element>
<element name="TCustomCoolBar.IsRowEnd.AVisibleIndex">
<short/>
</element>

<element name="TCustomCoolBar.MouseDown">
<short>Handles mouse down messages for the control.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.MouseDown">TControl.MouseDown</link>
</seealso>
</element>
<element name="TCustomCoolBar.MouseDown.Button">
<short>Mouse button for the message.</short>
</element>
<element name="TCustomCoolBar.MouseDown.Shift">
<short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
</element>
<element name="TCustomCoolBar.MouseDown.X">
<short>Horizontal coordinate for the mouse pointer.</short>
</element>
<element name="TCustomCoolBar.MouseDown.Y">
<short>Vertical coordinate for the mouse pointer.</short>
</element>

<element name="TCustomCoolBar.MouseMove">
<short>Handles mouse move messages for the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.MouseMove.Shift">
<short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
</element>
<element name="TCustomCoolBar.MouseMove.X">
<short>Horizontal coordinate for the mouse pointer.</short>
</element>
<element name="TCustomCoolBar.MouseMove.Y">
<short>Vertical coordinate for the mouse pointer.</short>
</element>

<element name="TCustomCoolBar.MouseUp">
<short>Handles mouse up messages for the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.MouseUp.Button">
<short>Mouse button for the message.</short>
</element>
<element name="TCustomCoolBar.MouseUp.Shift">
<short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
</element>
<element name="TCustomCoolBar.MouseUp.X">
<short>Horizontal coordinate for the mouse pointer.</short>
</element>
<element name="TCustomCoolBar.MouseUp.Y">
<short>Vertical coordinate for the mouse pointer.</short>
</element>

<element name="TCustomCoolBar.Notification">
<short>
Handles the notification when a component is added to or removed from the 
control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.Notification.AComponent">
<short>Component for the notification.</short>
</element>
<element name="TCustomCoolBar.Notification.Operation">
<short>Operation performed for the component.</short>
</element>

<element name="TCustomCoolBar.Paint">
<short>Draws the visible bands for the control on its Canvas.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.Bands"/>
<link id="TCustomCoolBar.Bitmap"/>
<link id="TCustomCoolBar.Images"/>
<link id="TCustomCoolBar.BandBorderStyle"/>
<link id="TCustomCoolBar.GrabStyle"/>
<link id="TCustomCoolBar.ShowText"/>
<link id="TCustomCoolBar.Vertical"/>
<link id="#lcl.toolwin.TToolWindow.Paint">TToolWindow.Paint</link>
</seealso>
</element>

<element name="TCustomCoolBar.SetAlign">
<short>Sets the value for the Align property.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.Align"/>
</seealso>
</element>
<element name="TCustomCoolBar.SetAlign.aValue">
<short>New value for the Align property.</short>
</element>

<element name="TCustomCoolBar.SetAutoSize">
<short>Sets the value for the AutoSize property.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.AutoSize">TControl.AutoSize</link>
</seealso>
</element>
<element name="TCustomCoolBar.SetAutoSize.Value">
<short>New value for the AutoSize property.</short>
</element>

<element name="TCustomCoolBar.SetCursor">
<short>Sets the value for the Cursor property.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.Cursor">TControl.Cursor</link>
</seealso>
</element>
<element name="TCustomCoolBar.SetCursor.Value">
<short>New value for the Cursor property.</short>
</element>

<element name="TCustomCoolBar.WMSize">
<short>Handles the LM_SIZE window message for the control.</short>
<descr>
<p>
Calls the inherited method on entry to realize the bounds and parent for the 
control. Calls CalculateAndAlign to layout and position the visible bands for 
the control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomCoolBar.WMSize.Message">
<short>Window message handled in the method.</short>
</element>

<element name="TCustomCoolBar.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
Allocates resources for the Bands property, and calls the inherited method. 
Sets the default values for properties in the class instance. Updates the 
control style flags to the values needed for the widgetset class. Methods in 
the class instance are assigned to the OnChange handlers for the Bitmap and 
Images in the class instance.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomCoolBar.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomCoolBar.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
Frees resources allocate in the Create constructor, and calls the inherited 
method.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomCoolBar.AutosizeBands">
<short>Indicates if a band is automatically resized to its Control.</short>
<descr/>
<seealso>
<link id="TCustomCoolBar.FixedSize"/>
<link id="TCustomCoolBar.Bands"/>
<link id="TCoolBand.Control"/>
</seealso>
</element>

<element name="TCustomCoolBar.EndUpdate">
<short>Ends an update process for the control.</short>
<descr>
<p>
EndUpdate is an overridden method in TCustomCoolBar. It calls the inherited 
method to decrement the internal update counter for the control. When the 
update counter reaches 0, the CalculateAndAlign method is called to size and 
layout the visible bands on the control. Temporarily disables auto-sizing 
while the control recalculates and aligns its bands. Calls Invalidate to 
cause the control to be redrawn.
</p>
</descr>
<seealso>
<link id="#lcl.toolwin.TToolWindow.EndUpdate">TToolWindow.EndUpdate</link>
</seealso>
</element>

<element name="TCustomCoolBar.Invalidate">
<short>Causes the control to be redrawn.</short>
<descr>
<p>
<var>Invalidate</var> is an overridden method in <var>TCustomCoolBar</var> 
which causes the control to be redrawn using the settings in the 
<var>EdgeInner</var>, <var>EdgeOuter</var>, and <var>EdgeBorders</var> 
properties. <var>CalculateAndAlign</var> is called to size and layout the 
visible bands on the control. The inherited <var>Invalidate</var> method is 
called to update the widgetset class when its <var>Handle</var> has been 
allocated.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Invalidate">TWinControl.Invalidate</link>
</seealso>
</element>

<element name="TCustomCoolBar.InsertControl">
<short>
Inserts a band for the specified control at the ordinal position in Index.
</short>
<descr>
<p>
<var>InsertControl</var> is an overridden method in 
<var>TCustomCoolBar</var>. It calls the inherited method on entry to align 
and parent the control in <var>AControl</var>.
</p>
<p>
No additional actions are performed in the method if AControl is not a 
<var>TWinControl</var> descendant.
</p>
<p>
InsertControl checks for an existing band in the <var>Bands</var> collection 
which uses the control in AControl. If one does not already exist, a 
<var>TCoolBand</var> instance is created for the control and stored in the 
collection.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.InsertControl">TWinControl.InsertControl</link>
</seealso>
</element>
<element name="TCustomCoolBar.InsertControl.AControl">
<short>
Control for the TCoolBand instance created and stored in the method.
</short>
</element>
<element name="TCustomCoolBar.InsertControl.Index">
<short>Ordinal position in Bands where the new band is stored.</short>
</element>

<element name="TCustomCoolBar.MouseToBandPos">
<short>Gets the position for the band under the mouse pointer.</short>
<descr>
<p>
MouseToBandPos is a method used to get the position for the band under the 
specified mouse coordinates.
</p>
<p>
ABand is an Integer output parameter with the position for the band under the 
mouse pointer. It can contain an ordinal position in the visible bands for 
the control, and can be in the range 0..Bands.Count-1. The upper limit may be 
smaller if any of the bands have their Visible property set to <b>False</b>.
</p>
<p>
ABand may contain a negative value, defined in the cNewRowAbove and 
cNewRowBelow constants, that represent the unused space above or below the 
bands on the control.
</p>
<p>
ABand is set to -2147483648 (the lowest value for an Integer) if the mouse 
pointer is positioned over the background for the control and not one of its 
bands.
</p>
<p>
AGrabber is a Boolean output parameter which indicates if the mouse pointer 
is positioned over the grabber (or gripper) for the band in ABand.
</p>
</descr>
<seealso>
<link id="TCustomCoolBar.Bands"/>
<link id="TCoolBar.Visible"/>
<link id="#rtl.classes.TCollection.Count">TCollection.Count</link>
</seealso>
</element>
<element name="TCustomCoolBar.MouseToBandPos.X">
<short>Horizontal coordinate for the mouse.</short>
</element>
<element name="TCustomCoolBar.MouseToBandPos.Y">
<short>Vertical coordinate for the mouse.</short>
</element>
<element name="TCustomCoolBar.MouseToBandPos.ABand">
<short>
Position for the band under the mouse pointer, or -2147483648 when not over a 
band.
</short>
</element>
<element name="TCustomCoolBar.MouseToBandPos.AGrabber">
<short>
Indicates if the mouse pointer is over the grabber for the band.
</short>
</element>

<element name="TCustomCoolBar.RemoveControl">
<short>Removes the band with the specified control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomCoolBar.RemoveControl.AControl">
<short>Control to locate in Bands.</short>
</element>

<element name="TCustomCoolBar.Align">
<short>Contains the edge in the Parent where the control is aligned.</short>
<descr>
<p>
<var>Align</var> is a <var>TAlign</var> property which is re-introduced in 
<var>TCustomCoolBar</var> to change its default value. The default value for 
the property is <var>alTop</var>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomCoolBar.BandBorderStyle">
<short>Border style used around bands on the control.</short>
<descr>
<p>
<var>BandBorderStyle</var> is a <var>TBorderStyle</var> property with the 
border style used around the bands on the control. The default value for the 
property is <var>bsSingle</var>. Changing the value for the property causes 
the control to be redrawn.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TBorderStyle">TBorderStyle</link>
</seealso>
</element>

<element name="TCustomCoolBar.BandMaximize">
<short>
Indicates the action used to maximize the width for a band on the control.
</short>
<descr>
<p>
The default value for the property is <var>bmClick</var>, and indicates that 
single clicking on the background for a band causes it to be maximized.
</p>
</descr>
<notes>
<note>
Code comments say its not used. It is used in MouseUp.
Also says it is defined but not used in VCL. It is documented, so apparently 
used in VCL.
</note>
</notes>
<seealso>
<link id="TCoolBandMaximize"/>
</seealso>
</element>

<element name="TCustomCoolBar.Bands">
<short>Collection with the bands defined for the control.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.Bitmap">
<short>
Optional image displayed as the background for the cool bar control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.FixedSize">
<short>Indicates if bands on the control have a fixed size.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.FixedOrder">
<short>
Indicates if the order of the bands on the control is fixed or locked.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.GrabStyle">
<short>
Drawing style used for a grabber or gripper displayed on the control.
</short>
<descr>
<p>
<var>GrabStyle</var> is a <var>TGrabStyle</var> property with the drawing 
style used for a grabber or gripper displayed for the control. The default 
value for the property is defined in the <var>cDefGrabStyle</var> constant.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomCoolBar.GrabWidth">
<short>Width for the grabber on the control.</short>
<descr>
<p>
<var>GrabWidth</var> is an <var>Integer</var> property with the width for a 
grabber or gripper on the control. The default value for the property is 
<var>cDefGrabWidth</var>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomCoolBar.HorizontalSpacing">
<short>
Horizontal space reserved between visual elements on the control.
</short>
<descr>
<p>
HorizontalSpacing is an Integer property with the space reserved between 
visual elements on the control when the horizontal orientation is used. The 
default value for the property is defined in the cDefHorSpacing constant.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomCoolBar.Images">
<short>Contains images displayed on the bands for the control.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.ImagesWidth">
<short>Width for the Images used in the control.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.ShowText">
<short>
Indicates if text captions are displayed for the bands on the control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.Themed">
<short>Enables or disables themed rendering for the control.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.Vertical">
<short>
Indicates if the control is displayed vertically instead of horizontally.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.VerticalSpacing">
<short>Vertical space reserved between visual elements in the control.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomCoolBar.OnChange">
<short>
Event handler signalled when Bands are re-sized or re-ordered using the mouse.
</short>
<descr/>
<seealso/>
</element>

<element name="TCoolBar">
<short>Implements a Rebar-like control with resizable bands.</short>
<descr>
<p>
TCoolBar is a TCustomCoolBar descendant which implements a control like the 
Windows Rebar control. It provides a collection of windowed controls which 
are displayed in movable, resizable bands.
</p>
<p>
Each band (or <var>TCoolBand</var>) on the control can have a configurable 
sizing grip (or grabber), a bitmap, a text label, and a single windowed 
control. The CoolBar handles the size and position for the control when its 
band is moved. Each band can have a fixed size, or can automatically re-size 
to the contained control. Bands can be displayed one band per line, or 
re-sized and positioned to fill the available width or height for the CoolBar 
control.
</p>
<p>
A common use case is hosting multiple toolbars in an application. Separate 
TToolbar instance are created and configured with event handlers or actions 
as needed. Each toolbar is assigned as the Control for a band on the cool bar 
control. A perfect example is the Lazarus IDE, which uses TCoolbar to host 
the file, view and run toolbars in its interface.
</p>
</descr>
<seealso>
<link id="TCustomCoolBar"/>
</seealso>
</element>

<element name="TCoolBar.Align" link="#lcl.comctrls.TCustomCoolBar.Align"/>
<element name="TCoolBar.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TCoolBar.AutoSize" link="#lcl.controls.TControl.AutoSize"/>
<element name="TCoolBar.BandBorderStyle" link="#lcl.comctrls.TCustomCoolBar.BandBorderStyle"/>
<element name="TCoolBar.BandMaximize" link="#lcl.comctrls.TCustomCoolBar.BandMaximize"/>
<element name="TCoolBar.Bands" link="#lcl.comctrls.TCustomCoolBar.Bands"/>
<element name="TCoolBar.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="TCoolBar.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
<element name="TCoolBar.Color" link="#lcl.controls.TControl.Color"/>
<element name="TCoolBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TCoolBar.DockSite" link="#lcl.controls.TWinControl.DockSite"/>
<element name="TCoolBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TCoolBar.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TCoolBar.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TCoolBar.EdgeBorders" link="#lcl.toolwin.TToolWindow.EdgeBorders"/>
<element name="TCoolBar.EdgeInner" link="#lcl.toolwin.TToolWindow.EdgeInner"/>
<element name="TCoolBar.EdgeOuter" link="#lcl.toolwin.TToolWindow.EdgeOuter"/>
<element name="TCoolBar.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TCoolBar.FixedSize" link="#lcl.comctrls.TCustomCoolBar.FixedSize"/>
<element name="TCoolBar.FixedOrder" link="#lcl.comctrls.TCustomCoolBar.FixedOrder"/>
<element name="TCoolBar.Font" link="#lcl.controls.TControl.Font"/>
<element name="TCoolBar.GrabStyle" link="#lcl.comctrls.TCustomCoolBar.GrabStyle"/>
<element name="TCoolBar.GrabWidth" link="#lcl.comctrls.TCustomCoolBar.GrabWidth"/>
<element name="TCoolBar.HorizontalSpacing" link="#lcl.comctrls.TCustomCoolBar.HorizontalSpacing"/>
<element name="TCoolBar.Images" link="#lcl.comctrls.TCustomCoolBar.Images"/>
<element name="TCoolBar.ImagesWidth" link="#lcl.comctrls.TCustomCoolBar.ImagesWidth"/>
<element name="TCoolBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TCoolBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TCoolBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TCoolBar.Bitmap" link="#lcl.comctrls.TCustomCoolBar.Bitmap"/>
<element name="TCoolBar.PopupMenu" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TCoolBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TCoolBar.ShowText" link="#lcl.comctrls.TCustomCoolBar.ShowText"/>
<element name="TCoolBar.Themed" link="#lcl.comctrls.TCustomCoolBar.Themed"/>
<element name="TCoolBar.Vertical" link="#lcl.comctrls.TCustomCoolBar.Vertical"/>
<element name="TCoolBar.VerticalSpacing" link="#lcl.comctrls.TCustomCoolBar.VerticalSpacing"/>
<element name="TCoolBar.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TCoolBar.OnChange" link="#lcl.comctrls.TCustomCoolBar.OnChange"/>
<element name="TCoolBar.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TCoolBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TCoolBar.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TCoolBar.OnDockDrop" link="#lcl.controls.TWinControl.OnDockDrop"/>
<element name="TCoolBar.OnDockOver" link="#lcl.controls.TWinControl.OnDockOver"/>
<element name="TCoolBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TCoolBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TCoolBar.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="TCoolBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TCoolBar.OnGetSiteInfo" link="#lcl.controls.TWinControl.OnGetSiteInfo"/>
<element name="TCoolBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TCoolBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TCoolBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TCoolBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TCoolBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TCoolBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TCoolBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TCoolBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TCoolBar.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TCoolBar.OnStartDock" link="#lcl.controls.TControl.OnStartDock"/>
<element name="TCoolBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TCoolBar.OnUnDock" link="#lcl.controls.TWinControl.OnUnDock"/>

<element name="TTrackBarOrientation">
<short>
Enumerated type with values that represent the orientation for a track bar.
</short>
<descr/>
<seealso/>
</element>
<element name="TTrackBarOrientation.trHorizontal">
<short>Represents the horizontal orientation.</short>
</element>
<element name="TTrackBarOrientation.trVertical">
<short>Represents the vertical orientation.</short>
</element>

<element name="TTickMark">
<short>
<var>TTickMark</var> - enumerated type denoting position of tick marks 
relative to the track bar.
</short>
<descr/>
<seealso/>
</element>
<element name="TTickMark.tmBottomRight">
<short>
Tick marks are displayed on the bottom or right edge for the track bar 
orientation.
</short>
</element>
<element name="TTickMark.tmTopLeft">
<short>
Tick marks are displayed on the top or left edge for the track bar 
orientation.
</short>
</element>
<element name="TTickMark.tmBoth">
<short>
Tick marks are displayed on both edges of the track bar orientation.
</short>
</element>

<element name="TTickStyle">
<short>
<var>TTickStyle</var> - enumerated type denoting style of tick marks.
</short>
<descr/>
<seealso/>
</element>
<element name="TTickStyle.tsNone">
<short>Tick marks are disabled.</short>
</element>
<element name="TTickStyle.tsAuto">
<short>
The tick mark count is determined using the Min, Max, and Frequency for a 
track bar control.
</short>
</element>
<element name="TTickStyle.tsManual">
<short>
The number of tick marks is manually calculated. Used for the Mac OS Cocoa 
widgetset.
</short>
</element>

<element name="TTrackBarScalePos">
<short>
<var>TTrackBarScalePos</var> - enumerated type denoting position of the scale 
for a track bar.
</short>
<descr/>
<seealso/>
</element>
<element name="TTrackBarScalePos.trLeft">
<short/>
</element>
<element name="TTrackBarScalePos.trRight">
<short/>
</element>
<element name="TTrackBarScalePos.trTop">
<short/>
</element>
<element name="TTrackBarScalePos.trBottom">
<short/>
</element>

<element name="TCustomTrackBar">
<short>
<var>TCustomTrackBar</var> - the base class for <var>TTrackBar</var>.
</short>
<descr>
<p>
<var>TCustomTrackBar</var> defines many of the properties inherited by 
<var>TTrackBar</var>, a device that allows the user to determine the value of 
a variable using a quasi-analog slider.
</p>
</descr>
</element>

<!-- private -->
<element name="TCustomTrackBar.FOrientation"/>
<element name="TCustomTrackBar.FReversed"/>
<element name="TCustomTrackBar.FSelEnd"/>
<element name="TCustomTrackBar.FSelStart"/>
<element name="TCustomTrackBar.FShowSelRange"/>
<element name="TCustomTrackBar.FTickMarks"/>
<element name="TCustomTrackBar.FTickStyle"/>
<element name="TCustomTrackBar.FLineSize"/>
<element name="TCustomTrackBar.FPageSize"/>
<element name="TCustomTrackBar.FMin"/>
<element name="TCustomTrackBar.FMax"/>
<element name="TCustomTrackBar.FFrequency"/>
<element name="TCustomTrackBar.FPosition"/>
<element name="TCustomTrackBar.FScalePos"/>
<element name="TCustomTrackBar.FScaleDigits"/>
<element name="TCustomTrackBar.FOnChange"/>

<element name="TCustomTrackBar.SetFrequency">
<short>Sets the value for the Frequency property.</short>
<descr/>
<seealso>
<link id="TCustomTrackBar.Frequency"/>
</seealso>
</element>
<element name="TCustomTrackBar.SetFrequency.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetLineSize">
<short>Sets the value for the LineSize property.</short>
<descr/>
<seealso>
<link id="TCustomTrackBar.LineSize"/>
</seealso>
</element>
<element name="TCustomTrackBar.SetLineSize.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetMax">
<short>Sets the value for the Max property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetMax.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetMin">
<short>Sets the value for the Min property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetMin.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetOrientation">
<short>Sets the value for the Orientation property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetOrientation.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetPageSize">
<short>Sets the value for the PageSize property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetPageSize.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetParams">
<short>Sets the values in the Position, Min, and Max properties.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetParams.APosition">
<short>New value for the Position property.</short>
</element>
<element name="TCustomTrackBar.SetParams.AMin">
<short>New value for the Min property.</short>
</element>
<element name="TCustomTrackBar.SetParams.AMax">
<short>New value for the Max property.</short>
</element>

<element name="TCustomTrackBar.SetPosition">
<short>Sets the value for the Position property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetPosition.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetReversed">
<short>Sets the value for the Reversed property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetReversed.aValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetScalePos">
<short>Sets the value for the ScalePos property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetScalePos.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetSelEnd">
<short>Sets the value for the SelEnd property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetSelEnd.aValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetSelStart">
<short>Sets the value for the SelStart property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetSelStart.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetShowSelRange">
<short>Sets the value for the ShowSelRange property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetShowSelRange.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetTickMarks">
<short>Sets the value for the TabStop property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetTickMarks.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.SetTickStyle">
<short>Sets the value for the TickStyle property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.SetTickStyle.Value">
<short>New value for the property.</short>
</element>

<element name="TCustomTrackBar.UpdateSelection">
<short>Not used in the current LCL implementation.</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTrackBar.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomTrackBar.ApplyChanges">
<short>
Sends message to update the visual appearance of the object.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTrackBar.Changed">
<short>
Signals the OnChange event handler (when assigned).
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTrackBar.DoChange">
<short>
Performs actions needed to update the position for the track bar and signal 
the OnChange event.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.DoChange.msg">
<short/>
</element>

<element name="TCustomTrackBar.FixParams">
<short>
Normalizes values in Min and Max, and ensures that Position is in range.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.FixParams.APosition">
<short/>
</element>
<element name="TCustomTrackBar.FixParams.AMin">
<short/>
</element>
<element name="TCustomTrackBar.FixParams.AMax">
<short/>
</element>

<element name="TCustomTrackBar.GetControlClassDefaultSize">
<short>
<var>GetControlClassDefaultSize</var> - returns its own defaults, overriding 
the inherited values.
</short>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>
<element name="TCustomTrackBar.GetControlClassDefaultSize.Result">
<short/>
</element>

<element name="TCustomTrackBar.InitializeWnd" link="#lcl.controls.TWinControl.InitializeWnd">
<short/>
<descr/>
<seealso/>
</element>

<element name="TCustomTrackBar.Loaded" link="#lcl.controls.TWinControl.Loaded">
<short/>
<descr/>
<seealso/>
</element>

<element name="TCustomTrackBar.ShouldAutoAdjust">
<short>
Determines whether the width and height for the control are automatically 
resized.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTrackBar.ShouldAutoAdjust.AWidth">
<short><b>True</b> if the value in Width should be resized.</short>
</element>
<element name="TCustomTrackBar.ShouldAutoAdjust.AHeight">
<short><b>True</b> if the value in Height should be resized.</short>
</element>

<element name="TCustomTrackBar.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for 
<var>TCustomTrackBar</var>, and calls the inherited method on entry.
</p>
<p>
Create sets the default values for properties and members in the class 
instance, including the component and control style flags. The initial bounds 
for the control are set to the values from the 
<var>GetControlClassDefaultSize</var> method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Create">TWinControl.Create</link>
</seealso>
</element>
<element name="TCustomTrackBar.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomTrackBar.SetTick">
<short>
Sets the position for the tick mark displayed on the track bar control.
</short>
</element>
<element name="TCustomTrackBar.SetTick.Value">
<short>Position for the tick mark (between Min and Max).</short>
</element>

<element name="TCustomTrackBar.AutoSize" link="#lcl.controls.TControl.AutoSize"/>

<element name="TCustomTrackBar.Frequency">
<short>
Indicates the frequency for the tick marks displayed on the control.
</short>
<descr>
<p>
<var>Frequency</var> is an <var>Integer</var> property which indicates the 
interval between tick marks displayed on the track bar control. The default 
value for the property is <b>1</b>, and causes a tick mark to be drawn for 
each value between Min and Max. When set to another value, tick marks are 
drawn for each Position where the value modulus Frequency is 0 (zero).
</p>
<p>
Changing the value for the property causes the ApplyChanges method to be 
called to update the settings and visual appearance for the widgetset control.
</p>
<p>
Use LineSize to specify the increment applied to Position when a cursor key is 
pressed.
</p>
<p>
Use Min and Max to specify the range of values allowed in the Position 
property.
</p>
</descr>
<seealso>
<link id="TCustomTrackBar.Min"/>
<link id="TCustomTrackBar.Max"/>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.LineSize"/>
</seealso>
</element>

<element name="TCustomTrackBar.LineSize">
<short>
Increment (or decrement) applied to the slider position when an arrow key is 
pressed.
</short>
<descr>
<p>
<var>LineSize</var> is an <var>Integer</var> property used to change the 
Position for the control when one of the arrow (cursor) keys is pressed. It 
contains the increment (or decrement) applied to the Position property when 
a cursor key is pressed. Use the Left or Up cursor keys to decrease the value 
in Position. Use the Right or Down cursor keys to increase the value. The 
default value for the property is <b>1</b>.
</p>
<p>
Changing the value in LineSize causes the ApplyChanges method to be called to 
update the visual appearance and settings for the widgetset class instance.
</p>
<p>
Use Min and Max to define the range of values allowed in the Position property.
</p>
<remark>
For the macOS Carbon widgetset, the LineSize property is not supported.
</remark>
</descr>
<seealso>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.Min"/>
<link id="TCustomTrackBar.Max"/>
<link id="TCustomTrackBar.ApplyChanges"/>
</seealso>
</element>

<element name="TCustomTrackBar.Max">
<short>
Maximum value allowed in the Position for the track bar.
</short>
<descr>
<p>
<var>Max</var> is an <var>Integer</var> property which specifies the maximum 
value allowed in the Position property. The default value for the property is 
10.
</p>
<p>
Changing the value for the property causes Min, Max, and Position to be range 
checked, normalized, and applied to the widgetset class instance using the 
SetParams method.
</p>
</descr>
<seealso>
<link id="TCustomTrackBar.Min"/>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.SetParams"/>
</seealso>
</element>

<element name="TCustomTrackBar.Min">
<short>
Minimum value allowed in the Position for the track bar.
</short>
<descr>
<p>
Min is an Integer property which specifies the minimum value allowed in the 
Position property. The default value for the property is 0 (zero).
</p>
<p>
Changing the value for the property causes Min, Max, and Position to be range 
checked, normalized, and applied to the widgetset class instance using the 
SetParams method.
</p>
</descr>
<seealso>
<link id="TCustomTrackBar.Max"/>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.SetParams"/>
</seealso>
</element>

<element name="TCustomTrackBar.Orientation">
<short>
Indicates the horizontal or vertical orientation for the track bar control.
</short>
<descr>
<p>
<var>Orientation</var> is a <var>TTrackBarOrientation</var> property which 
indicates whether the track bar is oriented horizontally or vertically. The 
default value for the property is trHorizontal.
</p>
<p>
Changing the value for the property causes values in Width and Height to be 
swapped to reflect the new orientation for the control. Left and Top 
coordinates for the control are not changed. The Constraints are updated in 
the LCL interface and the new property value is posted to the widgetset class 
instance when its Handle has been allocated.
</p>
</descr>
<seealso>
<link id="TTrackBarOrientation"/>
<link id="#lcl.controls.TControl.Width">TControl.Width</link>
<link id="#lcl.controls.TControl.Height">TControl.Height</link>
<link id="#lcl.controls.TControl.Constraints">TControl.Constraints</link>
</seealso>
</element>

<element name="TCustomTrackBar.PageSize">
<short>
The increment (or decrement) applied to the slider Position when the PageUp or 
PageDown key is pressed.
</short>
<descr>
<p>
<var>PageSize</var> is an <var>Integer</var> property with the increment or 
decrement applied to the Position property when the PageUp or PageDown key is 
pressed while the control has focus. The default value for the property is 2.
</p>
<p>
For some platforms, modified cursor keys can be used for the same purpose. For example: Ctrl+Left, Ctrl+Right, Ctrl+Up, or Ctrl+Down.
</p>
<p>
Changing the value for the property causes the ApplyChanges method to be 
called to update the settings in the widgetset class instance.
</p>
<p>
Use LineSize to control the increment applied to Position when an unmodified 
cursor key is pressed while the control has focus.
</p>
</descr>
<seealso>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.LineSize"/>
<link id="TCustomTrackBar.ApplyChanges"/>
</seealso>
</element>

<element name="TCustomTrackBar.Position">
<short>
Location of the slider on the track bar between the Min and Max values.
</short>
<descr>
<p>
<var>Position</var> is an <var>Integer</var> property with the current 
location of the slider on the track bar control. Position contains a value in 
the range specified by the Min and Max properties.
</p>
<p>
If Position is set to a value outside that range, it is set to the limit which 
it exceeds. The new value for the property is applied to the widgetset class 
instance when its Handle has been allocated. Position is used in the SetParams 
method to determine if new property values needs to be applied to the widget.
</p>
<p>
The property value is updated in DoChange where its value is read from the 
widget. It is also updated in FixParams if the property value is outside the 
range allowed in Min and Max.
</p>
<p>
Changing the value for the property causes the OnChange event handler to be 
signalled (when assigned).
</p>
</descr>
<seealso>
<link id="TCustomTrackBar.Min"/>
<link id="TCustomTrackBar.Max"/>
<link id="TCustomTrackBar.FixParams"/>
<link id="TCustomTrackBar.SetParams"/>
<link id="TCustomTrackBar.Changed"/>
<link id="TCustomTrackBar.DoChange"/>
<link id="TCustomTrackBar.OnChange"/>
</seealso>
</element>

<element name="TCustomTrackBar.Reversed">
<short>
Set to <b>True</b> to display values on the track bar in reverse order.
</short>
<descr>
<p>
<var>Reversed</var> is a <var>Boolean</var> property which indicates if values 
on the track bar are displayed in the reverse order for the Orientation on the 
control.
</p>
<p>
The default value for the property is <b>False</b>. When Orientation is 
trHorizontal, the Min value for the control appears on the left-hand edge and 
the Max value appears on the right-hand edge. When Orientation is trVertical, 
the Min value for the control appears on the top edge and the Max value 
appears on the bottom edge.
</p>
<p>
When Reversed is set to <b>True</b>, the display order for the values are 
reversed along the selected Orientation. When Orientation is trHorizontal, the 
Min value for the control appears on the right-hand edge and the Max value 
appears on the left-hand edge. When Orientation is trVertical, the Min value 
for the control appears on the bottom edge and the Max value appears on the 
top edge.
</p>
<p>
Changing the value for the property causes the ApplyChanges method to be 
called to update the visual appearance for the control.
</p>
</descr>
<seealso>
<link id="TCustomTrackBar.Orientation"/>
<link id="TCustomTrackBar.Min"/>
<link id="TCustomTrackBar.Max"/>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.SelStart"/>
<link id="TCustomTrackBar.SelEnd"/>
<link id="TCustomTrackBar.ApplyChanges"/>
</seealso>
</element>

<element name="TCustomTrackBar.ScalePos">
<short>
Position where the scale is displayed for the track bar control.
</short>
<descr>
<remark>
ScalePos is a GTK-specific property. It is not implemented or supported for 
other widgetsets. Use the TickMarks property on other platforms. 
</remark>
</descr>
<seealso>
<link id="TCustomTrackBar.TickMarks"/>
<link id="TCustomTrackBar.Frequency"/>
<link id="TCustomTrackBar.LineSize"/>
</seealso>
</element>

<element name="TCustomTrackBar.SelEnd">
<short>
Ending value for the selection range on the track bar control.
</short>
<descr/>
<seealso>
<link id="TCustomTrackBar.SelStart"/>
<link id="TCustomTrackBar.ShowSelRange"/>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.Min"/>
<link id="TCustomTrackBar.Max"/>
</seealso>
</element>

<element name="TCustomTrackBar.SelStart">
<short>
Starting value for the selection range on the track bar control.
</short>
<descr/>
<seealso>
<link id="TCustomTrackBar.SelEnd"/>
<link id="TCustomTrackBar.ShowSelRange"/>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.Min"/>
<link id="TCustomTrackBar.Max"/>
</seealso>
</element>

<element name="TCustomTrackBar.ShowSelRange">
<short>
Enables or disables a highlighted selection range with tick marks using the 
values in SelStart and SelEnd.
</short>
<descr/>
<seealso>
<link id="TCustomTrackBar.SelStart"/>
<link id="TCustomTrackBar.SelEnd"/>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.Min"/>
<link id="TCustomTrackBar.Max"/>
</seealso>
</element>

<element name="TCustomTrackBar.TabStop">
<short>
Enables or disables navigation using the Tab key.
</short>
<descr>
<p>
The default value for the property is <b>True</b> in TCustomTrackBar.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
</seealso>
</element>

<element name="TCustomTrackBar.TickMarks">
<short>
Position for the tick marks relative to the slider in the track bar.
</short>
<descr>
<p>
<var>Tickmarks</var> indicates where the ticks appear relative to the slider 
on the track bar control.
</p>
<dl>
<dt>tmBottomRight</dt>
<dd>
Tick marks are displayed on the bottom for the horizontal orientation, and on 
the right for the vertical orientation.
</dd>
<dt>tmTopLeft</dt>
<dd>
Tick marks are displayed on the top for the horizontal orientation, and on 
the left for the vertical orientation.
</dd>
<dt>tmBoth</dt>
<dd>
Tick marks are displayed on both sides for the selected orientation.
</dd>
</dl>
<remark>
For the macOS Carbon widgetset, the TickMarks property is not supported.
</remark>
</descr>
</element>

<element name="TCustomTrackBar.TickStyle">
<short>
Indicates the tick mark drawing style for the control.
</short>
<descr>
<dl>
<dt>tsNone</dt>
<dd>
Disables display of tick marks.
</dd>
<dt>tsAuto</dt>
<dd>
Tick mark count is automatically calculated using Min, Max, and Frequency.
</dd>
<dt>tsManual</dt>
<dd>
Used for Mac OS Cocoa. For other widgetsets, it displays the Selection Range 
markers but no other tick marks.
</dd>
</dl>
</descr>
</element>

<element name="TCustomTrackBar.OnChange">
<short>
Event handler signalled when the Position in the control has been changed.
</short>
<descr>
<p>
<var>OnChange</var> is a <var>TNotifyEvent</var> property with the event 
handler signalled when the value in the Position property is changed. The 
Sender argument for the event is the TCustomTrackBar instance for the 
notification.
</p>
<p>
OnChange is signalled from the Change method. It occurs after the new value 
for Position has been stored and the OnEditingDone event handler has been 
signalled (when assigned).
</p>
</descr>
<seealso>
<link id="TCustomTrackBar.Position"/>
<link id="TCustomTrackBar.Min"/>
<link id="TCustomTrackBar.Max"/>
<link id="TCustomTrackBar.Changed"/>
<link id="TCustomTrackBar.DoChange"/>
<link id="#lcl.controls.TControl.OnEditingDone">TControl.OnEditingDone</link>
</seealso>
</element>

<element name="TTrackBar">
<short>
<var>TTrackBar</var>: a device which allows the user to determine the value 
of a variable using a quasi-analog slider.
</short>
<descr>
<p>
<var>TTrackBar</var>: a device which allows the user to determine the value 
of a variable using a quasi-analog slider.
</p>
<p>
The device looks like a slider-potentiometer control on a hi-fi amplifier and 
consists of a slider which can be moved along a bar using the mouse. Tick 
marks can be displayed along one or both edges, giving an indication of the 
proportion of the maximum value of the controlled variable that is being 
selected.
</p>
<p>
The <var>Position</var> property indicates the distance along the bar that 
the slider has been placed, either by the program or by mouse capture and 
movement.
</p>
<p>
In the example, movement of the slider is detected and shown in the 
associated <link id="#lcl.comctrls.TProgressBar">TProgressBar</link>.
</p>
</descr>
<seealso>
<link id="TCustomTrackBar"/>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
</seealso>
<example file="comctrls/TrackBarEx.pas"/>
</element>

<element name="TTrackBar.Align" link="#lcl.controls.TControl.Align"/>
<element name="TTrackBar.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TTrackBar.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TTrackBar.Color" link="#lcl.controls.TControl.Color"/>
<element name="TTrackBar.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TTrackBar.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TTrackBar.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TTrackBar.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TTrackBar.Font" link="#lcl.controls.TControl.Font"/>
<element name="TTrackBar.Frequency" link="#lcl.comctrls.TCustomTrackBar.Frequency"/>
<element name="TTrackBar.Hint" link="#lcl.controls.TControl.Hint"/>
<element name="TTrackBar.LineSize" link="#lcl.comctrls.TCustomTrackBar.LineSize"/>
<element name="TTrackBar.Max" link="#lcl.comctrls.TCustomTrackBar.Max"/>
<element name="TTrackBar.Min" link="#lcl.comctrls.TCustomTrackBar.Min"/>
<element name="TTrackBar.PageSize" link="#lcl.comctrls.TCustomTrackBar.PageSize"/>
<element name="TTrackBar.ParentColor" link="#lcl.controls.TControl.ParentColor"/>
<element name="TTrackBar.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TTrackBar.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TTrackBar.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TTrackBar.Position" link="#lcl.comctrls.TCustomTrackBar.Position"/>
<element name="TTrackBar.Reversed" link="#lcl.comctrls.TCustomTrackBar.Reversed"/>
<element name="TTrackBar.ScalePos" link="#lcl.comctrls.TCustomTrackBar.ScalePos"/>
<element name="TTrackBar.SelEnd" link="#lcl.comctrls.TCustomTrackBar.SelEnd"/>
<element name="TTrackBar.SelStart" link="#lcl.comctrls.TCustomTrackBar.SelStart"/>
<element name="TTrackBar.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TTrackBar.ShowSelRange" link="#lcl.comctrls.TCustomTrackBar.ShowSelRange"/>
<element name="TTrackBar.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>
<element name="TTrackBar.TabStop" link="#lcl.comctrls.TCustomTrackBar.TabStop"/>
<element name="TTrackBar.TickMarks" link="#lcl.comctrls.TCustomTrackBar.TickMarks"/>
<element name="TTrackBar.TickStyle" link="#lcl.comctrls.TCustomTrackBar.TickStyle"/>
<element name="TTrackBar.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="TTrackBar.OnChange" link="#lcl.comctrls.TCustomTrackBar.OnChange"/>
<element name="TTrackBar.OnChangeBounds" link="#lcl.controls.TControl.OnChangeBounds"/>
<element name="TTrackBar.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TTrackBar.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TTrackBar.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TTrackBar.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TTrackBar.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TTrackBar.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TTrackBar.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TTrackBar.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TTrackBar.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TTrackBar.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TTrackBar.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TTrackBar.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TTrackBar.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TTrackBar.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TTrackBar.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TTrackBar.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="TTrackBar.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="TTrackBar.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
<element name="TTrackBar.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TTrackBar.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TTrackBar.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TTrackBar.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TTrackBar.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TTrackBar.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>
<element name="TTrackBar.Orientation" link="#lcl.comctrls.TCustomTrackBar.Orientation"/>

<element name="TTreeNodeClass">
<short>Class type used to create new TTreeNode instances.</short>
<descr/>
<seealso/>
</element>

<element name="TNodeState">
<short>Enumerated type denoting the state for a TreeNode.</short>
<descr>
<p>
<var>TNodeState</var> is an enumerated type with values representing the 
state a tree node. The values reflect the settings in property values in a 
TTreeNode instance, or the use a node in a tree structure. Value(s) from the 
enumeration are stored in the TNodeStates type.
</p>
</descr>
<seealso>
<link id="TNodeStates"/>
<link id="TTreeNode.States"/>
</seealso>
</element>
<element name="TNodeState.nsCut">
<short>Cut has been set in the TTreeNode.</short>
</element>
<element name="TNodeState.nsDropHilited">
<short>DropTarget has been set in the TTreeNode.</short>
</element>
<element name="TNodeState.nsFocused">
<short>Focused has been set in the TTreeNode.</short>
</element>
<element name="TNodeState.nsSelected">
<short>Selected has been set in the TTreeNode.</short>
</element>
<element name="TNodeState.nsMultiSelected">
<short>MultiSelected has been set in the TTreeNode.</short>
</element>
<element name="TNodeState.nsExpanded">
<short>Expanded has been set in the TTreeNode.</short>
</element>
<element name="TNodeState.nsHasChildren">
<short>HasChildren has been set in the TTreeNode.</short>
</element>
<element name="TNodeState.nsDeleting">
<short>Deleting has been set in the TTreeNode.</short>
</element>
<element name="TNodeState.nsVisible">
<short>Visible has been set in the TTreeNode.</short>
</element>
<element name="TNodeState.nsEnabled">
<short>Enabled has been set to <b>True</b> for the TTreeNode.</short>
</element>
<element name="TNodeState.nsBound">
<short>
The tree node is bound to a tree (has a Parent) or is a top-level node.
</short>
</element>
<element name="TNodeState.nsValidHasChildren">
<short>
The tree node has child nodes and a value assigned to its HasChildren 
property.
</short>
</element>

<element name="TNodeStates">
<short>Set type used to store TNodeState value(s).</short>
<descr>
<p>
<var>TNodeStates</var> is a set type used to store zero or more values from 
the <var>TNodeState</var> enumeration. TNodeStates is the type used to 
implement the <var>TTreeNode.States</var> property.
</p>
</descr>
<seealso>
<link id="TTreeNode.States"/>
</seealso>
</element>

<element name="TNodeAttachMode">
<short>
Location where a new tree node is attached to its Parent, Child, or Sibling 
nodes.
</short>
<descr/>
<seealso/>
</element>
<element name="TNodeAttachMode.naAdd">
<short>Add as the last sibling in a destination.</short>
</element>
<element name="TNodeAttachMode.naAddFirst">
<short>Add as the first sibling in a destination.</short>
</element>
<element name="TNodeAttachMode.naAddChild">
<short>Add as the last child in a destination.</short>
</element>
<element name="TNodeAttachMode.naAddChildFirst">
<short>Add as the first child in a Destination.</short>
</element>
<element name="TNodeAttachMode.naInsert">
<short>Insert as the prior sibling for the specified node.</short>
</element>
<element name="TNodeAttachMode.naInsertBehind">
<short>Insert as the next sibling for the specified node.</short>
</element>

<element name="TAddMode">
<short>
Enumerated type with values used to determine where a node should be placed 
in a tree.
</short>
<descr>
<p>
<var>TAddMode</var> is the type passed as an argument to methods in 
<var>TTreeNode</var> and <var>TTreeNodes</var>.
</p>
</descr>
<seealso>
<link id="TTreeNode.MoveTo"/>
<link id="TTreeNodes.InternalAddObject"/>
</seealso>
</element>
<element name="TAddMode.taAddFirst">
<short>Adds the node as the first child.</short>
</element>
<element name="TAddMode.taAdd">
<short>Adds the node as the last child.</short>
</element>
<element name="TAddMode.taInsert">
<short>Adds the node in front a specified node.</short>
</element>

<element name="TMultiSelectStyles">
<short>Represents available multi-select styles.</short>
<descr>
<p>
<var>TMultiSelectStyles</var> is an enumerated type with values representing 
the multi-select options available in <var>TCustomTreeView</var> and 
<var>TTreeView</var>. The values control the tree nodes and their manner of 
selection in a multi-selection.
</p>
<p>
Values from TMultiSelectStyles are stored in the <var>TMultiSelectStyle</var> 
set type, and used to implement the <var>MultiSelectStyle</var> property in 
TCustomTreeView.
</p>
</descr>
<seealso>
<link id="TMultiSelectStyle"/>
<link id="TCustomTreeView.MultiSelectStyle"/>
<link id="TCustomTreeView.MultiSelect"/>
</seealso>
</element>
<element name="TMultiSelectStyles.msControlSelect">
<short>
Enables multi-select using Ctrl+Click to add an additional item to an 
existing selection.
</short>
</element>
<element name="TMultiSelectStyles.msShiftSelect">
<short>
Enables multi-select for a range of items from the current selection using 
Shift+Click.
</short>
</element>
<element name="TMultiSelectStyles.msVisibleOnly">
<short>
Enables multi-select for visible (expanded) items only using Shift+Click. Can 
be used in conjunction with msSiblingOnly.A multi-selection does not include 
any child nodes unless the nodes are expanded and visible.
</short>
</element>
<element name="TMultiSelectStyles.msSiblingOnly">
<short>
Enables multi-select for only sibling tree nodes using Shift+Click. This 
excludes parent and/or child tree nodes.
</short>
</element>

<element name="TMultiSelectStyle">
<short>Set type used to store value(s) from TMultiSelectStyles.</short>
<descr>
<p>
<var>TMultiSelectStyle</var> is a set type used to store zero or more values 
from the <var>TMultiSelectStyles</var> enumeration. TMultiSelectStyle is the 
type used to implement the <var>TCustomTreeView.MultiSelectStyle</var> 
property.
</p>
</descr>
<seealso>
<link id="TMultiSelectStyles"/>
<link id="TCustomTreeView.MultiSelectStyle"/>
<link id="TCustomTreeView.MultiSelect"/>
</seealso>
</element>

<element name="TTreeNodeArray">
<short>
Pointer to a TTreeNode type which is the first instance in an allocated block 
of memory.
</short>
<descr/>
<seealso/>
</element>

<element name="ETreeNodeError">
<short>Exception type raised for an error retrieving a tree node.</short>
<descr>
<p>
<var>ETreeNodeError</var> is an <var>Exception</var> descendant with the base 
exception type raised for errors that occur when <var>TTreeNode</var> 
instances are retrieved. It is the ancestor for the <var>ETreeViewError</var> 
exception.
</p>
</descr>
<seealso/>
</element>

<element name="ETreeViewError">
<short>Exception type raised for errors in a tree view.</short>
<descr>
<p>
<var>ETreeViewError</var> is a <var>ETreeNodeError</var> descendant and the 
exception raised for errors in a tree structure.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNodeChangeReason">
<short>
Represents reason codes passed to event handlers when a tree node has been 
changed.
</short>
<descr>
<p>
<var>TTreeNodeChangeReason</var> is an enumerated type with values that 
represent the reason code passed to event handlers when a tree node has been 
changed. TTreeNodeChangeReason is passed as an argument to the 
<var>TTVNodeChangedEvent</var> event handler.
</p>
</descr>
<seealso>
<link id="TTVNodeChangedEvent"/>
<link id="TTreeNode.Changed"/>
<link id="TCustomTreeView.NodeChanged"/>
</seealso>
</element>
<element name="TTreeNodeChangeReason.ncTextChanged">
<short>The Node Text has changed.</short>
</element>
<element name="TTreeNodeChangeReason.ncDataChanged">
<short>The Node Data has changed.</short>
</element>
<element name="TTreeNodeChangeReason.ncHeightChanged">
<short>The Node Height has changed.</short>
</element>
<element name="TTreeNodeChangeReason.ncImageEffect">
<short>The Node Image Effect has changed.</short>
</element>
<element name="TTreeNodeChangeReason.ncImageIndex">
<short>The Node Image Index has changed.</short>
</element>
<element name="TTreeNodeChangeReason.ncParentChanged">
<short>The Node Parent has changed.</short>
</element>
<element name="TTreeNodeChangeReason.ncVisibility">
<short>The Node Visibility has changed.</short>
</element>
<element name="TTreeNodeChangeReason.ncEnablement">
<short>The enabled / disabled state has changed for a tree node.</short>
</element>
<element name="TTreeNodeChangeReason.ncOverlayIndex">
<short>The Node Overlay Index has changed.</short>
</element>
<element name="TTreeNodeChangeReason.ncStateIndex">
<short>The Node State Index has changed.</short>
</element>
<element name="TTreeNodeChangeReason.ncSelectedIndex">
<short>The Node Selected Index has changed.</short>
</element>

<element name="LCLStreamID">
<short>A constant with the identifier for a LCL stream.</short>
<descr/>
<seealso/>
</element>

<element name="TTVChangingEvent">
<short>
Specifies an event handler signalled when a tree node is about to be changed.
</short>
<descr>
<p>
<var>TTVChangingEvent</var> is an object procedure type which specifies an 
event handler signalled when a tree node is about to be changed. 
TTVChangingEvent is the type used to implement the 
<var>TCustomTreeView.OnChanging</var> property.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.OnChanging"/>
<link id="TTVChangedEvent"/>
</seealso>
</element>
<element name="TTVChangingEvent.Sender">
<short>Object for the event notification.</short>
</element>
<element name="TTVChangingEvent.Node">
<short/>
</element>
<element name="TTVChangingEvent.AllowChange">
<short/>
</element>

<element name="TTVChangedEvent">
<short>
Specifies an event handler signalled when a tree node has been changed.
</short>
<descr>
<p>
<var>TTVChangedEvent</var> is an object procedure type which specifies an 
event handler signalled when a node has been changed in a 
<var>TCustomTreeView</var> / <var>TTreeView</var> control.
</p>
<p>
<var>Sender</var> is the <var>TObject</var> instance for the change 
notification event.
</p>
<p>
<var>Node</var> is the <var>TTreeNode</var> instance that has been modified.
</p>
<p>
TTVChangedEvent is the type used for the <var>TCustomTreeView.OnChange</var> 
property.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.OnChange"/>
<link id="TTreeNode"/>
<link id="TTVChangingEvent"/>
</seealso>
</element>
<element name="TTVChangedEvent.Sender">
<short>Object for the event notification.</short>
</element>
<element name="TTVChangedEvent.Node">
<short>Tree node for the event notification.</short>
</element>

<element name="TTVNodeChangedEvent">
<short>
Specifies an event handler signalled when values in a tree node have been 
changed.
</short>
<descr>
<p>
<var>TTVNodeChangedEvent</var> is an object procedure type which specifies an 
event handler signalled when values in a tree node have been changed.
</p>
<p>
<var>Sender</var> contains the tree view control for the change notification.
</p>
<p>
<var>Node</var> is the <var>TTreeNode</var> instance with the modified value.
</p>
<p>
<var>ChangeReason</var> is a <var>TTreeNodeChangeReason</var> enumeration 
value that indicates the property changed in the tree node.
</p>
<p>
TTVNodeChangedEvent is the type used for the 
<var>TCustomTreeView.OnNodeChanged</var> property.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.OnNodeChanged"/>
<link id="TTreeNode"/>
<link id="TTreeNodeChangeReason"/>
</seealso>
</element>
<element name="TTVNodeChangedEvent.Sender">
<short>Object (tree view control) for the event notification.</short>
</element>
<element name="TTVNodeChangedEvent.Node">
<short>Tree node with the modified value.</short>
</element>
<element name="TTVNodeChangedEvent.ChangeReason">
<short>Indicates the value that was changed in the tree node.</short>
</element>

<element name="TTVEditingEvent">
<short>
<var>TTVEditingEvent</var> - generic event handling method for editing a 
specified node if <var>AllowEdit</var> is <b>True</b>.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVEditingEvent.Sender">
<short/>
</element>
<element name="TTVEditingEvent.Node">
<short/>
</element>
<element name="TTVEditingEvent.AllowEdit">
<short/>
</element>

<element name="TTVEditingEndEvent">
<short>
Specifies an event handler signalled when an edit action for a tree view 
control has been completed.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVEditingEndEvent.Sender">
<short/>
</element>
<element name="TTVEditingEndEvent.Node">
<short/>
</element>
<element name="TTVEditingEndEvent.Cancel">
<short/>
</element>

<element name="TTVEditedEvent">
<short>
<var>TTVEditedEvent</var> - generic event handling method for a node that has 
been edited.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVEditedEvent.Sender">
<short/>
</element>
<element name="TTVEditedEvent.Node">
<short/>
</element>
<element name="TTVEditedEvent.S">
<short/>
</element>

<element name="TTVExpandingEvent">
<short>
<var>TTVExpandingEvent</var> - generic event handling method for expanding a 
tree node if <var>AllowExpansion</var> is <b>True</b>.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVExpandingEvent.Sender">
<short/>
</element>
<element name="TTVExpandingEvent.Node">
<short/>
</element>
<element name="TTVExpandingEvent.AllowExpansion">
<short/>
</element>

<element name="TTVCollapsingEvent">
<short>
<var>TTVCollapsingEvent</var> - generic event handling method for collapsing 
a Tree Node if AllowCollapse is <b>True</b>.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVCollapsingEvent.Sender">
<short/>
</element>
<element name="TTVCollapsingEvent.Node">
<short/>
</element>
<element name="TTVCollapsingEvent.AllowCollapse">
<short/>
</element>

<element name="TTVExpandedEvent">
<short>
<var>TTVExpandedEvent</var> - generic event handling method for a Tree Node 
that has been expanded.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVExpandedEvent.Sender">
<short/>
</element>
<element name="TTVExpandedEvent.Node">
<short/>
</element>

<element name="TTVCompareEvent">
<short>
<var>TTVCompareEvent</var> - generic event handling method for comparing two 
Tree Nodes.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVCompareEvent.Sender">
<short/>
</element>
<element name="TTVCompareEvent.Node1">
<short/>
</element>
<element name="TTVCompareEvent.Node2">
<short/>
</element>
<element name="TTVCompareEvent.Compare">
<short/>
</element>

<element name="TTVCustomDrawEvent">
<short>
<var>TTVCustomDrawEvent</var> - generic event handling method for Tree View 
custom drawing.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVCustomDrawEvent.Sender">
<short/>
</element>
<element name="TTVCustomDrawEvent.ARect">
<short/>
</element>
<element name="TTVCustomDrawEvent.DefaultDraw">
<short/>
</element>

<element name="TTVCustomDrawItemEvent">
<short>
<var>TTVCustomDrawItemEvent</var> - generic event handling method for Tree 
View Item custom drawing.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVCustomDrawItemEvent.Sender">
<short/>
</element>
<element name="TTVCustomDrawItemEvent.Node">
<short/>
</element>
<element name="TTVCustomDrawItemEvent.State">
<short/>
</element>
<element name="TTVCustomDrawItemEvent.DefaultDraw">
<short/>
</element>

<element name="TTVCustomDrawArrowEvent">
<short>
Specifies an event handler signalled to draw a custom arrow (expand/collapse 
indicator) for a node on a tree view control.
</short>
<descr/>
<seealso>
<link id="TCustomTreeView.OnCustomDrawArrow"/>
</seealso>
</element>
<element name="TTVCustomDrawArrowEvent.Sender">
<short/>
</element>
<element name="TTVCustomDrawArrowEvent.ARect">
<short/>
</element>
<element name="TTVCustomDrawArrowEvent.ACollapsed">
<short/>
</element>

<element name="TTVAdvancedCustomDrawEvent">
<short>
<var>TTVAdvancedCustomDrawEvent</var> - generic event handler method for Tree 
View advanced custom drawing.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVAdvancedCustomDrawEvent.Sender">
<short/>
</element>
<element name="TTVAdvancedCustomDrawEvent.ARect">
<short/>
</element>
<element name="TTVAdvancedCustomDrawEvent.Stage">
<short/>
</element>
<element name="TTVAdvancedCustomDrawEvent.DefaultDraw">
<short/>
</element>

<element name="TTVAdvancedCustomDrawItemEvent">
<short>
<var>TTVAdvancedCustomDrawItemEvent</var> - generic event handler method for 
Tree View Item advanced custom drawing.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVAdvancedCustomDrawItemEvent.Sender">
<short/>
</element>
<element name="TTVAdvancedCustomDrawItemEvent.Node">
<short/>
</element>
<element name="TTVAdvancedCustomDrawItemEvent.State">
<short/>
</element>
<element name="TTVAdvancedCustomDrawItemEvent.Stage">
<short/>
</element>
<element name="TTVAdvancedCustomDrawItemEvent.PaintImages">
<short/>
</element>
<element name="TTVAdvancedCustomDrawItemEvent.DefaultDraw">
<short/>
</element>

<element name="TTVCustomCreateNodeEvent">
<short>
<var>TTVCustomCreateNodeEvent</var> - generic event handling method for Tree 
View node creation.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVCustomCreateNodeEvent.Sender">
<short/>
</element>
<element name="TTVCustomCreateNodeEvent.ATreeNode">
<short/>
</element>

<element name="TTVCreateNodeClassEvent">
<short>
Specifies an event handler signalled to get the class type used to create a 
new node for a tree view control.
</short>
<descr/>
<seealso/>
</element>
<element name="TTVCreateNodeClassEvent.Sender">
<short/>
</element>
<element name="TTVCreateNodeClassEvent.NodeClass">
<short/>
</element>

<element name="TTVHasChildrenEvent">
<short>
Specifies an event handler signalled to determine if a given tree node has 
child nodes.
</short>
<descr>
<p>
<var>TTVHasChildrenEvent</var> is the type used for the 
<var>OnHasChildren</var> property in <var>TCustomTreeView</var>.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.OnHasChildren"/>
<link id="TTreeNode.HasChildren"/>
</seealso>
</element>
<element name="TTVHasChildrenEvent.Result">
<short><b>True</b> if the specified node has child nodes.</short>
</element>
<element name="TTVHasChildrenEvent.Sender">
<short>Object (TCustomTreeView ) for the event notification.</short>
</element>
<element name="TTVHasChildrenEvent.ANode">
<short>Tree node examined in the routine.</short>
</element>

<element name="TTreeNodeCompare">
<short>
<var>TTreeNodeCompare</var> - generic function to compare Tree Nodes: returns 
-1 if Node1 is less than Node2, zero if equal, +1 if Node1 is greater.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNodeCompare.Result">
<short/>
</element>
<element name="TTreeNodeCompare.Node1">
<short/>
</element>
<element name="TTreeNodeCompare.Node2">
<short/>
</element>

<element name="TOldTreeNodeInfo">
<short>
<var>TOldTreeNodeInfo</var> - record type (old version) for Tree Node 
information.
</short>
</element>

<element name="TOldTreeNodeInfo.ImageIndex">
<short/>
<descr/>
<seealso/>
</element>

<element name="TOldTreeNodeInfo.SelectedIndex">
<short/>
<descr/>
<seealso/>
</element>

<element name="TOldTreeNodeInfo.StateIndex">
<short/>
<descr/>
<seealso/>
</element>

<element name="TOldTreeNodeInfo.OverlayIndex">
<short/>
<descr/>
<seealso/>
</element>

<element name="TOldTreeNodeInfo.Data">
<short/>
<descr/>
<seealso/>
</element>

<element name="TOldTreeNodeInfo.Count">
<short/>
<descr/>
<seealso/>
</element>

<element name="TOldTreeNodeInfo.Height">
<short/>
<descr/>
<seealso/>
</element>

<element name="TOldTreeNodeInfo.Expanded">
<short/>
<descr/>
<seealso/>
</element>

<element name="TOldTreeNodeInfo.TextLen">
<short/>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeInfo">
<short>
<var>TTreeNodeInfo</var> - record structure for (new) Tree Node information.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeInfo.ImageIndex">
<short>Ordinal position of the image displayed for the tree node.</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeInfo.SelectedIndex">
<short>
Ordinal position of the tree node in the list of selected nodes, or -1 when 
it is not selected.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeInfo.StateIndex">
<short>
Ordinal position for the image displayed to indicate the tree node state.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeInfo.OverlayIndex">
<short>
Ordinal position for the image displayed an overlay on the icon for the tree 
node.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeInfo.Count">
<short>Number of lines of text for the tree node.</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeInfo.Height">
<short>Height (in pixels) for the rendered tree node.</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeInfo.Expanded">
<short>
<b>True</b> if the node is expanded to show its child nodes, or <b>False</b> 
when it is collapsed.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeInfo.TextLen">
<short>
Total length (in bytes) for the text lines in the tree node.
</short>
<descr/>
<seealso/>
</element>

<element name="PDelphiNodeInfo">
<short>
A pointer to <var>TDelphiNodeInfo</var>.
</short>
</element>

<element name="TDelphiNodeInfo">
<short>
<var>TDelphiNodeInfo</var> - record structure for Tree Node information (for 
Delphi compatibility).
</short>
<descr/>
<seealso/>
</element>

<element name="TDelphiNodeInfo.ImageIndex">
<short>Ordinal position for the image displayed for the node</short>
<descr/>
<seealso/>
</element>

<element name="TDelphiNodeInfo.SelectedIndex">
<short/>
<descr/>
<seealso/>
</element>

<element name="TDelphiNodeInfo.StateIndex">
<short/>
<descr/>
<seealso/>
</element>

<element name="TDelphiNodeInfo.OverlayIndex">
<short/>
<descr/>
<seealso/>
</element>

<element name="TDelphiNodeInfo.Data">
<short/>
<descr/>
<seealso/>
</element>

<element name="TDelphiNodeInfo.Count">
<short/>
<descr/>
<seealso/>
</element>

<element name="TDelphiNodeInfo.Text">
<short/>
<descr/>
<seealso/>
</element>

<element name="TTreeNode">
<short>
Implements a tree node displayed in a TTreeView control.
</short>
<descr>
<p>
A <var>TTreeNode</var> implements a node which is part a hierarchical tree 
structure displayed in a <var>TTreeView</var> control.
</p>
<p>
TTreeNode has properties with the content displayed for the tree node like: 
Text, Data, ImageIndex, and OverlayIndex. It has properties which indicate 
the state for the node on the tree view control like: Cut, Deleting, 
Expanded, Focused, IsVisible, Selected, MultiSelected, States, Visible, and 
Enabled. It also includes properties that represent its relationship and 
position in the hierarchical tree structure like: TreeView, Owner / 
TreeNodes, Parent, Items, Level, Index, and AbsoluteIndex.
</p>
<p>
Methods are provided to locate and navigate between the parent, sibling, and 
child nodes in the tree structure.
</p>
<p>
Tree nodes are normally created and maintained using the TTreeNodes container 
which is the Owner for the tree node.
</p>
<p>
An excellent tutorial for using TTreeView, TTreeNodes, and TTreeNode can be 
found at:
</p>
<p>
<url href="https://wiki.freepascal.org/TTreeView">TTreeView Page on the 
Lazarus Wiki</url>
</p>
</descr>
<seealso>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
</seealso>
</element>

<!-- private -->
<element name="TTreeNode.FOwner"/>
<element name="TTreeNode.FCapacity"/>
<element name="TTreeNode.FCount"/>
<element name="TTreeNode.FData"/>
<element name="TTreeNode.FHeight"/>
<element name="TTreeNode.FNodeEffect"/>
<element name="TTreeNode.FImageIndex"/>
<element name="TTreeNode.FIndex"/>
<element name="TTreeNode.FItems"/>
<element name="TTreeNode.FNextBrother"/>
<element name="TTreeNode.FNextMultiSelected"/>
<element name="TTreeNode.FOverlayIndex"/>
<element name="TTreeNode.FParent"/>
<element name="TTreeNode.FPrevBrother"/>
<element name="TTreeNode.FPrevMultiSelected"/>
<element name="TTreeNode.FSelectedIndex"/>
<element name="TTreeNode.FStateIndex"/>
<element name="TTreeNode.FStates"/>
<element name="TTreeNode.FSubTreeCount"/>
<element name="TTreeNode.FText"/>
<element name="TTreeNode.FTop"/>

<element name="TTreeNode.ParentsExpandedVisible"/>
<element name="TTreeNode.ParentsExpandedVisible.Result"/>
<element name="TTreeNode.ParentsExpandedVisible.AEnabledOnly"/>
<element name="TTreeNode.BindToMultiSelected"/>
<element name="TTreeNode.CompareCount"/>
<element name="TTreeNode.CompareCount.Result"/>
<element name="TTreeNode.CompareCount.CompareMe"/>
<element name="TTreeNode.DoCanExpand"/>
<element name="TTreeNode.DoCanExpand.Result"/>
<element name="TTreeNode.DoCanExpand.ExpandIt"/>
<element name="TTreeNode.DoExpand"/>
<element name="TTreeNode.DoExpand.ExpandIt"/>
<element name="TTreeNode.ExpandItem"/>
<element name="TTreeNode.ExpandItem.ExpandIt"/>
<element name="TTreeNode.ExpandItem.Recurse"/>
<element name="TTreeNode.GetAbsoluteIndex"/>
<element name="TTreeNode.GetAbsoluteIndex.Result"/>
<element name="TTreeNode.GetDeleting"/>
<element name="TTreeNode.GetDeleting.Result"/>
<element name="TTreeNode.GetCount"/>
<element name="TTreeNode.GetCount.Result"/>
<element name="TTreeNode.GetCut"/>
<element name="TTreeNode.GetCut.Result"/>
<element name="TTreeNode.GetDropTarget"/>
<element name="TTreeNode.GetDropTarget.Result"/>
<element name="TTreeNode.GetExpanded"/>
<element name="TTreeNode.GetExpanded.Result"/>
<element name="TTreeNode.GetFocused"/>
<element name="TTreeNode.GetFocused.Result"/>
<element name="TTreeNode.GetHasChildren"/>
<element name="TTreeNode.GetHasChildren.Result"/>
<element name="TTreeNode.GetHeight"/>
<element name="TTreeNode.GetHeight.Result"/>
<element name="TTreeNode.GetIndex"/>
<element name="TTreeNode.GetIndex.Result"/>
<element name="TTreeNode.GetItems"/>
<element name="TTreeNode.GetItems.Result"/>
<element name="TTreeNode.GetItems.AnIndex"/>
<element name="TTreeNode.GetLevel"/>
<element name="TTreeNode.GetLevel.Result"/>
<element name="TTreeNode.GetMultiSelected"/>
<element name="TTreeNode.GetMultiSelected.Result"/>
<element name="TTreeNode.GetSelected"/>
<element name="TTreeNode.GetSelected.Result"/>
<element name="TTreeNode.GetState"/>
<element name="TTreeNode.GetState.Result"/>
<element name="TTreeNode.GetState.NodeState"/>
<element name="TTreeNode.GetTreeNodes"/>
<element name="TTreeNode.GetTreeNodes.Result"/>
<element name="TTreeNode.GetTreeView"/>
<element name="TTreeNode.GetTreeView.Result"/>
<element name="TTreeNode.GetTop"/>
<element name="TTreeNode.GetTop.Result"/>
<element name="TTreeNode.GetVisible"/>
<element name="TTreeNode.GetVisible.Result"/>
<element name="TTreeNode.GetEnabled"/>
<element name="TTreeNode.GetEnabled.Result"/>
<element name="TTreeNode.HasStates"/>
<element name="TTreeNode.HasStates.Result"/>
<element name="TTreeNode.HasStates.NodeStates"/>
<element name="TTreeNode.InternalMove"/>
<element name="TTreeNode.InternalMove.ANode"/>
<element name="TTreeNode.InternalMove.AddMode"/>
<element name="TTreeNode.IsEqual"/>
<element name="TTreeNode.IsEqual.Result"/>
<element name="TTreeNode.IsEqual.Node"/>
<element name="TTreeNode.IsNodeVisible"/>
<element name="TTreeNode.IsNodeVisible.Result"/>
<element name="TTreeNode.IsNodeHeightFullVisible"/>
<element name="TTreeNode.IsNodeHeightFullVisible.Result"/>
<element name="TTreeNode.ReadData"/>
<element name="TTreeNode.ReadData.Stream"/>
<element name="TTreeNode.ReadData.StreamVersion"/>
<element name="TTreeNode.ReadData.Info"/>
<element name="TTreeNode.ReadDelphiData"/>
<element name="TTreeNode.ReadDelphiData.Stream"/>
<element name="TTreeNode.ReadDelphiData.Info"/>

<element name="TTreeNode.SetCut"/>
<element name="TTreeNode.SetCut.AValue"/>
<element name="TTreeNode.SetData"/>
<element name="TTreeNode.SetData.AValue"/>
<element name="TTreeNode.SetDropTarget"/>
<element name="TTreeNode.SetDropTarget.AValue"/>
<element name="TTreeNode.SetExpanded"/>
<element name="TTreeNode.SetExpanded.AValue"/>
<element name="TTreeNode.SetFocused"/>
<element name="TTreeNode.SetFocused.AValue"/>
<element name="TTreeNode.SetHasChildren"/>
<element name="TTreeNode.SetHasChildren.AValue"/>
<element name="TTreeNode.SetHeight"/>
<element name="TTreeNode.SetHeight.AValue"/>
<element name="TTreeNode.SetImageEffect"/>
<element name="TTreeNode.SetImageEffect.AValue"/>
<element name="TTreeNode.SetImageIndex"/>
<element name="TTreeNode.SetImageIndex.AValue"/>
<element name="TTreeNode.SetItems"/>
<element name="TTreeNode.SetItems.AnIndex"/>
<element name="TTreeNode.SetItems.AValue"/>
<element name="TTreeNode.SetMultiSelected"/>
<element name="TTreeNode.SetMultiSelected.AValue"/>
<element name="TTreeNode.SetOverlayIndex"/>
<element name="TTreeNode.SetOverlayIndex.AValue"/>
<element name="TTreeNode.SetSelected"/>
<element name="TTreeNode.SetSelected.AValue"/>
<element name="TTreeNode.SetSelectedIndex"/>
<element name="TTreeNode.SetSelectedIndex.AValue"/>
<element name="TTreeNode.SetStateIndex"/>
<element name="TTreeNode.SetStateIndex.AValue"/>
<element name="TTreeNode.SetText"/>
<element name="TTreeNode.SetText.S"/>
<element name="TTreeNode.SetVisible"/>
<element name="TTreeNode.SetVisible.AValue"/>
<element name="TTreeNode.SetEnabled"/>
<element name="TTreeNode.SetEnabled.AValue"/>
<element name="TTreeNode.Unbind"/>
<element name="TTreeNode.UnbindFromMultiSelected"/>
<element name="TTreeNode.WriteData"/>
<element name="TTreeNode.WriteData.Stream"/>
<element name="TTreeNode.WriteData.Info"/>
<element name="TTreeNode.WriteDelphiData"/>
<element name="TTreeNode.WriteDelphiData.Stream"/>
<element name="TTreeNode.WriteDelphiData.Info"/>

<element name="TTreeNode.Changed">
<short>
Performs a change notification for the node with the specified reason.
</short>
<descr>
<p>
Calls the <var>NodeChanged</var> method in the associated <var>TreeView</var> 
control.
</p>
</descr>
<seealso>
<link id="TTreeNode.TreeView"/>
<link id="TCustomTreeView.NodeChanged"/>
</seealso>
</element>
<element name="TTreeNode.Changed.ChangeReason">
<short>Indicates the property value that was changed in the tree node.</short>
</element>

<element name="TTreeNode.GetOwner">
<short>Gets the owner of the object instance.</short>
<descr>
<p>
The return value contains the TTreeNodes container which owns the class 
instance.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.GetOwner.Result">
<short>Persistent object which owns the object instance.</short>
</element>

<element name="TTreeNode.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TTreeNode</var>, and calls the 
inherited <var>Create</var> on entry. Create sets the default values for 
properties and members in the class instance. The value in 
<var>SubTreeCount</var> is set to <b>1</b>. The owner of the class instance 
is set to the <var>TTreeNodes</var> instance in <var>AnOwner</var>.
</p>
</descr>
<seealso>
<link id="#rtl.system.TObject.Create">TObject.Create</link>
</seealso>
</element>
<element name="TTreeNode.Create.AnOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TTreeNode.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for <var>TTreeNode</var>.
</p>
<p>
It notifies the owner ( the TTreeNodes container) that the tree node and its 
accessibility object are being deleted. The Unbind method is called to remove 
any references to the node in the parent and sibling nodes, or as a selection 
in TreeNodes.
</p>
<p>
Child nodes are removed by setting HasChildren to <b>False</b>. Child nodes 
in Items are freed, and its storage is set to <b>Nil</b>.
</p>
<p>
The Pointer in the Data property is set to <b>Nil</b>.
</p>
<p>
Destroy calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
</seealso>
</element>

<element name="TTreeNode.AlphaSort">
<short>
Sorts the top-level child nodes in Items.
</short>
<descr>
<p>
Calls the <var>CustomSort</var> method to perform the default sort algorithm 
(alphabetic).
</p>
<p>
The return value is the result from the CustomSort method, and contains 
<b>True</b> on success.
</p>
</descr>
<seealso>
<link id="TTreeNode.CustomSort"/>
<link id="TTreeNode.DefaultTreeViewSort"/>
</seealso>
</element>
<element name="TTreeNode.AlphaSort.Result">
<short><b>True</b> on success.</short>
</element>

<element name="TTreeNode.Bottom">
<short>
Gets the vertical coordinate for the bottom of the tree node.
</short>
<descr>
<p>
<var>Bottom</var> is an <var>Integer</var> function used to get the vertical 
coordinate for the bottom of the tree node. The return value is calculated as 
the sum of the <var>Top</var> and <var>Height</var> properties.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.Bottom.Result">
<short>Bottom coordinate for the tree node.</short>
</element>

<element name="TTreeNode.BottomExpanded">
<short>
Gets the bottom coordinate for the last visible, expanded child node in the 
subtree.
</short>
<descr>
<p>
<var>BottomExpanded</var> is an <var>Integer</var> function used to get the 
bottom coordinate for the node subtree when it is expanded.
</p>
<p>
If the tree node has a visible sibling, the value in its Top property is used 
as the return value. When a sibling node does not exist, the bottom 
coordinate for the last visible and expanded child node is used. If the 
current node does not have child nodes, the value in the Bottom property is 
used as the return value.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.BottomExpanded.Result">
<short>Bottom coordinate for the last node in the subtree.</short>
</element>

<element name="TTreeNode.CustomSort">
<short><var>CustomSort</var> - Sorts the child nodes using SortProc.</short>
<descr>
<p>
The child nodes (but not the grand-children) are sorted. If SortProc is 
<b>Nil</b> the method DefaultTreeViewSort is used. The default implementation 
always returns <b>True</b>.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.CustomSort.Result">
<short>Always returns <b>True</b>.</short>
</element>
<element name="TTreeNode.CustomSort.SortProc">
<short>
Sorting algorithm executed in the method, or <b>Nil</b> to use the default 
procedure.
</short>
</element>

<element name="TTreeNode.DefaultTreeViewSort">
<short>
Default routine used to returns a numeric value with the sort order for the 
specified tree nodes.
</short>
<descr>
<p>
<var>DefaultTreeViewSort</var> is the default routine used to compare tree 
nodes to determine their sort order. DefaultTreeViewSort is used in the 
CustomSort method when a another comparison routine has not been specified in 
the argument for the method. It is passed as an argument to the Sort routine 
in the implementation section for the unit.
</p>
<p>
DefaultTreeViewSort checks for an assigned OnCompare event handler in the 
TreeView control for the nodes. When assigned, it is signalled to compare the 
specified nodes to determine the return value for the method. If TreeView or 
its OnCompare handler have not been assigned, the text for the nodes in Node1 
and Node2 are compared to get the return value. The return values contains 
the following:
</p>
<dl>
<dt>&lt; 0</dt>
<dd>
Node1.Text occurs before Node2.Text in the sort order.
</dd>
<dt>0</dt>
<dd>
Node1.Text and Node2.Text have the same value in the sort order.
</dd>
<dt>&gt; 0</dt>
<dd>
Node1.Text occurs after Node2.Text in the sort order.
</dd>
</dl>
<p>
On UNIX-like platforms, the CompareStr routine is called to compare the values 
for the Text in the nodes. The comparison is case-sensitive. All other 
platforms call the AnsiCompareStr routine to compare the Text values. 
AnsiCompareStr handles ANSI characters which include accented characters. The 
comparison is case-sensitive.
</p>
</descr>
<seealso>
<link id="TTreeNode.CustomSort"/>
<link id="TTreeNodeCompare"/>
<link id="TCustomTreeview.OnCompare"/>
</seealso>
</element>
<element name="TTreeNode.DefaultTreeViewSort.Result">
<short>
Numeric value with the relative sort order for the compared nodes.
</short>
</element>
<element name="TTreeNode.DefaultTreeViewSort.Node1">
<short>
Tree node compared in the method.
</short>
</element>
<element name="TTreeNode.DefaultTreeViewSort.Node2">
<short>
Tree node compared in the method.
</short>
</element>

<element name="TTreeNode.DisplayExpandSignLeft">
<short>
Returns the position for the left edge of the expand / collapse indicator.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.DisplayExpandSignLeft.Result">
<short>
Horizontal coordinate where the left edge of the expand / collapse indicator 
is located.
</short>
</element>

<element name="TTreeNode.DisplayExpandSignRect">
<short>
Returns the coordinates for the rectangle within which the expand / collapse 
indicator is displayed.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.DisplayExpandSignRect.Result">
<short>
Rectangle with the display area for the expand / collapse indicator.
</short>
</element>

<element name="TTreeNode.DisplayExpandSignRight">
<short>
Returns the position for the right edge of the expand / collapse indicator 
(accounting for the width of the icon, etc.).
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.DisplayExpandSignRight.Result">
<short>
Rectangle with the display area for the expand / collapse indicator.
</short>
</element>

<element name="TTreeNode.DisplayIconLeft">
<short>
Returns the horizontal position for the left edge of the icon displayed for 
the tree node.
</short>
<descr>
<p>
The return value accounts for the state icon displayed when StateImages have 
been assigned in the TreeView control and StateImageIndex is a valid position 
in the image list. The return value is adjusted for the scaled width for the 
state image and the default item spacing used on the TreeView control.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.DisplayIconLeft.Result">
<short>
Horizontal coordinate where the left edge of the icon for the node is 
displayed.
</short>
</element>

<element name="TTreeNode.DisplayRect">
<short>
Returns the rectangle where the tree node is displayed on its TreeView control.
</short>
<descr>
<p>
<var>DisplayRect</var> returns the coordinates for rectangle containing 
the content for the tree node. The Left, Top, Right, and Bottom members in the 
return value are adjusted for the BorderWidth used on the TreeView control for 
the node.
</p>
<p>
When <var>TextOnly</var> is set to <b>True</b>, the return value contains the 
coordinates where the text for the node is located on the TreeView control. 
The Left and Right members in the rectangle are set to the values returned 
from the DisplayTextLeft and DisplayTextRight methods.
</p>
<p>
The return value contains an empty rectangle (with all members set to 0) if 
TreeView has not been assigned for the node.
</p>
<p>
DisplayRect is called from methods that include:
</p>
<ul>
<li>TCustomTreeview.DoPaintNode</li>
<li>TCustomTreeview.GetInsertMarkAt</li>
</ul>
</descr>
<seealso>
<link id="TTreeNode.TreeView"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.GetInsertMarkAt"/>
<link id="#rtl.classes.TRect">TRect</link>
</seealso>
</element>
<element name="TTreeNode.DisplayRect.Result">
<short>
TRect instance where the tree node is displayed on its tree view control.
</short>
</element>
<element name="TTreeNode.DisplayRect.TextOnly">
<short>
Set to <b>True</b> if the rectangle should contain the display area for its 
Text only.
</short>
</element>

<element name="TTreeNode.DisplayStateIconLeft">
<short>
Returns the horizontal position for the left edge of the State icon on the 
tree node.
</short>
<descr>
<p>
The return value is set to the return value from the DisplayExpandSignRight 
method.
</p>
</descr>
<seealso>
<link id="TTreeNode.DisplayExpandSignRight"/>
</seealso>
</element>
<element name="TTreeNode.DisplayStateIconLeft.Result">
<short>
Horizontal position for the left edge of the State icon on the tree node.
</short>
</element>

<element name="TTreeNode.DisplayTextLeft">
<short>
Returns the position for the left edge of the text on the tree node.
</short>
<descr>
<p>
<var>DisplayTextLeft</var> is a method used to determine the horizontal 
coordinate where the Text for the tree node is displayed. If a TCustomTreeview 
instance has not been assigned in the tree node, the return value contains the 
result from the DisplayIconLeft method.
</p>
<p>
Values from the Images and GetImageSize in the TreeView control are used (when 
assigned) to adjust the left edge for the Text display area. If an image 
position has been assigned in ImageIndex or SelectedIndex, the left edge is 
increased by the image size and the default item spacing on the TreeView
control.
</p>
<p>
DisplayTextLeft is used in TTreeNode methods like DisplayRect and 
DisplayTextRight. It is also used in TCustomTreeView methods including 
BeginEditing, GetHitTestInfoAt, and MouseDown.
</p>
</descr>
<seealso>
<link id="TTreeNode.Text"/>
<link id="TTreeNode.DisplayIconLeft"/>
<link id="TTreeNode.ImageIndex"/>
<link id="TTreeNode.SelectedIndex"/>
<link id="TTreeNode.TreeView"/>
<link id="TTreeNode.DisplayRect"/>
<link id="TTreeNode.DisplayTextRight"/>
<link id="TCustomTreeView.Images"/>
<link id="TCustomTreeView.GetImageSize"/>
<link id="TCustomTreeView.BeginEditing"/>
<link id="TCustomTreeView.GetHitTestInfoAt"/>
<link id="TCustomTreeView.MouseDown"/>
</seealso>
</element>
<element name="TTreeNode.DisplayTextLeft.Result">
<short>
Horizontal coordinate where the Text for the tree node is located.
</short>
</element>

<element name="TTreeNode.DisplayTextRight">
<short>
Returns the horizontal position for the right edge of the Text on the tree 
node.
</short>
<descr>
<p>
<var>DisplayTextRight</var> is a method used to determine the horizontal 
coordinate for the right-hand edge of the Text displayed for the tree node. If 
a TCustomTreeview instance has not been assigned in the tree node, the return 
value contains the result from the DisplayTextLeft method. Otherwise, the 
position is calculated using the left-hand edge for the Text, the width 
returned from the TextWidth method in the control Canvas, and padding derived 
from the Indent used on the TreeView control.
</p>
<p>
DisplayTextRight is used in the DisplayRect method in TTreeNode. It is also 
used in TCustomTreeView methods including GetNodeAt, GetNodeWithExpandSignAt, 
GetHitTestInfoAt, and MouseDown.
</p>
</descr>
<seealso>
<link id="TTreeNode.Text"/>
<link id="TTreeNode.TreeView"/>
<link id="TTreeNode.DisplayTextLeft"/>
<link id="TTreeNode.DisplayRect"/>
<link id="TCustomTreeView.Indent"/>
<link id="TCustomTreeView.GetNodeAt"/>
<link id="TCustomTreeView.GetNodeWithExpandSignAt"/>
<link id="TCustomTreeView.GetHitTestInfoAt"/>
<link id="TCustomTreeView.MouseDown"/>
<link id="#lcl.controls.TCustomControl.Canvas">TCustomControl.Canvas</link>
<link id="#lcl.graphics.TCanvas.TextWidth">TCanvas.TextWidth</link>
</seealso>
</element>
<element name="TTreeNode.DisplayTextRight.Result">
<short>
Horizontal coordinate where the Text for the tree node ends.
</short>
</element>

<element name="TTreeNode.EditText">
<short>
Edits the text for the node in the associated TreeView control.
</short>
<descr>
<p>
<var>EditText</var> is a <var>Boolean</var> function used to start editing 
the <var>Text</var> for the tree node in the associated <var>TreeView</var> 
control. The return value is <b>True</b> when TreeView has been assigned and 
the value <var>tvsIsEditing</var> is present in the <var>States</var> 
property for the tree view control.
</p>
<p>
EditText calls the <var>BeginEditing</var> method in TreeView to configure, 
display, and activate the editor for the node.
</p>
<p>
Use <var>EndEdit</var> to close and optionally cancel the editing process in 
the associated TreeView control.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.EditText.Result">
<short>
<b>True</b> if editing was enabled for the tree node in the method.
</short>
</element>

<element name="TTreeNode.FindNode">
<short>Gets the child tree node in Items with the specified text.</short>
<descr>
<p>
<var>FindNode</var> is a <var>TTreeNode</var> function used to get the child 
node with the text specified in <var>NodeText</var>.
</p>
<p>
FindNode examines the child nodes in the <var>Items</var> property. The 
<var>GetFirstChild</var> method is called to get the first child node in 
Items. Each tree node in Items is examined after calling 
<var>GetNextSibling</var> until a node with the requested value is located.
</p>
<p>
The return value is the TTreeNode instance with a Text property that matches 
the value in NodeText, or <b>Nil</b> if a tree node is not found.
</p>
<p>
When the CaseInsensitiveFilenames compiler define is enabled, the SameText 
routine in SysUtils is called to perform a case-insensitive comparison using 
the text in the nodes and the value in NodeText. Otherwise, case is 
significant in the comparisons.
</p>
<p>
Use methods in the <var>TTreeNodes</var> container to locate tree nodes not 
in the current subtree; i. e. <var>FindNodeWithText</var> or 
<var>FindNodeWithTextPath</var>.
</p>
</descr>
<seealso>
<link id="TTreeNode.Text"/>
<link id="TTreeNode.GetFirstChild"/>
<link id="TTreeNode.GetNextSibling"/>
<link id="TTreeNodes.FindNodeWithText"/>
<link id="TTreeNodes.FindNodeWithTextPath"/>
</seealso>
</element>
<element name="TTreeNode.FindNode.Result">
<short>
The TTreeNode instance in Items with the specified value, or <b>Nil</b> if 
not found.
</short>
</element>
<element name="TTreeNode.FindNode.NodeText">
<short>Text for the node to retrieve from Items.</short>
</element>

<element name="TTreeNode.GetFirstChild">
<short>Gets the first child node in the Items property.</short>
<descr>
<p>
<var>GetFirstChild</var> is a <var>TTreeNode</var> function used to get the 
first child node in the subtree for the current tree node. GetFirstChild 
returns the first TTreeNode instance stored in the <var>Items</var> property 
(index position 0). The return value is <b>Nil</b> if Items is empty 
(<var>Count</var> is 0).
</p>
<p>
Use <var>GetFirstVisibleChild</var> to get the first child node with its 
<var>Visible</var> property set to <b>True</b>.
</p>
<p>
Use <var>GetFirstSibling</var>, <var>GetNextSibling</var>, 
<var>GetPrevSibling</var>, or <var>GetLastSibling</var> to retrieve a tree 
node at the same level in the tree hierarchy.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.GetFirstChild.Result">
<short>
First tree node in the Items property, or <b>Nil</b> when Items is empty.
</short>
</element>

<element name="TTreeNode.GetFirstSibling">
<short>Gets the first tree node at the same level in the tree.</short>
<descr>
<p>
<var>GetFirstSibling</var> is a <var>TTreeNode</var> function which returns 
the first tree node at the same <var>Level</var> in the tree node hierarchy. 
The return value may be the same as the current class instance when it is the 
first (or only) node at the current Level.
</p>
<p>
When a <var>Parent</var> node has been assigned, its <var>GetFirstChild</var> 
method is used to get the return value. Otherwise, the internal linked list 
for the subtree is used to get the previous tree node as the return value.
</p>
</descr>
<seealso>
<link id="TTreeNode.Level"/>
<link id="TTreeNode.Parent"/>
<link id="TTreeNode.GetFirstChild"/>
</seealso>
</element>
<element name="TTreeNode.GetFirstSibling.Result">
<short>First tree node at the same level.</short>
</element>

<element name="TTreeNode.GetFirstVisibleChild">
<short>
Gets the tree node that is the first visible child node in the subtree.
</short>
<descr>
<p>
<var>GetFirstVisibleChild</var> is a <var>TTreeNode</var> function used to 
get the tree node that is the first visible child node in the subtree. The 
AEnabledOnly argument indicates whether the selected node must also be 
Enabled. If AEnabledOnly is <b>False</b>, the Enabled property is not examined.
</p>
<p>
GetFirstVisibleChild calls <var>GetFirstChild</var> to retrieve the first 
child node in <var>Items</var>. If the first child node is not visible, each 
of the TTreeNode instances in Items is examined after calling 
<var>GetNextVisibleSibling</var>.
</p>
<p>
The return value is the first TTreeNode instance with its Visible property 
set to <b>True</b>. The return value is <b>Nil</b> if no visible child node 
was found in Items.
</p>
<p>
Use <var>GetLastVisibleChild</var> to retrieve the last visible child node in 
Items.
</p>
</descr>
<version>
Modified in LCL version 3.0. Refactored to include the AEnabledOnly argument.
</version>
<seealso>
<link id="TTreeNode.Items"/>
<link id="TTreeNode.Visible"/>
<link id="TTreeNode.Enabled"/>
<link id="TTreeNode.GetFirstChild"/>
<link id="TTreeNode.GetNextVisibleSibling"/>
<link id="TTreeNode.GetLastVisibleChild"/>
<link id="TNodeState"/>
<link id="TNodeStates"/>
</seealso>
</element>
<element name="TTreeNode.GetFirstVisibleChild.Result">
<short>
First matching visible child node for the current node, or <b>Nil</b> when 
there are no child nodes.
</short>
</element>
<element name="TTreeNode.GetFirstVisibleChild.AEnabledOnly">
<short>
<b>True</b> if the visible child node must also be Enabled. <b>False</b> if 
Enabled is not examined in the method.
</short>
</element>

<element name="TTreeNode.GetHandle">
<short>
Gets the value for the Handle property.
</short>
<descr>
<p>
<var>GetHandle</var> is a <var>TLCLHandle</var> function used to get the value 
for the <var>Handle</var> property. It is the Handle allocated for the 
associated TreeView control, or zero (0) if the TreeView property has not been 
assigned for the node.
</p>
</descr>
<version>
Modified in LCL version 4.0 to return the TLCLHandle type instead of the 
deprecated THandle type.
</version>
<seealso>
<link id="TTreeNode.Handle"/>
<link id="TTreeNode.TreeView"/>
<link id="#lcl.lcltype.TLCLHandle">TLCLHandle</link>
</seealso>
</element>
<element name="TTreeNode.GetHandle.Result">
<short>Value for the property.</short>
</element>

<element name="TTreeNode.GetLastChild">
<short>
Gets the last tree node that is a top-level child node in Items.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.GetLastChild.Result">
<short>
TTreeNode instance that is the list node in Items, or <b>Nil</b> if no child 
nodes are found.
</short>
</element>

<element name="TTreeNode.GetLastSibling">
<short>
Gets the last node at the same level as the current node.
</short>
<descr>
<p>
If Parent has been assigned, the return value is set to the last child node in 
the Items for the Parent node. If the node is a top-level node (where Parent 
is unassigned), the value from GetNextSibling is used. The return value is 
<b>Nil</b> if a sibling node is not found for the current tree node.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.GetLastSibling.Result">
<short>
Last TTreeNode instance at the same level as the current node, or <b>Nil</b> 
if a sibling node is not found.
</short>
</element>

<element name="TTreeNode.GetLastSubChild">
<short>
Returns the last child node or its last descendent node.
</short>
<descr>
<p>
This provides access to the tree node at the deepest level for the node 
subtree.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.GetLastSubChild.Result">
<short>
TTreeNode for the last child or its last descendent, or <b>Nil</b> when child 
nodes are not found in Items.
</short>
</element>

<element name="TTreeNode.GetLastVisibleChild">
<short>
Gets the last child node in the subtree with its Visible property set to 
<b>True</b>.
</short>
<descr>
<p>
<var>GetLastVisibleChild</var> is a TTreeNode method used to get the last 
child or descendent node for the current node with its Visible property set to 
<b>True</b>. The AEnabledOnly indicates whether the last child must also have 
its Enabled property set to <b>True</b>. When AEnabledOnly is <b>False</b>, 
the Enabled state for the node is not examined in the method.
</p>
<p>
GetLastVisibleChild performs a recursive search which starts at the last child 
node in Items, and continues to each of the last child nodes in the subtree. 
GetLastChild is called to retrieve the first tree node examined in the method. 
The search is continued by calling GetLastSubChild until a tree node with the 
required states (Visible and optionally Enabled) is located.
</p>
<p>
The return value is <b>Nil</b> if the recursive search for a last child node 
does not find a tree node with the required states, or the current node does 
not have child nodes.
</p>
</descr>
<version>
Modified in LCL version 3.0. Refactored to include the AEnabledOnly argument.
</version>
<seealso>
<link id="TTreeNode.Items"/>
<link id="TTreeNode.Visible"/>
<link id="TTreeNode.Enabled"/>
<link id="TTreeNode.GetLastChild"/>
<link id="TTreeNode.GetLastSubChild"/>
<link id="TNodeState"/>
<link id="TNodeStates"/>
</seealso>
</element>
<element name="TTreeNode.GetLastVisibleChild.Result">
<short>
Last visible node in Items, or <b>Nil</b> when child nodes are not found or 
visible.
</short>
</element>
<element name="TTreeNode.GetLastVisibleChild.AEnabledOnly">
<short>
<b>True</b> if the visible child node must also be Enabled. <b>False</b> if 
Enabled is not examined.
</short>
</element>

<element name="TTreeNode.GetNext">
<short>
Gets the next node in the tree hierarchy.
</short>
<descr>
<p>
Calls GetFirstChild to begin the search for the next tree node in the 
hierarchy. If a child node is not found, the GetNextSkipChildren method is 
called to locate the next sibling node in the tree.
</p>
</descr>
<seealso>
<link id="TTreeNode.GetFirstChild"/>
<link id="TTreeNode.GetNextSkipChildren"/>
</seealso>
</element>
<element name="TTreeNode.GetNext.Result">
<short>
TTreeNode that is a child or sibling of the current node, or <b>Nil</b> when 
neither condition is satisfied.
</short>
</element>

<element name="TTreeNode.GetNextChild">
<short>
Returns the next child node for the parent node specified in <var>AValue</var>.
</short>
<descr>
<p>
Calls GetNextSibling to get the return value for the method. Returns 
<b>Nil</b> if AValue has not been assigned.
</p>
</descr>
<seealso>
<link id="TTreeNode.GetNextSibling"/>
</seealso>
</element>
<element name="TTreeNode.GetNextChild.Result">
<short>
TTreeNode which is the first child node in the specified parent, or <b>Nil</b> 
when a node is not assigned to AValue.
</short>
</element>
<element name="TTreeNode.GetNextChild.AValue">
<short>
Tree node examined to locate its first child node.
</short>
</element>

<element name="TTreeNode.GetNextExpanded">
<short>
Returns the next expanded tree node in the node hierarchy.
</short>
<descr>
<p>
<var>GetNextExpanded</var> calls GetFirstVisibleChild to start the search for 
the next expanded tree node. The <var>AEnabledOnly</var> argument indicates 
whether the next node must also be in the Enabled state. When set to 
<b>False</b>, the Enabled state is not examined in the method.
</p>
<p>
If the node is assigned and its Expanded property is set to <b>True</b>, and 
matches the AEnabledOnly argument, it is used as the return value for the 
method. Otherwise, the GetNextVisibleSibling method is called to get a 
sibling node with the required states.
</p>
<p>
If a tree node is not found, the Parent node is searched for a visible sibling 
node. The return value is <b>Nil</b> if a tree node with the required states 
is not found.
</p>
</descr>
<version>
Modified in LCL version 3.0. Refactored to include the AEnabledOnly argument.
</version>
<seealso/>
</element>
<element name="TTreeNode.GetNextExpanded.Result">
<short>
Tree node which is the next expanded child or sibling for the node, or 
<b>Nil</b> when a visible and expanded node is not not found.
</short>
</element>
<element name="TTreeNode.GetNextExpanded.AEnabledOnly">
<short>
<b>True</b> if the next node must also be Enabled. <b>False</b> if Enabled is 
not examined.
</short>
</element>

<element name="TTreeNode.GetNextMultiSelected">
<short>
Returns the next tree node which is included in a multi-selected range of 
nodes.
</short>
<descr>
<p>
The internal members with the values for GetPrevMultiSelected and 
GetNextMultiSelected are updated when the value in the MultiSelected property 
is changed for the node.
</p>
</descr>
<seealso>
<link id="TTreeNode.MultiSelected"/>
<link id="TTreeNode.Selected"/>
<link id="TTreeNodes.GetSelections"/>
<link id="TCustomTreeView.Selections"/>
<link id="TCustomTreeView.SelectionVisible"/>
</seealso>
</element>
<element name="TTreeNode.GetNextMultiSelected.Result">
<short>
Next tree node in the list of multi-selected nodes, or <b>Nil</b> when 
multi-selections are not present or enabled in the tree view control for the 
node(s).
</short>
</element>

<element name="TTreeNode.GetNextSibling">
<short>
Returns the next node in the tree hierarchy at the same level as the current 
node.
</short>
<descr>
<p>
The internal member with the return value for the method is updated when the 
MoveTo method is called for the tree node. This occurs when the value in Index 
is modified. It is also updated when methods in TTreeNode are called to add or 
insert a tree node into the node list.
</p>
</descr>
<seealso>
<link id="TTreeNode.Index"/>
<link id="TTreeNode.MoveTo"/>
<link id="TTreeNodes.InternalAddObject"/>
<link id="TTreeNodes.AddNode"/>
<link id="TTreeNodes.AddObject"/>
<link id="TTreeNodes.Insert"/>
<link id="TTreeNodes.InsertObject"/>
</seealso>
</element>
<element name="TTreeNode.GetNextSibling.Result">
<short>
TTreeNode instance which is the next node at the same level as the current 
node, or <b>Nil</b> if no other nodes are stored at the same level in the 
Parent.
</short>
</element>

<element name="TTreeNode.GetNextSkipChildren">
<short>
Gets the next sibling for the current tree node, or <b>Nil</b> when a sibling 
node does not exist.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.GetNextSkipChildren.Result">
<short>
TTreeNode instance which is the next sibling for the current node, or Nil if a 
sibling node does not exist.
</short>
</element>

<element name="TTreeNode.GetNextVisible">
<short>
Gets the next visible node child or sibling for the current node.
</short>
<descr>
<p>
<var>GetNextVisible</var> is a <var>TTreeNode</var> function used to get the 
next visible node for the current tree node. The node in the return value must 
be both visible and expanded. When AEnabledOnly is set to <b>True</b>, the 
node must also have its Enabled property set to <b>True</b>.
</p>
<p>
GetNextVisible checks for visible and expanded child nodes first. If a child 
node is not found, the next visible and expanded sibling nodes are checked. If 
neither of those searches finds a node, the return value is set to the Parent 
node.
</p>
<p>
The return value is <b>Nil</b> if a visible and expanded node is not found 
using the preceding logic, or when none of the ancestor nodes are visible and 
expanded.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.GetNextVisible.Result">
<short>
Next visible node in the tree node navigation order, or <b>Nil</b>.
</short>
</element>
<element name="TTreeNode.GetNextVisible.AEnabledOnly">
<short>
<b>True</b> if the next node must also be Enabled. <b>False</b> if Enabled is 
not examined.
</short>
</element>

<element name="TTreeNode.GetNextVisibleSibling">
<short>
Gets the next visible node at the same level in the node tree.
</short>
<descr>
<p>
<var>GetNextVisibleSibling</var> is a <var>TTreeNode</var> function used to 
locate the next sibling node that has its Visible and Expanded properties 
enabled. A sibling node is one which exists at the same Level as the current 
node in the node hierarchy; in other words, it is one of the child nodes in 
the Parent for the current node.
</p>
<p>
AEnabledOnly indicates whether the node in the return value must also have its 
Enabled property set. The default value (<b>False</b>) indicates that the 
Enabled property for the node is not examined.
</p>
<p>
GetNextVisibleSibling calls GetNextSibling to start the search for a visible 
sibling node with the required node states. The return value is <b>Nil</b> if 
there are no sibling nodes after the current node, or a sibling node with the 
required node states was not found.
</p>
<p>
GetNextVisibleSibling is used in TTreeNode methods like BottomExpanded, 
GetNextVisible, GetNextExpanded, and GetFirstVisibleChild. It is also called 
from methods like TTreeNodes.MultiSelect and TCustomTreeview.DoPaintNode when 
a tree node is selected or drawn on the TreeView control.
</p>
</descr>
<version>
Modified in LCL version 3.0. Refactored to include the AEnabledOnly argument.
</version>
<seealso>
<link id="TTreeNode.Visible"/>
<link id="TTreeNode.Parent"/>
<link id="TTreeNode.GetNextSibling"/>
<link id="TTreeNode.BottomExpanded"/>
<link id="TTreeNode.GetNextVisible"/>
<link id="TTreeNode.GetNextExpanded"/>
<link id="TTreeNode.GetFirstVisibleChild"/>
<link id="TTreeNodes.MultiSelect"/>
<link id="TCustomTreeView.DoPaintNode"/>
</seealso>
</element>
<element name="TTreeNode.GetNextVisibleSibling.Result">
<short>
Next visible sibling node in the tree hierarchy, or <b>Nil</b> when a sibling 
node is not found.
</short>
</element>
<element name="TTreeNode.GetNextVisibleSibling.AEnabledOnly">
<short>
<b>True</b> if the sibling node must also be enabled. <b>False</b> if Enabled 
is not examined.
</short>
</element>

<element name="TTreeNode.GetParentNodeOfAbsoluteLevel">
<short>
<var>GetParentNodeOfAbsoluteLevel</var> - returns the parent of all nodes at 
this absolute level.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.GetParentNodeOfAbsoluteLevel.Result">
<short/>
</element>
<element name="TTreeNode.GetParentNodeOfAbsoluteLevel.TheAbsoluteLevel">
<short/>
</element>

<element name="TTreeNode.GetPrev">
<short>
Gets the previous node in the tree hierarchy.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.GetPrev.Result">
<short/>
</element>

<element name="TTreeNode.GetPrevChild">
<short>
Gets the previous child node starting at the specified child node.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.GetPrevChild.Result">
<short>Node which is the previous child node.</short>
</element>
<element name="TTreeNode.GetPrevChild.AValue">
<short>
Node which is the previous sibling for the specified child, or <b>Nil</b>.
</short>
</element>

<element name="TTreeNode.GetPrevExpanded">
<short>
Returns the previous expanded tree node in the node hierarchy.
</short>
<descr>
<p>
<var>GetPrevExpanded</var> is a <var>TTreeNode</var> function used to get the 
previous expanded node in the tree node hierarchy. The node used in the return 
value must have both Visible and Expanded in its node states. The 
<var>AEnabledOnly</var> argument indicates whether the node must also have its 
Enabled property set to <b>True</b>. If AEnabledOnly is <b>False</b>, the 
Enabled state is not examined in the method.
</p>
<p>
GetPrevExpanded calls GetPrevVisibleSibling to find a node with the required 
states. When found, its GetLastVisibleChild is called to find the last child 
node (or descendant) with the required states. The return value contains the 
sibling node or a child node found when found. If a previous sibling node does 
not exist, the return value is set to the Parent for the current node.
</p>
</descr>
<version>
Modified in LCL version 3.0. Refactored to include the AEnabledOnly argument.
</version>
<seealso>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.Visible"/>
<link id="TTreeNode.Enabled"/>
<link id="TTreeNode.Parent"/>
<link id="TTreeNode.GetPrevVisibleSibling"/>
<link id="TTreeNode.GetLastVisibleChild"/>
</seealso>
</element>
<element name="TTreeNode.GetPrevExpanded.Result">
<short>
Previous expanded sibling node (or one of its descendants) in the node hierarchy.
</short>
</element>
<element name="TTreeNode.GetPrevExpanded.AEnabledOnly">
<short>
<b>True</b> if the previous node must be Enabled. <b>False</b> if the Enabled 
state is not examined in a candidate node.
</short>
</element>

<element name="TTreeNode.GetPrevExpandedEnabled">
<short>
Gets the last child node in a previous sibling that is expanded and enabled.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.GetPrevExpandedEnabled.Result">
<short/>
</element>

<element name="TTreeNode.GetPrevMultiSelected">
<short>
<var>GetPrevMultiSelected</var> - returns the previous node in a 
multi-selection.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.GetPrevMultiSelected.Result">
<short/>
</element>

<element name="TTreeNode.GetPrevSibling">
<short>
<var>GetPrevSibling</var> - returns the previous node in the same level as 
the current node.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.GetPrevSibling.Result">
<short/>
</element>

<element name="TTreeNode.GetPrevVisible">
<short>
Returns the previous visible (not hidden) tree node in the node hierarchy.
</short>
<descr>
<p>
<var>GetPrevVisible</var> is a <var>TTreeNode</var> method used to get the 
next tree node in the node hierarchy with the node states required in the 
method. The tree node in the return value must have its Expanded and Visible 
properties enabled. The AEnabledOnly argument indicates whether the node must 
also have its Enabled property set to <b>True</b>. When AEnabledOnly is set to 
<b>False</b>, the Enabled property for the node is not examined in the method.
</p>
<p>
GetPrevVisible calls GetPrevVisibleSibling to locate a previous sibling node 
with the required states. When found, its GetLastVisibleChild method is called 
to get the return value. When not found, the Parent node is searched for a 
child node with the required states.
</p>
<p>
The return value is <b>Nil</b> if a previous tree node with the required 
states is not found.
</p>
</descr>
<version>
Modified in LCL version 3.0. Refactored to include the AEnabledOnly argument.
</version>
<seealso/>
</element>
<element name="TTreeNode.GetPrevVisible.Result">
<short>
Next tree node in the node hierarchy with the requires states, or <b>Nil</b> 
when a node is not found with the required states.
</short>
</element>
<element name="TTreeNode.GetPrevVisible.AEnabledOnly">
<short>
<b>True</b> if the previous node must also be Enabled. <b>False</b> if Enabled 
is not examined in the method.
</short>
</element>

<element name="TTreeNode.GetPrevVisibleSibling">
<short>
Gets the previous visible sibling tree node for the current node.
</short>
<descr>
<p>
<var>GetPrevVisibleSibling</var> is a <var>TTreeNode</var> function used to 
get a previous sibling tree node which has its Visible property enabled. The 
<var>AEnabledOnly</var> argument indicates whether the node must also have its 
Enabled property set to <b>True</b>. When AEnabledOnly is <b>False</b>, the 
Enabled property for the candidate node is not examined in the method.
</p>
<p>
GetPrevVisibleSibling calls the GetPrevSibling method for the current node to 
get the previous sibling.
</p>
<p>
The return value contains the first matching tree node with the required 
states, or <b>Nil</b> if a matching node is not found before all of the 
sibling nodes have been examined.
</p>
</descr>
<version>
Modified in LCL version 3.0. Refactored to include the AEnabledOnly argument.
</version>
<seealso/>
</element>
<element name="TTreeNode.GetPrevVisibleSibling.Result">
<short>
Previous sibling node with the required states, or <b>Nil</b> when a tree node 
is not found.
</short>
</element>
<element name="TTreeNode.GetPrevVisibleSibling.AEnabledOnly">
<short>
<b>True</b> if the previous sibling node must also be Enabled, or <b>False</b> 
if Enabled is not examined in the method.
</short>
</element>

<element name="TTreeNode.GetTextPath">
<short>
Gets the hierarchical path to the tree node in the tree view.
</short>
<descr>
<p>
<var>GetTextPath</var> is a <var>String</var> function used to get the 
hierarchical path to the current node in a tree view control.
</p>
<p>
For example:
</p>
<code>/parent1/child1</code>
<p>
GetTextPath visits (in reverse order) each of the TTreeNode instances from 
the current node to the first node in the Parent hierarchy. The text path for 
the current is built using the PathDelimiter from the tree view control and 
the value in the Text property. The text path for each prior node in the 
hierarchy is prepended to the form the return value.
</p>
<p>
Use the FindNodeWithTextPath method in TTreeNodes to retrieve a tree node 
with the value returned from GetTextPath.
</p>
</descr>
<version>
Modified in LCL version 3 to use the PathDelimiter in TCustomTreeView.
</version>
<seealso>
<link id="TTreeNode.Text"/>
<link id="TTreeNode.Parent"/>
<link id="TTreeNodes.FindNodeWithTextPath"/>
<link id="TTreeNodes.FindNodeWithText"/>
<link id="TCustomTreeView.PathDelimiter"/>
</seealso>
</element>

<element name="TTreeNode.HasAsParent">
<short>
Returns <b>True</b> if the specified node is a parent for the current node.
</short>
<descr>
<p>
<var>HasAsParent</var> is <var>Boolean</var> function which indicates whether 
the tree node specified in <var>AValue</var> is an ancestor of the current 
tree node.
</p>
<p>
The return value is <b>True</b> if AValue is the Parent node for the current 
class instance. Preceding Parent nodes in the hierarchy are also searched if 
needed by calling their HasAsParent method, and the return value is set to 
<b>True</b> if any one of them is the node in AValue.
</p>
<p>
The return value is set to <b>False</b> when a node is encountered and its 
Parent node has not been assigned.
</p>
<p>
Strangely enough, the method also returns <b>True</b> if AValue is unassigned 
(<b>Nil</b>).
</p>
<p>
HasAsParent is called from the MoveTo method and used to enable or disable 
change event handlers in the TreeView control when a node is relocated in the 
node hierarchy.
</p>
</descr>
<seealso>
<link id="TTreeNode.Parent"/>
</seealso>
</element>
<element name="TTreeNode.HasAsParent.Result">
<short>
<b>True</b> if the specified node is ancestor of the current tree node (also 
when the ancestor node is not specified).
</short>
</element>
<element name="TTreeNode.HasAsParent.AValue">
<short>
Parent node to locate in the ancestor nodes for the class instance.
</short>
</element>

<element name="TTreeNode.IndexOf">
<short>
Get the index position for the specified child tree node.
</short>
<descr>
<p>
The return value is -1 if the tree node in AValue is not a child node (its 
Parent node is not the current class instance). Calls GetIndex to calculate 
the position of the child node relative to previous sibling nodes. Roughly 
equivalent to calling IndexOf in the Items container, but using a TTreeNode 
search value instead of a String.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.IndexOf.Result">
<short>
Ordinal position for the specified child node, or -1 when not a child node.
</short>
</element>
<element name="TTreeNode.IndexOf.AValue">
<short>Child node to locate in Items.</short>
</element>

<element name="TTreeNode.IndexOfText">
<short>
Returns the ordinal position for the last child node containing the specified 
Text.
</short>
<descr>
<p>
<var>IndexOfText</var> searches the child nodes in Items to locate a node with 
the text specified in the NodeText argument. A case-sensitive comparison is 
performed using the equality operator (=). The child nodes are searched in 
reverse order, and the return value represent the last node in Items with the 
specified value. The return value is -1 if a node is not found in Items with 
the specified value.
</p>
<p>
IndexOfText is a convenience method; it is not used in the implementation of 
TTreeNode, TTreeNodes, or TCustomTreeView.
</p>
</descr>
<seealso>
<link id="TTreeNode.Text"/>
</seealso>
</element>
<element name="TTreeNode.IndexOfText.Result">
<short>
Ordinal position for the last child node containing the specified node Text, 
or -1 when not found in the child nodes.
</short>
</element>
<element name="TTreeNode.IndexOfText.NodeText">
<short/>
</element>

<element name="TTreeNode.Assign">
<short>
Implements object persistence for the TTreeNode type.
</short>
<descr>
<p>
<var>Assign</var> is an overridden method in <var>TTreeNode</var> used to 
implement object persistence for the type. Assign ensures that property values 
in Source are copied to the current class instance when it is derived from 
TTreeNode. Properties copied from Source include:
</p>
<ul>
<li>Text</li>
<li>Data</li>
<li>ImageIndex</li>
<li>SelectedIndex</li>
<li>OverlayIndex</li>
<li>Height</li>
<li>Focused</li>
<li>Cut</li>
<li>HasChildren</li>
</ul>
<p>
The node cache in the TTreeNodes owner is cleared prior to copying values from 
Source (when assigned).
</p>
<p>
If Source is not a TTreeNode instance, the inherited method is called to 
complete the assignment or raise an EConvertError exception if Source is 
unassigned.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
</seealso>
</element>
<element name="TTreeNode.Assign.Source">
<short>Persistent object with properties copied in the method.</short>
</element>

<element name="TTreeNode.Collapse">
<short>
Collapses the current tree node, and optionally collapses any descendent 
nodes.
</short>
<descr>
<p>
<var>Collapse</var> calls the BeginUpdate and EndUpdate methods in the 
TreeView control (when assigned) to reduce the number of updates performed 
while one or more of the tree nodes are displayed in the collapsed state.
</p>
<p>
<var>Recurse</var> indicates whether child and all descendent nodes are also 
collapsed in the method. The default value is <b>False</b>, and causes only 
the current node instance to be displayed in the collapsed state. When set to 
<b>True</b>, child nodes are visited and recursively collapsed. 
</p>
<p>
After completion of the method, the affected nodes will have their Expanded 
properties set to <b>False</b> and their States flags are updated accordingly.
</p>
<p>
Use Expand to reverse the collapse process. Use ExpandParents to expand all 
ancestor tree nodes for the current node.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.Collapse.Recurse">
<short>
<b>True</b> to collapses all descendent nodes in the subtree.
</short>
</element>

<element name="TTreeNode.ConsistencyCheck">
<short>
Ensures that node references to or from the current tree node are valid and 
consistent.
</short>
<descr>
<p>
<var>ConsistencyCheck</var> validates properties in the tree node to ensure 
that the node is in a valid state for its TTreeNodes container and the 
TreeView control where the node is displayed.
</p>
<p>
ConsistencyCheck can raise a catchable debugger exception if any of the values 
are not consistent or valid. For instance:
</p>
<ul>
<li>
The capacity in Items has a negative value.
</li>
<li>
The capacity in Items is smaller than the number of stored child nodes.
</li>
<li>
The number of nodes in Items is a negative value.
</li>
<li>
Items has been assigned but the capacity is zero (0) or a negative value.</li>
<li>
The Height for the node is a negative value.
</li>
<li>
The Top for the node is a negative value.
</li>
<li>
The Parent node is assigned, but does contain the current node in its Items 
container.
</li>
<li>
The node has pointers to a previous or next sibling node which does have a 
complimentary pointer to the node.
</li>
<li>
The node has a pointer to a previous or successive node in a multi-selection, 
but that node does have have the complimentary pointer to the original node.
</li>
<li>
The MultiSelected property is enabled for the node, but it does not appear in 
the multi-selection list for the TreeView control.
</li>
<li>
The Selected property is enabled for the node, but MultiSelected is not 
enabled and the TreeView has multi-selections enabled in its Options.
</li>
<li>
Items contains a child node with a Nil (or unassigned) value.
</li>
<li>
Items has a child node which does not have the current node as its Parent.
</li>
<li>
There are circular references between the current node, its Parent, or its 
previous or next sibling nodes.
</li>
<li>
The first child node has an invalid pointer to a previous sibling node.
</li>
<li>
A child node which is not the first child node does not have a pointer to the 
previous sibling or points to the wrong tree node.
</li>
<li>
A child node which is not the last child node does not have a pointer to the 
previous sibling or points to the wrong tree node.
</li>
<li>
A child node which is the last node in Items has an invalid pointer to a next 
sibling node.
</li>
<li>
A child node has an Index value which does not match its actual position in 
Items.
</li>
</ul>
<p>
The ConsistencyCheck method is called recursively for child nodes as well.
</p>
<p>
These exception represent an extraordinary condition.
</p>
<p>
ConsistencyCheck is called from the implementation of the ConsistencyCheck 
method in TTreeNodes, and occurs when the TreeView instance calls its 
ConsistencyCheck method.
</p>
</descr>
<seealso>
<link id="TTreeNodes.ConsistencyCheck"/>
<link id="TCustomTreeView.ConsistencyCheck"/>
</seealso>
</element>

<element name="TTreeNode.Delete">
<short>
Frees the current tree node when the Deleting property is not <b>True</b>.
</short>
<descr>
<p>
<var>Delete</var> is a method used to remove the tree node from its TTreeNodes 
container. Delete calls Free to destroy the object instance if the Deleting 
property is not set to <b>True</b>. No actions are performed when Deleting is 
<b>True</b>.
</p>
</descr>
<seealso>
<link id="TTreeNodes.Delete"/>
</seealso>
</element>

<element name="TTreeNode.DeleteChildren">
<short>
Removes all child nodes and descendants in the tree structure.
</short>
<descr>
<p>
<var>DeleteChildren</var> clears the node cache in the TTreeNodes owner prior 
to removing any child nodes in Items. It calls the Collapse method with 
recursion to set the child nodes and their descendent nodes to the collapsed 
state. The HasChildren property is set to <b>False</b> to update the States 
flag values in the node and cause the TreeView control to be redrawn.
</p>
</descr>
<seealso>
<link id="TTreeNode.States"/>
<link id="TTreeNode.Collapse"/>
<link id="TTreeNode.HasChildren"/>
</seealso>
</element>

<element name="TTreeNode.EndEdit">
<short>
Ends editing of the tree node in the associated tree view control.
</short>
<descr>
<p>
<var>EndEdit</var> calls the EndEditing method in TreeView control to apply 
the new value in the control Editor to the Text for the node. Cancel indicates 
whether the modified text value for the node should be discarded. When set to 
<b>False</b>, the modified value is stored in the Text property for the node. 
The OnEdited event handler in TreeView is signalled (when assigned) and 
Invalidate is called to cause the control to be redrawn.
</p>
<p>
No actions are performed in the method if TreeView has not been assigned for 
the node.
</p>
</descr>
<seealso>
<link id="TTreeNode.Text"/>
<link id="TCustomTreeView.EndEditing"/>
<link id="TCustomTreeView.OnEdited"/>
</seealso>
</element>
<element name="TTreeNode.EndEdit.Cancel">
<short>
<b>True</b> if the edited value for Text is discarded.
</short>
</element>

<element name="TTreeNode.Expand">
<short>
Expands the current tree node, and optionally all descendent nodes.
</short>
<descr>
<p>
<var>Expand</var> calls the private ExpandItem method to perform the 
expansion (and optional recursion) for child tree nodes. The private method 
calls the BeginUpdate and EndUpdate methods in the TreeView control to reduce 
the number of updates performed when the tree node(s) are expanded.
</p>
<p>
The Expanded property for the node (and its child nodes when Recurse is 
enabled) is set to <b>True</b> when a node is expanded on the TreeView 
control. Use the OnExpanding event handler in the TreeView control to 
examine an individual tree node before it is expanded.
</p>
</descr>
<seealso>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.Collapse"/>
<link id="TCustomTreeView.BeginUpdate"/>
<link id="TCustomTreeView.EndUpdate"/>
<link id="TCustomTreeView.OnExpanding"/>
</seealso>
<notes>
<note>
This topic mentions the private method because it has an impact on the calling 
routine. Not sure this deserves a version admonition though.
</note>
</notes>
</element>
<element name="TTreeNode.Expand.Recurse">
<short>
<b>True</b> to expand all descendent nodes for the node.
</short>
</element>

<element name="TTreeNode.ExpandParents">
<short>
Expands all tree nodes which are an ancestor of the current node.
</short>
<descr>
<p>
<var>ExpandParents</var> visits each tree node which is used as the 
<var>Parent</var> for a node, and sets its Expanded property to <b>True</b>.
</p>
<p>
ExpandParents is called from methods like MakeVisible and EnsureNodeIsVisible in TCustomTreeView.
</p>
</descr>
<seealso>
<link id="TTreeNode.Parent"/>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.MakeVisible"/>
<link id="TCustomTreeView.EnsureNodeIsVisible"/>
</seealso>
</element>

<element name="TTreeNode.FreeAllNodeData">
<short>Frees the Pointer in Data, including any child nodes in Items.</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNode.MakeVisible">
<short>
Forces the tree node to become visible.
</short>
<descr>
<p>
It calls the EnsureNodeIsVisible method in the associated TreeView (when 
assigned). Otherwise, it calls the ExpandParents method.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.MoveTo">
<short>
Relocates a node to the specified <var>Destination</var> node using the 
specified mode of attachment.
</short>
<descr>
<p>
<var>MoveTo</var> - method for relocating a node to the specified 
<var>Destination</var> using the specified mode of attachment.
</p>
<p>
Definition of the modes of attachment:
</p>
<dl>
<dt>naAdd</dt>
<dd>Add as last sibling of Destination</dd>
<dt>naAddFirst</dt>
<dd>Add as first sibling of Destination</dd>
<dt>naAddChild</dt>
<dd>Add as last child of Destination</dd>
<dt>naAddChildFirst</dt>
<dd>Add as first child of Destination</dd>
<dt>naInsert</dt>
<dd>Insert in front of Destination</dd>
<dt>naInsertBehind</dt>
<dd>Insert behind Destination</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TTreeNode.MoveTo.Destination">
<short>
Tree node which provides the location where the current is moved using the specified attachment mode.
</short>
</element>
<element name="TTreeNode.MoveTo.Mode">
<short>
Specifies where the node is stored relative to the destination node.
</short>
</element>

<element name="TTreeNode.MultiSelectGroup">
<short>
Adds the group of nodes between a selected node and the current node to a 
multi-selection range.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNode.Update">
<short>
Redraws the associated TreeView control if an update is not already in 
progress.
</short>
<descr>
<p>
<var>Update</var> calls the Invalidate method in the TreeView control for the 
node and causes the tree view control (and the node) to be redrawn. No actions 
are performed in the method if TreeView has not been assigned, or if the 
TTreeNodes container is already performing an update.
</p>
<p>
Update is called is called when a new value has been assigned to the Text, 
Height, or NodeEffect properties in the node.
</p>
</descr>
<seealso>
<link id="TTreeNode.Text"/>
<link id="TTreeNode.Height"/>
<link id="TTreeNode.NodeEffect"/>
<link id="TTreeNode.TreeView"/>
<link id="TTreeNodes.BeginUpdate"/>
<link id="TTreeNodes.EndUpdate"/>
<link id="TCustomTreeView.Invalidate"/>
<link id="TCustomTreeView.OnNodeChanged"/>
</seealso>
</element>

<element name="TTreeNode.WriteDebugReport">
<short>
<var>WriteDebugReport</var> - for debugging. If <var>Recurse</var> is 
<b>True</b>, report for all descendants as well.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNode.WriteDebugReport.Prefix">
<short>
Value prepended to the debugger output.
</short>
</element>
<element name="TTreeNode.WriteDebugReport.Recurse">
<short>
<b>True</b> to recurse into child nodes and include their values in the 
debugger output.
</short>
</element>

<element name="TTreeNode.AbsoluteIndex">
<short>
The absolute ordinal position for the node, regardless of its level or 
ancestry, in the tree node hierarchy. 
</short>
<descr>
<p>
<var>AbsoluteIndex</var> is a read-only <var>Integer</var> property which 
contains the absolute ordinal position for the tree node, regardless of its 
parent or level, in the hierarchy of tree nodes. For example:
</p>
<ul>
<li>
The first node in the tree hierarchy has the absolute index position 0.
</li>
<li>
The first child nodes (in Items) has an index position which is 1 larger than 
the AbsoluteIndex for its Parent node.
</li>
<li>
The next sibling node has an absolute index position which is incremented by 1 
plus the SubTreeCount value from its sibling.
</li>
</ul>
</descr>
<seealso>
<link id="TTreeNode.Parent"/>
<link id="TTreeNode.SubtreeCount"/>
<link id="TTreeNode.Level"/>
<link id="TTreeNode.Index"/>
<link id="TTreeNode.Items"/>
<link id="TTreeNode.GetNextSibling"/>
<link id="TTreeNode.GetPrevSibling"/>
<link id="TTreeNode.GetFirstChild"/>
</seealso>
</element>

<element name="TTreeNode.Count">
<short>
The number of nodes which have the current node as the Parent node.
</short>
<descr>
<p>
Contains the same value as the Count property in Items.
</p>
</descr>
<seealso>
<link id="TTreeNode.Items"/>
<link id="TTreeNode.Parent"/>
</seealso>
</element>

<element name="TTreeNode.Cut">
<short>
Indicates if the tree node has been cut from the tree structure.
</short>
<descr>
<p>
Cut is a Boolean property which indicates if the tree node has been cut from 
the tree structure. The property value is <b>True</b> when nsCut has been 
included in the States property for the tree node. Changing the value for the 
property causes the States property to be updated to include or exclude the 
node state value.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Data">
<short>
Pointer to the custom data for the node.
</short>
<descr>
<p>
Data is a Pointer property with a pointer to the custom data for the node. 
Data can contain any arbitrary data type, and must be cast to the correct 
type when used in an application.
</p>
<p>
Setting a new value for the property causes the associated TreeView (when 
assigned) to sort the parent node or all of the TreeNodes when needed and 
allowed. It is needed when the tree view uses SortType stData or stBoth. It 
is allowed if the node is not being deleted and is bound to other tree nodes 
(States).
</p>
<p>
The Changed method is called with the ncDataChanged node change reason.
</p>
</descr>
<example file="comctrls/ttreenode_data.pas"/>
</element>

<element name="TTreeNode.Deleting">
<short>
<b>True</b> if the node has been marked for deletion in the associated tree 
view control.
</short>
<descr>
<p>
<var>Deleting</var> is a read-only <var>Boolean</var> property which 
indicates is the node is marked for deletion. Its value is <b>True</b> when 
<var>ndDeleting</var> has been included in the <var>States</var> property for 
the node. nsDeleting is added to States in the <var>Destroy</var> method, and 
indicates that the node will be freed. The <var>Delete</var> method in the 
<var>TreeView</var> control is called to signal an <var>OnDeletion</var> 
event (when assigned) before references for the node are removed and the 
<var>TreeNodes</var> are refreshed. It prevents the Delete method from being 
executed more than once.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.DropTarget">
<short>
<b>True</b> if the node is a drop target in a drag and drop operation.
</short>
<descr>
<p>
<var>DropTarget</var> is a <var>Boolean</var> property which indicates if the 
node is a drop target in a drag and drop operation. The value for the 
property is <b>True</b> when <var>nsDropHilited</var> has been included in 
the <var>States</var> property.
</p>
<p>
Setting a new value for the property causes States to be updated to reflect 
the new value. When set to <b>True</b>, nsDropHilited is included in State 
and the internal last drop target is updated in the associated 
<var>TreeView</var> control. When set to <b>False</b>, nsDropHilited is 
excluded from States and the last drop target is set to <b>Nil</b> in the 
TreeView control.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Expanded">
<short>
<b>True</b> if the node has been expanded, <b>False</b> when collapsed.
</short>
<descr>
<p>
<var>Expanded</var> is a <var>Boolean</var> property which indicates if the 
node has been expanded in the associated <var>TreeView</var> control. The 
property value is <b>True</b> when <var>nsExpanded</var> has been included in 
the <var>States</var> property.
</p>
<p>
The <var>Expand</var> method is called when the new value for the property is 
<b>True</b>. Otherwise, the <var>Collapse</var> method is called. States is 
updated in the Expand and Collapse methods.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Focused">
<short>
<b>True</b> if the node has focus in the TreeView control.
</short>
<descr>
<p>
<var>Focused</var> is a <var>Boolean</var> property which indicates if the 
node has focus in the associated <var>TreeView</var> control. The value for 
the property is <b>True</b> when <var>nsFocused</var> has been included in 
the <var>States</var> property.
</p>
<p>
Setting a new value for the property causes the values in States to be 
updated. When set to <b>True</b>, nsFocused is included in States. When set 
to <b>False</b>, nsFocused is excluded from States. The <var>Update</var> 
method is called to redraw the TreeView control.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Handle">
<short>
Handle for the tree view control which owns the TreeNodes container and the 
tree node.
</short>
<descr>
<p>
<var>Handle</var> is a read-only <var>TLCLHandle</var> property with the 
handle assigned for the associated <var>TreeView</var> control. The property 
value is <b>0</b> (<b>zero</b>) if a handle has not been assigned for the 
TreeView control.
</p>
</descr>
<version>
Modified in LCL version 4.0 to use the TLCLHandle type instead of the 
deprecated THandle type.
</version>
<seealso>
<link id="#lcl.lcltype.TLCLHandle">TLCLHandle</link>
</seealso>
</element>

<element name="TTreeNode.HasChildren">
<short>
Indicates whether the tree node has child nodes.
</short>
<descr>
<p>
HasChildren is a Boolean property which indicates whether the tree node has 
child nodes.
</p>
<p>
The property value is <b>True</b> when States includes the value 
nsHasChildren. Items is not used to determine the property value.
</p>
<p>
Setting a new value for the property causes States to be updated to include 
or exclude nsHasChildren to reflect the new value. When the value is 
<b>False</b>, child nodes in the Items property are freed.
</p>
<p>
The Update method is called to refresh the associated TreeView control (when 
assigned).
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Height">
<short>
The height for the node including its text, images, and indicators.
</short>
<descr>
<p>
<var>Height</var> is an <var>Integer</var> property with the height for the 
node including its text, images, and indicators.
</p>
<p>
Height uses a default value if it contains <b>0</b> (<b>zero</b>) or a 
negative integer value. If an associated <var>TreeView</var> control has been 
assigned, the value in its <var>DefaultItemHeight</var> property is used as 
the property value. If TreeView in unassigned, the value in the 
<var>DefaultTreeNodeHeight</var> constant is used.
</p>
<p>
Setting a new value for the property causes the <var>States</var> property in 
the associated TreeView control to be updated (when assigned). The values 
<var>tvsScrollbarChanged</var> and <var>tvsTopsNeedsUpdate</var> are included 
in the control States. The <var>Update</var> method is called to redraw the 
TreeView. The <var>Changed</var> method is called with the 
<var>ncHeightChanged</var> node change reason.
</p>
<p>
Height is used along with <var>Top</var> to calculate the return value for 
the <var>Bottom</var> method. It is also used in the implementation of 
methods like <var>DisplayRect</var> and <var>DisplayExpandSignRect</var>.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.ImageIndex">
<short>
Ordinal position for the image displayed for the node, or -1 when no image is 
assigned.
</short>
<descr>
<p>
<var>ImageIndex</var> is an <var>Integer</var> property with the ordinal 
position for the image displayed for the node. It refers to a bitmap stored 
in the <var>Images</var> property of the associated <var>TreeView</var> 
control. The default value for the property is <b>-1</b>, and indicates that 
an image has not been assigned.
</p>
<p>
Setting a new value for the property causes the <var>Update</var> method to 
be called to redraw the associated tree view control. The <var>Changed</var> 
method is called with the <var>ncImageIndex</var> node change reason.
</p>
</descr>
<seealso>
<link id="TTreeNode.StateIndex"/>
<link id="TTreeNode.OverlayIndex"/>
<link id="TTreeNode.SelectedIndex"/>
</seealso>
</element>

<element name="TTreeNode.Index">
<short>
Ordinal position for the node in its parent node.
</short>
<descr>
<p>
<var>Index</var> is an <var>Integer</var> property which contains the ordinal 
position for the class instance in its Parent node. It also indicates the 
number of previous siblings (nodes on same level in the Parent node). Index 
contains -1 if the node does not have an assigned Parent node.
</p>
<p>
Changing the value for the property causes the tree node to be relocated in 
the Parent node, or the Owner for top-level nodes. An ETreeViewError exception 
is raised if the Index for a top-level node is changed and Owner has not been 
assigned. The MoveTo method is called to relocate the tree node to the new 
position in the property value.
</p>
<p>
Use AbsoluteIndex to get the position for a node including all of the 
preceding sibling nodes and their children.
</p>
</descr>
<errors>
<dl>
<dt>ETreeViewError</dt>
<dd>
Raised if the Index for a top-level node is changed and Owner has not been 
assigned.
</dd>
</dl>
</errors>
<seealso>
<link id="TTreeNode.Parent"/>
<link id="TTreeNode.Owner"/>
<link id="TTreeNode.MoveTo"/>
<link id="TTreeNode.Level"/>
<link id="TTreeNode.AbsoluteIndex"/>
<link id="TTreeNodes.TopLvlItems"/>
<link id="ETreeViewError"/>
</seealso>
</element>

<element name="TTreeNode.IsFullHeightVisible">
<short>
<b>True</b> if the entire node is visible in the display area for the 
associated TreeView control.
</short>
<descr>
<p>
<var>IsFullHeightVisible</var> is a read-only <var>Boolean</var> property 
which indicates if the entire tree node is visible in the display area for 
the associated <var>TreeView</var> control.
</p>
<p>
The <var>IsNodeHeightFullVisible</var> method in TreeView is called to get 
the value for the property. If the TreeView control has not been assigned, 
the <var>ParentsExpandedVisible</var> method is used to get the return value.
</p>
<p>
IsFullHeightVisible is used in the SelectionVisible method in TCustomTreeView 
when MultiSelect has not been enabled for the tree view control.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.IsVisible">
<short>
<b>True</b> if the node is visible.
</short>
<descr>
<p>
<var>IsVisible</var> is a read-only <var>Boolean</var> property which 
indicates if the tree node is visible in the associated <var>TreeView</var> 
control. IsVisible is <b>True</b> if the node can be seen in the display area 
for the control. The property value is <b>False</b> when an ancestor node is 
collapsed (not <var>Expanded</var>).
</p>
<p>
The <var>IsNodeVisible</var> method in TreeView is called to get the value 
for the property. If TreeView has not been assigned, the 
<var>ParentsExpandedVisible</var> method is called to get the property value.
</p>
<p>
IsNodeVisible is used in the <var>Repaint</var> method in 
<var>TTreeNodes</var>, and in the <var>SelectionVisible</var> method in 
<var>TCustomTreeView</var>.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Items">
<short>
Provides indexed access to the child nodes for the current node.
</short>
<descr>
<p>
<var>Items</var> is an indexed <var>TTreeNode</var> property which provides 
access to the child nodes for the current node by their ordinal position. 
<var>ItemIndex</var> contains the ordinal position for the tree node 
instance, and must be in the range <b>0..<var>Items.Count</var>-1</b>. An 
<var>ETreeNodeError</var> exception is raised if ItemIndex is not in the 
range needed for the Items property.
</p>
<p>
Items is the default property for the class instance.
</p>
<p>
Storing a new value to the indexed property causes the <var>Assign</var> 
method in the <var>TTreeNode</var> instance to be called to copy the 
properties values.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNode.Items.ItemIndex">
<short>Ordinal position for a child node.</short>
</element>

<element name="TTreeNode.Level">
<short>The number of ancestor nodes for the current tree node.</short>
<descr>
<p>
Level is a read-only Integer property which contains the level in the tree 
structure for the node. It indicates the number of ancestor nodes in the 
structure, and implies the indentation for the node in the tree view control.
</p>
<p>
The root of the tree is level 0. The value for the property is determined by 
counting the number of Parent nodes for each TTreeNode instance in the tree 
starting at the current node.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.MultiSelected">
<short>
Indicates whether the node is one of several nodes selected simultaneously 
(e.g. using the Shift or Ctrl key while selecting on a tree view control).
</short>
<descr/>
<seealso>
<link id="TTreeNode.Selected"/>
<link id="TTreeNodes.MultiSelect"/>
<link id="TTreeNodes.ClearMultiSelection"/>
<link id="TTreeNodes.SelectionCount"/>
<link id="TCustomTreeView.MultiSelect"/>
<link id="TCustomTreeView.Select"/>
<link id="TCustomTreeView.Selections"/>
<link id="TCustomTreeView.MultiSelectStyle"/>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.OnSelectionChanged"/>
</seealso>
</element>

<element name="TTreeNode.NodeEffect">
<short>
Graphic drawing effect applied to the node in the associated TreeView control.
</short>
<descr>
<p>
<var>NodeEffect</var> is a <var>TGraphicsDrawEffect</var> property with the 
drawing effect applied to the tree node when it is drawn on the associated 
TreeView control. NodeEffect controls the drawing style applied to both the 
text and the image for a given node.
</p>
<p>
The default value is gdeNormal as assigned in the constructor for the tree 
node instance. This causes the tree node to be drawn with no effect applied to 
the node. See <link id="#lazutils.graphtype.TGraphicsDrawEffect">
TGraphicsDrawEffect</link> for the other values allowed in the property, and 
their meanings.
</p>
<p>
Changing the value for the property causes the Update method to be called 
to redraw the TreeView control for the node. The Changed method is called to 
notify the TreeView control of the reason that the node was changed.
</p>
<p>
Use the ImageIndex and OverlayIndex properties to specify the primary and 
overlay images drawn for the tree node. The visual drawing effect is also 
updated when values are changed in the Cut, Expanded, Focused, Selected, or 
Enabled properties.
</p>
</descr>
<seealso>
<link id="TTreeNode.Update"/>
<link id="TTreeNode.ImageIndex"/>
<link id="TTreeNode.OverlayIndex"/>
<link id="TTreeNode.Cut"/>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.Focused"/>
<link id="TTreeNode.Selected"/>
<link id="TTreeNode.Enabled"/>
<link id="TCustomTreeView.NodeChanged"/>
<link id="TCustomTreeView.Invalidate"/>
<link id="TCustomTreeView.Paint"/>
<link id="#lazutils.graphtype.TGraphicsDrawEffect">TGraphicsDrawEffect</link>
</seealso>
</element>

<element name="TTreeNode.OverlayIndex">
<short>
Ordinal position for the overlay image used for the node.
</short>
<descr>
<p>
This icon is drawn above the normal icon. If Images.HasOverlays then it is 
fetched from Images via Images.Overlay(Node.Overlay) for Delphi compatibility.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Owner">
<short>
Owner of the tree node instance.
</short>
<descr>
<p>
<var>Owner</var> is a read-only <var>TTreeNodes</var> property with the 
container that owns the current TTreeNode instance. The property value is 
assigned in the Create method to the argument value passed to the constructor.
</p>
<p>
Owner provides access to the properties and methods in the TTreeNodes 
instance, including the tree view control which owns the container.
</p>
</descr>
<seealso>
<link id="TTreeNode.Create"/>
<link id="TTreeNodes.Owner"/>
<link id="TCustomTreeView.Items"/>
</seealso>
</element>

<element name="TTreeNode.Parent">
<short>
Parent node for the current tree node.
</short>
<descr>
<p>
Parent is a read-only TTreeNode property which contains the parent node for 
the current tree node.
</p>
<p>
Use Items to access and maintain the child nodes for the current tree node.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Selected">
<short>
<b>True</b> if the current node is selected in the tree view control.
</short>
<descr>
<p>
<var>Selected</var> is a <var>Boolean</var> property which indicates the 
current node is selected in the associated <var>TreeView</var> control. The 
property value is <b>True</b> when <var>nsSelected</var> or 
<var>nsMultiSelected</var> has been included in the <var>States</var> 
property. nsSelected indicates that the node is assigned to the 
<var>TCustomTreeView.Selected</var> property. nsMultiSelected indicates that 
the node is stored in the <var>TCustomTreeView.Selections</var> property 
when it has <var>MultiSelect</var> enabled.
</p>
<p>
Setting a new value for the property causes the values in States to be 
updated. Similarly, the TreeView control is updated to used the node in the 
Selected or Selections property.
</p>
<p>
The <var>Update</var> method is called to redraw the TreeView control.
</p>
</descr>
<seealso>
<link id="TTreeNode.Focused"/>
</seealso>
</element>

<element name="TTreeNode.SelectedIndex">
<short>
Ordinal position for the image displayed when the tree node is Selected.
</short>
<descr>
<p>
<var>SelectedIndex</var> is an <var>Integer</var> property with the ordinal 
position for the image displayed when the node is <var>Selected</var>. It 
refers to a bitmap in the <var>Images</var> property for the 
<var>TreeView</var> control, and allows an alternate image to be displayed 
for the node when it is selected. The default value is <b>-1</b> and 
indicates that an image index has not been assigned.
</p>
<p>
Changing the value in the property causes the <var>Update</var> method to be 
called to redraw the associated TreeView control. The <var>Changed</var> 
method is called with the <var>ncSelectedIndex</var> node change reason.
</p>
<p>
Use <var>ImageIndex</var> to set the ordinal position for the image displayed 
when the tree node is not selected.
</p>
</descr>
<seealso>
<link id="TTreeNode.ImageIndex"/>
</seealso>
</element>

<element name="TTreeNode.StateIndex">
<short>
Ordinal position for the image displayed to represent the state for the tree 
node.
</short>
<descr>
<p>
<var>StateIndex</var> refers to a position in StateImages for the associated 
TreeView control. It determines the image displayed to the left of the icon 
image specified in ImageIndex. The default value for the property is -1, and 
indicates that an image has not been assigned to represent the state for the 
tree node. 
</p>
<p>
Changing the value for the property causes the tree node and the associated 
TreeView control to be redrawn. The Changed method is called to notify the 
TreeView control of the reason for the update.
</p>
<p>
StateIndex can be used (along with StateImages in TreeView) to approximate the 
check box available for tree nodes in Delphi VCL but not in LCL.
</p>
<p>
Use StateImages in TTreeView / TCustomTreeView to specify the available state images.
</p>
<p>
Use ImageIndex to specify the icon displayed for the tree node.
</p>
<p>
Use OverlayIndex to specify an overlay displayed on the icon for the tree node.
</p>
<p>
Use SelectedIndex to specify the icon displayed when the tree node is Selected.
</p>
</descr>
<seealso>
<link id="TTreeNode.TreeView"/>
<link id="TTreeNode.ImageIndex"/>
<link id="TTreeNode.OverlayIndex"/>
<link id="TTreeNode.SelectedIndex"/>
<link id="TTreeNode.Update"/>
<link id="TTreeNode.Changed"/>
<link id="TTreeView.StateImages"/>
<link id="TTreeView.Images"/>
</seealso>
</element>

<element name="TTreeNode.States">
<short>
Contains active state flags for the tree node.
</short>
<descr>
<p>
<var>States</var> is a read-only <var>TNodeStates</var> properties which 
contains active state flags for the tree node. <var>TNodeState</var> 
enumeration values are included in or excluded from the set type as needed in 
methods for the tree node, the <var>TreeNodes</var> container, and the 
associated <var>TreeView</var> control.
</p>
</descr>
<seealso>
<link id="TNodeState"/>
<link id="TTreeViewStates"/>
<link id="TTreeViewState"/>
</seealso>
</element>

<element name="TTreeNode.SubTreeCount">
<short>
The number of subtrees in the ancestor nodes for the class instance.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNode.Text">
<short>
Text displayed for the tree node.
</short>
<descr>
<p>
<var>Text</var> is a <var>String</var> property which contains the text 
displayed as the caption for the tree node.
</p>
<p>
Changing the value in the property causes the <var>TreeView</var> control to 
be updated. Its <var>States</var> property is modified to include the value 
<var>tvsMaxRightNeedsUpdate</var>, which causes the node sizes to be 
recalculated and the control to be re-displayed.
</p>
<p>
If the <var>SortType</var> for the TreeView is set to <var>stText</var> or 
<var>stBoth</var>, the Parent node is re-sorted. If the TreeView has not been 
assigned, the <var>TreeNodes</var> container is re-sorted.
</p>
<p>
The <var>Changed</var> method is called with the <var>ncTextChanged</var> 
node change reason.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Top">
<short>
Vertical coordinate for the top of the tree node.
</short>
<descr>
<p>
<var>Top</var> is a read-only <var>Integer</var> property with the vertical 
coordinate for the top of the tree node. Top contains an Y-axis offset where 
the tree node is located in the display area for the associated 
<var>TreeView</var> control.
</p>
<p>
The property value is calculated by calling the <var>UpdateAllTops</var> 
method in the TreeView control. The value contains the accumulated 
<var>Height</var> for all preceding <var>TreeNodes</var> starting at the 
first visible node in the control, and reflects their <var>Visible</var> and 
<var>Expanded</var> settings. The value is calculated in UpdateAllTops when 
<var>tvsTopsNeedsUpdate</var> has been included in the <var>States</var> 
property for the TreeView control.
</p>
<p>
Use <var>Height</var> to get height for the text, images, and indicators used 
in a tree node. Use <var>Bottom</var> to get the vertical coordinate for the 
bottom of the tree node.
</p>
</descr>
<seealso>
<link id="TTreeNode.Height"/>
<link id="TTreeNode.Bottom"/>
</seealso>
</element>

<element name="TTreeNode.TreeNodes">
<short>
The container where the tree node is stored, and the owner of the class 
instance.
</short>
<descr>
<p>
<var>TreeNodes</var> is a read-only <var>TTreeNodes</var> property with the 
container where the tree node is stored, and the owner of the 
<var>TTreeNode</var> instance. TreeNodes provides properties and methods 
needed to store, access, and maintain the tree nodes for the 
<var>TreeView</var> control. TreeNodes is a reference to the <var>Items</var> 
property found in TreeView.
</p>
<p>
The property value is <b>Nil</b> if <var>Owner</var> has not been assigned or 
is not derived from TTreeNodes.
</p>
</descr>
<seealso>
<link id="TTreeNode.TreeView"/>
<link id="TTreeNode.Owner"/>
<link id="TCustomTreeView.Items"/>
<link id="TTreeNodes"/>
</seealso>
</element>

<element name="TTreeNode.TreeView">
<short>
The tree view control where the node is displayed.
</short>
<descr>
<p>
<var>TreeView</var> is a read-only <var>TCustomTreeView</var> property with 
the tree view control where the tree node and other nodes in 
<var>TreeNodes</var> are displayed. It is a reference to the <var>Owner</var> 
assigned to the TreeNodes property.
</p>
<p>
TreeView provides access to the properties, methods, and events in the 
control. It is used to get the position for the node in the display area for 
the control. It is also notified when property values in the node are changed.
</p>
<p>
Use <var>TreeNodes</var> to access the <var>TTreeNode</var> instances stored 
in TreeView.
</p>
</descr>
<seealso>
<link id="TTreeNode.TreeNodes"/>
<link id="TCustomTreeView"/>
<link id="TTreeNodes"/>
<link id="TTreeNode"/>
</seealso>
</element>

<element name="TTreeNode.Visible">
<short>
<b>True</b> if the tree node is visible in the associated TreeView control.
</short>
<descr>
<p>
<var>Visible</var> is a <var>Boolean</var> property which indicates if the 
tree node is visible in the associated <var>TreeView</var> control. Its value 
is <b>True</b> when <var>nsVisible</var> has been included in the 
<var>States</var> property for the tree node. The default value for the 
property is <b>True</b>.
</p>
<p>
Setting a new value for the property causes the States property to be 
updated. <var>Selected</var> is set to <b>False</b> when the value in Visible 
is changed.
</p>
<p>
Values are included in the States property for the associated TreeView 
control (when assigned) to indicate that the size and layout for the tree 
nodes in the control have been changed. The <var>Update</var> method is 
called to refresh the control. The <var>Changed</var> method is called with 
the <var>ncVisibility</var> node change reason.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNode.Enabled">
<short>
Controls whether the tree node can be selected, and its visual appearance.
</short>
<descr>
<p>
<var>Enabled</var> is a <var>Boolean</var> property which indicates if the 
tree node can be selected in a tree control. The <var>Selected</var> and 
<var>MultiSelected</var> properties cannot be set to <b>True</b> when Enabled 
is <b>False</b>. A mouse click used to select the node is also ignored when 
Enabled is <b>False</b>. The default value for the property is <b>True</b>.
</p>
<p>
Read and write access to the property value are redirected to the 
<var>States</var> property. Enabled is <b>True</b> when <var>nsEnabled</var> 
is included in the States property. It is <b>False</b> if the value is 
omitted from States.
</p>
<p>
Changing the property value causes States to be updated to include or exclude 
nsEnabled as needed. Selected is set to <b>False</b> for any change to the 
property value, and the <var>Update</var> method is called to redrawn the 
Node on the tree view control. The <var>Changed</var> method is called to 
notify the tree view control of the reason for the update 
(<var>ncEnablement</var>).
</p>
<p>
Enabled also affects the visual display for the tree node. When set to 
<b>False</b>, the text for the node is drawn using either the 
<var>DisabledFontColor</var> (when assigned) or theme element details for the 
tree view control.
</p>
<remark>
A tree node can still be expanded (if it has child nodes) even when Enabled 
is <b>False</b>.
</remark>
</descr>
<seealso>
<link id="TTreeNode.Selected"/>
<link id="TTreeNode.MultiSelected"/>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.States"/>
<link id="TTreeNode.Update"/>
<link id="TTreeNode.Changed"/>
<link id="TTreeNode.TreeView"/>
<link id="TCustomTreeView.Selected"/>
<link id="TCustomTreeView.MouseDown"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.DisabledFontColor"/>
</seealso>
</element>

<element name="TTreeNodesEnumerator">
<short>Implements an enumerator for items in the TTreeNodes container.</short>
<descr>
<p>
Implements the Current property and MoveNext method used to navigate the tree 
nodes in the container. The nodes in the container are passed as an argument 
to the Create constructor.
</p>
</descr>
<seealso/>
</element>

<element name="TTreeNodesEnumerator.FNodes"/>
<element name="TTreeNodesEnumerator.FPosition"/>

<element name="TTreeNodesEnumerator.GetCurrent">
<short>Gets the value for the Current property.</short>
<descr/>
<seealso>
<link id="TTreeNodesEnumerator.Current"/>
</seealso>
</element>
<element name="TTreeNodesEnumerator.GetCurrent.Result">
<short>Value for the property.</short>
</element>

<element name="TTreeNodesEnumerator.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for the class instance, and calls the 
inherited method on entry. Create stores the value in <var>ANodes</var> in 
the <var>TTreeNodes</var> member. Creates set the default value for the 
internal position counter used in the class instance.
</p>
</descr>
<seealso>
<link id="TTreeNodes"/>
</seealso>
</element>
<element name="TTreeNodesEnumerator.Create.ANodes">
<short>Container with the tree nodes visited in the enumerator.</short>
</element>

<element name="TTreeNodesEnumerator.MoveNext">
<short>Indicates if another tree node is available to the enumerator.</short>
<descr>
<p>
<var>MoveNext</var> is a <var>Boolean</var> function which indicates if 
another tree node is available to the enumerator. MoveNext increments the 
internal position counter for the enumerator. The return value is <b>True</b> 
if the position counter is less than the number of entries in the internal 
<var>TTreeNodes</var> container (in the range 
<b>0..<var>TTreeNodes.Count</var>-1</b>).
</p>
<p>
Use <var>Current</var> to access the <var>TTreeNode</var> instance when 
MoveNext returns <b>True</b>.
</p>
</descr>
<seealso>
<link id="TTreeNodesEnumerator.Current"/>
<link id="TTreeNodes.Count"/>
<link id="TTreeNode"/>
</seealso>
</element>
<element name="TTreeNodesEnumerator.MoveNext.Result">
<short>
<b>True</b> when more tree nodes are available in the internal container.
</short>
</element>

<element name="TTreeNodesEnumerator.Current">
<short>Gets the current tree node instance for the enumerator.</short>
<descr>
<p>
Use <var>MoveNext</var> to navigate to the first or subsequent TTreeNode 
instance for the enumerator. Raises an exception if Current is accessed 
before the MoveNext method is called to retrieve the first value for the 
enumerator.
</p>
</descr>
<seealso/>
</element>

<element name="PNodeCache">
<short>
<var>PNodeCache</var> - pointer to <var>TNodeCache</var> type.
</short>
<descr/>
<seealso/>
</element>

<element name="TNodeCache">
<short>
<var>TNodeCache</var> - a cache (temporary storage record) for a 
<var>TTreeNode</var> and its index.
</short>
<descr/>
<seealso/>
</element>

<element name="TNodeCache.CacheNode">
<short>Member with the TTreeNode instance for the cache entry.</short>
<descr/>
<seealso/>
</element>

<element name="TNodeCache.CacheIndex">
<short>Ordinal position for the tree node in the cache storage.</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodes">
<short>
Implements a container for TTreeNode instances.
</short>
<descr>
<p>
<var>TTreeNodes</var> is a <var>TPersistent</var> descendant which implements 
a container used to store <var>TTreeNode</var> instances. TTreeNodes provides 
properties and methods used to create, store, access, and maintain nodes in a 
hierarchical tree structure.
</p>
<p>
The indexed <var>Item</var> property provides access to the nodes in the 
container by their ordinal position. An enumerator can also be used to access 
tree nodes in the container. Use TopLvlItems to access the tree nodes that 
are the top-level sibling nodes in the container.
</p>
<p>
TTreeNodes has methods that are used to create, store, locate, and maintain 
the tree nodes in the container; for example: Add, AddChild, Insert, Delete, 
Clear, FindNodeWithText, GetFirstNode, et. al.
</p>
<p>
Internally, it maintains a node cache for its tree node instances. A list of 
selected (or multi-selected) tree nodes is also maintained.
</p>
<p>
TTreeNodes is the type used for the <var>Items</var> property in 
<var>TCustomTreeView</var>. It is also used to implement the <var>Owner</var> 
and <var>TreeNodes</var> properties in <var>TTreeNode</var>.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Items"/>
<link id="TTreeNode"/>
<link id="TTreeNodesEnumerator"/>
</seealso>
</element>

<element name="TTreeNodes.FCount"/>
<element name="TTreeNodes.FSelection"/>
<element name="TTreeNodes.FStartMultiSelected"/>
<element name="TTreeNodes.FFirstMultiSelected"/>
<element name="TTreeNodes.FLastMultiSelected"/>
<element name="TTreeNodes.FKeepCollapsedNodes"/>
<element name="TTreeNodes.FNodeCache"/>
<element name="TTreeNodes.FOwner"/>
<element name="TTreeNodes.FTopLvlCapacity"/>
<element name="TTreeNodes.FTopLvlCount"/>
<element name="TTreeNodes.FTopLvlItems"/>
<element name="TTreeNodes.FUpdateCount"/>
<element name="TTreeNodes.FNewNodeToBeAdded"/>

<!-- private -->
<element name="TTreeNodes.ClearCache"/>
<element name="TTreeNodes.GetHandle">
<short>
Gets the handle for the TreeView component using the collection of nodes.
</short>
<descr/>
<version>
Modified in LCL version 4.0 to return the TLCLHandle type instead of the 
deprecated THandle type.
</version>
<seealso>
<link id="TCustomTreeView.Handle"/>
<link id="#lcl.lcltype.TLCLHandle">TLCLHandle</link>
</seealso>
</element>
<element name="TTreeNodes.GetHandle.Result">
<short>The handle for the TreeView, or 0 when TreeView is unassigned.</short>
</element>

<element name="TTreeNodes.GetNodeFromIndex"/>
<element name="TTreeNodes.GetNodeFromIndex.Result"/>
<element name="TTreeNodes.GetNodeFromIndex.Index"/>
<element name="TTreeNodes.GetSelectionCount"/>
<element name="TTreeNodes.GetSelectionCount.Result"/>
<element name="TTreeNodes.GetTopLvlItems"/>
<element name="TTreeNodes.GetTopLvlItems.Result"/>
<element name="TTreeNodes.GetTopLvlItems.Index"/>
<element name="TTreeNodes.GrowTopLvlItems"/>
<element name="TTreeNodes.IndexOfTopLvlItem"/>
<element name="TTreeNodes.IndexOfTopLvlItem.Result"/>
<element name="TTreeNodes.IndexOfTopLvlItem.Node"/>
<element name="TTreeNodes.MoveTopLvlNode"/>
<element name="TTreeNodes.MoveTopLvlNode.TopLvlFromIndex"/>
<element name="TTreeNodes.MoveTopLvlNode.TopLvlToIndex"/>
<element name="TTreeNodes.MoveTopLvlNode.Node"/>
<element name="TTreeNodes.ReadData"/>
<element name="TTreeNodes.ReadData.Stream"/>
<element name="TTreeNodes.ReadExpandedState"/>
<element name="TTreeNodes.ReadExpandedState.Stream"/>
<element name="TTreeNodes.Repaint"/>
<element name="TTreeNodes.Repaint.ANode"/>
<element name="TTreeNodes.ShrinkTopLvlItems"/>
<element name="TTreeNodes.SetTopLvlItems"/>
<element name="TTreeNodes.SetTopLvlItems.Index"/>
<element name="TTreeNodes.SetTopLvlItems.AValue"/>
<element name="TTreeNodes.WriteData"/>
<element name="TTreeNodes.WriteData.Stream"/>
<element name="TTreeNodes.WriteData.WriteDataPointer"/>
<element name="TTreeNodes.WriteExpandedState"/>
<element name="TTreeNodes.WriteExpandedState.Stream"/>

<element name="TTreeNodes.InternalAddObject">
<short>
Creates or updates a tree node with the specified text and a pointer to data.
</short>
<descr>
<p>
Expands the parent for the Node (when assigned). Updates the accessibility 
role, description, and value when enabled in the tree view which owns the 
container. Updates the scroll bars for the tree view control prior to exit.
</p>
<p>
Used in the implementation of methods like: AddNode, AddObject, Insert, 
AddChildObject, et. al.
</p>
</descr>
<errors>
Raises an ETreeNodeError exception if the Owner for the container (the tree 
view control) has not been assigned.
</errors>
<seealso/>
</element>
<element name="TTreeNodes.InternalAddObject.Result">
<short>TTreeNode instance created or updated in the method.</short>
</element>
<element name="TTreeNodes.InternalAddObject.Node">
<short>
An existing tree node to update, or <b>Nil</b> to create a new tree node.
</short>
</element>
<element name="TTreeNodes.InternalAddObject.S">
<short>Text for the tree node.</short>
</element>
<element name="TTreeNodes.InternalAddObject.Data">
<short>Pointer to the data for the tree node.</short>
</element>
<element name="TTreeNodes.InternalAddObject.AddMode">
<short>Position in the tree hierarchy where the node is stored.</short>
</element>

<element name="TTreeNodes.DefineProperties" link="#rtl.classes.TPersistent.DefineProperties">
<short/>
<descr/>
<seealso/>
</element>
<element name="TTreeNodes.DefineProperties.Filer">
<short>
TFiler instance used to read or write properties for the class instance 
during LCL streaming.
</short>
</element>

<element name="TTreeNodes.GetCount">
<short>Gets the value for the Count property.</short>
<descr/>
<seealso>
<link id="TTreeNodes.Count"/>
</seealso>
</element>
<element name="TTreeNodes.GetCount.Result">
<short>Value for the Count property.</short>
</element>

<element name="TTreeNodes.GetOwner">
<short>Gets the value for the Owner property.</short>
<descr/>
<seealso>
<link id="TTreeNodes.Owner"/>
</seealso>
</element>
<element name="TTreeNodes.GetOwner.Result">
<short>Owner of the collection.</short>
</element>

<element name="TTreeNodes.SetItem">
<short>
Assigns values from the specified tree node to a node in the container.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNodes.SetItem.Index">
<short>Ordinal position for the node updated in the container.</short>
</element>
<element name="TTreeNodes.SetItem.AValue">
<short>
Tree node with the values assigned to an existing node in the container.
</short>
</element>

<element name="TTreeNodes.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the constructor for the class instance, and calls the 
inherited method on entry. Create allocates resources for the internal 
selection list in the class instance. The value in <var>AnOwner</var> is 
stored in the <var>Owner</var> property.
</p>
</descr>
<seealso>
<link id="TTreeNodes.Owner"/>
<link id="#rtl.system.TObject.Create">TObject.Create</link>
</seealso>
</element>
<element name="TTreeNodes.Create.AnOwner">
<short>Owner for the class instance.</short>
</element>

<element name="TTreeNodes.Destroy">
<short>Destructor for the class instance.</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. 
Destroy calls <var>Clear</var> to remove <var>TTreeNode</var> instances 
stored in <var>Item</var> and values in the internal cache. The selection 
list for the class instance is also cleared, and its allocated resources are 
freed. Destroy calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="TTreeNodes.Clear"/>
<link id="TTreeNodes.Item"/>
<link id="TTreeNodes.BeginUpdate"/>
<link id="TTreeNodes.EndUpdate"/>
<link id="TTreeNode.Delete"/>
<link id="#rtl.classes.TPersistent.Destroy">TPersistent.Destroy</link>
</seealso>
</element>

<element name="TTreeNodes.Add">
<short>
Adds a new tree node as a sibling of the specified node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.AddObject"/>
</seealso>
</element>
<element name="TTreeNodes.Add.Result">
<short>Tree node created and added in the method.</short>
</element>
<element name="TTreeNodes.Add.SiblingNode">
<short>Tree node that is a sibling of the new node.</short>
</element>
<element name="TTreeNodes.Add.S">
<short>Text for the new tree node.</short>
</element>

<element name="TTreeNodes.AddChild">
<short>
Adds a tree node with the specified text as a child of the specified parent 
node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.AddChildObject"/>
</seealso>
</element>
<element name="TTreeNodes.AddChild.Result">
<short>TTreeNode instance created in the method.</short>
</element>
<element name="TTreeNodes.AddChild.ParentNode">
<short>Parent node for the new node.</short>
</element>
<element name="TTreeNodes.AddChild.S">
<short>Text for the new tree node.</short>
</element>

<element name="TTreeNodes.AddChildFirst">
<short>
Adds a node with specified text as the first child of the parent node and 
returns the new node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.InternalAddObject"/>
</seealso>
</element>
<element name="TTreeNodes.AddChildFirst.Result">
<short>
New child node created in the method.
</short>
</element>
<element name="TTreeNodes.AddChildFirst.ParentNode">
<short>
Node which is the parent for the new child node.
</short>
</element>
<element name="TTreeNodes.AddChildFirst.S">
<short>
Text for the child node created in the method.
</short>
</element>

<element name="TTreeNodes.AddChildObject">
<short>
Adds a child node with specified text and data to the parent node and returns 
the new node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.InternalAddObject"/>
</seealso>
</element>
<element name="TTreeNodes.AddChildObject.Result">
<short>
TTreeNode instance created in the method.
</short>
</element>
<element name="TTreeNodes.AddChildObject.ParentNode">
<short>
Node which is the parent for the new child node.
</short>
</element>
<element name="TTreeNodes.AddChildObject.S">
<short>
Text for the child node created in the method.
</short>
</element>
<element name="TTreeNodes.AddChildObject.Data">
<short>
Pointer to the data for the node created in the method.
</short>
</element>

<element name="TTreeNodes.AddChildObjectFirst">
<short>
Adds a node with the specified text and data as the first child node in the 
parent node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.InternalAddObject"/>
</seealso>
</element>
<element name="TTreeNodes.AddChildObjectFirst.Result">
<short>
TTreeNode instance created in the method.
</short>
</element>
<element name="TTreeNodes.AddChildObjectFirst.ParentNode">
<short>
Node which is the parent for the new child node.
</short>
</element>
<element name="TTreeNodes.AddChildObjectFirst.S">
<short>
Text for the tree node created in the method.
</short>
</element>
<element name="TTreeNodes.AddChildObjectFirst.Data">
<short>
Pointer to the data for the new child node.
</short>
</element>

<element name="TTreeNodes.AddFirst">
<short>
Adds a node with the specified text as the first node at the same level as the 
sibling node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.AddObjectFirst"/>
</seealso>
</element>
<element name="TTreeNodes.AddFirst.Result">
<short>
TTreeNode instance created in the method.
</short>
</element>
<element name="TTreeNodes.AddFirst.SiblingNode">
<short>
Node which is a sibling for the new node. Provides the Level for the new 
node.
</short>
</element>
<element name="TTreeNodes.AddFirst.S">
<short>
Text for the new node created in the method.
</short>
</element>

<element name="TTreeNodes.AddNode">
<short>
Adds or inserts a tree node as a sibling to a specified relative node.
</short>
<descr>
<p>
Method determines where the tree node is stored in relation to the Relative 
node, and may be overridden (changed to naAdd or naInsert) if a parent or 
sibling node cannot be determined for the operation.
</p>
<p>
AddNode calls the InternalAddObject method to create the new node used as the 
return value.
</p>
</descr>
<errors>
Raises an ETreeNodeError exception if the Relative node has not been assigned 
and Method is not naAdd or naAddFirst.
</errors>
<seealso>
<link id="TTreeNodes.InternalAddObject"/>
<link id="ETreeNodeError"/>
</seealso>
</element>
<element name="TTreeNodes.AddNode.Result">
<short>Tree node with an updated Parent node after the operation.</short>
</element>
<element name="TTreeNodes.AddNode.Node">
<short>Node added or inserted to the node tree for the relative node.</short>
</element>
<element name="TTreeNodes.AddNode.Relative">
<short>Tree node where the node will become a sibling.</short>
</element>
<element name="TTreeNodes.AddNode.S">
<short>Accessibility value for the tree node.</short>
</element>
<element name="TTreeNodes.AddNode.Ptr">
<short>Pointer to the accessibility data for the tree node.</short>
</element>
<element name="TTreeNodes.AddNode.Method">
<short>Method used to store the node: add or insert.</short>
</element>

<element name="TTreeNodes.AddObject">
<short>
Adds a node with the specified text and data at the same level as the sibling 
node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.InternalAddObject"/>
</seealso>
</element>
<element name="TTreeNodes.AddObject.Result">
<short>
TTreeNode instance created in the method.
</short>
</element>
<element name="TTreeNodes.AddObject.SiblingNode">
<short>
Node which is a sibling for the newly created tree node. Provides access to 
the Parent node (when assigned).
</short>
</element>
<element name="TTreeNodes.AddObject.S">
<short>
Text for the new tree node.
</short>
</element>
<element name="TTreeNodes.AddObject.Data">
<short>
Pointer to the data for the new tree node.
</short>
</element>

<element name="TTreeNodes.AddObjectFirst">
<short>
Adds a node with the specified text and data as the first node at the same 
level as the sibling node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.InternalAddObject"/>
</seealso>
</element>
<element name="TTreeNodes.AddObjectFirst.Result">
<short>
TTreeNode instance created in the method.
</short>
</element>
<element name="TTreeNodes.AddObjectFirst.SiblingNode">
<short>
Node which is a sibling for the new tree node. Provides the Level for the new tree node.
</short>
</element>
<element name="TTreeNodes.AddObjectFirst.S">
<short>
Text for the new tree node.
</short>
</element>
<element name="TTreeNodes.AddObjectFirst.Data">
<short>
Pointer to the data for the new tree node.
</short>
</element>

<element name="TTreeNodes.FindNodeWithData">
<short>
Finds a node containing the specified data.
</short>
<descr>
<p>
Iterates over the nodes in the container to locate a TTreeNode instance which 
contains NodeData in its Data property. GetFirstNode provides the first node 
examined in the container. The process continues until NodeData is located, or 
GetNext does not return a TTreeNode instance.
</p>
<p>
The return value contains <b>Nil</b> if NodeData is not found in the tree 
nodes.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNodes.FindNodeWithData.Result">
<short>
TTreeNode instance which contains the specified data, or <b>Nil</b> when not 
found.
</short>
</element>
<element name="TTreeNodes.FindNodeWithData.NodeData">
<short>
Pointer to the node data to locate in tree nodes for the container.
</short>
</element>

<element name="TTreeNodes.FindNodeWithText">
<short>
Finds a tree node containing the specified text.
</short>
<descr>
<p>
<var>FindNodeWithText</var> is a <var>TTreeNode</var> function used to get 
the node in the list of tree nodes where the Text for the node matches the 
specified value.
</p>
<p>
<var>NodeText</var> is the text to locate in the TTreeNode instances.
</p>
<p>
FindNodeWithText starts the node search beginning with the top-level tree 
nodes. It visits the TTreeNode instances in the node list until a node with 
Text that matches the value in the NodeText argument is found.
</p>
<p>
FindNodeWithText uses the find options assigned to the tree view control to 
control the actions performed in the search. If the node options include 
foFindIgnoresCase, a case-insensitive comparison is used to compare the text 
in each node text to the value in the NodeText argument.
</p>
<p>
The return value is the TTreeNode instance with text that matches the 
specified value. It is set to <b>Nil</b> if a node is not found with the 
specified text value.
</p>
<p>
Use FindNodeWithTextPath to get a node with a given text path.
</p>
</descr>
<seealso>
<link id="TTreeNodes.GetFirstNode"/>
<link id="TTreeNodes.FindNodeWithTextPath"/>
<link id="TTreeNode.GetNext"/>
<link id="#rtl.sysutils.SameText">SysUtils.SameText</link>
</seealso>
</element>
<element name="TTreeNodes.FindNodeWithText.Result">
<short>
Tree node with the text value specified in NodeText, or <b>Nil</b> when a 
matching node is not found.
</short>
</element>
<element name="TTreeNodes.FindNodeWithText.NodeText">
<short>
Text value to locate in the list of tree nodes.
</short>
</element>

<element name="TTreeNodes.FindNodeWithTextPath">
<short>
Finds a node with the hierarchical path specified in TextPath.
</short>
<descr>
<p>
Returns the <var>TTreeNode</var> instance found which matches the hierarchy 
of tree nodes specified in <var>TextPath</var>, or <b>Nil</b> if a tree node 
is not found matching the specified value.
</p>
<p>
TextPath contains the delimited text values used to locate a tree node. The 
<var>PathDelimiter</var> in the <var>TCustomTreeView</var> instance in Owner 
is used as the delimiter between node identifiers in TextPath.
</p>
<p>
FindNodeWithTextPath always searches starting at the top-level or root for 
the tree. A leading path delimiter in TextPath is assumed, and the following 
values in TextPath are considered to be equivalent:
</p>
<code>
/parentnode/childnode/grandchildnode
parentnode/childnode/grandchildnode
</code>
<p>
FindNodeWithTextPath calls the FindNode method in the current TTreeNode 
instance to locate the next tree node with the required identifier Text. The 
process is repeated until all of the identifiers have been located, or a node 
is not found for one of the identifiers in TextPath. The Expanded property in 
a tree node is set to <b>True</b> prior to calling GetNode.
</p>
<p>
The return value is the TTreeNode instance found at the specified path, or 
<b>Nil</b> if any one of the component value in the path is not found.
</p>
</descr>
<version>
Modified in LCL version 3.0 to expand a tree node (when enabled) if it is 
part of the text path found in a node search.
</version>
<seealso>
<link id="TTreeNodes.Owner"/>
<link id="TTreeNodes.FindTopLvlNode"/>
<link id="TTreeNode.Text"/>
<link id="TTreeNode.Parent"/>
<link id="TTreeNode.FindNode"/>
<link id="TCustomTreeView.PathDelimiter"/>
</seealso>
</element>
<element name="TTreeNodes.FindNodeWithTextPath.Result">
<short>
The tree node with a path matching the specified text, or <b>Nil</b> when not 
found.
</short>
</element>
<element name="TTreeNodes.FindNodeWithTextPath.TextPath">
<short>
Delimited text used to locate a tree node with the path and text values.
</short>
</element>

<element name="TTreeNodes.FindTopLvlNode">
<short>
Gets a top-level node containing the specified text.
</short>
<descr>
<p>
<var>FindTopLvlNode</var> is a method used to retrieve a tree node which is 
one of the child nodes at the top level of the tree. It calls GetFirstNode to 
find the first TTreeNode instance at the root level in the tree. The tree 
node and each of its sibling nodes are checked until a node with the text 
specified in <var>NodeText</var> is found.
</p>
<p>
When the <b>CaseInsensitiveFilenames</b> compiler define is enabled, the 
SameText routine in <file>SysUtils</file> is called to perform a 
case-insensitive comparison using the text in the node and the value in 
NodeText. Otherwise, case is significant in the comparisons.
</p>
<p>
The return value is the <var>TTreeNode</var> instance where the Text property 
matches the value in NodeText, or <b>Nil</b> when a node with a matching 
value is not found.
</p>
<p>
FindTopLvlNode is used in the implementation of the FindNodeWithTextPath 
method.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNodes.FindTopLvlNode.Result">
<short>Tree node with the specified text, or <b>Nil</b>.</short>
</element>
<element name="TTreeNodes.FindTopLvlNode.NodeText">
<short>Text to locate in the top-level siblings.</short>
</element>

<element name="TTreeNodes.GetEnumerator">
<short>
Gets the TTreeNodesEnumerator enumerator for the class instance.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNodes.GetEnumerator.Result">
<short>TTreeNodesEnumerator instance created in the method.</short>
</element>

<element name="TTreeNodes.GetFirstNode">
<short>
Gets the first tree node in the container.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.TopLvlItems"/>
<link id="TTreeNodes.TopLvlCount"/>
<link id="TTreeNode.Level"/>
</seealso>
</element>
<element name="TTreeNodes.GetFirstNode.Result">
<short>
TTreeNode instance which is stored as the first top-level tree node, or 
<b>Nil</b> when the container is empty.
</short>
</element>

<element name="TTreeNodes.GetFirstVisibleNode">
<short>
Gets the first top-level tree node with its Visible property set to 
<b>True</b>.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.TopLvlItems"/>
<link id="TTreeNodes.TopLvlCount"/>
<link id="TTreeNode.Level"/>
<link id="TTreeNode.Visible"/>
</seealso>
</element>
<element name="TTreeNodes.GetFirstVisibleNode.Result">
<short>
Visible TTreeNode instance found in the method, or <b>Nil</b>.
</short>
</element>

<element name="TTreeNodes.GetFirstVisibleEnabledNode">
<short>
Gets the first top-level sibling node that is visible and enabled.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.TopLvlItems"/>
<link id="TTreeNodes.TopLvlCount"/>
<link id="TTreeNode.Level"/>
<link id="TTreeNode.Visible"/>
<link id="TTreeNode.Enabled"/>
</seealso>
</element>
<element name="TTreeNodes.GetFirstVisibleEnabledNode.Result">
<short>
Visible TTreeNode instance found in the method, or <b>Nil</b>.
</short>
</element>

<element name="TTreeNodes.GetLastExpandedSubNode">
<short>
Gets the last visible, enabled, expanded tree node in the node hierarchy.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.GetLastVisibleEnabledNode"/>
<link id="TTreeNode.GetLastVisibleChild"/>
<link id="TTreeNode.Visible"/>
<link id="TTreeNode.Enabled"/>
<link id="TTreeNode.Expanded"/>
</seealso>
</element>
<element name="TTreeNodes.GetLastExpandedSubNode.Result">
<short>
TTreeNode instance found in the method, or <b>Nil</b>.
</short>
</element>

<element name="TTreeNodes.GetLastNode">
<short>
Gets the last top-level tree node in the container.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.TopLvlItems"/>
<link id="TTreeNodes.TopLvlCount"/>
<link id="TTreeNode.Level"/>
</seealso>
</element>
<element name="TTreeNodes.GetLastNode.Result">
<short>
TTreeNode instance found in the method, or <b>Nil</b>.
</short>
</element>

<element name="TTreeNodes.GetLastSubNode">
<short>
Gets the last child or descendent node in the last top-level node.
</short>
<descr/>
<seealso>
<link id="TTreeNode.GetLastSubChild"/>
</seealso>
</element>
<element name="TTreeNodes.GetLastSubNode.Result">
<short>
TTreeNode instance found in the method, or <b>Nil</b>.
</short>
</element>

<element name="TTreeNodes.GetLastVisibleNode">
<short>
Gets the last top-level tree node with its Visible property set to 
<b>True</b>.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.TopLvlItems"/>
<link id="TTreeNodes.TopLvlCount"/>
<link id="TTreeNode.Visible"/>
</seealso>
</element>
<element name="TTreeNodes.GetLastVisibleNode.Result">
<short>
TTreeNode instance found in the method, or <b>Nil</b>.
</short>
</element>

<element name="TTreeNodes.GetLastVisibleEnabledNode">
<short>
Gets the last top-level sibling node that is visible and enabled.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.TopLvlItems"/>
<link id="TTreeNodes.TopLvlCount"/>
<link id="TTreeNode.Visible"/>
<link id="TTreeNode.Enabled"/>
</seealso>
</element>
<element name="TTreeNodes.GetLastVisibleEnabledNode.Result">
<short>
The tree node, or <b>Nil</b> when a top-level sibling is not visible and 
enabled.
</short>
</element>

<element name="TTreeNodes.GetSelections">
<short>
Gets the tree node at the specified position in the list of selected nodes.
</short>
<descr>
<p>
Raises an <var>ETreeNodeError</var> exception if <var>AIndex</var> is not a 
valid ordinal position in the internal selection list. AIndex must be in the 
range <b>0..<var>SelectionCount</var>-1</b>.
</p>
</descr>
<seealso>
<link id="TTreeNodes.SelectOnlyThis"/>
<link id="TTreeNodes.SelectionCount"/>
<link id="TTreeNodes.SelectionsChanged"/>
</seealso>
</element>
<element name="TTreeNodes.GetSelections.Result">
<short>Tree node at the specified position in the selection list.</short>
</element>
<element name="TTreeNodes.GetSelections.AIndex">
<short>Ordinal position in the selection list for the node.</short>
</element>

<element name="TTreeNodes.Insert">
<short>
Inserts a tree node with the specified text before the specified node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.InsertObject"/>
<link id="TTreeNode.Text"/>
<link id="TTreeNode.Level"/>
</seealso>
</element>
<element name="TTreeNodes.Insert.Result">
<short>
TTreeNode instance created and stored in the method.
</short>
</element>
<element name="TTreeNodes.Insert.NextNode">
<short>
Tree node that will become the next sibling for the inserted node.
</short>
</element>
<element name="TTreeNodes.Insert.S">
<short>
Text for the tree node created and stored in the method.
</short>
</element>

<element name="TTreeNodes.InsertBehind">
<short>
Inserts a new tree node with the specified text just after the specified node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.InsertObjectBehind"/>
<link id="TTreeNode.Text"/>
<link id="TTreeNode.Level"/>
</seealso>
</element>
<element name="TTreeNodes.InsertBehind.Result">
<short>
TTreeNode instance created and stored in the method.
</short>
</element>
<element name="TTreeNodes.InsertBehind.PrevNode">
<short>
Tree node that will become the previous sibling for the inserted node.
</short>
</element>
<element name="TTreeNodes.InsertBehind.S">
<short>
Text for the tree node created and stored in the method.
</short>
</element>

<element name="TTreeNodes.InsertObject">
<short>
Inserts a new tree node with the specified text and data just before the 
specified node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.InternalAddObject"/>
</seealso>
</element>
<element name="TTreeNodes.InsertObject.Result">
<short>
TTreeNode instance created and stored in the method.
</short>
</element>
<element name="TTreeNodes.InsertObject.NextNode">
<short>
Node which becomes the next sibling for the inserted node.
</short>
</element>
<element name="TTreeNodes.InsertObject.S">
<short>
Text for the tree node created in the method.
</short>
</element>
<element name="TTreeNodes.InsertObject.Data">
<short>
Pointer to the data for the tree node created in the method.
</short>
</element>

<element name="TTreeNodes.InsertObjectBehind">
<short>
Inserts a new tree node with the specified text and data just behind the 
specified node.
</short>
<descr/>
<seealso>
<link id="TTreeNodes.InternalAddObject"/>
<link id="TTreeNodes.AddObject"/>
<link id="TTreeNode.GetNextSibling"/>
</seealso>
</element>
<element name="TTreeNodes.InsertObjectBehind.Result">
<short>
TTreeNode instance created and stored in the method.
</short>
</element>
<element name="TTreeNodes.InsertObjectBehind.PrevNode">
<short>
Node which becomes the previous sibling for the inserted node.
</short>
</element>
<element name="TTreeNodes.InsertObjectBehind.S">
<short>
Text for the tree node created in the method.
</short>
</element>
<element name="TTreeNodes.InsertObjectBehind.Data">
<short>
Pointer to the data for the tree node created in the method.
</short>
</element>

<element name="TTreeNodes.IsMultiSelection">
<short>
<b>True</b> if the node is part of a multi-selection in the internal 
selection list.
</short>
<descr/>
<seealso>
<link id="TTreeNode.GetNextMultiSelected"/>
</seealso>
</element>
<element name="TTreeNodes.IsMultiSelection.Result">
<short>
<b>True</b> if the node is part of a multi-selection in the internal 
selection list.
</short>
</element>

<element name="TTreeNodes.Assign">
<short>
Implements object persistence for the tree node container. 
</short>
<descr>
<p>
<var>Assign</var> is an overridden method in <var>TTreeNodes</var> used to 
copy values from the persistent object in Source to the current class 
instance. Assign ensures that the cache for the container is cleared prior to 
loading values from Source.
</p>
<p>
If Source is derived from TTreeNodes, the nodes in the container are cleared 
and recreated from the nodes in Source. Node information handled in the method 
includes:
</p>
<ul>
<li>ImageIndex</li>
<li>SelectedIndex</li>
<li>OverlayIndex</li>
<li>StateIndex</li>
<li>Height</li>
<li>Data pointer (depending on LCL version)</li>
<li>Count</li>
<li>Expanded</li>
<li>Text</li>
</ul>
<p>
If Source is not derived from TTreeNodes, the inherited method is called to 
perform object persistence.
</p>
<p>
If Source is <b>Nil</b>, an EConvertError exception is raised.
</p>
</descr>
<seealso>
<link id="TTreeNodes.Clear"/>
<link id="TTreeNode"/>
<link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
</seealso>
</element>
<element name="TTreeNodes.Assign.Source">
<short>
Persistent object with the values copied in the method.
</short>
</element>

<element name="TTreeNodes.BeginUpdate">
<short>
Starts an update process for the tree nodes in the container.
</short>
<descr>
<p>
Increments the internal counter used to track active updates to the container.
</p>
</descr>
<seealso>
<link id="TTreeNodes.EndUpdate"/>
<link id="TTreeNodes.Clear"/>
<link id="TTreeNodes.FreeAllNodeData"/>
</seealso>
</element>

<element name="TTreeNodes.Clear">
<short>
Removes tree nodes in the container and its internal cache.
</short>
<descr>
<p>
<var>Clear</var> is a method used to remove all of the existing TTreeNode 
instances found in the container. In addition, the internal TNodeCache for the 
container is cleared.
</p>
<p>
Clear visits the tree nodes in the container and calls its Delete method to 
physically remove the node. This process is repeated until there a TTreeNode 
instance is not available from the GetLastNode method. The internal selection 
list for the container is cleared, as are child accessibility objects in the 
Owner (TCustomTreeView).
</p>
<p>
Clear encloses these operations with BeginUpdate and EndUpdate to prevent 
updates to the container while the method is active.
</p>
</descr>
<seealso>
<link id="TTreeNodes.BeginUpdate"/>
<link id="TTreeNodes.EndUpdate"/>
<link id="TTreeNodes.GetLastNode"/>
<link id="TTreeNode.Delete"/>
<link id="TNodeCache"/>
</seealso>
</element>

<element name="TTreeNodes.ClearMultiSelection">
<short>
Clears the nodes in a multi-selection and optionally the selected node on the 
tree view control.
</short>
<descr>
<p>
<var>ClearMultiSelection</var> is a method used to remove the internal node 
references used for a multi-selection range in the container. Each node in the 
range sets its MultiSelected property to <b>False</b> to remove it from the 
selection range. The GetNextMultiSelected method for the tree node is called 
to get the next node in the multi-selection. The process is repeated until 
there are no more nodes with their MultiSelected properties enabled.
</p>
<p>
The ClearSelected argument indicates whether the Selected node in the tree 
view control is cleared. When set to <b>True</b>, the Selected property in the 
Owner is set to <b>Nil</b>. The default value for the argument is <b>False</b>.
</p>
<p>
Updates to the multi-selection range are enclosed by calls to the 
LockSelectionChangeEvent and UnlockSelectionChangeEvent methods in the Owner 
control (when assigned). This prevents selection change events on the tree 
view control while the method is active.
</p>
</descr>
<seealso>
<link id="TTreeNode.MultiSelected"/>
<link id="TTreeNode.GetNextMultiSelected"/>
<link id="TCustomTreeView.Selected"/>
<link id="TCustomTreeView.LockSelectionChangeEvent"/>
<link id="TCustomTreeView.UnlockSelectionChangeEvent"/>
</seealso>
</element>
<element name="TTreeNodes.ClearMultiSelection.ClearSelected">
<short>
<b>True</b> to clear the Selected property on the tree view control.
</short>
</element>

<element name="TTreeNodes.ConsistencyCheck">
<short>
Makes sure all references for nodes in the container are consistent.
</short>
<descr>
<p>
<var>ConsistencyCheck</var> is a method used to ensure that references between 
nodes in the container are valid and consistent. ConsistencyCheck raises 
catchable debugger exceptions when error conditions are detected in the class 
instance, including:
</p>
<ul>
<li>TopLvlItems is empty.</li>
<li>TopLvlCount does not match the number of top-level items.</li>
<li>Invalid sibling nodes or node count.</li>
<li>Invalid child nodes or node count.</li>
<li>Invalid index value for a node.</li>
<li>A node is not found in the node cache.</li>
</ul>
</descr>
<seealso>
<link id="TTreeNode.ConsistencyCheck"/>
</seealso>
</element>

<element name="TTreeNodes.Delete">
<short>
Removes the specified tree node from the container.
</short>
<descr>
<p>
Delete calls the corresponding method in the tree node instance to physically 
remove the node from the container. If the internal update counter is 0 and a 
tree view control has been assigned in Owner, the tree view control is redrawn.
</p>
</descr>
<seealso>
<link id="TTreeNode.Delete"/>
<link id="TCustomTreeview.Invalidate"/>
</seealso>
</element>
<element name="TTreeNodes.Delete.Node">
<short>Tree node deleted in the method.</short>
</element>

<element name="TTreeNodes.EndUpdate">
<short>
Finishes an update process for the tree nodes in the container.
</short>
<descr>
<p>
Decrements the internal counter used to track active updates to the container.
</p>
</descr>
<seealso>
<link id="TTreeNodes.BeginUpdate"/>
<link id="TTreeNodes.Clear"/>
<link id="TTreeNodes.FreeAllNodeData"/>
</seealso>
</element>

<element name="TTreeNodes.IsUpdating">
<short>
Indicates whether BeginUpdate has been called at the start of an update to the 
node container.
</short>
<descr/>
<version>
Added in LCL version 4.0.
</version>
<seealso>
<link id="TTreeNodes.BeginUpdate"/>
<link id="TTreeNodes.EndUpdate"/>
</seealso>
</element>
<element name="TTreeNodes.IsUpdating.Result">
<short>
Returns <b>True</b> if the internal update counter for the container has a 
non-zero value. Returns <b>False</b> when BeginUpdate has not been called, or 
when EndUpdate has caused the internal update count to return to zero (0).
</short>
</element>

<element name="TTreeNodes.FreeAllNodeData">
<short>
Frees the pointer in the Data property for each of the nodes in the container.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodes.SelectionsChanged">
<short>
Adds or removes the specified tree node to / from the internal selections 
list when its Selected property is changed.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNodes.SelectionsChanged.ANode">
<short>Tree node added to or removed from the selections list.</short>
</element>
<element name="TTreeNodes.SelectionsChanged.AIsSelected">
<short>
<b>True</b> to add the node, <b>False</b> to remove the node in the selection 
list.
</short>
</element>

<element name="TTreeNodes.SelectOnlyThis">
<short>
Clears any existing multi-selections and selects the specified node.
</short>
<descr/>
</element>
<element name="TTreeNodes.SelectOnlyThis.Node">
<short>Node selected in the method.</short>
</element>

<element name="TTreeNodes.MultiSelect">
<short>
Adds nodes relative the specified node to the multi-selection list.
</short>
<descr>
<p>
<var>MultiSelect</var> is a method used add nodes to the internal selection 
list relative to the node specified in <var>Node</var>. MultiSelect uses 
values in the <var>MultiSelectStyle</var> property for the tree view control 
in <var>Owner</var> to determine the nodes added. Specifically:
</p>
<dl>
<dt>msSiblingOnly</dt>
<dd>
When present, only sibling nodes are selected for the specified node. When 
omitted, child nodes are added to the multi-selection.
</dd>
<dt>msVisibleOnly</dt>
<dd>
When present, only visible nodes are included in the multi-selection. When 
omitted, all nodes are eligible regardless of their visibility.
</dd>
</dl>
<p>
<var>ClearWholeSelection</var> indicates whether all existing nodes in the 
multi-selection are cleared before added new node(s) to the selection list. 
When set to <b>True</b>, the <var>ClearMultiSelection</var> method is called. 
Otherwise, the last node in the selection list is removed.
</p>
<p>
Nodes in the internal selection list are visited to set their 
<var>MultiSelected</var> property to <b>True</b>. Members used to track the 
first and last nodes in the multi-selection are updated prior to exit.
</p>
</descr>
<seealso>
<link id="TTreeNodes.ClearMultiSelection"/>
<link id="TTreeNodes.Owner"/>
<link id="TTreeNode.MultiSelected"/>
<link id="TCustomTreeView.MultiSelectStyle"/>
<link id="TMultiSelectStyle"/>
</seealso>
</element>
<element name="TTreeNodes.MultiSelect.Node">
<short>
Tree node with the child or sibling nodes added to the selection list.
</short>
</element>
<element name="TTreeNodes.MultiSelect.ClearWholeSelection">
<short>
<b>True</b> to remove all existing nodes in the selection list, <b>False</b> 
to remove the most recent node.
</short>
</element>

<element name="TTreeNodes.SortTopLevelNodes">
<short>
Sorts the top-level nodes using the specified sorting procedure.
</short>
</element>
<element name="TTreeNodes.SortTopLevelNodes.SortProc">
<short/>
</element>

<element name="TTreeNodes.WriteDebugReport">
<short>
<var>WriteDebugReport</var> - for debugging.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNodes.WriteDebugReport.Prefix">
<short/>
</element>
<element name="TTreeNodes.WriteDebugReport.AllNodes">
<short/>
</element>

<element name="TTreeNodes.Count">
<short>
Contains the number of tree nodes in the container.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodes.Item">
<short>
Provides indexed access to the TTreeNode instances in the container.
</short>
</element>
<element name="TTreeNodes.Item.Index">
<short>
Ordinal position for the TTreeNode instance in the property value.
</short>
</element>

<element name="TTreeNodes.KeepCollapsedNodes">
<short>
<var>KeepCollapsedNodes</var> - if <b>True</b>, preserves the nodes that have 
been collapsed.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodes.Owner">
<short>
The TCustomTreeView control that is the owner of the container.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodes.SelectionCount">
<short>Number of tree nodes included in the internal selection list.</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodes.TopLvlCount">
<short>
The number of tree nodes at the top level of the tree structure.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodes.TopLvlItems">
<short>
Provides indexed access to tree nodes at the top level of the tree structure.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNodes.TopLvlItems.Index">
<short>
Ordinal position for the TTreeNode instance in the property value.
</short>
</element>

<element name="TTreeViewState">
<short>
<var>TTreeViewState</var> - enumerated type containing the permissible values 
for state of a <var>TTreeView</var>.
</short>
<descr>
<p>
<var>TTreeViewState</var> is an enumerated type containing the permissible 
state values for <var>TCustomTreeView</var> and <var>TTreeView</var>.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeViewState.tvsScrollbarChanged">
<short>
Scroll bar visibility or position has been changed in the control.
</short>
</element>
<element name="TTreeViewState.tvsMaxRightNeedsUpdate">
<short>
The maximum width for expanded nodes needs to be recalculated.
</short>
</element>
<element name="TTreeViewState.tvsTopsNeedsUpdate">
<short>
The top coordinate for visible, expanded nodes needs to be recalculated.
</short>
</element>
<element name="TTreeViewState.tvsMaxLvlNeedsUpdate">
<short>The maximum level for all nodes needs to be recalculated.</short>
</element>
<element name="TTreeViewState.tvsTopItemNeedsUpdate">
<short>The first visible node on the control has changed.</short>
</element>
<element name="TTreeViewState.tvsBottomItemNeedsUpdate">
<short>The last visible node on the control has changed.</short>
</element>
<element name="TTreeViewState.tvsCanvasChanged">
<short>The canvas for the control has been changed.</short>
</element>
<element name="TTreeViewState.tvsDragged">
<short>A node has been dragged to a new location in the tree.</short>
</element>
<element name="TTreeViewState.tvsIsEditing">
<short>The BeginEditing method has been called for the control.</short>
</element>
<element name="TTreeViewState.tvsStateChanging">
<short>
Values in the States property for the control have been changed.
</short>
</element>
<element name="TTreeViewState.tvsManualNotify">
<short>A tree node has been expanded or collapsed using code.</short>
</element>
<element name="TTreeViewState.tvsUpdating">
<short>
This tree view state is deprecated, and has no functionality after r64855.
</short>
</element>
<element name="TTreeViewState.tvsPainting">
<short>The control has called it Paint method.</short>
</element>
<element name="TTreeViewState.tvoFocusedPainting">
<short>
Node is drawn with a selection rectangle and focus highlighting.
</short>
<notes>
<note>
Uses the wrong prefix (tvo instead of tvs). Deprecate and add 
tvsFocusedPainting. Requires changes in treeview.inc to include both state 
values until removed.
</note>
</notes>
</element>
<element name="TTreeViewState.tvsFocusedPainting">
<short>
Node is drawn with a selection rectangle and focus highlighting.
</short>
</element>
<element name="TTreeViewState.tvsMouseCapture">
<short>Not used in the current LCL implementation.</short>
</element>
<element name="TTreeViewState.tvsWaitForDragging">
<short>A Drag operation and its timer has been started.</short>
</element>
<element name="TTreeViewState.tvsDblClicked">
<short>A mouse double click event has been handled for the control.</short>
</element>
<element name="TTreeViewState.tvsTripleClicked">
<short>A mouse triple click event has been handled for the control.</short>
</element>
<element name="TTreeViewState.tvsQuadClicked">
<short>A mouse quadruple click event has been handled for the control.</short>
</element>
<element name="TTreeViewState.tvsSelectionChanged">
<short>The selected node(s) have been changed in the control.</short>
</element>

<element name="TTreeViewStates">
<short>
Set type used to store values from the TTreeViewState enumeration.
</short>
<descr>
<p>
TTreeViewStates is a set type used to store zero or more values from the 
TTreeViewState enumeration. TTreeViewStates is the type used for the States 
property in TCustomTreeView.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.States"/>
<link id="TTreeViewState"/>
</seealso>
</element>

<element name="TTreeViewOption">
<short>
<var>TTreeViewOption</var> - enumerated type containing the permissible 
values for Options in TreeViews.
</short>
<descr>
<p>
<var>TTreeViewOption</var> - enumerated type containing the permissible 
values for Options in TreeViews.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeViewOption.tvoAllowMultiselect">
<short>
Allows selection of several tree-items, e.g. using Ctrl+click and 
Shift+click. Has the same affect as setting the MultiSelect property to 
<b>True</b>.
</short>
</element>
<element name="TTreeViewOption.tvoAutoExpand">
<short>
Automatically expands child nodes for a tree-item when user clicks it, or the 
item is activated by code. Has the same affect as setting the AutoExpand 
property to <b>True</b>.
</short>
</element>
<element name="TTreeViewOption.tvoAutoInsertMark">
<short>
Allows painting a horizontal line below a tree-item under cursor when mouse 
moves. Good for drag-drop.
</short>
</element>
<element name="TTreeViewOption.tvoAutoItemHeight">
<short>Detect height of a tree-item based on current font and icons.</short>
</element>
<element name="TTreeViewOption.tvoHideSelection">
<short>
If a control looses focus, then don't paint selection for selected tree-item. 
Same as HideSelection property.
</short>
</element>
<element name="TTreeViewOption.tvoHotTrack">
<short>Additionally highlight/underline a tree-item when mouse is over it. 
Same as HotTrack property.
</short>
</element>
<element name="TTreeViewOption.tvoKeepCollapsedNodes">
<short>
When some items change, keep previously folded tree-items in folded state.
</short>
</element>
<element name="TTreeViewOption.tvoReadOnly">
<short>
Don't allow to change item captions by clicking on items with a delay. Same 
as ReadOnly property.
</short>
</element>
<element name="TTreeViewOption.tvoRightClickSelect">
<short>
Right-click also selects a tree-item. Otherwise it only calls PopupMenu. Same 
as RightClickSelect property.
</short>
</element>
<element name="TTreeViewOption.tvoRowSelect">
<short>
When a tree-item is selected, paint selection background with full width. 
Same as RowSelect property.
</short>
</element>
<element name="TTreeViewOption.tvoShowButtons">
<short>
Show expand/collapse (fold/unfold) icons at left side for nodes with 
sub-nodes. Same as ShowButtons property.
</short>
</element>
<element name="TTreeViewOption.tvoShowLines">
<short>
Show vertical lines at left side which paint tree structure for nested nodes. 
Same as ShowLines property.
</short>
</element>
<element name="TTreeViewOption.tvoShowRoot">
<short>
Show the root tree-item which is always present in code but may be hidden for 
user. Same as ShowRoot property.
</short>
</element>
<element name="TTreeViewOption.tvoShowSeparators">
<short>Show horizontal lines below all tree-items.</short>
</element>
<element name="TTreeViewOption.tvoToolTips">
<short>
Show tooltip (hint) for a tree-item when the item is too long to fit by width 
and mouse is over it. Same as ToolTips property.
</short>
</element>
<element name="TTreeViewOption.tvoNoDoubleClickExpand">
<short>
Prevents toggling the expanded state for the tree view item when it is double 
clicked.
</short>
</element>
<element name="TTreeViewOption.tvoThemedDraw">
<short>Tree view item is drawn using settings from theme services.</short>
</element>
<element name="TTreeViewOption.tvoEmptySpaceUnselect">
<short>
Indicates if empty space can be be drawn below unselected items in the tree 
view.
</short>
</element>

<element name="TTreeViewOptions">
<short>
Set type used to store values from the TTreeViewOption enumeration.
</short>
<descr>
<p>
<var>TTreeViewOptions</var> is a set type used to store zero (0) or more 
values from the TTreeViewOption enumeration. Values included in the set 
indicate that a feature or behavior is enabled for a tree view control.
</p>
<p>
TTreeViewOptions is the type used for the <var>TCustomTreeView.Options</var> 
property.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
</seealso>
</element>

<element name="DefaultTreeViewOptions">
<short>A set of TreeViewOptions which are set be default.</short>
<descr>
<p>
A set of default values used to set the options of a TreeView object when 
first placed on a form. This set consists of the following items:
</p>
<ul>
<li>tvoShowRoot</li>
<li>tvoShowLines</li>
<li>tvoShowButtons</li>
<li>tvoHideSelection</li>
<li>tvoToolTips</li>
<li>tvoKeepCollapsedNodes</li>
<li>tvoAutoItemHeight</li>
</ul>
<p>
For the meaning of these options, see the <var>TTreeViewOption</var> 
documentation.
</p>
</descr>
<seealso>
<link id="TTreeViewOption"/>
<link id="TTreeViewOptions"/>
<link id="TCustomTreeView.Options"/>
</seealso>
</element>

<element name="DefaultMultiSelectStyle">
<short>
Default value(s) used for the MultiSelectStyle property in TCustomTreeView.
</short>
<descr/>
<seealso>
<link id="TCustomTreeView.MultiSelectStyle"/>
</seealso>
</element>

<element name="DefaultTreeNodeHeight">
<short>Default value used as the height for a TTreeNode instance.</short>
<descr/>
<seealso>
<link id="TTreeNode.Height"/>
</seealso>
</element>

<element name="DefaultTreeNodeExpandSignSize">
<short>
Default size used for expand and collapse indicators in TCustomTreeView.
</short>
<descr>
<p>
DefaultTreeNodeExpandSignSize contains thew default value used in the 
TCustomTreeView.ExpandSignSize property. The value may be scaled at run-time 
in TCustomTreeView if the PPI (Pixels Per Inch) setting in the control 
differs from the value used at design-time.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.ExpandSignSize"/>
</seealso>
</element>

<element name="TTreeViewExpandSignType">
<short>
Represents symbols types used for expanded or collapsed tree nodes.
</short>
<descr>
<p>
<var>TTreeViewExpandSignType</var> is an enumerated type which specifies the 
symbol displayed in a Treeview to denote the expanded or collapsed state for 
a given tree node. TTreeViewExpandSignType is the type used to implement the 
<var>TCustomTreeView.ExpandSignType</var> property.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.ExpandSignType"/>
</seealso>
</element>
<element name="TTreeViewExpandSignType.tvestTheme">
<short>Uses the mechanism provided by Theme Services.</short>
</element>
<element name="TTreeViewExpandSignType.tvestPlusMinus">
<short>Uses a Plus or Minus sign.</short>
</element>
<element name="TTreeViewExpandSignType.tvestArrow">
<short>Uses an unfilled Arrow.</short>
</element>
<element name="TTreeViewExpandSignType.tvestArrowFill">
<short>Uses a filled Arrow.</short>
</element>
<element name="TTreeViewExpandSignType.tvestAngleBracket">
<short>Uses chevrons (angle brackets)('>' and 'v') symbols.</short>
</element>

<element name="TTreeViewInsertMarkType">
<short>Represents insert mark locations used in TCustomTreeView.</short>
<descr>
<p>
<var>TTreeViewInsertMarkType</var> is an enumerated type with values 
representing insert mark locations used for nodes in the 
<var>TCustomTreeView</var> control. TTreeViewInsertMarkType is the type used 
to implement the <var>InsertMarkType</var> property in TCustomTreeView.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.InsertMarkType"/>
</seealso>
</element>
<element name="TTreeViewInsertMarkType.tvimNone">
<short>No insert mark is used in a tree view.</short>
</element>
<element name="TTreeViewInsertMarkType.tvimAsFirstChild">
<short>
Uses an insert mark for the root or first child node in a tree view.
</short>
</element>
<element name="TTreeViewInsertMarkType.tvimAsNextSibling">
<short/>
</element>
<element name="TTreeViewInsertMarkType.tvimAsPrevSibling">
<short/>
</element>

<element name="TCustomTreeView">
<short>
The base class for <var>TTreeView</var>.
</short>
<descr>
<p>
<var>TCustomTreeView</var> is the base class for <var>TTreeView</var> which 
displays a collection of nodes using a hierarchical tree structure using a 
parent / sibling / child arrangement. Each tree node has descriptive text 
displayed for the item on the tree view control. A node may also include 
optional images which are displayed for the content or item state. The 
control can be used to select or navigate between tree nodes using either the 
mouse or the keyboard.
</p>
<p>
TCustomTreeView has properties and methods are used to perform actions for 
the control, like:
</p>
<ul>
<li>Load or Save the tree nodes on the control.</li>
<li>Add or Delete nodes on the control.</li>
<li>Sort tree nodes by their content.</li>
<li>Expand or collapse a tree node with child elements.</li>
<li>Format and display text or arbitrary data for the tree nodes.</li>
<li>Select or de-select one or more nodes in the tree hierarchy.</li>
<li>And much more...</li>
</ul>
<p>
Use the Items property to access and maintain the hierarchical list of tree 
nodes for the control. Use the OnCustomCreateItem event handler to create 
instances of a class derived from TTreeNode in the Items property.
</p>
<p>
Configure the visual aspects for the tree view control using properties 
including: BackgroundColor, Color, DefaultItemHeight ExpandSignColor, Images, 
Options, et. al.
</p>
<p>
An excellent tutorial for using TCustomTreeView / TTreeView, TTreeNodes, and 
TTreeNode can be found at:
</p>
<p>
<url href="https://wiki.freepascal.org/TTreeView">TTreeView Page on the 
Lazarus Wiki</url>
</p>
<p>
Please note that Accessibility support in TCustomTreeView might make this 
control slower if there are a very large number of items, for example: 
10,000+ items. If the performance impact is unacceptable, it is possible to 
turn accessibility off for tree view items by setting the 
<var>AccessibilityOn</var> property to <b>False</b>. The default value is 
<b>True</b>.
</p>
</descr>
<seealso>
<link id="TTreeView"/>
<link id="#lcl.controls.TCustomControl">TCustomControl</link>
</seealso>
</element>

<element name="TCustomTreeView.FAccessibilityOn"/>
<element name="TCustomTreeView.FBottomItem"/>
<element name="TCustomTreeView.FCallingChange"/>
<element name="TCustomTreeView.FEditingItem"/>
<element name="TCustomTreeView.FExpandSignType"/>
<element name="TCustomTreeView.FExpandSignSize"/>
<element name="TCustomTreeView.FExpandSignWidth"/>
<element name="TCustomTreeView.FThemeExpandSignSize"/>
<element name="TCustomTreeView.FDefItemHeight"/>
<element name="TCustomTreeView.FDefItemSpace"/>
<element name="TCustomTreeView.FDragImage"/>
<element name="TCustomTreeView.FDragNode"/>
<element name="TCustomTreeView.FIndent"/>
<element name="TCustomTreeView.FImageChangeLink"/>
<element name="TCustomTreeView.FImages"/>
<element name="TCustomTreeView.FImagesWidth"/>
<element name="TCustomTreeView.FInsertMarkNode"/>
<element name="TCustomTreeView.FInsertMarkType"/>
<element name="TCustomTreeView.FLastDropTarget"/>
<element name="TCustomTreeView.FLastHorzScrollInfo"/>
<element name="TCustomTreeView.FLastVertScrollInfo"/>
<element name="TCustomTreeView.FMaxLvl"/>
<element name="TCustomTreeView.FMaxRight"/>
<element name="TCustomTreeView.FMouseDownPos"/>
<element name="TCustomTreeView.FMultiSelectStyle"/>
<element name="TCustomTreeView.FHotTrackColor"/>
<element name="TCustomTreeView.FHotTrackedPrevNodeIdx"/>
<element name="TCustomTreeView.FDisabledFontColor"/>
<element name="TCustomTreeView.FOnAddition"/>
<element name="TCustomTreeView.FOnAdvancedCustomDraw"/>
<element name="TCustomTreeView.FOnAdvancedCustomDrawItem"/>
<element name="TCustomTreeView.FOnChange"/>
<element name="TCustomTreeView.FOnChanging"/>
<element name="TCustomTreeView.FOnCollapsed"/>
<element name="TCustomTreeView.FOnCollapsing"/>
<element name="TCustomTreeView.FOnCompare"/>
<element name="TCustomTreeView.FOnCreateNodeClass"/>
<element name="TCustomTreeView.FOnCustomCreateItem"/>
<element name="TCustomTreeView.FOnCustomDraw"/>
<element name="TCustomTreeView.FOnCustomDrawItem"/>
<element name="TCustomTreeView.FOnCustomDrawArrow"/>
<element name="TCustomTreeView.FOnDeletion"/>
<element name="TCustomTreeView.FOnEditing"/>
<element name="TCustomTreeView.FOnEditingEnd"/>
<element name="TCustomTreeView.FOnEdited"/>
<element name="TCustomTreeView.FOnExpanded"/>
<element name="TCustomTreeView.FOnExpanding"/>
<element name="TCustomTreeView.FOnGetImageIndex"/>
<element name="TCustomTreeView.FOnGetSelectedIndex"/>
<element name="TCustomTreeView.FOnHasChildren"/>
<element name="TCustomTreeView.FOnNodeChanged"/>
<element name="TCustomTreeView.FOnSelectionChanged"/>
<element name="TCustomTreeView.FOptions"/>
<element name="TCustomTreeView.FPathDelimiter"/>
<element name="TCustomTreeView.FRClickNode"/>
<element name="TCustomTreeView.FSaveItems"/>
<element name="TCustomTreeView.FScrollBars"/>
<element name="TCustomTreeView.FScrolledLeft"/>
<element name="TCustomTreeView.FScrolledTop"/>
<element name="TCustomTreeView.FSBHorzShowing"/>
<element name="TCustomTreeView.FSBVertShowing"/>
<element name="TCustomTreeView.FSelectedColor"/>
<element name="TCustomTreeView.FSelectedFontColor"/>
<element name="TCustomTreeView.FSelectedFontColorUsed"/>
<element name="TCustomTreeView.FSelectedNode"/>
<element name="TCustomTreeView.FSelectionChangeEventLock"/>
<element name="TCustomTreeView.FSeparatorColor"/>
<element name="TCustomTreeView.FSortType"/>
<element name="TCustomTreeView.FStateChangeLink"/>
<element name="TCustomTreeView.FStateImages"/>
<element name="TCustomTreeView.FStateImagesWidth"/>
<element name="TCustomTreeView.FStates"/>
<element name="TCustomTreeView.FTopItem"/>
<element name="TCustomTreeView.FTreeLineColor"/>
<element name="TCustomTreeView.FTreeLinePenStyle"/>
<element name="TCustomTreeView.FTreeLinePenPattern"/>
<element name="TCustomTreeView.FExpandSignColor"/>
<element name="TCustomTreeView.FTreeNodes"/>
<element name="TCustomTreeView.FHintWnd"/>
<element name="TCustomTreeView.FNodeUnderCursor"/>
<element name="TCustomTreeView.FPrevToolTips"/>
<element name="TCustomTreeView.FDragScrollMargin"/>
<element name="TCustomTreeView.FDragScrollTimer"/>

<element name="TCustomTreeView.DragScrollTimerTick">
<short>
Implements the OnTimer event handler for the internal Drag/Scroll timer.
</short>
<descr/>
<seealso>
<link id="TCustomTreeView.Create"/>
<link id="#lcl.extctrls.TTimer.OnTimer">TTimer.OnTimer</link>
</seealso>
</element>
<element name="TCustomTreeView.DragScrollTimerTick.Sender">
<short>Timer object for the event notification.</short>
</element>

<element name="TCustomTreeView.CanvasChanged">
<short>
Performs actions needed when the control Canvas has been changed.
</short>
<descr>
<p>
Updates the <var>States</var> property to include the value 
<var>tvsCanvasChanged</var>.
</p>
<remark>
CanvasChanged is not used in the current LCL implementation.
</remark>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.CanvasChanged.Sender">
<short/>
</element>

<element name="TCustomTreeView.GetAutoExpand">
<short>Gets the value for the AutoExpand property.</short>
<descr/>
<seealso>
<link id="TCustomTreeView.AutoExpand"/>
</seealso>
</element>
<element name="TCustomTreeView.GetAutoExpand.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomTreeView.GetBackgroundColor">
<short>Gets the value for the BackgroundColor property.</short>
<descr/>
<seealso>
<link id="TCustomTreeView.BackgroundColor"/>
</seealso>
</element>
<element name="TCustomTreeView.GetBackgroundColor.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomTreeView.GetBottomItem">
<short>Gets the value for the BottomItem property.</short>
</element>
<element name="TCustomTreeView.GetBottomItem.Result">
<short>Value for the property.</short>
</element>

<element name="TCustomTreeView.GetDropTarget">
<short>Gets the value for the DropTarget property.</short>
</element>
<element name="TCustomTreeView.GetDropTarget.Result">
<short>Value for the property.</short>
</element>

<!-- private -->
<element name="TCustomTreeView.GetExpandSignSize"/>
<element name="TCustomTreeView.GetExpandSignSize.Result"/>
<element name="TCustomTreeView.GetHideSelection"/>
<element name="TCustomTreeView.GetHideSelection.Result"/>
<element name="TCustomTreeView.GetHotTrack"/>
<element name="TCustomTreeView.GetHotTrack.Result"/>
<element name="TCustomTreeView.GetIndent"/>
<element name="TCustomTreeView.GetIndent.Result"/>
<element name="TCustomTreeView.GetKeepCollapsedNodes"/>
<element name="TCustomTreeView.GetKeepCollapsedNodes.Result"/>
<element name="TCustomTreeView.GetMultiSelect"/>
<element name="TCustomTreeView.GetMultiSelect.Result"/>
<element name="TCustomTreeView.GetReadOnly"/>
<element name="TCustomTreeView.GetReadOnly.Result"/>
<element name="TCustomTreeView.GetRightClickSelect"/>
<element name="TCustomTreeView.GetRightClickSelect.Result"/>
<element name="TCustomTreeView.GetRowSelect"/>
<element name="TCustomTreeView.GetRowSelect.Result"/>
<element name="TCustomTreeView.GetSelection"/>
<element name="TCustomTreeView.GetSelection.Result"/>
<element name="TCustomTreeView.GetSelectionCount"/>
<element name="TCustomTreeView.GetSelectionCount.Result"/>
<element name="TCustomTreeView.GetSelections"/>
<element name="TCustomTreeView.GetSelections.Result"/>
<element name="TCustomTreeView.GetSelections.AIndex"/>
<element name="TCustomTreeView.GetShowButtons"/>
<element name="TCustomTreeView.GetShowButtons.Result"/>
<element name="TCustomTreeView.GetShowLines"/>
<element name="TCustomTreeView.GetShowLines.Result"/>
<element name="TCustomTreeView.GetShowRoot"/>
<element name="TCustomTreeView.GetShowRoot.Result"/>
<element name="TCustomTreeView.GetShowSeparators"/>
<element name="TCustomTreeView.GetShowSeparators.Result"/>
<element name="TCustomTreeView.GetToolTips"/>
<element name="TCustomTreeView.GetToolTips.Result"/>
<element name="TCustomTreeView.GetTopItem"/>
<element name="TCustomTreeView.GetTopItem.Result"/>
<element name="TCustomTreeView.IsStoredBackgroundColor"/>
<element name="TCustomTreeView.IsStoredBackgroundColor.Result"/>
<element name="TCustomTreeView.HintMouseLeave"/>
<element name="TCustomTreeView.HintMouseLeave.Sender"/>
<element name="TCustomTreeView.ImageListChange"/>
<element name="TCustomTreeView.ImageListChange.Sender"/>
<element name="TCustomTreeView.NodeIsSelected"/>
<element name="TCustomTreeView.NodeIsSelected.Result"/>
<element name="TCustomTreeView.NodeIsSelected.ANode"/>
<element name="TCustomTreeView.ChangeTimer"/>
<element name="TCustomTreeView.ChangeTimer.Sender"/>
<element name="TCustomTreeView.SetAutoExpand"/>
<element name="TCustomTreeView.SetAutoExpand.Value"/>
<element name="TCustomTreeView.SetBackgroundColor"/>
<element name="TCustomTreeView.SetBackgroundColor.Value"/>
<element name="TCustomTreeView.SetBottomItem"/>
<element name="TCustomTreeView.SetBottomItem.Value"/>
<element name="TCustomTreeView.SetDefaultItemHeight"/>
<element name="TCustomTreeView.SetDefaultItemHeight.Value"/>
<element name="TCustomTreeView.SetExpandSignType"/>
<element name="TCustomTreeView.SetExpandSignType.Value"/>
<element name="TCustomTreeView.SetDropTarget"/>
<element name="TCustomTreeView.SetDropTarget.Value"/>
<element name="TCustomTreeView.SetHideSelection"/>
<element name="TCustomTreeView.SetHideSelection.Value"/>
<element name="TCustomTreeView.SetHotTrack"/>
<element name="TCustomTreeView.SetHotTrack.Value"/>
<element name="TCustomTreeView.SetIndent"/>
<element name="TCustomTreeView.SetIndent.Value"/>
<element name="TCustomTreeView.SetImages"/>
<element name="TCustomTreeView.SetImages.Value"/>
<element name="TCustomTreeView.SetImagesWidth"/>
<element name="TCustomTreeView.SetImagesWidth.AImagesWidth"/>
<element name="TCustomTreeView.SetInsertMarkNode"/>
<element name="TCustomTreeView.SetInsertMarkNode.AValue"/>
<element name="TCustomTreeView.SetInsertMarkType"/>
<element name="TCustomTreeView.SetInsertMarkType.AValue"/>
<element name="TCustomTreeView.SetKeepCollapsedNodes"/>
<element name="TCustomTreeView.SetKeepCollapsedNodes.Value"/>
<element name="TCustomTreeView.SetMultiSelect"/>
<element name="TCustomTreeView.SetMultiSelect.AValue"/>
<element name="TCustomTreeView.SetMultiSelectStyle"/>
<element name="TCustomTreeView.SetMultiSelectStyle.AValue"/>
<element name="TCustomTreeView.SetReadOnly"/>
<element name="TCustomTreeView.SetReadOnly.Value"/>
<element name="TCustomTreeView.SetRightClickSelect"/>
<element name="TCustomTreeView.SetRightClickSelect.Value"/>
<element name="TCustomTreeView.SetRowSelect"/>
<element name="TCustomTreeView.SetRowSelect.Value"/>
<element name="TCustomTreeView.SetScrollBars"/>
<element name="TCustomTreeView.SetScrollBars.Value"/>
<element name="TCustomTreeView.SetScrolledLeft"/>
<element name="TCustomTreeView.SetScrolledLeft.AValue"/>
<element name="TCustomTreeView.SetScrolledTop"/>
<element name="TCustomTreeView.SetScrolledTop.AValue"/>
<element name="TCustomTreeView.SetSelectedColor"/>
<element name="TCustomTreeView.SetSelectedColor.Value"/>
<element name="TCustomTreeView.SetSelectedFontColor"/>
<element name="TCustomTreeView.SetSelectedFontColor.Value"/>
<element name="TCustomTreeView.SetSelection"/>
<element name="TCustomTreeView.SetSelection.Value"/>
<element name="TCustomTreeView.SetSeparatorColor"/>
<element name="TCustomTreeView.SetSeparatorColor.AValue"/>
<element name="TCustomTreeView.SetShowButton"/>
<element name="TCustomTreeView.SetShowButton.Value"/>
<element name="TCustomTreeView.SetShowLines"/>
<element name="TCustomTreeView.SetShowLines.Value"/>
<element name="TCustomTreeView.SetShowRoot"/>
<element name="TCustomTreeView.SetShowRoot.Value"/>
<element name="TCustomTreeView.SetShowScrollbar"/>
<element name="TCustomTreeView.SetShowScrollbar.Which"/>
<element name="TCustomTreeView.SetShowScrollbar.AShow"/>
<element name="TCustomTreeView.SetShowSeparators"/>
<element name="TCustomTreeView.SetShowSeparators.Value"/>
<element name="TCustomTreeView.SetSortType"/>
<element name="TCustomTreeView.SetSortType.Value"/>
<element name="TCustomTreeView.SetStateImages"/>
<element name="TCustomTreeView.SetStateImages.Value"/>
<element name="TCustomTreeView.SetStateImagesWidth"/>
<element name="TCustomTreeView.SetStateImagesWidth.AStateImagesWidth"/>
<element name="TCustomTreeView.SetToolTips"/>
<element name="TCustomTreeView.SetToolTips.Value"/>
<element name="TCustomTreeView.SetTreeLineColor"/>
<element name="TCustomTreeView.SetTreeLineColor.Value"/>
<element name="TCustomTreeView.SetTreeNodes"/>
<element name="TCustomTreeView.SetTreeNodes.Value"/>
<element name="TCustomTreeView.SetTopItem"/>
<element name="TCustomTreeView.SetTopItem.Value"/>
<element name="TCustomTreeView.UpdateAllTops"/>
<element name="TCustomTreeView.UpdateBottomItem"/>
<element name="TCustomTreeView.UpdateHotTrack"/>
<element name="TCustomTreeView.UpdateHotTrack.X"/>
<element name="TCustomTreeView.UpdateHotTrack.Y"/>
<element name="TCustomTreeView.UpdateMaxLvl"/>
<element name="TCustomTreeView.UpdateMaxRight"/>
<element name="TCustomTreeView.UpdateTopItem"/>
<element name="TCustomTreeView.UpdateScrollbars"/>
<element name="TCustomTreeView.UpdateTooltip"/>
<element name="TCustomTreeView.UpdateTooltip.X"/>
<element name="TCustomTreeView.UpdateTooltip.Y"/>
<element name="TCustomTreeView.InternalSelectionChanged"/>
<element name="TCustomTreeView.AllowMultiSelectWithCtrl"/>
<element name="TCustomTreeView.AllowMultiSelectWithCtrl.Result"/>
<element name="TCustomTreeView.AllowMultiSelectWithCtrl.AState"/>
<element name="TCustomTreeView.AllowMultiSelectWithShift"/>
<element name="TCustomTreeView.AllowMultiSelectWithShift.Result"/>
<element name="TCustomTreeView.AllowMultiSelectWithShift.AState"/>
<element name="TCustomTreeView.SetExpandSignSize"/>
<element name="TCustomTreeView.SetExpandSignSize.AExpandSignSize"/>
<element name="TCustomTreeView.SetExpandSignWidth"/>
<element name="TCustomTreeView.SetExpandSignWidth.AValue"/>

<element name="TCustomTreeView.TFindOption">
<short>
Identifies find options that can be enabled in TCustomTreeView.
</short>
<descr/>
<seealso>
<link id="TCustomTreeView.TFindOptions"/>
<link id="TTreeNode.FindNode"/>
<link id="TTreeNodes.FindTopLvlNode"/>
<link id="TTreeNodes.FindNodeWithText"/>
<link id="TTreeNodes.FindNodeWithTextPath"/>
</seealso>
</element>
<element name="TCustomTreeView.TFindOption.foFindIgnoresCase">
<short>
Enable case-insensitive comparisons of the text in tree nodes.
</short>
</element>
<element name="TCustomTreeView.TFindOption.foFindExpands">
<short>
Causes a tree node to be expanded when it is accessed in a text path.
</short>
</element>

<element name="TCustomTreeView.TFindOptions">
<short>
Set type used to store find options enabled in the class.
</short>
<descr>
<p>
Values in the set are determined by the <b>CaseInsensitiveFilenames</b> 
compiler define. When defined, the set contains: [foFindExpands, 
foFindIgnoresCase]. Otherwise, it contains [foFindExpands].
</p>
</descr>
<seealso>
<link id="TCustomTreeView.TFindOption"/>
<link id="TTreeNode.FindNode"/>
<link id="TTreeNodes.FindTopLvlNode"/>
<link id="TTreeNodes.FindNodeWithText"/>
<link id="TTreeNodes.FindNodeWithTextPath"/>
</seealso>
</element>

<!-- protected -->
<element name="TCustomTreeView.FChangeTimer">
<short>Member with the OnChange timer for the control.</short>
</element>

<element name="TCustomTreeView.FEditor">
<short>TEdit used as the editor in the tree view control.</short>
</element>

<element name="TCustomTreeView.WSRegisterClass" link="#lcl.lclclasses.TLCLComponent.WSRegisterClass"/>

<element name="TCustomTreeView.GetControlClassDefaultSize">
<short>
Gets the default dimensions used for new instances of the class.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.GetControlClassDefaultSize.Result">
<short>Size for the new control instance.</short>
</element>

<element name="TCustomTreeView.Added">
<short>
Performs actions needed when the specified tree node is added to Items.
</short>
<descr>
<p>
Signals the OnAddition event handler (when assigned).
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.Added.Node">
<short>Tree nodes added to the Items for the control.</short>
</element>

<element name="TCustomTreeView.EditorEditingDone">
<short>
Implements the OnEditingDone event handler for a tree node editor on the 
control.
</short>
<descr>
<p>
Performs actions when the editor has finished editing a tree node on the 
control. It calls EndEditing to update state flags, and to signal assigned 
OnEdited and OnEditingEnd events handlers when the Text for the tree node is 
changed. It calls SetFocus to restore focus to the tree view control if the 
editor was assigned and had focus on entry to the method.
</p>
<p>
EditorEditingDone is used as the OnEditingDone event handler for the internal 
TEdit control created when the BeginEditing method is called.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.EditingItem"/>
<link id="TCustomTreeView.EndEditing"/>
<link id="TCustomTreeView.OnEdited"/>
<link id="TCustomTreeView.OnEditingEnd"/>
<link id="TCustomTreeView.BeginEditing"/>
<link id="TTreeNode.Text"/>
<link id="#lcl.stdctrls.TEdit.OnEditingDone">TEdit.OnEditingDone</link>
<link id="#lcl.controls.TWinControl.SetFocus">TWinControl.SetFocus</link>
</seealso>
</element>
<element name="TCustomTreeView.EditorEditingDone.Sender">
<short>Object for the event notification.</short>
</element>

<element name="TCustomTreeView.EditorKeyDown">
<short>
Implements the OnKeyDown event handler for the editor on the tree view control.
</short>
<descr>
<p>
<var>EditorKeyDown</var> ensures that key down events and focus change are 
handled for the tree node editor on the control.
</p>
<p>
<var>Key</var> and <var>Shift</var> contain the virtual key code and shift 
modifier(s) for the key down event. Virtual key codes handled in the method 
include:
</p>
<dl>
<dt>Return (VK_RETURN)</dt>
<dd>
Ends editing and accepts the changed valued in the Text for the tree node in 
EditingItem.
</dd>
<dt>Escape (VK_ESCAPE)</dt>
<dd>
Ends editing but rejects any change to the text for the EditingItem.
</dd>
</dl>
<p>
Shift must be an empty set ([]) to handle these virtual key codes in the method.
</p>
<p>
EditorKeyDown calls EndEditing to update state flags, and to signal assigned 
OnEdited and OnEditingEnd events handlers when the Text for the tree node is 
changed. It calls SetFocus to restore focus to the tree view control if the 
tree node editor was assigned and had focus on entry to the method.
</p>
<p>
The value in Key is set to 0 to if the virtual key code is handled in the 
method.
</p>
<p>
EditorKeyDown is used as the OnKeyDown event handler for the internal TEdit 
control created in the BeginEditing method.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.EditingItem"/>
<link id="TCustomTreeView.EndEditing"/>
<link id="TCustomTreeView.OnEdited"/>
<link id="TCustomTreeView.OnEditingEnd"/>
<link id="TCustomTreeView.BeginEditing"/>
<link id="TTreeNode.Text"/>
<link id="#lcl.stdctrls.TEdit.OnEditingDone">TEdit.OnEditingDone</link>
<link id="#lcl.controls.TWinControl.SetFocus">TWinControl.SetFocus</link>
</seealso>
</element>
<element name="TCustomTreeView.EditorKeyDown.Sender">
<short>Object for the event notification.</short>
</element>
<element name="TCustomTreeView.EditorKeyDown.Key">
<short>Virtual key code for the notification.</short>
</element>
<element name="TCustomTreeView.EditorKeyDown.Shift">
<short>Shift, Ctrl, or Alt modifier for the key down event.</short>
</element>

<element name="TCustomTreeView.BeginAutoDrag" link="#lcl.controls.TControl.BeginAutoDrag"/>

<element name="TCustomTreeView.BeginEditing">
<short>
Prepares the control to edit the text for the specified tree node.
</short>
<descr>
<p>
No actions are performed in the method for any of the following conditions:
</p>
<ul>
<li>ANode has not been assigned (contains <b>Nil</b>).</li>
<li>ANode is not visible.</li>
<li>
BeginEditing has been called and EndEditing has not yet been called.
</li>
<li>
CanEdit (and the OnEditing event handler) returns <b>False</b>.
</li>
</ul>
<p>
If a different node is being edited in the control, the EndEditing method is 
called.
</p>
<p>
BeginEditing updates the States property to include the value tvsIsEditing.
</p>
<p>
The TEdit control used as the Editor in the tree view is created (when 
needed), configured, and aligned to the display rectangle for the tree node. 
The value in the TTreeNode.Text property is assigned to the Editor, its 
content is selected, and the Editor is given focus.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.States"/>
<link id="TCustomTreeView.EndEditing"/>
<link id="TTreeNode.Text"/>
</seealso>
</element>
<element name="TCustomTreeView.BeginEditing.ANode">
<short>Tree node with the text value for the Editor in the control.</short>
</element>

<element name="TCustomTreeView.DoDragMsg" link="Controls.TWinControl.DoDragMsg"/>
<element name="TCustomTreeView.DoDragMsg.Result"/>
<element name="TCustomTreeView.DoDragMsg.ADragMessage"/>
<element name="TCustomTreeView.DoDragMsg.APosition"/>
<element name="TCustomTreeView.DoDragMsg.ADragObject"/>
<element name="TCustomTreeView.DoDragMsg.ATarget"/>
<element name="TCustomTreeView.DoDragMsg.ADocking"/>

<element name="TCustomTreeView.CanChange">
<short>
<b>True</b> if the specified tree node can be used in the Selected or 
Selections properties.
</short>
<descr>
<p>
Signals the <var>OnChanging</var> event handler (when assigned) to determine 
if a change is allowed for the specified tree node. Change entails using the 
tree node as the current Selected node, or including it in Selections when 
multi-select is enabled in the Options for the control.
</p>
<p>
The return value is updated in the event handler, and can be set to 
<b>True</b> to allow a change to the tree node. The return value is always 
<b>True</b> if the OnChanging event handler has not been assigned.
</p>
<p>
Use CanEdit to determine if the text for the tree node can edited in the 
control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.OnChanging"/>
<link id="TCustomTreeView.OnChange"/>
<link id="TCustomTreeView.CanEdit"/>
</seealso>
</element>
<element name="TCustomTreeView.CanChange.Result">
<short>
<b>True</b> if the specified tree node can be used in the Selected or 
Selections properties.
</short>
</element>
<element name="TCustomTreeView.CanChange.Node">
<short>Tree node examined in the method.</short>
</element>

<element name="TCustomTreeView.CanCollapse">
<short>Returns <b>True</b> if a given TreeNode can be collapsed.</short>
<descr>
<p>
<var>CanCollapse</var> is a <var>Boolean</var> function used to determine if 
the tree node in <var>Node</var> can be collapsed. CanCollapse signals the 
<var>OnCollapsing</var> event handler (when assigned) to determine if the 
tree node can be collapsed.
</p>
<p>
The return value is updated in the event handler, and can be set to 
<b>True</b> when the node has child nodes and is currently expanded. The 
return value should be set to <b>False</b> if the node does not have any 
child nodes.
</p>
<p>
The return value is always <b>True</b> if the OnCollapsing event handler has 
not been assigned, or when the component is being freed.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.CanCollapse.Result">
<short>
<b>True</b> if the specified node can be collapsed.
</short>
</element>
<element name="TCustomTreeView.CanCollapse.Node">
<short>Tree node examined in the method.</short>
</element>

<element name="TCustomTreeView.CanEdit">
<short>Returns <b>True</b> if the specified tree node can be edited.</short>
<descr>
<p>
<var>CanEdit</var> is a <var>Boolean</var> function used to determine if the 
tree node in <var>Node</var> can be edited. CanEdit signals the OnEditing 
event handler (when assigned) to determine if the TTreeNode instance can be 
modified.
</p>
<p>
The return value is updated in the event handler, and can be set to 
<b>True</b> if the tree view control is not configured to be read-only and 
the tree node is eligible for modification. Use the Options property in the 
tree view control to check for the read-only setting. The return value is 
always <b>True</b> if the OnEditing event handler has not been assigned.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.CanEdit.Result">
<short>
<b>True</b> if the specified tree node can modify its property values.
</short>
</element>
<element name="TCustomTreeView.CanEdit.Node">
<short>Tree node examined in the method.</short>
</element>

<element name="TCustomTreeView.CanExpand">
<short><b>True</b> if the specified tree node can be expanded.</short>
<descr>
<p>
<var>CanExpand</var> is a <var>Boolean</var> function used to determine if 
the tree node specified in <var>Node</var> can be expanded. CanExpand signals 
the <var>OnExpanding</var> event handler (when assigned) to get the return 
value for the method.
</p>
<p>
The return value can be set to <b>True</b> when Node is visible and contains 
child nodes. The return value is always <b>True</b> if the OnExpanding event 
handler has not been assigned.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.CanExpand.Result">
<short><b>True</b> if the specified node can be expanded.</short>
</element>
<element name="TCustomTreeView.CanExpand.Node">
<short>Tree node examined in the method.</short>
</element>

<element name="TCustomTreeView.CreateNode">
<short>
<var>CreateNode</var> - creates a new node in a TreeView and returns its 
content.
</short>
<descr>
<p>
<var>CreateNode</var> is a <var>TTreeNode</var> function used to create a new 
tree node for the control. The <var>OnCustomCreateItem</var> event handler is 
signalled (when assigned) to create the class instance used as the return 
value. If the event handler has not been assigned, or returns a <b>Nil</b> 
value, the <var>TTreeNodeClass</var> class reference is used to create the 
tree node in the return value.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.CreateNode.Result">
<short>New tree node instance created in the method.</short>
</element>

<element name="TCustomTreeView.CreateNodes">
<short>Creates a TTreeNodes container for the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.CreateNodes.Result">
<short>TTreeNodes instance created in the method.</short>
</element>

<element name="TCustomTreeView.CustomDraw">
<short>
Performs custom drawing using the assigned event handlers for the tree view 
control.
</short>
<descr>
<p>
<var>CustomDraw</var> is a method used to perform custom drawing for the tree 
view using the event handlers assigned in the control. The OnCustomDraw or 
OnAdvancedCustomDraw event handlers are signalled depending on the drawing 
stage in Stage. OnCustomDraw is signalled only when Stage is set to 
cdPrePaint.
</p>
<p>
The return value is <b>True</b> if default drawing should be performed in the 
tree view control, and was not performed by event handlers in the control.
</p>
<p>
CustomDraw is called from the DoPaint method and occurs after values in the 
States property have been updated.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.IsCustomDrawn"/>
<link id="TCustomTreeView.OnCustomDraw"/>
<link id="TCustomTreeView.OnAdvancedCustomDraw"/>
<link id="TCustomTreeView.DoPaint"/>
<link id="TCustomTreeView.States"/>
<link id="TCustomDrawStage"/>
</seealso>
</element>
<element name="TCustomTreeView.CustomDraw.Result">
<short>
<b>True</b> if default drawing must be performed by the tree view control. 
<b>False</b> if default drawing was performed in one of the event handlers.
</short>
</element>
<element name="TCustomTreeView.CustomDraw.ARect">
<short>
Bounds rectangle for the tree view control.
</short>
</element>
<element name="TCustomTreeView.CustomDraw.Stage">
<short>
Drawing stage for the tree view control. cdPrePaint allows the OnCustomDraw 
event handler to be signalled.
</short>
</element>

<element name="TCustomTreeView.CustomDrawItem">
<short>
Performs custom drawing for a tree node using the event handlers in the 
control.
</short>
<descr>
<p>
<var>CustomDrawItem</var> is a <var>Boolean</var> function used to perform 
custom drawing for the specified tree node using the event handlers for the 
control.
</p>
<p>
The OnCustomDrawItem and OnAdvancedCustomDrawItem event handlers are 
signalled to perform the custom drawing actions needed for the tree node. 
OnCustomDrawItem is signalled (when assigned) only when Stage contains the 
value cdPrePaint. OnCustomDrawItem is signalled (when assigned) for any of 
the values in the TCustomDrawStage enumeration.
</p>
<p>
State denotes one of <var>Selected, Grayed, Disabled, Checked, Focused, 
Default, Hot, Marked or Indeterminate</var>.
</p>
<p>
If <var>PaintImages</var> is <b>True</b>, images should be painted as well as 
text in the event handler routine.
</p>
<p>
The return value indicates whether default drawing for the tree node needs to 
be performed in the tree view control. <b>True</b> indicates that the control 
is responsible for default drawing, and the event handlers did not perform 
the action. <b>False</b> indicates that a handler routine performed default 
drawing, and it can be skipped in the tree view control.
</p>
<p>
CustomDrawItem is called from the DoPaintNode method. It occurs after 
StateImages, drawing state, and the display rectangle for the tree node has 
been determined.
</p>
<p>
See <var>CustomDraw</var> for the actions performed when drawing the entire 
tree view control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.OnCustomDrawItem"/>
<link id="TCustomTreeView.OnAdvancedCustomDrawItem"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.CustomDraw"/>
<link id="TCustomTreeView.OnCustomDraw"/>
<link id="TCustomTreeView.OnAdvancedCustomDraw"/>
<link id="TTreeNode"/>
<link id="TCustomDrawStage"/>
<link id="TCustomDrawState"/>
</seealso>
</element>
<element name="TCustomTreeView.CustomDrawItem.Result">
<short>
<b>True</b> if default drawing needs to be performed in the tree view control.
</short>
</element>
<element name="TCustomTreeView.CustomDrawItem.Node">
<short>
Tree node drawn in the method.
</short>
</element>
<element name="TCustomTreeView.CustomDrawItem.State">
<short>
State for the tree node (selected, focused, disabled, et. al.).
</short>
</element>
<element name="TCustomTreeView.CustomDrawItem.Stage">
<short>
Drawing stage for the tree view item. cdPrePaint allows the OnCustomDrawItem 
event handler to be signalled.
</short>
</element>
<element name="TCustomTreeView.CustomDrawItem.PaintImages">
<short>
<b>True</b> if images should be drawn in the OnAdvancedCustomDrawItem event 
handler.
</short>
</element>

<element name="TCustomTreeView.DefaultItemHeightIsStored">
<short>
Implements the storage specifier for the DefaultItemHeight property.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.DefaultItemHeightIsStored.Result">
<short>
<b>True</b> when tvoAutoItemHeight is not in the Options for the control.
</short>
</element>

<element name="TCustomTreeView.DoAutoAdjustLayout">
<short>
Applies a layout adjustment policy using the specified scaling factors.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.DoAutoAdjustLayout">TControl.DoAutoAdjustLayout</link>
</seealso>
</element>
<element name="TCustomTreeView.DoAutoAdjustLayout.AMode">
<short>Layout adjustment policy applied in the method.</short>
</element>
<element name="TCustomTreeView.DoAutoAdjustLayout.AXProportion">
<short>Horizontal scaling factor for the layout policy.</short>
</element>
<element name="TCustomTreeView.DoAutoAdjustLayout.AYProportion">
<short>Vertical scaling factor for the layout policy.</short>
</element>

<element name="TCustomTreeView.ExpandSignSizeIsStored">
<short>
Implements the storage specifier for the ExpandSignSize property.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.ExpandSignSizeIsStored.Result">
<short>
<b>True</b> when ExpandSignSize has a value other than the default (-1).
</short>
</element>

<element name="TCustomTreeView.GetBuiltinIconSize">
<short>
Gets the default size for icons when Images has not been assigned.
</short>
<descr>
<p>
The <var>TSize</var> instance contains 0 (zero) in both the Width and Height 
members.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetBuiltinIconSize.Result">
<short>TSize instance with the Width and Height for an icon.</short>
</element>

<element name="TCustomTreeView.GetDragImages">
<short>Gets the image list with the Drag images for the control.</short>
<descr>
<p>
<var>GetDragImages</var> is an overridden <var>TDragImageList</var> function 
used to get the image list with images displayed during drag and drop 
operations in the control. GetDragImages re-implements the method to use the 
TDragImageList member defined in the class instance (when assigned and not 
empty). Otherwise, <b>Nil</b> is returned from the method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.GetDragImages">TControl.GetDragImages</link>
</seealso>
</element>
<element name="TCustomTreeView.GetDragImages.Result">
<short>Image list with drag and drop images for the control.</short>
</element>

<element name="TCustomTreeView.GetImageSize">
<short>
Gets a TSize instance with the dimensions for images in the control.
</short>
<descr>
<p>
<var>GetImageSize</var> is a <var>TSize</var> function used to get the 
dimensions for images displayed in the tree view control. The return value 
has <var>Width</var> and <var>Height</var> members with the image dimensions.
</p>
<p>
When an image list has been assigned to the <var>Images</var> property, its 
<var>SizeForPPI</var> method is used to scale the value in 
<var>ImagesWidth</var> to the current display density in <var>Font</var>. 
When Images has not been assigned, the <var>GetBuiltinIconSize</var> method 
is called to get the return value.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.GetBuiltinIconSize"/>
<link id="TCustomTreeView.Images"/>
<link id="TCustomTreeView.ImagesWidth"/>
<link id="#lcl.controls.TControl.Font">TControl.Font</link>
</seealso>
</element>
<element name="TCustomTreeView.GetImageSize.Result">
<short>TSize instance with the dimensions for images in the control.</short>
</element>

<element name="TCustomTreeView.GetMaxLvl">
<short>
Not used in the current LCL version.
</short>
</element>
<element name="TCustomTreeView.GetMaxLvl.Result">
<short>
Not used in the current LCL version.
</short>
</element>

<element name="TCustomTreeView.GetMaxScrollLeft">
<short>
<var>GetMaxScrollLeft</var> - returns maximal extent of scrolling to the left.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.GetMaxScrollLeft.Result">
<short/>
</element>

<element name="TCustomTreeView.GetMaxScrollTop">
<short>
<var>GetMaxScrollTop</var> - returns the maximal extent of scrolling upwards.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.GetMaxScrollTop.Result">
<short/>
</element>

<element name="TCustomTreeView.GetNodeAtY">
<short>
Gets the expanded tree node at the specified vertical coordinate.
</short>
<descr>
<p>
Used in the implementation of the GetNodeAt, GetNodeWithExpandSignAt, 
GetInsertMarkAt, and GetHitTestInfoAt methods.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetNodeAtY.Result">
<short/>
</element>
<element name="TCustomTreeView.GetNodeAtY.Y">
<short/>
</element>

<element name="TCustomTreeView.GetNodeWithExpandSignAt">
<short>
Gets the tree node with an expand indicator at the specified coordinates.
</short>
<descr>
<p>
Calls GetNodeAtY to determine if the mouse pointer is positioned over a tree 
node on the control. The return value contains the TTreeNode instance at the 
specified coordinates on the tree view control. 
</p>
<p>
The return value can contain <b>Nil</b> when:
</p>
<ul>
<li>
Y is not positioned over an expanded and visible tree node.
</li>
<li>
X is not over the visible content for a tree node including a fold (expand / 
collapse) indicator.
</li>
<li>
In row select mode, the mouse pointer is not over the highlighted content on 
the tree view control.
</li>
</ul>
<p>
Used in MouseDown to get the tree node under the mouse pointer.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetNodeWithExpandSignAt.Result">
<short>
The expanded tree node found at the vertical coordinate, or <b>Nil</b> when a 
node is not found.
</short>
</element>
<element name="TCustomTreeView.GetNodeWithExpandSignAt.X">
<short>
Horizontal coordinate used to locate the expand indicator, border (in row 
select), or text for the tree node.
</short>
</element>
<element name="TCustomTreeView.GetNodeWithExpandSignAt.Y">
<short>
Vertical coordinate for the expanded node to locate in the node hierarchy.
</short>
</element>

<element name="TCustomTreeView.GetNodeDrawAreaHeight">
<short>
Gets the height for the usable drawing area on the tree view control.
</short>
<descr>
<p>
Calculated using the ClientHeight and BorderWidth for the control.
Used in the implementation of the EnsureNodeIsVisible method.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetNodeDrawAreaHeight.Result">
<short>
Calculated usable client height after borders are removed.
</short>
</element>

<element name="TCustomTreeView.GetNodeDrawAreaWidth">
<short>
Gets the width for the usable drawing area on the tree view control.
</short>
<descr>
<p>
Calculated using the ClientWidth and BorderWidth for the control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetNodeDrawAreaWidth.Result">
<short>Calculated usable client width after borders are removed.</short>
</element>

<element name="TCustomTreeView.IndentIsStored">
<short>
Implements the storage specifier for the Indent property.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.IndentIsStored.Result">
<short>
<b>True</b> when Indent has a value other than the default value (-1).
</short>
</element>

<element name="TCustomTreeView.IsCustomDrawn">
<short>
Returns <b>True</b> if the specified target is custom-drawn.
</short>
<descr/>
<seealso>
<link id="TCustomTreeView.OnCustomDraw"/>
<link id="TCustomTreeView.OnAdvancedCustomDraw"/>
<link id="TCustomTreeView.OnCustomDrawItem"/>
<link id="TCustomTreeView.OnAdvancedCustomDrawItem"/>
</seealso>
</element>
<element name="TCustomTreeView.IsCustomDrawn.Result">
<short>
<b>True</b> when event handlers have been assigned for the specified target 
and stage.
</short>
</element>
<element name="TCustomTreeView.IsCustomDrawn.Target">
<short>Drawing target examined in the method.</short>
</element>
<element name="TCustomTreeView.IsCustomDrawn.Stage">
<short>Drawing stage examined in the method.</short>
</element>

<element name="TCustomTreeView.IsNodeVisible">
<short>
Returns <b>True</b> if the specified tree node and its parent nodes are 
visible and expanded.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.IsNodeVisible.Result">
<short>
<b>True</b> if the specified tree node and its parent nodes are visible and 
expanded.
</short>
</element>
<element name="TCustomTreeView.IsNodeVisible.ANode">
<short>Tree node examined in the method.</short>
</element>

<element name="TCustomTreeView.IsNodeHeightFullVisible">
<short>
Indicates whether the full height for the specified tree node is visible on 
the tree view control.
</short>
<descr>
<p>
<var>IsNodeHeightFullVisible</var> is a <var>Boolean</var> method which 
indicates whether the tree node in ANode is fully visible vertically on the 
tree view control.
</p>
<p>
The return value is <b>True</b> if the Top and Height properties for the tree 
node occur within the usable display area on the control.
</p>
<p>
The return value is <b>False</b> when:
</p>
<ul>
<li>
The tree node in ANode has not been assigned (<b>Nil</b>).
</li>
<li>
The tree node and its Parent nodes are not Visible and/or Expanded.
</li>
<li>
The text displayed for the tree node is clipped (partially visible) at one of 
the vertical edges of the control.
</li>
</ul>
<p>
IsNodeHeightFullVisible is used in the implementation of the 
IsNodeHeightFullVisible method in TTreeNode.
</p>
</descr>
<seealso>
</seealso>
</element>
<element name="TCustomTreeView.IsNodeHeightFullVisible.Result">
<short>
True if the text for the specified tree node is fully visible within the 
vertical bounds for the control.
</short>
</element>
<element name="TCustomTreeView.IsNodeHeightFullVisible.ANode">
<short>
Tree node examined in the method.
</short>
</element>

<element name="TCustomTreeView.IsInsertMarkVisible">
<short>
Indicates whether an insertion mark is visible on the tree view control.
</short>
<descr>
<p>
<b>What is an "insertion mark"?</b>
</p>
<p>
An insertion mark is the visual indicator that identifies where a node added 
or moved on the control will be placed. It is like a horizontal editing caret. 
It is used during a node drag operation to show where the tree node will be 
placed in the node hierarchy.
</p>
<p>
IsInsertMarkVisible checks internal members in the tree view to determine 
whether a node and an insert mark type (TTreeViewInsertMarkType) have been 
assigned for the control. The return value is True when both members have been 
assigned and the mark node is visible on the control. When an insertion mark 
becomes visible for a node, the tree view control is redrawn.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.IsInsertMarkVisible.Result">
<short>
Returns <b>True</b> if an insertion mark is visible on the tree view control.
</short>
</element>

<element name="TCustomTreeView.MoveSelection">
<short>
Makes the specified node become selected in the tree view control.
</short>
<descr>
<p>
<var>MoveSelection</var> is a method used to make the tree node in 
<var>ANewNode</var> a selected node in the tree view control. The actions 
performed depend on the multi-selection setting for the control. When 
<var>tvoAllowMultiSelect</var> has been included in the <var>Options</var> 
property, the node is included in <var>Selections</var> when 
<var>ASelect</var> is <b>True</b>.
</p>
<p>
If multi-selection has not been enabled for the control, the value in 
ANewNode is assigned to the <var>Selected</var> property.
</p>
<p>
The <var>MakeVisible</var> method in the <var>TTreeNode</var> instance is 
called to make the node visible, and the scroll bars for the control are 
updated.
</p>
<p>
Used in the implementation of the <var>KeyDown</var> method. Used to 
implement methods like <var>MoveHome</var>, <var>MoveEnd</var>, 
<var>MovePageDown</var>, <var>MovePageUp</var>, <var>MoveToNextNode</var>, 
and <var>MoveToPrevNode</var>.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.MoveSelection.ANewNode">
<short>Tree node to select in the control.</short>
</element>
<element name="TCustomTreeView.MoveSelection.ASelect">
<short>
<b>True</b> to include the tree node in Selections (when enabled), 
<b>False</b> to select only the specified node.
</short>
</element>

<element name="TCustomTreeView.Change">
<short>
Performs actions needed when the selection in the control has been changed to 
include the specified tree node.
</short>
<descr>
<p>
Change is a method used to perform actions needed when the selection in the 
control has been changed. Node contains the tree node that was used in the 
control selection. Change signals the OnChange event handler (when assigned).
</p>
<p>
Change is called from the event handler used for the internal timer activated 
when a new selection is made and the control synchronizes the tree nodes to 
the visual display.
</p>
<p>
Use the OnSelectionChange event handler for the notification that occurs 
before the node is included in the control selection.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.Change.Node">
<short>Tree node included in the selection for the control.</short>
</element>

<element name="TCustomTreeView.Collapse">
<short>
Performs actions needed when the specified tree node is collapsed.
</short>
<descr>
<p>
<var>Collapse</var> is a method used to perform actions needed when the tree 
node in <var>Node</var> is collapsed. Collapse updates the visibility and 
position for the scroll bars in the control. The <var>OnCollapsed</var> event 
handler is signalled (when assigned) for the tree node in Node.
</p>
<p>
No actions are performed in the method when the component is being freed.
</p>
<p>
Collapse is called when the Collapse method in the <var>TTreeNode</var> 
instance is called.
</p>
<p>
See <var>Expand</var> for the actions performed when a tree node is expanded.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Expand"/>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.Collapse"/>
</seealso>
</element>
<element name="TCustomTreeView.Collapse.Node">
<short>Tree node collapsed in the control.</short>
</element>

<element name="TCustomTreeView.CreateWnd">
<short>
Performs actions needed when the handle for the control is created.
</short>
<descr>
<p>
<var>CreateWnd</var> is an overridden method in <var>TCustomTreeView</var> 
used to perform actions needed when the handle for the control is created or 
re-created. CreateWnd ensures that the <var>States</var> property is updated 
to remove the value <var>tvsStateChanging</var>. The internal flags for 
scroll bar visibility are reset, and the inherited method is called.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.CreateWnd">TWinControl.CreateWnd</link>
</seealso>
</element>

<element name="TCustomTreeView.Click">
<short>
Performs actions needed when the Left mouse button is clicked on the tree view 
control.
</short>
<descr>
<p>
<var>Click</var> is an overridden method in <var>TCustomTreeView</var>. It 
calls the inherited method when the mouse event occurs on a node with an 
expand / collapse indicator. Click is called when the mouse up event is 
handled for the corresponding mouse down event.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.MouseDown"/>
<link id="TCustomTreeView.MouseUp"/>
<link id="#lcl.controls.TControl.Click">TControl.Click</link>
</seealso>
</element>

<element name="TCustomTreeView.DblClick">
<short>
Performs actions needed when the Left mouse button is double clicked on the 
tree view control.
</short>
<descr>
<p>
<var>DblClick</var> is an overridden method in <var>TCustomTreeView</var>. It 
calls the inherited method when the mouse event occurs on a node with an 
expand / collapse indicator. DblClick is called when the mouse up event is 
handled for the corresponding mouse down event.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.MouseDown"/>
<link id="TCustomTreeView.MouseUp"/>
<link id="#lcl.controls.TControl.DblClick">TControl.DblClick</link>
</seealso>
</element>

<element name="TCustomTreeView.TripleClick">
<short>
Performs actions needed when the Left mouse is triple clicked on the tree 
view control.
</short>
<descr>
<p>
<var>TripleClick</var> is an overridden method in <var>TCustomTreeView</var>. 
It calls the inherited method when the mouse event occurs on a node with an 
expand / collapse indicator. TripleClick is called when the mouse up event is 
handled for the corresponding mouse down event.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.MouseDown"/>
<link id="TCustomTreeView.MouseUp"/>
<link id="#lcl.controls.TControl.TripleClick">TControl.TripleClick</link>
</seealso>
</element>

<element name="TCustomTreeView.QuadClick">
<short>
Performs actions needed when the Left mouse is quadruple clicked on the tree 
view control.
</short>
<descr>
<p>
<var>QuadClick</var> is an overridden method in <var>TCustomTreeView</var>. 
It calls the inherited method when the mouse event occurs on a node with an 
expand / collapse indicator. QuadClick is called when the mouse up event is 
handled for the corresponding mouse down event.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.MouseDown"/>
<link id="TCustomTreeView.MouseUp"/>
<link id="#lcl.controls.TControl.QuadClick">TControl.QuadClick</link>
</seealso>
</element>

<element name="TCustomTreeView.Delete">
<short>
Performs actions needed when the specified tree node is deleted.
</short>
<descr>
<p>
<var>Delete</var> is a method used to perform actions needed when the 
specified tree node is deleted from the list of tree nodes in 
<var>Items</var>. Delete signals the <var>OnDeletion</var> event handler 
(when assigned) for the tree node specified in <var>Node</var>. No actions 
are performed in the method if OnDeletion has not been assigned.
</p>
<p>
Delete is called when a <var>TTreeNode</var> instance is freed, or when the 
Delete method in <var>TTreeNodes</var> is executed.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.Delete.Node">
<short>Tree node deleted from the Items in the control.</short>
</element>

<element name="TCustomTreeView.DestroyWnd">
<short>
Performs actions needed when the handle for the control is destroyed.
</short>
<descr>
<p>
Includes the <var>tvsStateChanging</var> flag in the <var>States</var> 
property, and calls the inherited method. Ensures that the Canvas handle has 
been freed after calling the inherited method. Resets size values in the 
ScrollInfo for the horizontal and vertical scroll bars.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.DestroyWnd">TWinControl.DestroyWnd</link>
</seealso>
</element>

<element name="TCustomTreeView.DoCreateNodeClass">
<short>Signals the OnCreateNodeClass event handler (when assigned).</short>
<descr>
<p>
Signals the OnCreateNodeClass event handler (when assigned).
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.DoCreateNodeClass.NewNodeClass">
<short>Class reference used to create the new node instance.</short>
</element>

<element name="TCustomTreeView.DoEndDrag">
<short>
Performs actions needed when a drag operation is completed for the control.
</short>
<descr>
<p>
DoEndDrag is an overridden method used to perform actions needed when a drag 
operation is completed for the control. DoEndDrag calls the inherited method 
on entry to signal the OnEndDrag event handler (when assigned). DoEndDrag 
ensures that the previous drop target is reset, and that the drag scroll 
timer is disabled. Tooltips are restored to their previous values.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.DoEndDrag">TControl.DoEndDrag</link>
</seealso>
</element>
<element name="TCustomTreeView.DoEndDrag.Target">
<short/>
</element>
<element name="TCustomTreeView.DoEndDrag.X">
<short/>
</element>
<element name="TCustomTreeView.DoEndDrag.Y">
<short/>
</element>

<element name="TCustomTreeView.DoMouseWheel">
<short>
Handles mouse wheel messages for the tree view control.
</short>
<descr>
<p>
<var>DoMouseWheel</var> is an overridden method in <var>TCustomTreeView</var>. 
It calls the inherited method on entry to signal OnMouseWheel handlers (when 
assigned). If the event is not handled in the ancestor class, the value in 
WheelDelta is used to scroll the visible tree nodes by the corresponding 
number of nodes for the default item height.
</p>
<p>
Scroll bar positions are updated to reflect the new origin for the tree view 
control. The tool tip for the current mouse pointer position is also updated 
prior to exit.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.DoMouseWheel">TControl.DoMouseWheel</link>
</seealso>
</element>
<element name="TCustomTreeView.DoMouseWheel.Result">
<short>
Returns <b>True</b> if the mouse wheel event was handled.
</short>
</element>
<element name="TCustomTreeView.DoMouseWheel.Shift">
<short>
Shift, Ctrl, or Alt modifier for the mouse wheel event.
</short>
</element>
<element name="TCustomTreeView.DoMouseWheel.WheelDelta">
<short>
Number of "clicks" that the mouse wheel was moved.
</short>
</element>
<element name="TCustomTreeView.DoMouseWheel.MousePos">
<short>
TPoint instance with the coordinates for the mouse pointer when the mouse 
wheel event was detected.
</short>
</element>

<element name="TCustomTreeView.DoMouseWheelHorz">
<short>Performs actions to handle a horizontal mouse wheel message.</short>
<descr>
<p>
<var>DoMouseWheelHorz</var> is an overridden method used to perform actions 
needed to handle a horizontal mouse wheel message. It calls the inherited 
method to signal the <var>OnMouseWheelHorz</var> event handler (when 
assigned), or other chtOnMouseWheelHorz handlers registered in the 
application. 
</p>
<p>
If the message is not handled in the ancestor, the value in 
<var>ScrolledLeft</var> is updated to apply the delta value in 
<var>WheelDelta</var>. The position for a tool tip (or hint) is also updated
using the coordinates in Mouse.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.DoMouseWheelHorz">TControl.DoMouseWheelHorz</link>
</seealso>
</element>
<element name="TCustomTreeView.DoMouseWheelHorz.Result">
<short>
Returns <b>True</b> if the wheel message was handled in an assigned event 
handler or internally in the method.
</short>
</element>
<element name="TCustomTreeView.DoMouseWheelHorz.Shift">
<short>
Shift, Alt, or Ctrl modifier for the mouse wheel message.
</short>
</element>
<element name="TCustomTreeView.DoMouseWheelHorz.WheelDelta">
<short>
Number of "clicks" that the mouse wheel was moved.
</short>
</element>
<element name="TCustomTreeView.DoMouseWheelHorz.MousePos">
<short>
Coordinates for the mouse pointer when the wheel event was detected.
</short>
</element>

<element name="TCustomTreeView.DoPaint">
<short>
Implements the Paint method for the control.
</short>
<descr>
<p>
<var>DoPaint</var> is a method used render the control to its canvas. It 
Implements the overridden <var>Paint</var> method. No actions are performed 
in the method when <var>tvsPainting</var> has been included in the 
<var>States</var> property (Paint has already been called).
</p>
<p>
DoPaint includes the value tvsPainting in the States property to indicate 
that the paint method is active. It includes the value 
<var>tvoFocusedPainting</var> in States when <var>Focused</var> is 
<b>True</b>, or excludes the value when Focused is <var>False</var>.
</p>
<p>
The UpdateDefaultItemHeight is called when <var>tvoAutoItemHeight</var> is 
included in the <var>Options</var> for the control. The existing value in 
DefaultItemHeight is used when the Option is omitted.
</p>
<p>
DoPaint performs the multi-stage drawing process for nodes in the tree view 
control using its Canvas and a display rectangle using the 
<var>ClientWidth</var> for the control. If the control includes event 
handlers for the cdPrePaint stage, the <var>CustomDraw</var> method is called.
</p>
<p>
DoPaint draws the nodes on the tree view starting at the node in TopItem. If 
the node is Visible, the <var>DoPaintNode</var> method is called to render 
the tree node. The next visible node in the tree is retrieved, and the 
process is repeated until no more nodes are available or the drawing area is 
filled.
</p>
<p>
An <var>InsertMark</var> is drawn for the root node if needed.
</p>
<p>
Borders are drawn around the control using the value in 
<var>BorderWidth</var>.
</p>
<p>
If the control has event handlers for the cdPostPaint stage, the CustomDraw 
method is called.
</p>
<p>
The value <var>tvsPainting</var> is excluded from the States property prior 
to exit.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.DoPaintNode">
<short>Renders the specified tree node to the canvas for the control.</short>
<descr>
<p>
<var>DoPaintNode</var> is a method used to render the tree node specified in 
<var>Node</var> to the <var>Canvas</var> for the control. DoPaintNode is 
called from the DoPaint method, and occurs for visible nodes processed in the 
method. No actions are performed in the method when the Node is not in the 
visible client area for the control.
</p>
<p>
DoPaintNode draws the elements which represent a given tree node, including:
</p>
<ul>
<li>Text for the tree node (when it is not the EditingItem for the 
control).</li>
<li>An Image or State Image for the node.</li>
<li>Expand or Collapse indicators for the node.</li>
<li>Background for the node using theme services or node state.</li>
<li>An Insert mark for the initial child node in the tree hierarchy.</li>
<li>Horizontal and vertical lines used to join nodes in the tree 
hierarchy.</li>
<li>The Separator line drawn after a node.</li>
</ul>
<p>
The text color is determined using the Enabled properties in both the tree 
view control and the tree Node. When theme services are enabled in Options 
(using tvoThemedDraw), theme element details provide the color and font style 
for the enabled state. Otherwise, the color value in DisabledFontColor or 
Font is used.
</p>
<p>
DoPaintNode retrieves scaled image resolutions needed for the Images and 
StateImages in the control. The images sizes are determined by applying the 
scaling factor in Canvas to the current PixelsPerInch setting in Font.
</p>
<p>
Use of multi-stage custom drawing is supported. If event handlers are 
provided for the cdPrePaint and cdPostPaint stages, the CustomDraw and 
CustomDrawItem methods are used to render the node with the drawing state for 
the node.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.DoPaint"/>
<link id="TCustomTreeView.ExpandSignType"/>
<link id="TCustomTreeView.EditingItem"/>
<link id="TCustomTreeView.CustomDraw"/>
<link id="TCustomTreeView.OnCustomDraw"/>
<link id="TCustomTreeView.OnAdvancedCustomDraw"/>
<link id="TCustomTreeView.CustomDrawItem"/>
<link id="TCustomTreeView.OnCustomDrawItem"/>
<link id="TCustomTreeView.OnAdvancedCustomDrawItem"/>
<link id="#lcl.controls.TCustomControl.Canvas">TCustomControl.Canvas</link>
<link id="#lcl.controls.TControl.Font">TControl.Font</link>
</seealso>
</element>
<element name="TCustomTreeView.DoPaintNode.Node">
<short>Tree node rendered in the method.</short>
</element>

<element name="TCustomTreeView.DoStartDrag">
<short>
Performs actions needed when a drag operation is started for the control.
</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.DoStartDrag">TControl.DoStartDrag</link>
</seealso>
</element>
<element name="TCustomTreeView.DoStartDrag.DragObject">
<short>TDragObject instance for the drag and drop operation.</short>
</element>

<element name="TCustomTreeView.DragOver">
<short>
Performs actions needed when an object is dragged over the tree view control.
</short>
<descr>
<p>
DragOver is an overridden method in TCustomTreeView used to perform actions 
needed when an object is dragged over the tree view control. DragOver calls 
the inherited method on entry to get the initial value for the Accept 
argument and signal the OnDragOver event handler (when assigned). The event 
handler is used to determine whether a drop can be accepted for the specified 
object instance. If the event handler has not been assigned, Accept is set 
<b>False</b>.
</p>
<p>
DragOver checks for a tree node at the coordinates in X and Y, and checks 
whether the node is DropTarget for the control. If the node is different than 
the DropTarget for the control, the DropTarget property in the TTreeNode 
instance is set to <b>True</b>.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.DropTarget"/>
<link id="TTreeNode.DropTarget"/>
<link id="#lcl.controls.TControl.DragOver">TControl.DragOver</link>
<link id="#lcl.controls.TControl.OnDragOver">TControl.OnDragOver</link>
</seealso>
</element>
<element name="TCustomTreeView.DragOver.Source">
<short/>
</element>
<element name="TCustomTreeView.DragOver.X">
<short/>
</element>
<element name="TCustomTreeView.DragOver.Y">
<short/>
</element>
<element name="TCustomTreeView.DragOver.State">
<short/>
</element>
<element name="TCustomTreeView.DragOver.Accept">
<short/>
</element>

<element name="TCustomTreeView.DrawBuiltinIcon">
<short>
Defines a method used to draw a built-in icon for a specified tree node.
</short>
<descr>
<p>
<var>DrawBuiltInIcon</var> is a virtual method which is used to draw the a 
built-in icon for the specified tree node. A built-in icon is provided by the 
operating system or platform when an image list has not been provided or 
populated in the <var>Images</var> property.
</p>
<p>
The return value contains a <var>TSize</var> instance with the dimensions for 
the built-in image. In TCustomTreeView, the method returns an empty TSize 
instance (CX and CY are both set to 0). The method must be overridden in a 
descendent class (like <var>TShellTreeView</var>) to use the icon(s) 
appropriate for the implementation.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.DrawBuiltinIcon.Result">
<short>TSize instance with the dimensions for the built-in image.</short>
</element>
<element name="TCustomTreeView.DrawBuiltinIcon.ANode">
<short>Tree node used to select an appropriate icon image.</short>
</element>
<element name="TCustomTreeView.DrawBuiltinIcon.ARect">
<short>Rectangle where the icon image was drawn.</short>
</element>

<element name="TCustomTreeView.EndEditing">
<short>Updates the specified tree node and hides editor.</short>
<descr>
<p>
No actions are performed in the method if <var>tvsIsEditing</var> has not 
been included in the <var>States</var> property (<var>BeginEditing</var> was 
not called).
</p>
<p>
EndEditing removes the value tvsIsEditing from the States property to 
indicate that editing has been completed for the control.
</p>
<p>
The <var>OnEdited</var> event handler is signalled (when assigned) to 
validate or modify the new text value, and the text is stored in 
<var>Node</var>.
</p>
<p>
EndEditing calls the <var>Invalidate</var> method to redraw the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.States"/>
<link id="TCustomTreeView.BeginEditing"/>
<link id="TCustomTreeView.OnEdited"/>
<link id="TTreeNode.Text"/>
<link id="TTreeViewStates"/>
<link id="TTreeViewState"/>
</seealso>
</element>

<element name="TCustomTreeView.EnsureNodeIsVisible">
<short>
Ensures parent nodes are expanded, and the specified node is visible in the 
control.
</short>
<descr>
<p>
No actions are performed in the method if <var>ANode</var> has not been 
assigned (contains <b>Nil</b>).
</p>
<p>
Calls the <var>ExpandParents</var> method in ANode to expand any parent nodes 
not already expanded. Ensures that the tree node in ANode is visible in the 
client area for the control.
</p>
<p>
EnsureNodeIsVisible is used in the <var>TTreeNode.MakeVisible</var> method, 
and called from <var>BeginEditing</var> when the editor is displayed for the 
control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.EnsureNodeIsVisible.ANode">
<short/>
</element>

<element name="TCustomTreeView.Expand">
<short>
Expands the specified tree node and updates the scroll bars for the control.
</short>
<descr>
<p>
Expand is a method used to expand the tree node specified in Node on the tree 
view control. Expand is called after when the TTreeNode instance in Node has 
updated its States property and notified the Items container of the change.
</p>
<p>
Expand updates the scroll bars for the control. The OnExpanded event handler 
is signalled (when assigned) to performs actions needed after the tree node 
has been expanded.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.Expand.Node">
<short>Tree node expanded in the method.</short>
</element>

<element name="TCustomTreeView.GetImageIndex">
<short>Gets the index of the image for the specified node.</short>
<descr>
<p>
Allows the image index for the tree node to be updated before the node is 
drawn. Signals the OnGetImageIndex event handler (when assigned) where the 
image index can be determined and stored in the specified tree node.
</p>
<p>
Called from the DoPaintNode method for any unselected nodes in the tree view. 
Use the OnGetSelectedIndex event handler to get the image index for a 
selected node.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetImageIndex.Node">
<short>
Tree node examined in the method (and possibly updated in the event handler).
</short>
</element>

<element name="TCustomTreeView.GetSelectedIndex">
<short>
Gets the index for the image used for a selected tree node on the control.
</short>
<descr>
<p>
Allows the image index for a selected node to be updated before the node is 
drawn. Signals the OnGetSelectedIndex event handler (when assigned) where the 
image index can be determined and stored in the specified tree node.
</p>
<p>
Called from the DoPaintNode method for any a selected node in the tree view. 
Use the OnGetImageIndex event handler to get the image index for a node that 
is not selected.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetSelectedIndex.Node">
<short>
Tree node examine in the method (and possibly updated in the event handler).
</short>
</element>

<element name="TCustomTreeView.InitializeWnd">
<short>
Configures the control when its window handle is (re-)initialized.
</short>
<descr>
<p>
InitializeWnd is called after the Handle has been created, and before the 
missing child handles are created. Calls the inherited method on entry to 
assign the Handle and and its control flags, and synchronize values in the 
widgetset class instance. InitializeWnd calls the UpdateDefaultItemHeight 
method to update property values when tvoAutoItemHeight has been included in 
the Options for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.InitializeWnd">TWinControl.InitializeWnd</link>
</seealso>
</element>

<element name="TCustomTreeView.KeyDown">
<short>Handles key down events for the control.</short>
<descr>
<p>
KeyDown is an overridden method in TCustomTreeView which handles key down 
events for the control.
</p>
<p>
Key contains the virtual key code examined in the method.
</p>
<p>
Shift is the Shift, Alt, Ctrl modifier for the key code.
</p>
<p>
KeyDown calls the inherited method on entry. KeyDown ensures that the 
following Key codes are handled in the method:
</p>
<dl>
<dt>VK_DOWN</dt>
<dd>
Moves to the next node in the tree. Shift+Down includes the next node in the 
Selections property.
</dd>
<dt>VK_UP</dt>
<dd>
Moves to the previous node in the tree. Shift+Up includes the next node in 
the Selections property.
</dd>
<dt>VK_HOME</dt>
<dd>
Moves to the tree node at the top of the visible area. Shift+Home includes an 
affected range of nodes in the Selections property.
</dd>
<dt>VK_END</dt>
<dd>
Moves to the tree node at the bottom of the visible area. Shift+End includes 
an affected range of nodes in the Selections property.
</dd>
<dt>VK_PRIOR (PageUp)</dt>
<dd>
Moves the first node on the previous page for the control. Shift+PageUp 
includes an affected range of nodes in the Selections property.
</dd>
<dt>VK_NEXT (PageDn)</dt>
<dd>
Moves the first node on the next page for the control. Shift+PageDn includes 
an affected range of nodes in the Selections property.
</dd>
<dt>VK_LEFT</dt>
<dd>
Collapses the current node (when expanded) and moves to the parent node.
</dd>
<dt>VK_RIGHT</dt>
<dd>
Expands the current node (when needed), or moves to the next expanded node in 
the tree.
</dd>
<dt>VK_ADD (NumPad Plus)</dt>
<dd>
Expands the current node. Shift includes the node in a multi-selection range 
when enabled in Options.
</dd>
<dt>VK_SUBTRACT (NumPad Minus)</dt>
<dd>
Collapses the current node. Shift removes the node from a multi-selection 
range when enabled in Options.
</dd>
<dt>VK_F2</dt>
<dd>
Calls BeginEditing for the Selected node if the control is not ReadOnly.
</dd>
</dl>
<p>
If the key event is handled in the method, Key is set to VK_UNKNOWN.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.KeyDown">TWinControl.KeyDown</link>
</seealso>
</element>
<element name="TCustomTreeView.KeyDown.Key">
<short>Virtual key code examined in the method.</short>
</element>
<element name="TCustomTreeView.KeyDown.Shift">
<short>Shift, Ctrl, Alt modifier for the key code.</short>
</element>

<element name="TCustomTreeView.Loaded">
<short>
Performs actions needed when LCL component streaming has been completed.
</short>
<descr>
<p>
Loaded is an overridden method in TCustomTreeView, and calls the inherited 
method on entry. At design-time, the FullExpand method is called to expand 
all of the tree nodes on the control. The UpdateDefaultItemHeight method is 
called to set property values when tvoAutoItemHeight has been included in the 
Options for the control.
</p>
<p>
Loaded is called when the control has been loaded from a resource, transfers 
the loaded property values to the widget.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
</seealso>
</element>

<element name="TCustomTreeView.MouseDown">
<short>
Handles mouse down events for the tree view control.
</short>
<descr>
<p>
<var>MouseDown</var> is an overridden method in <var>TCustomTreeView</var> 
used to handle mouse down events in the control.
</p>
<p>
<var>Button</var> identifies the mouse button for the event.
</p>
<p>
<var>Shift</var> contains the Shift, Alt, or Ctrl modifier for the mouse 
event.
</p>
<p>
<var>X</var> and <var>Y</var> contain the coordinates for the mouse event.
</p>
<p>
MouseDown updates the States property to remove the values tvsEditOnMouseUp 
and tvsSingleSelectOnMouseUp.
</p>
<p>
The tree node for the mouse event is retrieved using GetNodeAt for the mouse 
coordinates. The Selected state for the tree node is saved so the selection 
can be restored prior to exit.
</p>
<p>
MouseDown ensures that both Left and Right mouse button events are handled 
(when needed). When RightClickSelect is <b>True</b>, the Selection can be 
changed using the Right mouse button. Otherwise, it is ignored. 
Multi-selection is handled when the Shift modifier is set for the mouse event.
</p>
<p>
A mouse event on an unused space in the control causes ClearSelection to be 
called when RowSelect is <b>True</b>. Selected is set to <b>Nil</b> if 
RowSelect is <b>False</b>.
</p>
<p>
When MultiSelect has not been enabled, the selected tree node is assigned to 
the Selected property. When it has been enabled, the MultiSelect method in 
Items is used to include the selected tree node in the Selections property. 
ClearSelection is called if the tree node was de-selected by the mouse event. 
Selected is set to <b>Nil</b> if the tree node was de-selected by the mouse 
event.
</p>
<p>
The control is Focused (when needed and allowed) by calling the SetFocus 
method.
</p>
<p>
Mouse events in the Expand or Collapse indicator causes the Expanded state 
for the tree node to be toggled. When RowSelect is enabled, the MouseUp event 
causes the editor to be activated for the node.
</p>
<p>
MouseDown calls the inherited method to handle drag messages or close the 
editor for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseDown">TControl.MouseDown</link>
</seealso>
</element>
<element name="TCustomTreeView.MouseDown.Button">
<short>Mouse button for the event.</short>
</element>
<element name="TCustomTreeView.MouseDown.Shift">
<short>Shift, Ctrl, or Alt modifier for the mouse event.</short>
</element>
<element name="TCustomTreeView.MouseDown.X">
<short>Horizontal coordinate for the mouse event.</short>
</element>
<element name="TCustomTreeView.MouseDown.Y">
<short>Vertical coordinate for the mouse event.</short>
</element>

<element name="TCustomTreeView.MouseMove">
<short>
Handles mouse move messages for the control.
</short>
<descr>
<p>
<var>MouseMove</var> is an overridden method in <var>TCustomTreeView</var> 
used to handle mouse move messages for the control. It calls the inherited 
method on entry to notify the drag manager when the control is dragged, and 
signals the OnMouseMove event handler (when assigned).
</p>
<p>
MouseMove ensures that an automatic insertion mark is generated when needed. 
It updates the tool tip (or Hint) location. It also updates the hot tracking 
position when needed. When MultiSelect is enabled, a new tracking position 
causes the entire control to be redrawn. If MultiSelect is <b>not</b> enabled, 
only the display rectangles for the previous and the current hot-tracked tree 
nodes are redrawn.
</p>
</descr>
<version>
Modified in LCL version 4.0 to reduce calls to Invalidate to avoid flicker.
</version>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.HotTrack"/>
<link id="TCustomTreeView.MultiSelect"/>
<link id="TCustomTreeView.Tooltips"/>
<link id="TCustomTreeView.Invalidate"/>
<link id="TTreeViewOption"/>
<link id="#lcl.controls.TControl.MouseMove">TControl.MouseMove</link>
</seealso>
</element>
<element name="TCustomTreeView.MouseMove.Shift">
<short>Shift, Ctrl, or Alt modifier for the mouse message.</short>
</element>
<element name="TCustomTreeView.MouseMove.X">
<short>Horizontal coordinate for the mouse pointer.</short>
</element>
<element name="TCustomTreeView.MouseMove.Y">
<short>Vertical coordinate for the mouse pointer.</short>
</element>

<element name="TCustomTreeView.MouseUp">
<short>
Handles a mouse up event for the control.
</short>
<descr>
<p>
<var>MouseUp</var> is an overridden method in <var>TCustomTreeView</var> used 
to perform actions needed when a mouse up event occurs on the tree view 
control. In TCustomTreeView, it ensures that a visible hint window is closed 
before handling the mouse up event. It calls the inherited method to signal 
the OnMouseUp event handler (when assigned).
</p>
<p>
If PopupMenu is assigned, a right-shifted right mouse button click causes 
the method to be exited to process the context menu request. (Nota bene: 
RShift + RButton specifically; the code does not handle LShift + RButton.)
</p>
<p>
For a Left mouse button up event, the control tries to select the tree node 
under the pointer or toggle the editor state on a already selected tree node. 
Use ReadOnly to enable or disable the tree node editor when the mouse up event 
is handled.
</p>
<p>
Values in the States property are updated prior to exiting from the method.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.MouseUp">TControl.MouseUp</link>
</seealso>
</element>
<element name="TCustomTreeView.MouseUp.Button">
<short>
Mouse button for the mouse up event.
</short>
</element>
<element name="TCustomTreeView.MouseUp.Shift">
<short>
Shift, Ctrl, or Alt modifier for the mouse up event.
</short>
</element>
<element name="TCustomTreeView.MouseUp.X">
<short>
Horizontal coordinate for the mouse pointer in the mouse up event.
</short>
</element>
<element name="TCustomTreeView.MouseUp.Y">
<short>
Vertical coordinate for the mouse pointer in the mouse up event.
</short>
</element>

<element name="TCustomTreeView.MouseLeave">
<short>
Performs actions needed when the mouse pointer leaves the control.
</short>
<descr>
<p>
<var>MouseLeave</var> is an overridden method in <var>TCustomTreeView</var>.
</p>
<p>
It ensures that States is updated to remove click or editing flags included in 
the flag values. If a hint window is visible for the control, it is hidden. If 
HotTrack has been enabled and included in the Options for the control, the 
internal member used to track the hovered tree node is reset. Cursor is 
restored to the default cursor shape and the control is redrawn.
</p>
<p>
MouseLeave calls the inherited method prior to exit to signal the OnMouseLeave 
event handler (when assigned).
</p>
</descr>
<seealso>
<link id="TCustomTreeView.States"/>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.HotTrack"/>
<link id="TTreeViewOptions"/>
<link id="TTreeViewOption"/>
<link id="#lcl.controls.TControl.Cursor">TControl.Cursor</link>
<link id="#lcl.controls.TControl.MouseUp">TControl.MouseLeave</link>
</seealso>
</element>

<element name="TCustomTreeView.NodeChanged">
<short>
Performs actions when a property value in the specified tree node has been 
changed.
</short>
<descr>
<p>
Signals the OnNodeChanged event handler (when assigned) for the specified tree 
node and change reason. NodeChanged is called when a tree node in Items calls 
its Changed method.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.OnNodeChanged"/>
<link id="TTreeNodeChangeReason"/>
<link id="TTreeNode.Changed"/>
</seealso>
</element>
<element name="TCustomTreeView.NodeChanged.Node">
<short>Tree node with the changed property value.</short>
</element>
<element name="TCustomTreeView.NodeChanged.ChangeReason">
<short>Indicates the value changed in the tree node.</short>
</element>

<element name="TCustomTreeView.NodeHaschildren">
<short>Determines if the specified tree node has child nodes.</short>
<descr>
<p>
<var>NodeHasChildren</var> is a <var>Boolean</var> function used to determine 
if the tree node specified in <var>Node</var> has child nodes. 
NodeHasChildren signals the <var>OnHasChildren</var> event handler (when 
assigned) to determine the return value for the method. The return value is 
<b>False</b> if OnHasChildren has not been assigned.
</p>
<p>
NodeHasChildren is called when a tree node reads the value for its 
<var>HasChildren</var> property. The <var>TTreeNode</var> instance uses an 
existing value in its States flags when available. If not set, 
NodeHasChildren is used to determine if the flag value 
(<var>nsHasChildren</var>) is included in or excluded from the 
<var>States</var> property in the tree node.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.OnHasChildren"/>
<link id="TTreeNode.HasChildren"/>
<link id="TTreeNode.States"/>
<link id="TTreeNode.TreeView"/>
<link id="TNodeStates"/>
<link id="TNodeState"/>
</seealso>
</element>
<element name="TCustomTreeView.NodeHaschildren.Result">
<short>
<b>True</b> if the node has child nodes. <b>False</b> if OnHasChildren has 
not been assigned.
</short>
</element>
<element name="TCustomTreeView.NodeHaschildren.Node">
<short>Tree node examined in the method.</short>
</element>

<element name="TCustomTreeView.Notification">
<short>
Handles the notification when a component is added to or removed from the 
class instance.
</short>
<descr>
<p>
<var>Notification</var> is an overridden method in 
<var>TCustomTreeView</var>, and calls the inherited method on entry. It 
ensures that the member for <var>Images</var> or <var>StateImages</var> is 
set to <b>Nil</b> when the component is removed from the class instance.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Notification">TControl.Notification</link>
</seealso>
</element>
<element name="TCustomTreeView.Notification.AComponent">
<short>Component for the notification event.</short>
</element>
<element name="TCustomTreeView.Notification.Operation">
<short>Operation performed for the component.</short>
</element>

<element name="TCustomTreeView.Paint">
<short>Renders the tree view control.</short>
<descr>
<p>
<var>Paint</var> is an overridden method in <var>TCustomTreeView</var>. It 
calls the <link id="TCustomTreeView.DoPaint">DoPaint</link> method to update 
the control state, default item height, borders, and scroll bars before 
painting the nodes on the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.DoPaint"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="#lcl.controls.TCustomControl.Paint">TCustomControl.Paint</link>
</seealso>
</element>

<element name="TCustomTreeView.ScrollView">
<short>
Scrolls the visible area for the control by the specified horizontal and 
vertical offsets.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.ScrollView.DeltaX">
<short>Horizontal offset applied to the visible area for the control.</short>
</element>
<element name="TCustomTreeView.ScrollView.DeltaY">
<short>Vertical offset applied to the visible area for the control.</short>
</element>

<element name="TCustomTreeView.SetDragMode">
<short>Sets the value for the DragMode property.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TControl.DragMode">TControl.SetDragMode</link>
</seealso>
</element>
<element name="TCustomTreeView.SetDragMode.Value">
<short>New value for the DragMode property.</short>
</element>

<element name="TCustomTreeView.SetOptions">
<short>Sets the value for the Options property.</short>
<descr/>
<seealso>
<link id="TCustomTreeView.Options"/>
</seealso>
</element>
<element name="TCustomTreeView.SetOptions.NewOptions">
<short>New value for the property.</short>
</element>

<element name="TCustomTreeView.UpdateDefaultItemHeight">
<short>
Calculates and updates the value in the DefaultItemHeight property.
</short>
<descr>
<p>
<var>UpdateDefaultItemHeight</var> is a procedure used to calculate and 
update the value for the <var>DefaultItemHeight</var> property. No actions 
are performed in the method for the following conditions:
</p>
<ul>
<li>
tvoAutoItemHeight has not been included in the Options for the control.
</li>
<li>
The handle for the control has not been allocated.
</li>
<li>
The handle for the control Canvas has not been allocated.
</li>
</ul>
<p>
The height for the Text in the node is calculated using the 
TCanvas.TextHeight method, and space is reserved for the default spacing for 
the tree node.
</p>
<p>
GetImageSize is called to get the height needed for Images or StateImages 
used in the control. Values in ImageSize and StateImageSize are updated with 
the scaled image heights including default spacing. The calculated value is 
enlarged for the Image sizes if needed.
</p>
<p>
UpdateDefaultItemHeight updates the States property to include values that 
indicate the item height for nodes has changed. The Invalidate method is 
called to redraw the control.
</p>
<p>
UpdateDefaultItemHeight is called from methods like: InitializeWnd, Loaded, 
SetOptions, and DoPaint.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.DefaultItemHeight"/>
<link id="TCustomTreeView.Images"/>
<link id="TCustomTreeView.ImagesWidth"/>
<link id="TCustomTreeView.StateImages"/>
<link id="TCustomTreeView.StateImagesWidth"/>
<link id="TCustomTreeView.States"/>
</seealso>
</element>

<element name="TCustomTreeView.UpdateInsertMark">
<short>
Sets or removes an insertion mark at the specified position based on the 
values in Options.
</short>
<descr>
<p>
An insertion mark is removed if <var>tvoAutoInsertMark</var> has not been 
included in the <var>Options</var> for the control, and at design-time. Calls 
<var>SetInsertMark</var> to create and display the insertion mark.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.UpdateInsertMark.X">
<short>Horizontal coordinate for the insertion mark.</short>
</element>
<element name="TCustomTreeView.UpdateInsertMark.Y">
<short>Vertical coordinate for the insertion mark.</short>
</element>

<element name="TCustomTreeView.DoSelectionChanged">
<short>
Performs actions needed when the selection for the tree view has been changed.
</short>
<descr>
<p>
<var>DoSelectionChanged</var> is called when a value in the Selection or 
MultiSelected property is changed. It signals the OnSelectionChange event 
handler (when assigned).
</p>
<p>
DoSelectionChanged is called after the flags in <var>States</var> has been 
updated to include <var>tvsSelectionChanged</var>, and before the change 
timer is enabled for the control.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.WMHScroll">
<short>Handles the LM_HSCROLL message for the control.</short>
<descr>
<p>
<var>WMHScroll</var> ensures that the <var>ScrollLeft</var> property is 
updated to apply the horizontal scroll code passed in the <var>Msg</var> 
argument. The following scroll codes are handled in the method:
</p>
<dl>
<dt>SB_LEFT</dt>
<dd>Sets ScrolledLeft to 0.</dd>
<dt>SB_RIGHT</dt>
<dd>Sets ScrolledLeft to its largest value for the visible control area.</dd>
<dt>SB_LINERIGHT</dt>
<dd>
Increments ScrolledLeft by one-half of the default ItemHeight for the 
control.
</dd>
<dt>SB_LINELEFT</dt>
<dd>
Decrements ScrolledLeft by one-half of the default ItemHeight for the 
control.
</dd>
<dt>SB_PAGERIGHT</dt>
<dd>Increments ScrolledLeft by one page of lines.</dd>
<dt>SB_PAGELEFT</dt>
<dd>Decrements ScrolleLeft by one page of lines.</dd>
<dt>SB_THUMBPOSITION, SB_THUMBTRACK</dt>
<dd>Sets ScrolledLeft to the current scroll bar position in Msg.</dd>
<dt>SB_ENDSCROLL</dt>
<dd>Ends scroll bar message handling.</dd>
</dl>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.WMHScroll.Msg">
<short>Window message handled in the method.</short>
</element>

<element name="TCustomTreeView.WMVScroll">
<short>Handles the LM_VSCROLL message for the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.WMVScroll.Msg">
<short>Window message handled in the method.</short>
</element>

<element name="TCustomTreeView.WMLButtonDown">
<short>Handles the LM_LBUTTONDOWN message for the control.</short>
<descr>
<p>
<var>WMLButtonDown</var> ensures that the <var>States</var> property is 
updated to include <var>tvsDragged</var> for the Left mouse button message. 
It calls the inherited method prior to exit to update MouseCapture and Click 
events for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.WMLButtonDown">TControl.WMLButtonDown</link>
</seealso>
</element>
<element name="TCustomTreeView.WMLButtonDown.AMessage">
<short>Window message examined in the method.</short>
</element>

<element name="TCustomTreeView.WMSetFocus">
<short>Handles the LM_SETFOCUS message for the control.</short>
<descr>
<p>
Calls the <var>Invalidate</var> method to redraw the control. Calls the 
inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.WMSetFocus">TWinControl.WMSetFocus</link>
</seealso>
</element>
<element name="TCustomTreeView.WMSetFocus.Message">
<short>Window message handled in the method.</short>
</element>

<element name="TCustomTreeView.WMKillFocus">
<short>Handles the WMKillFocus message for the control.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.WMKillFocus.Message">
<short>Control message handled in the method.</short>
</element>

<element name="TCustomTreeView.Resize">
<short>
Resizes the control and updates the scroll bars and the States property.
</short>
<descr>
<p>
<var>Resize</var> is an overridden method in <var>TCustomTreeView</var>. It 
updates values in the <var>States</var> property to include 
<var>tvsScrollbarChanged</var> and <var>tvsBottomItemNeedsUpdate</var>. It 
calls the inherited method to check for changes and execute the 
<var>DoOnResize</var> method. Resize calls <var>UpdateScrollbars</var> to 
update the visibility and position for the scroll bars on the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.Resize">TControl.Resize</link>
</seealso>
</element>

<element name="TCustomTreeView.EditingItem">
<short>Contains the tree node being edited in the control.</short>
<descr>
<p>
<var>EditingItem</var> is a read-only <var>TTreeNode</var> property which 
contains the tree node currently being edited in the control. Its value is 
assigned when the <var>BeginEditing</var> method is called, and unassigned 
when the <var>EndEditing</var> method is called.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.BeginEditing"/>
<link id="TCustomTreeView.EndEditing"/>
<link id="TCustomTreeView.KeyDown"/>
<link id="TCustomTreeView.MouseUp"/>
<link id="TTreeNode.EditText"/>
</seealso>
</element>

<element name="TCustomTreeView.States">
<short>Contains the state values in effect for the control.</short>
<descr>
<p>
<var>States</var> is a read-only <var>TTreeViewStates</var> property which 
contains the state values in effect for the control. Value from the 
<var>TTreeViewState</var> enumeration are included in the set type to 
indicate that the corresponding state is "ON", "TRUE", or "ACTIVE". See 
<var>TTreeViewState</var> for more information about the enumeration values 
and their meanings.
</p>
</descr>
<seealso>
<link id="TTreeViewStates"/>
<link id="TTreeViewState"/>
</seealso>
</element>

<element name="TCustomTreeView.GetSelectedChildAccessibleObject">
<short>Returns the currently selected child accessible object.</short>
<descr>
<p>
In TCustomTreeView, the value in Selection is included as a data object for 
the accessibility object.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetSelectedChildAccessibleObject.Result">
<short>
<b>True</b> if the node data was successfully added to the accessibility 
object.
</short>
</element>

<element name="TCustomTreeView.GetChildAccessibleObjectAtPos" link="#lcl.controls.TControl.GetChildAccessibleObjectAtPos"/>
<element name="TCustomTreeView.GetChildAccessibleObjectAtPos.Result"/>
<element name="TCustomTreeView.GetChildAccessibleObjectAtPos.APos"/>

<element name="TCustomTreeView.AccessibilityOn">
<short>Turns accessibility on or off to speed up the control.</short>
<descr>
<p>
AccessibilityOn is provided for the situation where a tree view contains a 
huge number of items, lets say 10,000+. In this case, accessibility might 
affect the responsiveness and drawing performance for the tree view control. 
Setting AccessibilityOn to <b>False</b> will likely make things faster.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.AutoExpand">
<short>
Expands a tree node when it is clicked or activated in code.
</short>
<descr>
<p>
<var>AutoExpand</var> is a <var>Boolean</var> property which indicates if a 
tree node is automatically expanded when it is <var>Selected</var> using a 
mouse click or keyboard navigation. The default value for the property is 
<b>False</b>.
</p>
<p>
The property value is <b>True</b> when the value <var>tvoAutoExpand</var> has 
been included in the <var>Options</var> property. Changing the value in the 
property causes the Options property to be updated. When set to <b>True</b>, 
the value tvoAutoExpand is included in the Options property. Otherwise, the 
value is excluded from Options.
</p>
<p>
AutoExpand is used when the <var>TTreeNodes</var> container in the 
<var>Items</var> property adds or moves a tree node. If the new tree node or 
its owner has AutoExpand set to <b>True</b>, the value is also applied to its 
<var>Parent</var> node.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.BorderStyle">
<short>Line style used to draw the border for the control.</short>
<descr>
<p>
The default value for the property is bsSingle in TCustomTreeView.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.BorderStyle">TWinControl.BorderStyle</link>
</seealso>
</element>

<element name="TCustomTreeView.HideSelection">
<short>
Indicates if the current selection is hidden when the control loses focus.
</short>
<descr>
<p>
<var>HideSelection</var> is a <var>Boolean</var> property which indicates if 
the current selection is hidden when the control loses focus. The default 
value for the property is <b>True</b>.
</p>
<p>
The value for the property is <b>True</b> if <var>tvoHideSelection</var> has 
been included in the <var>Options</var> for the control. Changing the value 
in the property causes tvoHideSelection to be included in or excluded from 
Options. The control is redrawn if <var>Selected</var> has an assigned tree 
node when the property is changed.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.Selected"/>
</seealso>
</element>

<element name="TCustomTreeView.HotTrack">
<short>
Enables or disables highlight / underline drawing styles on a tree item when 
the mouse is hovered over it.
</short>
<descr>
<p>
<var>HotTrack</var> is a <var>Boolean</var> property which controls whether a 
hot-tracking highlight is drawn for the tree node under the mouse cursor. The 
default value for the property is <b>False</b> and disables hot-track 
highlighting on the control.
</p>
<p>
The property value is read from and written to the Options property for the 
control; the value tvoHotTrack is included in or excluded from Options based 
on the property value. Setting HotTrack to <b>True</b> causes tvoHotTrack to 
be included in the Options property.
</p>
<p>
HotTrack is used in methods like DoPaintNode, MouseLeave, and MouseMove.
</p>
<p>
Use HotTrackColor to set the font color used to draw the hot-tracked tree 
node. Theme element details are used to get the background color for a 
hot-tracked tree node.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.MouseMove"/>
<link id="TCustomTreeView.MouseLeave"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.DoPaint"/>
<link id="TTreeViewOption"/>
<link id="TTreeViewOptions"/>
<link id="#lcl.comctrls.TCustomListview.HotTrack">TCustomListView.HotTrack</link>
</seealso>
</element>

<element name="TCustomTreeView.HotTrackColor">
<short>
Font color used to draw the text on a hovered tree node when hot tracking is 
enabled.
</short>
<descr>
<p>
<var>HotTrackColor</var> is a <var>TColor</var> property with the color used 
for the font on a hot-tracked tree node. The default value for the property is 
clNone and causes either SelectionFontColor or the color in Font to be used 
for the text. SelectionFontColor is used when themed drawing is not enabled in 
Options.
</p>
<p>
Use HotTrack to enable or disable hot-track highlighting for tree nodes on the 
control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.HotTrack"/>
<link id="TCustomTreeView.SelectionFontColor"/>
<link id="TCustomTreeView.SelectionColor"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.DoPaint"/>
</seealso>
</element>

<element name="TCustomTreeView.DisabledFontColor">
<short>
Font color used for a tree node when the tree view or the node is not enabled.
</short>
<descr>
<p>
The default value for the property is <var>clGrayText</var>.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.Indent">
<short>
Number of pixels used to indent branch levels (child nodes) on the tree view 
control.
</short>
<descr>
<p>
Use 0 to auto-size the Indent value.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.MultiSelect">
<short>
Enables or disables selection of multiple tree nodes at the same time.
</short>
<descr>
<p>
<var>MultiSelect</var> is a <var>Boolean</var> property used to enable or 
disable selection of multiple nodes in the tree view control. The default 
value for the property is <b>False</b>, and allows a single selected node 
indicated in the <var>Selection</var> property.
</p>
<p>
When set to <b>True</b>, multiple nodes can be selected and stored in the 
Selections property. Use <b>Ctrl+Click</b> to add or remove a node in the 
Selections property. Use <b>Shift+Click</b> and <b>Ctrl+Shift+Click</b> to 
add or remove a range of nodes in the Selections property.
</p>
<p>
Changing the value for the property causes existing nodes in both Selection 
and Selections to be cleared.
</p>
<p>
Use <var>MultiSelectStyle</var> to set the multi-selection style enabled for 
the control.
</p>
<p>
Use the <var>Select</var> method to add a node to the values in Selections.
</p>
<p>
Use <var>SelectionCount</var> to get the number of nodes in Selections.
</p>
<p>
Use <var>GetFirstMultiSelected</var> or <var>GetLastMultiSelected</var> to 
get the tree node for the corresponding node in Selections.
</p>
<p>
Use <var>ClearMultiSelection</var> to remove all existing nodes in Selections.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.OnAddition">
<short>
Event handler signalled when a tree node is added to the Items in the tree view control.
</short>
<descr>
<p>
<var>OnAddition</var> is a <var>TTVExpandedEvent</var> property with the 
event handler signalled when a tree node is added to the Items for the 
control. The Sender argument contains the TCustomTreeView instance for the 
notification. The Node argument contains the TTreeNode instance added to the 
control.
</p>
<remark>
OnAddition is not used in the current LCL implementation.
</remark>
</descr>
<seealso>
<link id="TCustomTreeView.Items"/>
<link id="TTreeNodes"/>
<link id="TTVExpandedEvent"/>
</seealso>
</element>

<element name="TCustomTreeView.OnAdvancedCustomDraw">
<short>
Event handler signalled to custom draw the grid control using drawing stages.
</short>
<descr>
<p>
<var>OnAdvancedCustomDraw</var> is a <var>TTVAdvancedCustomDrawEvent</var> 
property with the event handler signalled to paint the grid control. It is 
signalled (when assigned) from the CustomDraw method, and occurs when the 
control executes its Paint method.
</p>
<p>
<b>Drawing Stages</b>
</p>
<dl>
<dt>cdPrePaint</dt>
<dd>
Paint the control when scrollbars are updated. Called after the OnCustomDraw 
event handler.
</dd>
<dt>cdPostPaint</dt>
<dd>
Paint the control after borders have been drawn.
</dd>
<dt>cdPreErase</dt>
<dd>
Not used in TCustomTreeView. The control does not receive erase notifications.
</dd>
<dt>cdPostErase</dt>
<dd>
Not used in TCustomTreeView. The control does not receive erase notifications.
</dd>
</dl>
<p>
Use OnCustomDraw to paint the control when the drawing stage is cdPrePaint.
</p>
<p>
Use IsCustomDrawn to determine if a handler routine has been assigned to an 
event handler for a specific drawing target (the control or its items).
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.OnAdvancedCustomDrawItem">
<short>
<var>OnAdvancedCustomDrawItem</var> - event handler for advanced custom 
drawing item.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTreeView.OnChange">
<short>
Event handler for a change notification in the tree view control.
</short>
<descr>
<p>
<var>OnChange</var> is a <var>TTVChangedEvent</var> property with the event 
handler signalled when a new tree node is selected on the tree view control.
</p>
<p>
It is called from the Change method. It occurs when the change timer is 
triggered while getting accessibility object information for a newly selected 
node on the tree view control. The Sender argument contains the tree view 
control for the change notification. The Node argument indicates the tree node 
for the change notification.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Change"/>
<link id="TCustomTreeView.DoSelectionChanged"/>
<link id="TTVChangedEvent"/>
</seealso>
</element>

<element name="TCustomTreeView.OnChanging">
<short>
Event handler signalled before the selected node in the tree view control is 
changed.
</short>
<descr>
<p>
<var>OnChanging</var> is a <var>TTVChangingEvent</var> property with the 
event handler signalled prior to changing the selected node on the tree view 
control. It allows an application to determine whether the new tree node can 
become the selected node for the control.
</p>
<p>
Node is the tree node to examine in the handler routine.
</p>
<p>
Set the AllowChange argument to <b>True</b> to allow the tree node to be the 
selected node on the control.
</p>
<p>
OnChanging is signalled from the CanChange method, and occurs when a new 
value is assigned to the Selection property.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.OnCollapsed">
<short>
Event handler signalled when a tree node has been collapsed on the control.
</short>
<descr>
<p>
<var>OnCollapsed</var> is a TTVExpandedEvent property with the event handler 
signalled when a tree node has been collapsed on the tree view control. It 
allows the application to perform actions needed when a tree node has been 
collapsed - whether by using the fold indicator on the tree view or by setting 
the Expanded property in a TTreeNode to <b>False</b>.
</p>
<p>
The Sender argument contains the tree view control for the event notification.
</p>
<p>
The Node argument contains the collapsed tree node for the event.
</p>
<p>
OnCollapsed is signalled from the Collapse method, and occurs after the 
visibility and position in scroll bars have been updated for the control.
</p>
<p>
Use OnCollapsing to perform actions needed immediately prior to setting 
Expanded to <b>False</b> in a TTreeNode instance.
</p>
<p>
Use OnExpanded to perform actions needed when a tree node has been expanded on 
the tree view control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Collapse"/>
<link id="TCustomTreeView.CanCollapse"/>
<link id="TCustomTreeView.OnCollapsing"/>
<link id="TCustomTreeView.Expand"/>
<link id="TCustomTreeView.OnExpanded"/>
<link id="TTreeNode.Expanded"/>
</seealso>
</element>

<element name="TCustomTreeView.OnCollapsing">
<short>
Event handler signalled prior to collapsing a node on the tree view control.
</short>
<descr>
<p>
<var>OnCollapsing</var> is a <var>TTVCollapsingEvent</var> property with the 
event handler signalled prior to collapsing a node on the tree view control.
</p>
<p>
The Sender argument is the tree view control for the event notification.
</p>
<p>
Node contains the TTreeNode instance to be collapsed.
</p>
<p>
AllowCollapse is a variable argument which indicates if the tree node can (or 
should) be collapsed on the tree view control.
</p>
<p>
OnCollapsing is signalled from the CanCollapse method (when assigned), and 
occurs when the Expanded property in a tree node is changing from <b>True</b> 
to <b>False</b>. The value returned in AllowCollapse is used as the return 
value for the CanCollapse method. Setting AllowCollapse to <b>False</b> in the 
handler routine prevents the tree node from being collapsed.
</p>
<p>
Use OnCollapsed to perform actions needed after a tree node has been collapsed 
on the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.CanCollapse"/>
<link id="TCustomTreeView.OnCollapsed"/>
<link id="TTVCollapsingEvent"/>
<link id="TTreeNode.Expanded"/>
</seealso>
</element>

<element name="TCustomTreeView.OnCompare">
<short>
Event handler signalled to compare and sort tree nodes in their default order.
</short>
<descr>
<p>
<var>OnCompare</var> is a <var>TTVCompareEvent</var> property with the event 
handler signalled to compare nodes on the tree view control. It is signalled 
(when assigned) to determine the sort order for tree nodes in the 
DefaultTreeViewSort method. Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>
The tree view control for the event.
</dd>
<dt>Node1, Node2</dt>
<dd>
The tree nodes compared in the handler routine.
</dd>
<dt>Compare</dt>
<dd>
An Integer value with the relative sort order for the compared nodes. &lt;0 
indicates that Node1 comes before Node2 in the sort order. &lt;0 indicates 
that Node1 comes after Node2 in the sort order. 0 means that Node1 and Node2 
have the same value in the sort order.
</dd>
</dl>
<p>
If OnCompare is not assigned, the sort order for tree nodes is determined 
using the AnsiCompareStr (on Windows) or CompareStr (on UNIX-like platforms) 
routines.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.DefaultTreeViewSort"/>
<link id="TCustomTreeView.CustomSort"/>
<link id="TCustomTreeView.AlphaSort"/>
</seealso>
</element>

<element name="TCustomTreeView.OnCreateNodeClass">
<short>
Event handler signalled to get the class reference used to create new tree 
nodes.
</short>
<descr>
<p>
<var>OnCreateNodeClass</var> is signalled (when assigned) when the CreateNode 
method is executed for the tree view control.
</p>
<p>
OnCreateNodeClass occurs after the OnCustomCreateItem event handler has been 
signalled to get a TTreeNode for the purpose. If its return value is 
<b>Nil</b>, DoCreateNodeClass is called to signal OnCreateNodeClass. It is not 
signalled if a return value was assigned in the OnCustomCreateItem handler 
routine.
</p>
<p>
Sender contains the tree view control for the event handler.
</p>
<p>
NodeClass is used to return the class reference needed to create a new node 
for the control.
</p>
<p>
A new instance of the class type is created and added to the node collection 
in Items.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.CreateNode"/>
<link id="TCustomTreeView.DoCreateNodeClass"/>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.OnCustomCreateItem"/>
<link id="TTreeNodes.AddNode"/>
<link id="TTreeNodes.AddObject"/>
<link id="TTreeNodes.AddChildObject"/>
<link id="TTreeNodes.AddObjectFirst"/>
<link id="TTreeNodes.AddChildObjectFirst"/>
<link id="TTreeNodes.InternalAddObject"/>
<link id="TTreeNode"/>
</seealso>
</element>

<element name="TCustomTreeView.OnCustomCreateItem">
<short>
<var>OnCustomCreateItem</var> - event handler for custom item creation.
</short>
<descr/>
<notes>
<note>
There is no example use case in either LCL or packages installed in the IDE.
</note>
</notes>
<seealso>
<link id="TCustomTreeView.CreateNode"/>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.OnCreateNodeClass"/>
</seealso>
</element>

<element name="TCustomTreeView.OnCustomDraw">
<short>
Event handler signalled to perform custom drawing for the tree view control.
</short>
<descr>
<p>
<var>OnCustomDraw</var> is a <var>TTVCustomDrawEvent</var> property with the 
event handler signalled to perform custom drawing for the tree view control. 
It is signalled (when assigned) from the CustomDraw method, and is used to 
perform custom drawing for the control in the cdPrePaint drawing stage. It 
occurs during execution of the Paint method.
</p>
<p>
An application can implement OnCustomDraw to perform custom drawing for the 
overall control including borders and decorations not related to nodes on the 
tree view control.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>
The tree view control for the event notification.
</dd>
<dt>ARect</dt>
<dd>
The TRect instance with the bounds for the control on its canvas.
</dd>
<dt>DefaultDraw</dt>
<dd>
Boolean variable argument which indicates if Paint processing should be 
continued on return from the handler routine. Set DefaultDraw to <b>True</b> 
in the handler routine to enable drawing of the tree nodes, fold indicators, 
insert marks, and the unused area on the control. Set DefaultDraw to 
<var>False</var> to exit the paint process.
</dd>
</dl>
<p>
The handler routine should use the Canvas for the control to perform drawing 
operations on the specified bounds rectangle.
</p>
<p>
Use OnAdvancedCustomDraw to perform additional draw operations needed before 
the tree nodes on the control is painted.
</p>
<p>
Use OnCustomDrawItem and OnAdvancedCustomDrawItem to perform custom drawing 
for tree nodes on the control. Use OnCustomDrawArrow to perform custom drawing 
for expand/collapse indicators for tree nodes on the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Paint"/>
<link id="TCustomTreeView.DoPaint"/>
<link id="TCustomTreeView.CustomDraw"/>
<link id="TCustomTreeView.OnAdvancedCustomDraw"/>
<link id="TCustomTreeView.OnCustomDrawItem"/>
<link id="TCustomTreeView.OnAdvancedCustomDrawItem"/>
<link id="TCustomTreeView.OnCustomDrawArrow"/>
<link id="TCustomDrawStage"/>
<link id="TCustomDrawTarget"/>
</seealso>
</element>

<element name="TCustomTreeView.OnCustomDrawItem">
<short>
Event handler signalled to custom draw an item (tree node) on the control.
</short>
<descr>
<p>
<var>OnCustomDrawItem</var> is a <var>TTVCustomDrawItemEvent</var> property 
with the event handler signalled to custom-draw the tree nodes displayed on 
the tree view control. OnCustomDrawItem is signalled from the CustomDrawItem 
method, and occurs during processing performed in the PaintNode method for the 
control.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>
The tree view control for the event notification.
</dd>
<dt>Node</dt>
<dd>
The TTreeNode instance with the node custom-drawn in the handler routine.
</dd>
<dt>State</dt>
<dd>
TCustomDrawState value with the drawing state for the tree node.
</dd>
<dt>DefaultDraw</dt>
<dd>
Variable Boolean argument used to indicate whether the PaintNode process can 
continue. Set to <b>False</b> in the handler routine to halt further paint 
operations for the tree node.
</dd>
</dl>
<p>
If either OnCustomDrawItem or OnAdvancedCustomDrawItem are assigned, the 
IsCustomDrawn method returns <b>True</b>.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.CustomDrawItem"/>
<link id="TCustomTreeView.OnAdvancedCustomDrawItem"/>
<link id="TCustomTreeView.IsCustomDrawn"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.DoPaint"/>
<link id="TCustomTreeView.Paint"/>
<link id="TTreeNode"/>
<link id="TTVCustomDrawItemEvent"/>
</seealso>
</element>

<element name="TCustomTreeView.OnCustomDrawArrow">
<short>
Event handler signalled to custom draw expand / collapse (fold) indicators 
for a tree node.
</short>
<descr>
<p>
<var>OnCustomDrawArrow</var> is a <var>TTVCustomDrawArrowEvent</var> property 
with the event handler signalled to custom-draw the expand/collapse (fold) 
indicator for a node on the tree view control.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>
The tree view control for the event notification.
</dd>
<dt>ARect</dt>
<dd>
TRect instance with the bounds on the drawing area where the indicator should 
be drawn.
</dd>
<dt>ACollapsed</dt>
<dd>
Boolean value which indicates which indicator (expanded or collapsed) to to 
draw on the tree view control. <b>True</b> indicates that the collapsed arrow 
should be drawn.
</dd>
</dl>
<p>
Use the Canvas for the control to perform drawing operations in the handler 
routine.
</p>
<p>
OnCustomDrawArrow is signalled (when assigned) from the DoPaintNode method. If 
OnCustomDrawArrow has not been assigned, the default drawing routines in the 
class are used to paint the indicator using the style in the ExpandSignType, 
ExpandSignSize, ExpandSignWidth, and ExpandSignColor properties.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.ExpandSignType"/>
<link id="TCustomTreeView.ExpandSignSize"/>
<link id="TCustomTreeView.ExpandSignWidth"/>
<link id="TCustomTreeView.ExpandSignColor"/>
<link id="TTVCustomDrawArrowEvent"/>
</seealso>
</element>

<element name="TCustomTreeView.OnDeletion">
<short>
Event handler signalled when a node is deleted from the node tree.
</short>
<descr>
<p>
<var>OnDeletion</var> is a <var>TTVExpandedEvent</var> property with the event 
handler signalled when a tree node is deleted from the node tree in the Items 
property. It is signalled (when assigned) from the Delete method. It occurs 
when a TTreeNode instance in Items is freed.
</p>
<p>
Arguments to handler routine include:
</p>
<dl>
<dt>Sender</dt>
<dd>
The object instance (TCustomTreeView) for the event notification.
</dd>
<dt>Node</dt>
<dd>
The TTreeNode instance which is being deleted.
</dd>
</dl>
<p>
OnDeletion occurs after the States property in the tree view has been updated 
to include nsDeleting, and before the TTreeNode instance is destroyed.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Delete"/>
<link id="TCustomTreeView.States"/>
<link id="TCustomTreeView.Items"/>
<link id="TTreeNode.Destroy"/>
</seealso>
</element>

<element name="TCustomTreeView.OnEdited">
<short>
Event handler signalled when the tree view control has been edited.
</short>
<descr>
<p>
<var>OnEdited</var> is a <var>TTVEditedEvent</var> property with the event 
handler signalled when editing has been completed for a node on the tree view 
control.
</p>
<p>
OnEdited is signalled (when assigned) from the EndEditing method, and occurs 
when the edited text for the node is retrieved from the node editor and stored 
in the TTreeNode instance. It allows the application to examine, update, or 
override the value stored in the Text property for the node.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>Sender</dt>
<dd>
The object instance (TCustomTreeView) for the event.
</dd>
<dt>Node</dt>
<dd>
The TTreeNode instance for the edited value.
</dd>
<dt>S</dt>
<dd>
A String variable with the new value from the tree node editor. The handler 
routine can assign a new value to the argument.
</dd>
</dl>
<p>
OnEditing occurs after the States property has been updated to exclude 
tvsIsEditing from the flag values, and before the new value is stored in the 
TTreeNode instance.
</p>
<p>
Use OnEndEditing to perform actions needed when the tree node is disconnected 
from the internal node Editor and the control is redrawn.
</p>
<p>
Use OnEditing to perform actions needed when editing is started for a tree 
node on the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.EndEditing"/>
<link id="TCustomTreeView.States"/>
<link id="TCustomTreeView.OnEditingEnd"/>
<link id="TCustomTreeView.OnEditing"/>
<link id="TTreeNode.Text"/>
<link id="TTVEditedEvent"/>
</seealso>
</element>

<element name="TCustomTreeView.OnEditing">
<short>
Event handler signalled to determine whether the editor can be enabled for a 
tree node.
</short>
<descr>
<p>
<var>OnEditing</var> is a <var>TTVEditingEvent</var> property with the event 
handler signalled to determine whether an editor can be enabled for a node on 
the tree view control. OnEditing is signalled (when assigned) from the CanEdit 
method, and occurs when the BeginEditing method is called. This can be in 
response to a key down event handled for the tree view control, or when the 
EditText method is called for a TTreeNode instance in Items.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>
Sender
</dt>
<dd>
The object instance (TCustomTreeView) for the event.
</dd>
<dt>
Node
</dt>
<dd>
The TTreeNode instance to be edited on the control.
</dd>
<dt>
AllowEdit
</dt>
<dd>
A Boolean variable argument which indicates whether the node editor can be 
enabled for the tree node. The handler routine can set AllowEdit to False to 
prevent the node editor from being enabled.
</dd>
</dl>
<p>
Use OnEdited to perform actions needed when editing has been completed for the 
node.
</p>
<p>
Use OnEditingEnd to perform actions needed when a tree node is disconnected 
from the node editor for the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.CanEdit"/>
<link id="TCustomTreeView.BeginEditing"/>
<link id="TCustomTreeView.EndEditing"/>
<link id="TCustomTreeView.OnEditingEnd"/>
<link id="TCustomTreeView.KeyDown"/>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.States"/>
<link id="TTreeNode.EditText"/>
</seealso>
</element>

<element name="TCustomTreeView.OnEditingEnd">
<short>
Event handler signalled when EndEditing is called for the control.
</short>
<descr>
<p>
<var>OnEditingEnd</var> is a <var>TTVEditingEndEvent</var> property with the 
event handler signalled when the node editor for the tree view control is 
deactivated or reset. It is signalled (when assigned) from the EndEditing 
method, which occurs during node selection or scrolling and when a tree node 
calls its EndEdit method.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>
Sender
</dt>
<dd>
The object instance (TCustomTreeView) for the event.
</dd>
<dt>
Node
</dt>
<dd>
The tree node which was edited on the control.
</dd>
<dt>
Cancel
</dt>
<dd>
A Boolean value which indicates if the editing is being cancelled. 
<b>False</b> generally indicates that editing is being reset due to selection 
or scrolling of tree nodes on the control.
</dd>
</dl>
<p>
Use OnEditingEnd to perform any action needed that result from the editing 
action or the node editor reset.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.EndEditing"/>
<link id="TTreeNode.EndEdit"/>
<link id="TTVEditingEndEvent"/>
</seealso>
</element>

<element name="TCustomTreeView.OnExpanded">
<short>
Event handler signalled when a node on the tree view control has been expanded.
</short>
<descr>
<p>
<var>OnExpanded</var> is a <var>TTVExpandedEvent</var> property with the event 
handler signalled when a node on the tree view control has been expanded. It 
is signalled (when assigned) from the Expand method, and occurs after child 
nodes have been displayed and scroll bars for the control have been updated. 
Values in the States property have already been updated to indicate that a 
node has been expanded and that visible items need to be updated.
</p>
<p>
An application can implement a handler routine to perform actions needed when 
the tree node or its children become visible on the control.
</p>
<p>
Arguments for the event handler include:
</p>
<dl>
<dt>
Sender
</dt>
<dd>
The object instance (TCustomTreeView) for the event.
</dd>
<dt>
Node
</dt>
<dd>
The TTreeNode instance with the node expanded on the tree view control.
</dd>
</dl>
<p>
Use OnExpanding to perform actions needed immediately prior to expanding a 
node on the tree view control.
</p>
<p>
Use OnCollapsing and OnCollapsed to perform actions before or after a node is 
collapsed on the tree view control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Expand"/>
<link id="TCustomTreeView.OnExpanding"/>
<link id="TCustomTreeView.OnCollapsing"/>
<link id="TCustomTreeView.OnCollapsed"/>
<link id="TCustomTreeView.AutoExpand"/>
<link id="TCustomTreeView.CanCollapse"/>
<link id="TCustomTreeView.CanExpand"/>
<link id="TCustomTreeView.Collapse"/>
<link id="TCustomTreeView.States"/>
<link id="TTVExpandedEvent"/>
<link id="TTreeNode.Expand"/>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.Visible"/>
</seealso>
</element>

<element name="TCustomTreeView.OnExpanding">
<short>
Event handler signalled prior to expanding a node on the tree view control.
</short>
<descr>
<p>
<var>OnExpanding</var> is a <var>TTVExpandingEvent</var> property with the 
event handler signalled before a tree node is expanded on the tree view 
control. It is signalled (when assigned) from the CanExpand method, and allows 
the application to perform actions needed before the tree node is expanded to 
reveal its child nodes.
</p>
<p>
Arguments for the event handler include:
</p>
<dl>
<dt>
Sender
</dt>
<dd>
Object instance (TCustomTreeView) for the event.
</dd>
<dt>
Node
</dt>
<dd>
The TTreeNode instance to be expanded on the tree view control.
</dd>
<dt>
AllowExpansion
</dt>
<dd>
Boolean variable argument which indicates whether the tree node can be 
expanded on the control. Set AllowExpansion to <b>False</b> to prevent 
expansion of the tree node.
</dd>
</dl>
<p>
OnExpanding is <b>not</b> signalled if the tree node does not have any 
child nodes (HasChildren is <b>False</b>).
</p>
<p>
Use OnExpanded to perform actions needed after a tree node has been expanded 
on the control.
</p>
<p>
Use OnCollapsing and OnCollapsed to perform actions before or after a node is 
collapsed on the tree view control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.CanExpand"/>
<link id="TCustomTreeView.NodeHasChildren"/>
<link id="TCustomTreeView.OnExpanded"/>
<link id="TCustomTreeView.OnCollapsing"/>
<link id="TCustomTreeView.OnCollapsed"/>
<link id="TTVExpandingEvent"/>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.Visible"/>
<link id="TTreeNode.HasChildren"/>
</seealso>
</element>

<element name="TCustomTreeView.OnGetImageIndex">
<short>
Event handler signalled to get the ordinal position for the image displayed 
on a tree node.
</short>
<descr>
<p>
<var>OnGetImageIndex</var> is a <var>TTVExpandedEvent</var> property with the 
event handler signalled to get the index for an image displayed on a tree 
node. The index is an ordinal position in the Images assigned for the control. 
OnGetImageIndex allows a value assigned to the ImageIndex property in the tree 
node to be overridden, or set to a default value.
</p>
<p>
OnGetImageIndex is signalled (when assigned) from the DoPaintNode method. 
It occurs when the Icon for a node is drawn using the Images for the tree view 
control. It is not a signalled if Images has not been assigned (contains 
<b>Nil</b>).
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>
Sender
</dt>
<dd>
The object instance (TCustomTreeView) for the event.
</dd>
<dt>
Node
</dt>
<dd>
The TTreeNode instance examined in the handler routine.
</dd>
</dl>
<p>
The handler routine should select and assign a value to the ImageIndex 
property in Node; there is no way to provide the value as a separate argument 
or return value.
</p>
<p>
Use OnGetSelectedIndex to get the image index for the a selected node on the 
tree view control.
</p>
</descr>
<seealso>
<link id="TCustomTreeview.Images"/>
<link id="TCustomTreeview.DoPaintNode"/>
<link id="TCustomTreeview.DoPaint"/>
<link id="TCustomTreeview.OnGetSelectedIndex"/>
<link id="TTreeNode.ImageIndex"/>
<link id="TTVExpandedEvent"/>
</seealso>
</element>

<element name="TCustomTreeView.OnGetSelectedIndex">
<short>
Event handler signalled to get the ordinal position for the image displayed 
for a selected node on the tree view control.
</short>
<descr>
<p>
<var>OnGetSelectedIndex</var> is a <var>TTVExpandedEvent</var> property with 
the event handler signalled to get the index position for the selected image 
on a tree view node. The index is an ordinal position in the Images assigned 
for the control.
</p>
<p>
OnGetSelectedIndex is signalled (when assigned) from the OnGetSelectedIndex 
method, and occurs when a tree node is painted to the tree view control. It 
allows a value assigned to the SelectedIndex property in the tree node to be 
overridden, or set to a default value. OnGetSelectedIndex is <b>not</b> 
signalled if Images has not been assigned (is <b>Nil</b>).
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>
Sender
</dt>
<dd>
The object instance (TCustomTreeView) for the event.
</dd>
<dt>
Node
</dt>
<dd>
The TTreeNode instance examined in the handler routine.
</dd>
</dl>
<p>
The handler routine should select and assign a value to the SelectedIndex 
property in Node; there is no way to provide the value as a separate argument 
or return value.
</p>
<p>
Use OnGetImageIndex to get the image index for the a node which is not 
selected on the tree view control.
</p>
</descr>
<seealso>
<link id="TCustomTreeview.Images"/>
<link id="TCustomTreeview.DoPaintNode"/>
<link id="TCustomTreeview.DoPaint"/>
<link id="TCustomTreeview.OnGetImageIndex"/>
<link id="TTreeNode.SelectedIndex"/>
<link id="TTVExpandedEvent"/>
</seealso>
</element>

<element name="TCustomTreeView.OnHasChildren">
<short>
Event handler signalled to determine if a given node in the tree view has 
child nodes.
</short>
<descr>
<p>
<var>OnHasChildren</var> is a <var>TTVHasChildrenEvent</var> property with the 
event handler signalled to determine whether a specified node has child nodes. 
It is signalled (when assigned) from the NodeHasChildren method, and allows 
the control to determine whether child nodes for a given node can be displayed 
on the control. It occurs when a TTreeNode instance gets the value for its 
HasChildren property and updates the States for the node.
</p>
<p>
Arguments to the event handler include:
</p>
<dl>
<dt>
Sender
</dt>
<dd>
The TCustomTreeView instance for the event.
</dd>
<dt>
ANode
</dt>
<dd>
The TTreeNode instance examine for child nodes in the handler routine.
</dd>
</dl>
<p>
The handler routine returns a Boolean value which indicates whether the 
specified node has child nodes which can be displayed on the control. The 
return value can be set to False - even when the tree node actually has child 
nodes. This allows properties in child nodes, like Data or Level, to be 
used to determine their effective visibility.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.NodeHasChildren"/>
<link id="TTVHasChildrenEvent"/>
<link id="TTreeNode.HasChildren"/>
<link id="TTreeNode.States"/>
<link id="TTreeNode.Items"/>
</seealso>
</element>

<element name="TCustomTreeView.OnNodeChanged">
<short>
Event handler signalled when the text for a tree node has been changed.
</short>
<descr>
<p>
<var>OnNodeChanged</var> is a <var>TTVNodeChangedEvent</var> property with 
the event handler signalled when the text in a tree node has been changed. 
OnNodeChanged is signalled from the <var>NodeChanged</var> method, and allows 
actions to be performed when the Node is updated.
</p>
<p>
NodeChanged and OnNodeChanged are called from the 
<var>TTreeNode.Changed</var> method, and occurs after the value in the 
<var>Text</var> property for the TTreeNode instance has been updated.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.OnSelectionChanged">
<short>
Event handler signalled when the selection in the tree view control is 
changed.
</short>
<descr>
<p>
<var>OnSelectionChanged</var> is a <var>TNotifyEvent</var> property with the 
event handler signalled when the selection for the control has been changed. 
OnSelectionChanged is signalled (when assigned) from the 
<var>DoSelectionChanged</var> method, and occurs after the value in 
<var>Selection</var> has been updated. It also occurs when the value in 
<var>MultiSelected</var> is changed.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.PathDelimiter">
<short>
Delimiter used to separate node identifiers in the path to a given tree node.
</short>
<descr>
<p>
<var>PathDelimiter</var> is a <var>String</var> property which contains the 
delimiter used between the identifiers for tree nodes in a given path. The 
default value for the property in TCustomTreeView is the '/' (Forward Slash) 
character.
</p>
<p>
PathDelimiter is used when a TTreeNode instance, owned by the tree view, 
build the path to the node in its GetTextPath method. If the path starts with 
the value in PathDelimiter, it represents the root for the tree. Every node 
in a tree is located in the hierarchy below the top level node '/'. The 
delimiter is appended after each ancestor node leading to the current tree 
node.
</p>
<p>
For example:
</p>
<code>
/node1
/node1/childnode1
/node1/childnode2
/node1/childnode3
/node2
/node3
//...
</code>
<p>
PathDelimiter is used in the FindNodeWithTextPath method in TTreeNodes when 
the node identifiers in a given path are examined and retrieved.
</p>
<remark>
Please note that a different delimiter character may be used in descendent 
classes like TCustomShellTreeView.
</remark>
</descr>
<version>
Added in LCL version 3.0.
</version>
<seealso>
<link id="TTreeNode.GetTextPath"/>
<link id="TTreeNodes.FindNodeWithTextPath"/>
<link id="#lcl.shellctrls.TCustomShellTreeView">TCustomShellTreeView</link>
</seealso>
</element>

<element name="TCustomTreeView.ReadOnly">
<short>
Indicates whether the text (or caption) for tree nodes can be edited in the 
control.
</short>
<descr>
<p>
<var>ReadOnly</var> is a <var>Boolean</var> property which indicates whether 
the text for the <var>TTreeNode</var> instances in Items can be edited in the 
control. When ReadOnly is set to <b>False</b>, the <var>BeginEditing</var> 
method is not called when the <b>F2</b> key is pressed, or when the Left 
mouse button is double clicked. The default value for the property is 
<b>False</b>.
</p>
<p>
The property value is <b>True</b> when <var>tvoReadOnly</var> has been 
included in the <var>Options</var> for the control. Setting a new value for 
the property causes tvoReadOnly to be included in or excluded from the values 
in Options. Changing the value to <b>False</b> causes the 
<var>EndEditing</var> method to be called.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.RightClickSelect">
<short>
Right-click also selects tree-item. Else it only calls PopupMenu.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTreeView.RowSelect">
<short>
Paints the selection background over the full width of the control for a 
selected tree node.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTreeView.ScrolledLeft">
<short>
Horizontal coordinate for the origin of the visible display area.
</short>
<descr>
<p>
ScrolledLeft is an Integer Property with the horizontal coordinate for the 
origin of the visible display area in the tree view control.
</p>
<p>
Use ScrolledTop for the vertical coordinate for the origin of the visible 
display area.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.ScrolledTop">
<short>
Vertical coordinate for the origin of the visible display area.
</short>
<descr>
<p>
ScrolledTop is an Integer Property with the vertical coordinate for the 
origin of the visible display area in the tree view control.
</p>
<p>
Use ScrolledLeft for the horizontal coordinate for the origin of the visible 
display area.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.ShowButtons">
<short>
Enables an expand/collapse (fold/unfold) icon for nodes with child nodes.
</short>
<descr>
<p>
<var>ShowButtons</var> is a <var>Boolean</var> property which indicates 
whether an expand / collapse (fold) indicator is drawn for a tree node which 
has child nodes. The default value for the property is <b>True</b>, and causes 
an indicator to be drawn for qualified tree nodes.
</p>
<p>
ShowButtons is a convenience property; its value is read from and written to 
the Options for the control. When set to <b>True</b>, the value tvoShowButtons 
is included in the Options property. When set to <b>False</b>, tvoShowButtons 
is excluded from Options. Changing the value for the property causes the 
control to be redrawn.
</p>
<p>
ShowButtons is used during the paint process in the DoPaintNode method.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.ExpandSignType"/>
<link id="TCustomTreeView.ExpandSignColor"/>
<link id="TCustomTreeView.ExpandSignSize"/>
<link id="TCustomTreeView.ExpandSignWidth"/>
<link id="TCustomTreeView.AutoExpand"/>
<link id="TCustomTreeView.ShowLines"/>
<link id="TCustomTreeView.ShowRoot"/>
<link id="TCustomTreeView.ShowSeparators"/>
<link id="TTreeNode.HasChildren"/>
<link id="TTreeNode.Expanded"/>
</seealso>
</element>

<element name="TCustomTreeView.ShowLines">
<short>
Enables or disables the horizontal and vertical lines which join nodes in the 
tree hierarchy.
</short>
<descr>
<p>
<var>ShowLines</var> is a <var>Boolean</var> property used to enable or 
disable drawing of lines which connect the nodes on the tree view control. 
When enabled, a line is drawn to connect a tree node to its parent, sibling 
and child nodes. Values in TreeLineColor and TreeLinePenStyle are used to draw 
the connector lines in the DoPaintNode method.
</p>
<p>
ShowLines is a convenience property; its value is read from and written to the 
Options for the control. ShowLines contains <b>True</b> when the value 
tvoShowLines has been included in Options. Changing the value for the property 
causes Options to be updated to include or exclude tvoShowLines as needed for 
the Boolean value. The control is redrawn when Options is modified.
</p>
<p>
The default value for the ShowLines property is <b>True</b>.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.TreeLineColor"/>
<link id="TCustomTreeView.TreeLinePenStyle"/>
<link id="TCustomTreeView.ShowButtons"/>
<link id="TCustomTreeView.ShowRoot"/>
<link id="TCustomTreeView.ShowSeparators"/>
</seealso>
</element>

<element name="TCustomTreeView.ShowRoot">
<short>
Enables or disables drawing the root node for the tree view control.
</short>
<descr>
<p>
<var>ShowRoot</var> is a <var>Boolean</var> property which Enables or disables 
drawing the root node for the tree view control.
</p>
<p>
When enabled, the root node is represented by an expand / collapse indicator 
which does not contain any text. Top-level nodes which have child nodes also 
have expand / collapse indicators when ShowRoot is enabled. When disabled, the 
expand / collapse indicators at the top-level of the node hierarchy are 
omitted and only the text for the top-level nodes is displayed. The default 
value for the property is <b>True</b>.
</p>
<p>
ShowRoot is a convenience property; its value is read from and written to the 
Options for the control. ShowRoot contains <b>True</b> when the value 
tvoShowRoot has been included in the Options property, and <b>False</b> if the 
value has been omitted. Changing the value for the property causes Options to 
be updated to include or exclude tvoShowRoot as needed for the Boolean value. 
The control is redrawn when the value in Options is modified.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.ShowButtons"/>
<link id="TCustomTreeView.ShowLines"/>
<link id="TCustomTreeView.ShowSeparators"/>
<link id="TCustomTreeView.ExpandSignType"/>
<link id="TCustomTreeView.ExpandSignColor"/>
<link id="TCustomTreeView.ExpandSignSize"/>
<link id="TCustomTreeView.ExpandSignWidth"/>
</seealso>
</element>

<element name="TCustomTreeView.ShowSeparators">
<short>
Indicates whether horizontal separator lines are drawn between nodes on the 
tree view control.
</short>
<descr>
<p>
<var>ShowSeparators</var> is a <var>Boolean</var> property which enables or 
disables drawing of separator lines between the nodes on the tree view 
control. When enabled, a line is drawn across the width of the control between 
each of the nodes. The values in TreeLineColor and TreeLinePenStyle are used 
to draw the horizontal line in the DoPaintNode method.
</p>
<p>
ShowSeparators is a convenience property; its value is read from and written 
to the Options for the control. ShowSeparators contains <b>True</b> when the 
value tvoShowSeparators has been included in the Options property, and 
<b>False</b> if the value has been omitted. Changing the value for the 
property causes Options to be updated to include or exclude tvoShowSeparators 
as needed for the Boolean value. The control is redrawn when the value in 
Options is modified.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.TreeLineColor"/>
<link id="TCustomTreeView.TreeLinePenStyle"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.ShowButtons"/>
<link id="TCustomTreeView.ShowLines"/>
<link id="TCustomTreeView.ShowSeparators"/>
</seealso>
</element>

<element name="TCustomTreeView.SortType">
<short>
Allows items to be sorted by caption, by the Data property, or both.
</short>
<descr>
<p>
Changing the Text or Data of a node will sort again. While adding nodes does 
not. Call TreeView1.AlphaSort to sort the whole tree. Call 
ParentNode.CustomSort(nil) to sort only the child nodes of a single node.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.ToolTips">
<short>
Indicates whether tool tips (hints) are enabled for nodes on the tree view 
control.
</short>
<descr>
<p>
<var>ToolTips</var> is a <var>Boolean</var> property which indicates whether 
tool tips (pop-up hints) are enabled for nodes on the tree view control. A 
tool tip is activated when the mouse pointer is hovered over a node. The text 
displayed on the tool tip is set to the Text property in the TTreeNode 
instance. The tool tip is displayed only when the text for the node is longer 
than the available display area on the control.
</p>
<p>
ToolTips is a convenience property; it indicates whether tvoToolTips has been 
included in the Options for the control. The default value for the property is 
True. Changing the property value causes Options to be updated to include or 
exclude tvoToolTips in the set type.
</p>
<p>
ToolTips is used (indirectly) in methods which respond to mouse or mouse wheel 
events like: DoMouseWheel, DoMouseWheelHorz, and MouseMove.
</p>
<p>
ToolTips is temporarily disabled when a drag operation is started for a node 
on the tree view control.
</p>
<p>
Use Hint and ShowHint to enable or disable a pop-up hint window on the 
control. Both Hints and ToolTips can be active at the same time - but the 
effect may be a little overwhelming.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.DoMouseWheel"/>
<link id="TCustomTreeView.DoMouseWheelHorz"/>
<link id="TCustomTreeView.MouseMove"/>
<link id="TTreeNode.Text"/>
<link id="TTreeViewOptions"/>
<link id="TTreeViewOption"/>
<link id="#lcl.controls.TControl.Hint">TControl.Hint</link>
<link id="#lcl.controls.TControl.ShowHint">TControl.ShowHint</link>
</seealso>
</element>

<element name="TCustomTreeView.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the constructor for <var>TCustomTreeView</var>. It calls 
the inherited <var>Create</var> method, and sets the default values for 
members and properties in the class instance. These include:
</p>
<ul>
<li>Width</li>
<li>Height</li>
<li>Color</li>
<li>ParentColor</li>
<li>BorderStyle</li>
<li>BorderWidth</li>
<li>TabStop</li>
<li>DefaultItemHeight</li>
<li>ExpandSignType</li>
<li>Options</li>
<li>ScrollBars</li>
<li>SortType</li>
<li>SelectedColor</li>
<li>SelectedFontColor</li>
<li>SeparatorColor</li>
<li>HotTrackColor</li>
<li>DisabledFontColor</li>
<li>Indent</li>
<li>PathDelimiter</li>
</ul>
<p>
Create allocates resources needed for properties including:
</p>
<ul>
<li>Items</li>
</ul>
<p>
It also allocated resources for internal members including:
</p>
<ul>
<li>change timer</li>
<li>state change link</li>
<li>tree node editor</li>
</ul>
<p>
Create assigns and configures event handler routines used internally in the 
class instance.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
<link id="#rtl.classes.TComponent.Create">TComponent.Create</link>
</seealso>
</element>
<element name="TCustomTreeView.Create.AnOwner">
<short>
Owner of the class instance.
</short>
</element>

<element name="TCustomTreeView.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for the class instance. It 
calls LockSelectionChangeEvent on entry to prevent changes to the Selected 
tree node while the class is being freed. Destroys frees references and 
resources allocated to members in the class instance. It calls the inherited 
Destroy method prior to exit.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
<link id="#rtl.classes.TComponent.Destroy">TComponent.Destroy</link>
</seealso>
</element>

<element name="TCustomTreeView.AlphaSort">
<short>Sorts tree nodes using default sort procedure (alphabetic).</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.AlphaSort.Result">
<short>
Always returns <b>False</b> (because CustomSort returns <b>False</b>).
</short>
</element>

<element name="TCustomTreeView.ClearSelection">
<short>Clears the selection in the tree view control.</short>
<descr>
<p>
<var>ClearSelection</var> is a method used to clear tree nodes selected in 
the tree view control. ClearSelection uses the value in 
<var>MultiSelect</var> to determine the actions needed to clear the selected 
nodes.
</p>
<p>
If <var>MultiSelect</var> has been enabled in the <var>Options</var> for the 
control, the ClearMultiSelection method is called to clear the selected nodes.
</p>
<p>
<var>KeepPrimary</var> indicates whether the first tree node in a 
multi-selection is retained. When set to <b>False</b>, all selected nodes are 
removed from the Selections property. Otherwise, the tree node in Selected is 
retained.
</p>
<p>
If MultiSelect has not been enabled, the value in the Selected property is 
set to <b>Nil</b> to clear the single node selection.
</p>
<p>
No actions are performed in the method when MultiSelect is <b>False</b> and 
KeepPrimary is <b>True</b>.
</p>
<p>
ClearSelections is called from methods that handle mouse or keyboard 
selection, like <var>KeyDown</var> and <var>MouseDown</var>. It is also 
called when a new value is assigned to the MultiSelect property.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.ClearSelection.KeepPrimary">
<short>
<b>True</b> if the first node in a multi-selection is kept.
</short>
</element>

<element name="TCustomTreeView.ConsistencyCheck">
<short>
Verifies that values are updated and valid for the tree view control.
</short>
<descr>
<p>
<var>ConsistencyCheck</var> is a method used to validate and/or update 
property and member values in the control. It raises an <var>Exception</var> 
(catchable in the debugger) for invalid property values in the control, 
including:
</p>
<dl>
<dt>Canvas</dt>
<dd>Raises the exception if Canvas is not assigned.</dd>
<dt>DefaultItemHeight</dt>
<dd>Raises the exception if DefaultItemHeight has a negative value.</dd>
<dt>FIndent member</dt>
<dd>Raises the exception if FIndent has a negative value.</dd>
<dt>FMaxRight member</dt>
<dd>Raises the exception if FMaxRight has a negative value.</dd>
<dt>IsEditing / Selected</dt>
<dd>
Raises the exception if IsEditing is <b>True</b> and Selected is unassigned.
</dd>
<dt>Selected</dt>
<dd>Raises the exception if the node in Selected is not visible.</dd>
<dt>Items</dt>
<dd>Raises the exception if Items has not been assigned.</dd>
</dl>
<p>
The Items property has additional validations performed for its property 
values. The ConsistencyCheck method in Items is called to verify node counts, 
update counts, index values, and hierarchy levels in the container. An 
Exception is raised for error conditions in these items as well.
</p>
<p>
Values in the States property are examined and updated (when needed) to 
refresh the display coordinates for tree nodes, the maximum width for the 
expanded nodes in the control, and the levels in the tree hierarchy. These 
operations may also raise an Exception for invalid states or values.
</p>
<p>
ConsistencyCheck is called from the WriteDebugReport method.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.CustomSort">
<short>
If <b>True</b>, the external method specified in <var>SortProc</var> is used 
for sorting.
</short>
<descr>
<p>
CustomSort is a Boolean function used to sort the tree nodes in Items using 
the sort procedure specified in SortProc. If SortProc is not assigned, the 
DefaultTreeViewSort method is used in the sort procedure.
</p>
<p>
No actions are performed in the method when the number of tree nodes in Items 
is 0 (zero).
</p>
<p>
The return value is always <b>False</b>.
</p>
<p>
CustomSort calls BeginUpdate to minimize updates during the sorting process. 
EndUpdates is called when the sorting process is completed.
</p>
<p>
Top-level nodes in Items are sorted by calling the SortTopLevelNodes in 
items. Child nodes are then sorted (when present), starting at the first 
top-level node in the tree. The ClearCache method in Items is called to 
invalidate the node cache for the control.
</p>
<p>
The States property is updated to force the node coordinates and scroll bars 
to be refreshed in the control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.CustomSort.Result">
<short>Always returns <b>False</b>.</short>
</element>
<element name="TCustomTreeView.CustomSort.SortProc">
<short>Routine used to implement the sort procedure in the method.</short>
</element>

<element name="TCustomTreeView.DefaultTreeViewSort">
<short>
<var>DefaultTreeViewSort</var> - returns result of string comparison between 
names of Node1 and Node2
</short>
<descr>
<p>
<var>DefaultTreeViewSort</var> - returns result of string comparison between 
names of Node1 and Node2.
</p>
<p>
<var>DefaultTreeViewSort</var> compares the text of two TreeNodes and returns 
the following result:
</p>
<dl>
<dt>&lt; 0</dt>
<dd>if <var>Node1.Text&lt;Node2.Text</var>.</dd>
<dt>0</dt>
<dd>if <var>Node1.Text=Node2.Text</var>.</dd>
<dt>&gt; 0</dt>
<dd>if <var>Node1.Text&gt;Node2.Text</var>.</dd>
</dl>
<p>
The comparison takes into account ANSI characters, i.e. it takes care of 
accented characters. Unlike AnsiCompareText, the comparison is case sensitive.
</p>
</descr>
</element>

<element name="TCustomTreeView.EraseBackground">
<short>Has an empty implementation in the current LCL version.</short>
<descr/>
<seealso>
<link id="#lcl.controls.TWinControl.EraseBackground">TWinControl.EraseBackground</link>
</seealso>
</element>
<element name="TCustomTreeView.EraseBackground.DC">
<short/>
</element>

<element name="TCustomTreeView.GetHitTestInfoAt">
<short>
Returns hit test results for the specified coordinates.
</short>
<descr>
<p>
<var>GetHitTestInfoAt</var> is a THitTests function used to gather hit test 
results for the coordinates specified in X and Y. The return value indicates 
the part(s) of a node on the tree view control beneath the given coordinates. 
The results are an empty set if none of the THitTest values apply to the 
specified position (Such as when X, Y is not within the client area for the 
control).
</p>
<p>
In the current implementation, the following THitTest enumeration values are 
used:
</p>
<dl>
<dt>
htOnItem
</dt>
<dd>
The position is over a node on the tree view control.
</dd>
<dt>
htOnIndent
</dt>
<dd>
The position is over the indent prior to a node.
</dd>
<dt>
htOnButton
</dt>
<dd>
The position is over an expand / collapse indicator for a tree node.
</dd>
<dt>
htOnStateIcon
</dt>
<dd>
The position is over the state icon for a tree node.
</dd>
<dt>
htOnIcon
</dt>
<dd>
The position is over the main icon for a tree node.
</dd>
<dt>
htOnLabel
</dt>
<dd>
The position is over the text displayed for a tree node.
</dd>
<dt>
htNowhere
</dt>
<dd>
The position is over a part of a node which does not qualify for the previous 
values.
</dd>
</dl>
<p>
The following THitTest values are not used in the current implementation: 
htAbove, htBelow, htOnRight, htToLeft, and htToRight.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.GetNodeAtY"/>
<link id="TTreeNode"/>
<link id="THitTests"/>
<link id="THitTest"/>
</seealso>
</element>
<element name="TCustomTreeView.GetHitTestInfoAt.Result">
<short>
Set of THitTest values for the node at the specified coordinates.
</short>
</element>
<element name="TCustomTreeView.GetHitTestInfoAt.X">
<short>
Horizontal coordinate examined in the method.
</short>
</element>
<element name="TCustomTreeView.GetHitTestInfoAt.Y">
<short>
Vertical coordinate examined in the method.
</short>
</element>

<element name="TCustomTreeView.GetNodeAt">
<short>
Searches all expanded nodes for the tree node at the specified position.
</short>
<descr>
<p>
Calls GetNodeAtY to get the node which has the vertical coordinate specified 
in Y. The node is used as the return value for the method if the X coordinate 
is within the display area for the node content defined as the left edge of 
the state icon and the right edge of the Text for the node. The return value 
is <b>Nil</b> if a node is not found, or the coordinates are not in the usable 
client area for the control (ClientWidth-BorderWidth and ClientHeight-BorderWidth).
</p>
</descr>
<seealso>
<link id="TCustomTreeView.GetNodeAt"/>
<link id="TCustomTreeView.Options"/>
<link id="TTreeViewOptions"/>
<link id="TTreeViewOption"/>
</seealso>
</element>
<element name="TCustomTreeView.GetNodeAt.Result">
<short>
Visible tree node at the specified position, or <b>Nil</b> when a node is not 
found at the position.
</short>
</element>
<element name="TCustomTreeView.GetNodeAt.X">
<short>Horizontal coordinate for the node or row.</short>
</element>
<element name="TCustomTreeView.GetNodeAt.Y">
<short>Vertical coordinate for the tree node or row.</short>
</element>

<element name="TCustomTreeView.GetNodeWithExpandSignAt">
<short>
Gets the tree node at the specified coordinates which has a visible expand 
indicator, or <b>Nil</b>.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.GetNodeWithExpandSignAt.Result">
<short>
Tree node at the specified position, or <b>Nil</b>.
</short>
</element>
<element name="TCustomTreeView.GetNodeWithExpandSignAt.X">
<short>
Horizontal coordinate examined in the method.
</short>
</element>
<element name="TCustomTreeView.GetNodeWithExpandSignAt.Y">
<short>
Vertical coordinate examined in the method.
</short>
</element>

<element name="TCustomTreeView.GetInsertMarkAt">
<short>
Determines if there is an insert mark at the specified coordinates.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.GetInsertMarkAt.X">
<short>
Horizontal coordinate examined in the method.
</short>
</element>
<element name="TCustomTreeView.GetInsertMarkAt.Y">
<short>
Vertical coordinate examined in the method.
</short>
</element>
<element name="TCustomTreeView.GetInsertMarkAt.AnInsertMarkNode">
<short/>
</element>
<element name="TCustomTreeView.GetInsertMarkAt.AnInsertMarkType">
<short/>
</element>

<element name="TCustomTreeView.SetInsertMark">
<short>
Places an Insert mark at the specified node in the tree.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.SetInsertMark.AnInsertMarkNode">
<short/>
</element>
<element name="TCustomTreeView.SetInsertMark.AnInsertMarkType">
<short/>
</element>

<element name="TCustomTreeView.SetInsertMarkAt">
<short>
Places an insert mark at the specified coordinates.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.SetInsertMarkAt.X">
<short>
Horizontal coordinate updated in the method.
</short>
</element>
<element name="TCustomTreeView.SetInsertMarkAt.Y">
<short>
Vertical coordinate updated in the method.
</short>
</element>

<element name="TCustomTreeView.Invalidate">
<short>
Causes the control to be redrawn when a redraw is not already in progress.
</short>
<descr>
<p>
<var>Invalidate</var> is an overridden method in <var>TCustomTreeView</var>, 
and causes the control to be redrawn if it is not already re-painting. 
Invalidate checks the <var>States</var> property for the 
<var>tvsPainting</var> flag. When present, the <var>Paint</var> method has 
already been called but not yet completed.
</p>
<p>
No actions are performed in the method when a paint operation is in progress.
</p>
<p>
Invalidate calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.States"/>
<link id="TCustomTreeView.Paint"/>
<link id="TTreeViewStates"/>
<link id="TTreeViewState"/>
<link id="#lcl.controls.TControl.Invalidate">TControl.Invalidate</link>
</seealso>
</element>

<element name="TCustomTreeView.IsEditing">
<short>
Indicates if the control is currently editing a node in the tree.
</short>
<descr>
<p>
<var>IsEditing</var> is a <var>Boolean</var> function used to determine 
whether the control is currently editing a node in the tree view. IsEditing 
checks the values in the <var>State</var> property for the 
<var>tvsIsEditing</var> flag value. The return value is <b>True</b> when 
tvsIsEditing is present in the States property.
</p>
<p>
When present, the <var>BeginEditing</var> method has been called and the 
<var>EndEditing</var> method has not yet been called.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.States"/>
<link id="TCustomTreeView.BeginEditing"/>
<link id="TCustomTreeView.EndEditing"/>
<link id="TTreeViewStates"/>
<link id="TTreeViewState"/>
</seealso>
</element>
<element name="TCustomTreeView.IsEditing.Result">
<short>
<b>True</b> if the tvsIsEditing flag is present in States.
</short>
</element>

<element name="TCustomTreeView.BeginUpdate">
<short>Starts an update process for the tree view control.</short>
<descr>
<p>
<var>BeginUpdate</var> is a method used to start an update process for the 
tree view control. BeginUpdate is used with <var>EndUpdate</var> to maintain 
update counters used to consolidate updates and event notifications in the 
control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.EndUpdate"/>
</seealso>
</element>

<element name="TCustomTreeView.EndUpdate">
<short>Finishes an update process for the tree view control.</short>
<descr>
<p>
<var>EndUpdate</var> is a method used to finish an update process for the 
tree view control. EndUpdate is used with <var>BeginUpdate</var> to maintain 
update counters used to consolidate updates and event notifications in the 
control.
</p>
<p>
EndUpdates raises an Exception (catchable in the debugger) if the internal 
update counter is 0 or less when the method is called.
</p>
<p>
EndUpdates calls the EndUpdate method in the <var>Items</var> container. 
<var>UpdateScrollBars</var> is called to refresh the position in the visible 
scroll bars when a change actually occurred in the list of tree nodes.
</p>
</descr>
<errors>
Raises an Exception if the internal update counter is 0 or less when the 
method is called.
</errors>
<seealso>
<link id="TCustomTreeView.BeginUpdate"/>
</seealso>
</element>

<element name="TCustomTreeView.FullCollapse">
<short>
Collapses all tree nodes on the tree view control.
</short>
<descr>
<p>
FullCollapse is a method used to collapse all of the nodes on the tree view 
control. It calls the BeginUpdate and EndUpdate methods to reduce the number 
of updates performed for the control while the tree nodes are being collapsed.
</p>
<p>
FullCollapse visits all top-level tree nodes in the Items property and calls 
their Collapse methods. Recursion is enabled when Collapse is called, so 
descendent tree nodes are also collapsed. Top-level nodes are still visible, 
but are displayed in the Collapsed state.
</p>
<p>
FullCollapse calls the GetFirstNode method in Items to locate the first tree 
node collapsed in the method. The GetNextSibling method in the tree node is 
called to determine the next tree node processed in the method.
</p>
<p>
Use Collapse to display a specific tree node on the tree view control in the 
collapsed state.
</p>
<p>
Use FullExpand to expand all of the tree nodes on the tree view control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Collapse"/>
<link id="TCustomTreeView.Expand"/>
<link id="TCustomTreeView.FullExpand"/>
<link id="TTreeNode.Collapse"/>
<link id="TTreeNode.Expand"/>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.GetNextSibling"/>
<link id="TTreeNodes.GetFirstNode"/>
</seealso>
</element>

<element name="TCustomTreeView.FullExpand">
<short>
Expands all tree nodes on the tree view control.
</short>
<descr>
<p>
FullExpand is a method used to expand all of the nodes on the tree view 
control. It calls the BeginUpdate and EndUpdate methods to reduce the number 
of updates performed for the control while the tree nodes are being expanded.
</p>
<p>
FullExpand visits all top-level tree nodes in Items and calls their Expand 
methods with recursion enabled. This causes the tree node and all of its 
descendent nodes to be expanded.
</p>
<p>
FullExpand calls the GetFirstNode method in Items to locate the first tree 
node expanded in the method. The GetNextSibling method in the tree node is 
called to determine the next tree node processed in the method.
</p>
<p>
Use Expand to expand a specific tree node on the tree view control.
</p>
<p>
Use FullCollapse to collapse all of the tree nodes on the tree view control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.BeginUpdate"/>
<link id="TCustomTreeView.EndUpdate"/>
<link id="TCustomTreeView.FullCollapse"/>
<link id="TCustomTreeView.Expand"/>
<link id="TTreeNodes.GetFirstNode"/>
<link id="TTreeNode.Expand"/>
<link id="TTreeNode.Collapse"/>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.GetNextSibling"/>
</seealso>
</element>

<element name="TCustomTreeView.LoadFromFile">
<short>
Loads tree nodes from the specified file.
</short>
<descr>
<p>
<var>LoadFromFile</var> is a method used to load the tree nodes from the 
specified file name into the Items property. <var>FileName</var> is a 
qualified file name which contains the textual representation for the tree 
node hierarchy generated using SaveToFile.
</p>
<p>
Each tree node in FileName is represented using leading Tab (#9) characters 
for the Level in the tree node, followed by the Text for the node and an 
end-of-line sequence (#13#10). TTreeNode instances are created and added to
the Items property when the node values are read from the file.
</p>
<p>
Use SaveToFile to store the textual representation for tree nodes in Items to 
a given file name.
</p>
<p>
Use SaveToStream and LoadFromStream to read and write the node hierarchy using 
stream-based storage.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.SaveToFile"/>
<link id="TCustomTreeView.SaveToStream"/>
<link id="TCustomTreeView.LoadFromStream"/>
<link id="TTreeNode.Level"/>
<link id="TTreeNode.Text"/>
<link id="TTreeNodes"/>
</seealso>
</element>
<element name="TCustomTreeView.LoadFromFile.FileName">
<short>
File name with the tree node data loaded in the method.
</short>
</element>

<element name="TCustomTreeView.LoadFromStream">
<short>
Loads tree nodes from the specified stream.
</short>
<descr>
<p>
<var>LoadFromStream</var> is a method used to load the tree nodes from the 
specified TStream instance into the Items property. <var>Stream</var> contains 
the textual representation for the tree node hierarchy generated using 
SaveToStream.
</p>
<p>
Each tree node in Stream is represented using leading Tab (#9) characters 
for the level in the tree node, followed by the Text for the node and an 
end-of-line sequence (#13#10). TTreeNode instances are created and added to
the Items property when the node values are read from the stream.
</p>
<remark>
LoadFromStream does <b>not</b> change the position in Stream prior to reading 
node values. It assumes the stream position has been set in the calling 
routine. It does <b>not</b> reset the stream position when the method has been 
completed.
</remark>
<p>
Use SaveToStream to store the textual representation for tree nodes in Items 
to a given TStream instance.
</p>
<p>
Use SaveToFile and LoadFromFile to read and write the node hierarchy using 
file-based storage.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.SaveToStream"/>
<link id="TCustomTreeView.SaveToFile"/>
<link id="TCustomTreeView.LoadFromFile"/>
<link id="TTreeNode.Level"/>
<link id="TTreeNode.Text"/>
<link id="TTreeNodes"/>
</seealso>
</element>
<element name="TCustomTreeView.LoadFromStream.Stream">
<short>
TStream instance with the tree node data loaded in the method.
</short>
</element>

<element name="TCustomTreeView.SaveToFile">
<short>
Saves the tree nodes in Items to the specified file.
</short>
<descr>
<p>
<var>SaveToFile</var> is a method used to save the tree nodes in Items to the 
specified file name. FileName is a qualified path to the file on the local 
file system where the tree node data is stored. If FileName already exists, it 
is recreated and previous values in the file are lost.
</p>
<p>
SaveToFile visits each of the TTreeNode instances in Items and writes a 
textual representation for the tree nodes to the file. Each tree node is 
represented by leading Tab (#9) characters to denote the Level for the tree 
node, followed by the Text for the node and an end-of-line sequence (#13#10).
</p>
<p>
Use LoadFromFile to load and recreate the tree nodes for the control from the 
file created in the method.
</p>
<p>
Use SaveToStream and LoadFromStream to read or write tree node information 
using stream-based storage.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.SaveToStream"/>
<link id="TCustomTreeView.LoadFromStream"/>
<link id="TCustomTreeView.LoadFromFile"/>
<link id="TTreeNode.Level"/>
<link id="TTreeNode.Text"/>
<link id="TTreeNodes"/>
</seealso>
</element>
<element name="TCustomTreeView.SaveToFile.FileName">
<short>
File name where the tree node data is stored.
</short>
</element>

<element name="TCustomTreeView.SaveToStream">
<short>
Saves the tree nodes in Items to the specified stream.
</short>
<descr>
<p>
<var>SaveToStream</var> is a method used to store a textual representation for 
the tree nodes in Items to the specified Stream. Stream is the TStream 
instance where the tree node data is stored.
</p>
<p>
SaveToStream visits each of the TTreeNode instances in Items and writes the 
tree node information to the stream. Each node is represented Each tree node 
is represented by leading Tab (#9) characters to denote the Level for the tree
node, followed by the Text for the node and an end-of-line sequence (#13#10).
</p>
<remark>
SaveToStream does <b>not</b> change the position in Stream prior to writing 
node values. It assumes the stream position has been set in the calling 
routine. It does <b>not</b> reset the stream position when the method has been 
completed.
</remark>
<p>
Use LoadFromStream to load and create tree nodes in Items from stream-based 
storage.
</p>
<p>
Use LoadFromFile and SaveToFile to read and write the node hierarchy using 
file-based storage.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.LoadFromStream"/>
<link id="TCustomTreeView.LoadFromFile"/>
<link id="TCustomTreeView.SaveToFile"/>
<link id="TTreeNode.Level"/>
<link id="TTreeNode.Text"/>
<link id="TTreeNodes"/>
</seealso>
</element>
<element name="TCustomTreeView.SaveToStream.Stream">
<short>
TStream instance where the tree node data is stored.
</short>
</element>

<element name="TCustomTreeView.WriteDebugReport">
<short>
Generates a formatted message with information about the tree view control and 
optionally tree nodes in Items.
</short>
<descr>
<p>
<var>WriteDebugReport</var> is a method used to generate a formatted message 
with information about the tree view control, and optionally the tree nodes in 
Items. It is used to create and write debugger messages using the DbgOut and 
DebugLn routines.
</p>
<p>
The value in Prefix identifies the tree view control and the context for the 
message. It is written, along with the ClassName and address for the class 
instance, as the first line in the debugger message.
</p>
<p>
When AllNodes is set to <b>True</b>, the WriteDebugReport method in Items is 
called to include information about the tree nodes in the container in the 
debugger message.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.WriteDebugReport.Prefix">
<short>
Arbitrary value prepended to the formatted message. Identifies the tree 
view instance or context for the message.
</short>
</element>
<element name="TCustomTreeView.WriteDebugReport.AllNodes">
<short>
<b>True</b> if values in Items are included in the formatted message.
</short>
</element>

<element name="TCustomTreeView.LockSelectionChangeEvent">
<short>
Increments the internal counter used to lock selection change events for the 
control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTreeView.UnlockSelectionChangeEvent">
<short>
Decrements the internal counter used to lock selection change events for the 
control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTreeView.GetFirstMultiSelected">
<short>
Returns the first tree node multi-selected on the tree view control.
</short>
<descr>
<p>
Uses the value from the internal member maintained in TTreeNodes. 
GetFirstMultiSelected is available when tvoAllowMultiSelect has been included 
in the Options for the control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetFirstMultiSelected.Result">
<short>First tree node in a multi-selection.</short>
</element>

<element name="TCustomTreeView.GetLastMultiSelected">
<short>
Gets the last tree node added to a multi-selection in the Items for the 
controls.
</short>
<descr>
<p>
Uses the value from the internal member maintained in TTreeNodes. 
GetLastMultiSelected is available when tvoAllowMultiSelect has been included
in the Options for the control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.GetLastMultiSelected.Result">
<short>Last tree node in a multi-selection.</short>
</element>

<element name="TCustomTreeView.Select">
<short>
Makes the specified node(s) become selected in the control.
</short>
<descr>
<p>
<var>Select</var> is an overloaded method used to make a node, array of 
nodes, or list of nodes become selected in the tree view control.
</p>
<p>
The overloaded variant with a TShiftState value allows the specified node to 
be added to the existing multi-selection when Shift contains ssCtrl. If Shift 
does not include ssCtrl, ClearSelections is called prior to storing the node 
in Selected.
</p>
<p>
The variants which accept either an array or a list of nodes always call 
ClearSelections to reset the selected state for multi-selected nodes. The 
first TTreeNode instance in either is stored in Selected. When 
tvoAllowMultiSelect has been included in Options, the Selected property in 
each of the tree nodes is set to <b>True</b>.
</p>
<p>
Use ClearSelections to reset the state for any selected nodes on the tree 
view control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.Select.Node">
<short>Tree node assigned to Selected in the method.</short>
</element>
<element name="TCustomTreeView.Select.ShiftState">
<short>
Shift state for the selection; Shift assumes multi-selection is enabled.
</short>
</element>
<element name="TCustomTreeView.Select.Nodes">
<short>
Array or TList with TTreeNode instances to add to the Selections in the 
control; assumes multi-select is enabled.
</short>
</element>

<element name="TCustomTreeView.SelectionVisible">
<short>
Indicates whether selected tree node(s) on the control are visible.
</short>
<descr>
<p>
<var>SelectionVisible</var> is a <var>Boolean</var> function which indicates 
whether the selected tree node(s) for the control are in its visible display 
area. SelectionVisible checks both multi-selections and a single selection on 
the control.
</p>
<p>
For multi-selections, the GetFirstMultiSelected and GetNextMultiSelected 
methods are called to visit each of the tree nodes. The return value is set 
to <b>True</b> when the first tree node with its IsVisible property set to 
<b>True</b> is found.
</p>
<p>
When Items does not contain multi-selections, the value in Selected is used. 
The return value is <b>True</b> when the IsFullHeightVisible property in the 
tree node is set to <b>True</b>.
</p>
<p>
SelectionVisible is used in the MakeSelectionVisible method and controls 
whether the MakeVisible method is called for the first tree node in a 
selection.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.SelectionVisible.Result">
<short>
<b>True</b> when a selected tree node on the control is visible.
</short>
</element>

<element name="TCustomTreeView.MakeSelectionVisible">
<short>
Makes a selected tree node visible on the control.
</short>
<descr>
<p>
<var>MakeSelectionVisible</var> allows the control to display a selected node 
on the tree view control. It forces the tree node to become visible in the 
display area for the control. The node made visible is either the value in 
<var>Selected</var> or the first multi-selected node in 
<var>Selections</var>. The <var>MakeVisible</var> method for the 
<var>TTreeNode</var> instance is called to update the parent nodes and the 
associated tree view control.
</p>
<p>
No actions are performed in the method when SelectionVisible returns 
<b>True</b>.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Selected"/>
<link id="TCustomTreeView.Selections"/>
<link id="TCustomTreeView.SelectionVisible"/>
<link id="TTreeNode.MakeVisible"/>
</seealso>
</element>

<element name="TCustomTreeView.ClearInvisibleSelection">
<short>
Clears selected tree node(s) in the control if they are not visible.
</short>
<descr>
<p>
If MultiSelect has been enabled in the Options for the control, the 
ClearMultiSelection method in Items is called to clear the values in the 
Selections property. Otherwise the Selected property for the TTreeNode 
instance in Selected is set to <b>False</b> (which makes the Selected 
property unassigned).
</p>
<p>
No action are performed if MultiSelect has not been enabled and Selected has 
not been assigned.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.StoreCurrentSelection">
<short>
Creates and fills a TStringList with the text for each of the tree nodes in the 
access path to the Selected node on the tree view control.
</short>
<descr>
<p>
<var>StoreCurrentSelection</var> uses the Selected property to determine the 
values returned in the TStringList instance. The Text for each of the TTreeNode 
instances is inserted in the return value in the order the nodes were visited 
to reach the Selected node. The Text for each of the tree nodes appears on a 
separate line.
</p>
<p>
If multi-selection is enabled on the tree view control, the first node in 
Selections is used in the method (same value as Selected).
</p>
<p>
It is the responsibility of the calling routine to free the TStringList 
instance in the return value. Failure to do so will result in a memory leak.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Selected"/>
<link id="TTreeNode.Parent"/>
<link id="TTreeNode.Text"/>
</seealso>
</element>
<element name="TCustomTreeView.StoreCurrentSelection.Result">
<short>
TStringList instance with the text for the nodes in the path to the selected 
node on the control.
</short>
</element>

<element name="TCustomTreeView.ApplyStoredSelection">
<short>
Selects the tree node with the access path represented in the specified string 
list.
</short>
<descr>
<p>
<var>ApplyStoredSelection</var> is used to locate a tree node in Items which 
matches the specified access path. ASelection contains values, as returned by 
StoreCurrentSelection, where each line is the text for a tree node in the path 
to the selected node.
</p>
<p>
ApplyStoredSelection searches the sibling and child nodes in Items to locate a 
tree node which matches the specified values. When a node is found, Selected is 
set to the TTreeNode instance located in the method. If a node is not found, 
Selected is set to <b>Nil</b>.
</p>
<p>
ApplyStoredSelection causes the OnSelectionChanged event handler to be 
signalled (when assigned) when the value in Selected is updated.
</p>
<p>
FreeList indicates whether ASelection is freed in the method. When set to 
<b>False</b>, the TStringList instance must be freed in the caller or a memory 
leak can occur.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Selected"/>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.StoreCurrentSelection"/>
<link id="TCustomTreeView.OnSelectionChanged"/>
<link id="TTreeNode.Text"/>
<link id="TTreeNode.GetFirstChild"/>
<link id="TTreeNode.GetNextSibling"/>
<link id="TTreeNodes.GetFirstNode"/>
</seealso>
</element>
<element name="TCustomTreeView.ApplyStoredSelection.ASelection">
<short>
TStringList with the text for nodes used to access the selected tree node.
</short>
</element>
<element name="TCustomTreeView.ApplyStoredSelection.FreeList">
<short>
<b>True</b> if the TStringList instance is freed in the method.
</short>
</element>

<element name="TCustomTreeView.MoveToNextNode">
<short>
Moves the selection to the next tree node following the last selection in the 
control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.MoveToNextNode.ASelect">
<short>
<b>True</b> if the next node becomes selected in the control.
</short>
</element>

<element name="TCustomTreeView.MoveToPrevNode">
<short>
Moves the selection to the visible tree node following prior to the last 
selection in the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.MoveToPrevNode.ASelect">
<short>
<b>True</b> if the previous node becomes selected in the control.
</short>
</element>

<element name="TCustomTreeView.MovePageDown">
<short>
Moves the selection to the next display page for the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.MovePageDown.ASelect">
<short>
<b>True</b> if the selected node on the control is moved in the method.
</short>
</element>

<element name="TCustomTreeView.MovePageUp">
<short>
Moves the selection to the previous display page for the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.MovePageUp.ASelect">
<b>True</b> if the selected node on the control is moved in the method.
</element>

<element name="TCustomTreeView.MoveLeft">
<short>
Changes the selected tree node on the control.
</short>
<descr>
<p>
<var>MoveLeft</var> is a method used to change the selected tree node on the 
control by moving towards the left (or upwards) in the node hierarchy. The 
action normally results in the Parent node becoming the selected tree node.
</p>
<p>
The behavior in MoveLeft is influenced by the settings in the Options 
property and the value in the ASelect argument.
</p>
<p>
ASelect indicates whether the new node becomes a Selected node on the tree 
view control (when <b>True</b>) or simply has the focus rectangle (when 
<b>False</b>).
</p>
<p>
If multi-selections are enabled in Options (using tvoAllowMultiSelect), the 
movement starts from the last node in the multi-selection range. Otherwise the 
Selected node is used to start the movement.
</p>
<p>
Prior to changing the active node, an Expanded node is collapsed (when 
assigned). If the Parent node has been assigned, it becomes the target for the 
movement. The MoveSelection method is called to change to the specified node 
and set its Selected (or MultiSelected) attributes to the value in ASelect.
</p>
<p>
MoveLeft is used in the KeyDown method for the control.
</p>
</descr>
<version>
Added in LCL version 3.0.
</version>
<seealso>
<link id="TCustomTreeView.MoveSelection"/>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.Selected"/>
<link id="TCustomTreeView.Selections"/>
<link id="TCustomTreeView.SelectionCount"/>
<link id="TCustomTreeView.GetLastMultiSelected"/>
<link id="TCustomTreeView.KeyDown"/>
<link id="TTreeNode.Selected"/>
<link id="TTreeNode.MultiSelected"/>
<link id="TTreeViewOption"/>
<link id="TTreeViewOptions"/>
</seealso>
</element>
<element name="TCustomTreeView.MoveLeft.ASelect">
<short>
<b>True</b> if the new tree node is selected, <b>False</b> if it has the focus 
rectangle.
</short>
</element>

<element name="TCustomTreeView.MoveRight">
<short>
Changes the selected tree node on the control.
</short>
<descr>
<p>
<var>MoveRight</var> is a method used to change the selected tree node on the 
control by moving towards the right (or downwards) in the node hierarchy. The 
action normally results in the next expanded sibling or child node becoming 
the selected tree node.
</p>
<p>
The behavior in MoveRight is influenced by the settings in the Options 
property and the value in the ASelect argument.
</p>
<p>
ASelect indicates whether the new node becomes a Selected node on the tree 
view control (when <b>True</b>) or simply has the focus rectangle (when 
<b>False</b>).
</p>
<p>
If multi-selections are enabled in Options (using tvoAllowMultiSelect), the 
movement starts from the last node in the multi-selection range. Otherwise the 
Selected node is used to start the movement.
</p>
<p>
Prior to changing the active node, the node must be in the Expanded state. 
When not enabled, Expanded is set to <b>True</b> but the Selected node does 
not change. If Expanded is already enabled, the GetNextExpanded method is 
called to get the target node for the movement. The MoveSelection method is 
called to change to the specified node and set its Selected (or MultiSelected) 
attributes to the value in ASelect.
</p>
<p>
MoveRight is used in the KeyDown method for the control.
</p>
</descr>
<version>
Added in LCL version 3.0.
</version>
<seealso>
<link id="TCustomTreeView.MoveSelection"/>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.Selected"/>
<link id="TCustomTreeView.Selections"/>
<link id="TCustomTreeView.SelectionCount"/>
<link id="TCustomTreeView.KeyDown"/>
<link id="TTreeNode.Expanded"/>
<link id="TTreeNode.GetNextExpanded"/>
<link id="TTreeNode.Selected"/>
<link id="TTreeNode.MultiSelected"/>
<link id="TTreeViewOption"/>
<link id="TTreeViewOptions"/>
</seealso>
</element>
<element name="TCustomTreeView.MoveRight.ASelect">
<short>
<b>True</b> if the new tree node is selected, <b>False</b> if it has the focus 
rectangle.
</short>
</element>

<element name="TCustomTreeView.MoveExpand">
<short>
Expands the selected tree node and optionally extends a multi-selection range 
to include the node.
</short>
<descr>
<p>
MoveExpand is called from the KeyDown method when the VK_ADD (NumPad Plus) key 
is pressed.
</p>
</descr>
<version>
Added in LCL version 3.0.
</version>
<seealso/>
</element>
<element name="TCustomTreeView.MoveExpand.ASelect">
<short>
<b>True</b> if the expanded tree node is selected, <b>False</b> if it has the 
focus rectangle.
</short>
</element>

<element name="TCustomTreeView.MoveCollapse">
<short>
Collapses the selected tree node and optionally removes it from a 
multi-selection range.
</short>
<descr>
<p>
MoveCollapse is called from the KeyDown method when the VK_SUBTRACT (NumPad 
Minus) key is pressed.
</p>
</descr><version>
Added in LCL version 3.0.
</version>
<seealso/>
</element>
<element name="TCustomTreeView.MoveCollapse.ASelect">
<short>
<b>True</b> if the collapsed tree node is selected, <b>False</b> if it has the 
focus rectangle.
</short>
</element>

<element name="TCustomTreeView.MoveHome">
<short>
Moves to and optionally selects the first visible node in the control.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.MoveHome.ASelect">
<short><b>True</b> if the node is selected in the control.</short>
</element>

<element name="TCustomTreeView.MoveEnd">
<short>
Moves to and optionally selects the last expanded child node in Items.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomTreeView.MoveEnd.ASelect">
<short><b>True</b> if the node is selected in the control.</short>
</element>

<element name="TCustomTreeView.BackgroundColor">
<short>Color of the background area on the control.</short>
<descr>
<p>
Contains the same value as the <var>Color</var> property.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.BorderWidth">
<short>Width of the line drawn as a border around the control.</short>
<descr>
<p>
The default value for the property is 0 in TCustomTreeView. Changing the 
value for the property causes a CM_BORDERCHANGED control message to be 
performed.
</p>
<p>
BorderWidth is used when a tree node in Items calculates its display 
rectangle. It provides the value for the Left member in the TRect instance. 
It is used when expand/collapse indicators are displayed for the control. It 
is also used when the bounds rectangle for the Editor on the control is 
calculated.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.BorderWidth">TWinControl.BorderWidth</link>
</seealso>
</element>

<element name="TCustomTreeView.BottomItem">
<short>
Contains the last visible tree node starting at the TopItem in the control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTreeView.Color">
<short>
Color used to fill the background on the control display area.
</short>
<descr>
<p>
Color is a TColor property with the background color for the tree view 
control. The default value for the property is <var>clWindow</var>. Changing 
the value for the property causes the control to be redrawn.
</p>
<p>
Color contains the same value as the <var>BackgroundColor</var> property. 
Color / BackgroundColor is used when the Paint method is called to draw the 
control. It provides the background color for both the control and its tree 
nodes.
</p>
<p>
Use SelectionColor to specify the background color for the selected tree 
node(s) on the control.
</p>
<p>
Use Font, DisabledFontColor, and HotTrackColor to control the font colors used 
for tree node text on the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.BackgroundColor"/>
<link id="TCustomTreeView.Paint"/>
<link id="TCustomTreeView.DoPaint"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="#lcl.controls.TControl.Color">TControl.Color</link>
</seealso>
</element>

<element name="TCustomTreeView.DefaultItemHeight">
<short>
Default height for tree nodes in the control.
</short>
<descr>
<p>
<var>DefaultItemHeight</var> is an <var>Integer</var> property with the 
default height for tree nodes displayed in the control. The default value for 
the property is defined in the DefaultTreeNodeHeight constant, and assigned 
in the constructor for the class instance.
</p>
<p>
When tvoAutoItemHeight has been included in the Options for the control, the 
property value is determined using the Font and the images for the control. A 
new value assigned to the property is ignored when automatic item height has 
been enabled.
</p>
<p>
The value may be changed when a layout adjustment policy is applied in 
DoAutoAdjustLayout, or when the UpdateDefaultItemHeight method is called. It 
is also updated (if needed) when values are assigned to the Images or 
StateImages properties.
</p>
<p>
Setting a new value for the property causes the control to be redrawn.
</p>
<p>
DefaultItemHeight is the value used in the TTreeNode.Height property for tree 
nodes added to the Items container.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TCustomTreeView.Images"/>
<link id="TCustomTreeView.StateImages"/>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.UpdateDefaultItemHeight"/>
<link id="TTreeNode.Height"/>
<link id="TTreeNodes"/>
<link id="DefaultTreeNodeHeight"/>
<link id="#lcl.controls.TControl.Font">TControl.Font</link>
</seealso>
</element>

<element name="TCustomTreeView.DropTarget">
<short>
<var>DropTarget</var> - the target node for dropping a dragged item.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTreeView.ExpandSignColor">
<short>
Color used to paint expand / collapse (fold / unfold) indicators for tree 
nodes.
</short>
<descr>
<p>
<var>ExpandSignColor</var> is a <var>TColor</var> property with the color 
used to paint the expand / collapse indicators for tree nodes on the control. 
The default value for the property is <var>clWindowFrame</var>.
</p>
<p>
ExpandSignColor is used in the DoPaintNode method to render a TTreeNode 
instance with child node(s). It is assigned as the Pen color in Canvas, and 
controls the color of the lines drawn for the indicator. When ExpandSignType 
is set to tvestArrowFill, it is assigned as the Brush color in Canvas, and 
controls the fill color for the indicator.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.ExpandSignType"/>
<link id="TTreeNode.HasChildren"/>
<link id="TTreeViewExpandSignType"/>
<link id="#lcl.graphics.TColor">TColor</link>
<link id="#lcl.controls.TCustomControl.Canvas">TCustomControl.Canvas</link>
</seealso>
</element>

<element name="TCustomTreeView.ExpandSignSize">
<short>
Size of the expand / collapse (fold / unfold) indicators for tree nodes.
</short>
<descr>
<p>
<var>ExpandSignSize</var> is an <var>Integer</var> property with the 
dimensions for the expand / collapse indicator drawn for tree nodes on the 
control. The default value for the property is -1, and indicates that an 
explicit value has not been assigned. When set to a positive non-zero value, 
it is scaled to the PPI (Pixels Per Inch) setting for the current Font. The 
value may be scaled in the DoAutoAdjustLayout method when specific layout 
policies are applied.
</p>
<p>
Use 0 to enable auto-sizing for the expand / collapse indicator.
</p>
<p>
The property value is ignored when ExpandSignType is set to tvestTheme; the 
dimensions are determined by theme element details.
</p>
<p>
Changing the value for the property causes the control to be redrawn.
</p>
<p>
Use ExpandSignWidth to set the line width used to draw the angle bracket 
(chevron) symbol on the indicator.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.ExpandSignType"/>
<link id="TCustomTreeView.ExpandSignWidth"/>
</seealso>
</element>

<element name="TCustomTreeView.ExpandSignWidth">
<short>
Width of the lines drawn for the expand/collapse indicator when using the 
tvestAngleBracket drawing style.
</short>
<descr>
<p>
<var>ExpandSignWidth</var> is relevant when <var>ExpandSignType</var> is set 
to <var>tvestAngleBracket</var>. It contains the line width used to draw the 
chevron symbol on the expand / collapse indicator for a tree node. It is not 
needed or used for other drawing styles in ExpandSignType.
</p>
<p>
The default value for the property is 2 (pixels). Changing the value for the 
property causes the control to be redrawn.
</p>
<p>
Use ExpandSignSize to set the overall width and height for an expand / 
collapse indicator drawn on the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.ExpandSignType"/>
<link id="TCustomTreeView.ExpandSignSize"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TTreeViewExpandSignType"/>
</seealso>
</element>

<element name="TCustomTreeView.ExpandSignType">
<short>
Sets the drawing style for the expand / collapse (fold/unfold) indicators for 
tree nodes.
</short>
<descr>
<p>
ExpandSignType is a TTreeViewExpandSignType property with the drawing style 
used for expand / collapse indicators on tree nodes in the control. It 
contains a value from the TTreeViewExpandSignType enumeration, such as:
</p>
<dl>
<dt>tvestTheme</dt>
<dd>
Uses theme element details for the platform to draw the indicators.
</dd>
<dt>tvestPlusMinus</dt>
<dd>
Uses '+' and '-' symbols to draw the indicators.
</dd>
<dt>tvestArrow</dt>
<dd>
Uses an unfilled arrow for the indicators.
</dd>
<dt>tvestArrowFill</dt>
<dd>
Uses a filled arrow for the indicators.
</dd>
<dt>tvestAngleBracket</dt>
<dd>
Uses chevrons (angle brackets) for the indicators.
</dd>
</dl>
<p>
The default value for the property is tvestTheme, and causes the DrawElement 
method in ThemeServices to be used to render the indicator. Other values 
cause methods in the control to be called to render the indicator. Changing 
the value for the property causes the control to be redrawn.
</p>
<p>
ExpandSignType is used in the DoPaintNode method to determine the drawing 
style for the expand / collapse indicator for a tree node that has child 
nodes. It also determines the scaling mechanism needed for themed versus 
non-themed drawing styles.
</p>
<p>
Use ExpandSignSize to set the default dimensions for the indicator before it 
is scaled for the theme or font size. Use ExpandSignColor to set the fill 
color for a filled arrow-style indicator. Use ExpandSignWidth to set the line 
width used for a chevron or angle bracket-style indicator.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.ExpandSignColor"/>
<link id="TCustomTreeView.ExpandSignSize"/>
<link id="TCustomTreeView.ExpandSignWidth"/>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TTreeViewExpandSignType"/>
</seealso>
</element>

<element name="TCustomTreeView.Images">
<short>Image list which holds icons for the tree nodes in Items.</short>
<descr>
<p>
Images is a TCustomImageList property with the bitmaps drawn for tree nodes 
in the Items property. The bitmap is displayed to the left of the display 
text for a tree node. Use the ImageIndex property in a TTreeNode instance to 
specify which image is drawn for the value in Items.
</p>
<p>
Assigning a new image list to the property causes image change links and free 
notifications to be updated for the class instance. The control is redrawn 
when the new property value is assigned.
</p>
<p>
Use ImagesWidth to read or write the horizontal size for the bitmaps in 
Images.
</p>
<p>
Use StateImages to access the bitmaps drawn as state indicators for the tree 
nodes in Items.
</p>
<p>
Images is used in the DoPaintNode method when visible entries in Items are 
drawn on the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.ImagesWidth"/>
<link id="TCustomTreeView.StateImages"/>
<link id="TCustomTreeView.StateImagesWidth"/>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TTreeNode.ImageIndex"/>
</seealso>
</element>

<element name="TCustomTreeView.ImagesWidth">
<short>Width for the Images used in the tree view control.</short>
<descr>
<p>
ImagesWidth is an Integer property which contains the width for the Images 
assigned in the control. ImagesWidth provides the value that is scaled to the 
Pixels Per Inch setting in the Font property when Images have been assigned 
for the control.
</p>
<p>
The default value for the property is 0 (zero), and indicates that an 
explicit image width has not been assigned.
</p>
<p>
Setting a new value for the property causes the control to the redrawn.
</p>
<p>
ImagesWidth is used in the DoPaintNode method to retrieve the scaled image 
resolution for the bitmaps in Images.
</p>
<p>
Use StateImagesWidth to set the width for the bitmaps in the StateImages 
property.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.InsertMarkNode">
<short>
Node displayed as an insertion mark on the tree view control.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTreeView.InsertMarkType">
<short>
Indicates the default position for an insertion mark relative to a node and 
its parent or children.
</short>
<descr/>
<seealso/>
</element>

<element name="TCustomTreeView.Items">
<short>The container with the TTreeNode instances for the control.</short>
<descr>
<p>
<var>Items</var> is a <var>TTreeNodes</var> property with the container used 
to access and maintain the hierarchical list of <var>TTreeNode</var> 
instances displayed on the tree view control.
</p>
<p>
Items allows indexed access to the TTreeNode instances in the container by 
their ordinal position.
</p>
<code>
// the following are equivalent
AText := ATreeView.Items[0].Text;  // caption for the first tree node
AText := ATreeView.Items.Item[0].Text;  // caption for the first tree node
</code>
<p>
The nodes in Items can be added at design-time using the Object Inspector, or 
at run-time. Methods in Items can be used to access and maintain the tree 
nodes and their hierarchy, including:
</p>
<ul>
<li>Add</li>
<li>AddChild</li>
<li>AddFirst</li>
<li>Clear</li>
<li>Delete</li>
<li>Insert</li>
</ul>
<p>
See <link id="TTreeNodes">TTreeNodes</link> for more information about the 
properties and methods in the container class.
</p>
<p>
Use the Select, ClearSelect and ClearSelection methods to maintain the 
selected node(s) on the tree view control. Use MultiSelect to enable or 
disable multiple tree node selection on the control.
</p>
<p>
Use Selected, Selections, and SelectionCount to access single- or 
multi-selected nodes on the tree view control.
</p>
</descr>
<seealso>
<link id="TTreeNodes"/>
<link id="TTreeNode"/>
</seealso>
</element>

<element name="TCustomTreeView.KeepCollapsedNodes">
<short>
Indicates whether a node keeps its child nodes when it is collapsed.
</short>
<descr>
<p>
<var>KeepCollapsedNodes</var> is a <var>Boolean</var> property which 
indicates whether a tree node keeps its child nodes when the node is 
collapsed. When set to <b>False</b> (the default value), a tree node will 
free it child nodes when the node is collapsed.
</p>
<p>
KeepCollapsedNodes is assigned to the corresponding property in Items, and 
made available to TTreeNode instances in the container using their Owner 
property.
</p>
<p>
Changing the property value causes Options and Items to be updated. When set 
to <b>True</b>, tvoKeepCollapsedNodes is included in Options. Otherwise, 
tvoKeepCollapsedNodes is excluded from Options. The new value for the 
property is assigned to the KeepCollapsedNodes property in Items.
</p>
<p>
KeepCollapsedNodes is used in the DoExpand method in TTreeNode when the node 
is being collapsed.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Options"/>
<link id="TTreeNodes.KeepCollapsedNodes"/>
<link id="TTreeNode.Collapse"/>
<link id="TTreeNode.Expand"/>
<link id="TTreeViewOption"/>
</seealso>
</element>

<element name="TCustomTreeView.MultiSelectStyle">
<short>
Multi-selection options enabled for the tree view control.
</short>
<descr>
<p>
<var>MultiSelectStyle</var> is a <var>TMultiSelectStyle</var> property which 
contains multi-selection options enabled for the tree view control. Values in 
the set type determine which nodes are available to be multi-selected, and 
the keys used to select them. The default value for the property is defined 
in the DefaultMultiSelectStyle constant, and enables use of the Ctrl key to 
add a tree node to a multi-selection.
</p>
<p>
See <link id="TMultiSelectStyles">TMultiSelectStyles</link> for the available 
values and their meanings.
</p>
<p>
Changing the value in MultiSelectStyle causes the new property value to be 
validated. If an empty set ([]) is assigned, the default value in 
DefaultMultiSelectStyle is used instead. There must be at least one 
TMultiSelectStyles enumeration value in the set type.
</p>
<p>
Use the Options property to enabled multi-selection by including the value 
tvoAllowMultiselect.
</p>
<p>
Values in MultiSelectStyle are used when the MouseDown method handles a click 
on the text or icon for a tree node.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.MouseDown"/>
<link id="TCustomTreeView.Items"/>
<link id="TCustomTreeView.Options"/>
<link id="TTreeNodes.MultiSelect"/>
<link id="TMultiSelectStyles"/>
<link id="TMultiSelectStyle"/>
</seealso>
</element>

<element name="TCustomTreeView.Options">
<short>The set of options enabled in the tree view control.</short>
<descr>
<p>
<var>Options</var> is a <var>TTreeViewOptions</var> property with the set of 
options enabled for the tree view control. <var>TTreeViewOption</var> 
contains the enumeration values allowed in the set type, and cause features 
and behaviors to be enabled when included in the set type.
</p>
<p>
The default value for the property is defined in the 
<var>DefaultTreeViewOptions</var> constant. Assigning a new set of values to 
the property may cause other property values and/or the control state to be 
changed, and the control may be redrawn.
</p>
</descr>
<seealso>
<link id="TTreeViewOptions"/>
<link id="TTreeViewOption"/>
<link id="DefaultTreeViewOptions"/>
</seealso>
</element>

<element name="TCustomTreeView.ScrollBars">
<short>Specifies the scroll bars displayed for the tree view control.</short>
<descr>
<p>
<var>ScrollBars</var> is a <var>TScrollStyle</var> property with the scroll 
bars displayed for the tree view control. The default value for the property 
is <var>ssBoth</var>, and indicates both horizontal and vertical scroll bars 
are always visible. See <link 
id="#lcl.stdctrls.TScrollStyle">TScrollStyle</link> for more information 
about values in the enumeration and their meanings.
</p>
<p>
Changing the value for the property causes the States property to be updated, 
and the scroll bars are redrawn for the control.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.States"/>
<link id="#lcl.stdctrls.TScrollStyle">TScrollStyle</link>
</seealso>
</element>

<element name="TCustomTreeView.Selected">
<short>The selected tree node in the control.</short>
<descr>
<p>
<var>Selected</var> is a <var>TTreeNode</var> property which contains the 
selected tree node in the control. A tree node is selected when the Left or 
Right mouse button is clicked on the code. It can also be selected by 
assigning a <var>TTreeNode</var> instance to the property.
</p>
<p>
When a tree node is selected or unselected, the Selected property in the 
TTreeNode instance is updated. Use the <var>OnChanging</var> event handler to 
determine if a specific tree node can become the selected node in the 
control. Use the <var>OnChange</var> event handler to perform actions needed 
after the tree node is made the Selected node in the control.
</p>
<p>
Selecting a tree node forces it to become fully visible in the control. This 
includes expanding parent nodes to ensure that the node is visible. The 
<var>OnExpanding</var> and <var>OnExpanded</var> event handlers are signalled 
before and after actions to a given tree node.
</p>
<p>
Use the <var>Selections</var> property to access the list of selected tree 
nodes when multi-selection has been enabled in the <var>Options</var> for the 
control. Use the <var>SelectionCount</var> property to get the number of tree 
nodes in the Selections property.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.OnChanging"/>
<link id="TCustomTreeView.OnChange"/>
<link id="TCustomTreeView.OnExpanding"/>
<link id="TCustomTreeView.OnExpanded"/>
<link id="TCustomTreeView.Selections"/>
<link id="TCustomTreeView.SelectionCount"/>
<link id="TCustomTreeView.Options"/>
<link id="TTreeNode.Selected"/>
</seealso>
</element>

<element name="TCustomTreeView.SelectionColor">
<short>
Color used to paint the background for the selected tree node in the control.
</short>
<descr>
<p>
<var>SelectionColor</var> is a <var>TColor</var> property with the color used 
to paint the background for the selected tree node. The default value for the 
property is clHighlight. Changing the value for the property causes the 
control to be redrawn.
</p>
<p>
SelectionColor is not currently used in the TCustomTreeView implementation.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.SelectionCount">
<short>Number of selected nodes in the tree view.</short>
<descr>
<p>
<var>SelectionCount</var> is a read-only <var>Cardinal</var> property with 
the number of selected Items in the control. SelectionCount contains the 
value from the SelectionCount property in Items, and indicates the number of 
<var>TTreeNode</var> instances available in the <var>Selections</var> 
property.
</p>
<p>
SelectionCount and Selections are used when the value 
<var>tvoAllowMultiSelect</var> has been included in the <var>Options</var> 
property.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Selections"/>
<link id="TCustomTreeView.Selected"/>
<link id="TCustomTreeView.Options"/>
</seealso>
</element>

<element name="TCustomTreeView.SelectionFontColor">
<short>
Color used to draw the text for a (multi-)selected item when enabled.
</short>
<descr>
<p>
Not used in the current LCL implementation. There is a SelectionFontColor 
property available in the Delphi VCL.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.SelectionFontColorUsed"/>
</seealso>
</element>

<element name="TCustomTreeView.SelectionFontColorUsed">
<short>
Indicates if the selection font color is used for selected items.
</short>
<descr>
<p>
The default value for the property is <b>False</b>. Not used in the current 
LCL implementation.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.Selections">
<short>
Provides indexed access to the multi-selected tree nodes in the control.
</short>
<descr>
<p>
<var>Selections</var> is an indexed read-only <var>TTreeNode</var> property 
which provides indexed access to the selected tree nodes in the control. 
Selections is relevant when <var>tvoAllowMultiselect</var> has been included 
in the <var>Options</var> for the control. Use <var>SelectionCount</var> to 
get the number of nodes included in the Selections property.
</p>
<p>
Use <var>Selected</var> when multi-selection has not been enabled for the 
control.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomTreeView.Selections.AIndex">
<short>Ordinal position in the list of selected tree nodes.</short>
</element>

<element name="TCustomTreeView.SeparatorColor">
<short>
Color used to paint horizontal lines between tree nodes when enabled.
</short>
<descr>
<p>
<var>SeparatorColor</var> is a <var>TColor</var> property with the color used 
to paint horizontal lines between nodes in the tree hierarchy. SeparatorColor 
is used in the <var>DoPaintNode</var> method when 
<var>tvoShowSeparators</var> has been included in the <var>Options</var> for 
the control. It is assigned to the <var>Pen</var> and drawn using the 
<var>LineTo</var> method.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.StateImages">
<short>
Image list with the bitmaps used to represent the state for nodes in the tree.
</short>
<descr>
<p>
StateImages is a TCustomImageList property which contains bitmaps used to 
represent the state for nodes in the tree hierarchy. Images in the list 
correspond to the values used in the TTreeNode.StateIndex property.
</p>
<p>
Assigning a new value for the property causes the UnregisterChanges method in 
the image list to be called. The RegisterChanges method in the image list is 
called after the new images are assigned. The value in DefaultItemHeight is 
updated (when needed) to use the height for the images scaled to the current 
PPI setting in Font. The item height will include the default item spacing 
needed for the images. The control is redrawn when the new image list has 
been assigned to the property.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.DoPaintNode"/>
<link id="TCustomTreeView.UpdateDefaultItemHeight"/>
<link id="TTreeNode.DisplayIconLeft"/>
</seealso>
</element>

<element name="TCustomTreeView.StateImagesWidth">
<short>Width for the bitmaps in the StateImages property.</short>
<descr>
<p>
StateImagesWidth is an Integer property which contains the width for the 
StateImages assigned in the control. StateImagesWidth provides the value that 
is scaled to the Pixels Per Inch setting in the Font property when 
StateImages have been assigned for the control.
</p>
<p>
The default value for the property is 0 (zero), and indicates that an 
explicit image width has not been assigned.
</p>
<p>
Setting a new value for the property causes the control to the redrawn.
</p>
<p>
StateImagesWidth is used in the DoPaintNode method to retrieve the scaled 
image resolution for the bitmaps in StateImages.
</p>
<p>
Use ImagesWidth to set the width for the bitmaps in the Images property.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.TopItem">
<short>
<var>TopItem</var> - the first visible node of the tree.
</short>
<descr>
<p>
Use <var>TopItem</var> to get the top-most visible node. It is usually needed 
when tree view contains many nodes and scroll bar is required to display them 
all. If you need the first node of the tree regardless of visibility use 
<var>Items[0]</var>.
</p>
</descr>
<seealso>
<link id="TCustomTreeView.Items">Items</link>
<link id="TCustomTreeView.GetNodeAtY">GetNodeAtY</link>
</seealso>
</element>

<element name="TCustomTreeView.TreeLineColor">
<short>
Color used to draw the lines which connect the nodes in the tree.
</short>
<descr>
<p>
<var>TreeLineColor</var> is a <var>TColor</var> property with the color used 
to draw the lines which connect the nodes in the tree. The default value for 
the property is <var>clWindowFrame</var>. Setting a new value for the 
property causes the control to be redrawn.
</p>
<p>
TreeLineColor is used in the <var>DoPaintNode</var> method to set the color 
for canvas pixels when <var>psPattern</var> is used in the 
<var>TreeLinePenStyle</var> property. This is done because the LCL does not 
currently support the psPattern pen style.
</p>
<p>
TreeLineColor is also used in the <var>DoPaint</var> method to set the pen 
color when rendering insert marks for the nodes in the tree hierarchy.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.TreeLinePenStyle">
<short>
Style of the TPen used to draw lines used to connect nodes in the control.
</short>
<descr>
<p>
<var>TreeLinePenStyle</var> is a <var>TPenStyle</var> property which contains 
the pen style used to draw lines connecting the nodes in the tree. 
TreeLinePenStyle can contain one of the following vales:
</p>
<ul>
<li>psSolid</li>
<li>psDash</li>
<li>psDot</li>
<li>psDashDot</li>
<li>psDashDotDot</li>
<li>psinsideFrame</li>
<li>psPattern</li>
<li>psClear</li>
</ul>
<p>
The default value for the property is psPattern.
</p>
<p>
TreeLinePenStyle is used in the <var>DoPaintNode</var> method to draw the 
lines which connect the nodes in the tree hierarchy.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomTreeView.TabStop">
<short>Enables or disables navigation using the Tab key.</short>
<descr>
<p>
<var>TabStop</var> is a <var>Boolean</var> property which enables or disables 
keyboard navigation for the control. When set to <b>True</b>, the control can 
be entered and exited using the Tab and Shift+Tab keys. When set to 
<b>False</b>, the control does not respond to these keystrokes, and cannot be 
entered or exited using the keyboard to navigate the tab order for controls 
on a form.
</p>
<p>
The default value for the property is <b>True</b> in TCustomTreeView.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
</seealso>
</element>

<element name="TTreeView">
<short>
<var>TTreeView</var> is a control that displays a hierarchical list of items.
</short>
<descr>
<p>
Use a <var>TTreeView</var> to display a hierarchical list of items. Items are 
shown by their caption and an optional bitmap.
</p>
</descr>
<seealso>
<link id="TCustomTreeView"/>
<link id="#lcl.stdctrls.HowToUseStdCtrls">How To Use Standard Controls</link>
</seealso>
</element>

<!-- public -->
<element name="TTreeView.PathDelimiter" link="TCustomTreeView.PathDelimiter"/>
<element name="TTreeView.ScrolledLeft" link="TCustomTreeView.ScrolledLeft"/>
<element name="TTreeView.ScrolledTop" link="TCustomTreeView.ScrolledTop"/>

<element name="TTreeView.Align" link="#lcl.controls.TControl.Align"/>
<element name="TTreeView.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="TTreeView.AutoExpand" link="#lcl.comctrls.TCustomTreeView.AutoExpand"/>
<element name="TTreeView.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="TTreeView.BackgroundColor" link="#lcl.comctrls.TCustomTreeView.BackgroundColor"/>
<element name="TTreeView.BorderStyle" link="#lcl.controls.TWinControl.BorderStyle"/>
<element name="TTreeView.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
<element name="TTreeView.Color" link="#lcl.controls.TControl.Color"/>
<element name="TTreeView.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="TTreeView.DefaultItemHeight" link="#lcl.comctrls.TCustomTreeView.DefaultItemHeight"/>
<element name="TTreeView.DisabledFontColor" link="#lcl.comctrls.TCustomTreeView.DisabledFontColor"/>
<element name="TTreeView.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="TTreeView.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="TTreeView.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="TTreeView.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="TTreeView.ExpandSignColor" link="#lcl.comctrls.TCustomTreeView.ExpandSignColor"/>
<element name="TTreeView.ExpandSignSize" link="#lcl.comctrls.TCustomTreeView.ExpandSignSize"/>
<element name="TTreeView.ExpandSignType" link="#lcl.comctrls.TCustomTreeView.ExpandSignType"/>
<element name="TTreeView.Font" link="#lcl.controls.TControl.Font"/>
<element name="TTreeView.HideSelection" link="#lcl.comctrls.TCustomTreeView.HideSelection"/>
<element name="TTreeView.HotTrack" link="#lcl.comctrls.TCustomTreeView.HotTrack"/>
<element name="TTreeView.HotTrackColor" link="#lcl.comctrls.TCustomTreeView.HotTrackColor"/>
<element name="TTreeView.Images" link="#lcl.comctrls.TCustomTreeView.Images"/>
<element name="TTreeView.ImagesWidth" link="#lcl.comctrls.TCustomTreeView.ImagesWidth"/>
<element name="TTreeView.Indent" link="#lcl.comctrls.TCustomTreeView.Indent"/>
<element name="TTreeView.MultiSelect" link="#lcl.comctrls.TCustomTreeView.MultiSelect"/>
<element name="TTreeView.MultiSelectStyle" link="#lcl.comctrls.TCustomTreeView.MultiSelectStyle"/>

<element name="TTreeView.ParentColor">
<short/>
<descr>
<p>
The default value for the property is <b>False</b> in TTreeView.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TControl.ParentColor">TControl.ParentColor</link>
</seealso>
</element>

<element name="TTreeView.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="TTreeView.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="TTreeView.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="TTreeView.ReadOnly" link="#lcl.comctrls.TCustomTreeView.ReadOnly"/>
<element name="TTreeView.RightClickSelect" link="#lcl.comctrls.TCustomTreeView.RightClickSelect"/>
<element name="TTreeView.RowSelect" link="#lcl.comctrls.TCustomTreeView.RowSelect"/>
<element name="TTreeView.ScrollBars" link="#lcl.comctrls.TCustomTreeView.ScrollBars"/>
<element name="TTreeView.SelectionColor" link="#lcl.comctrls.TCustomTreeView.SelectionColor"/>
<element name="TTreeView.SelectionFontColor" link="#lcl.comctrls.TCustomTreeView.SelectionFontColor"/>
<element name="TTreeView.SelectionFontColorUsed" link="#lcl.comctrls.TCustomTreeView.SelectionFontColorUsed"/>
<element name="TTreeView.SeparatorColor" link="#lcl.comctrls.TCustomTreeView.SeparatorColor"/>
<element name="TTreeView.ShowButtons" link="#lcl.comctrls.TCustomTreeView.ShowButtons"/>
<element name="TTreeView.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="TTreeView.ShowLines" link="#lcl.comctrls.TCustomTreeView.ShowLines"/>
<element name="TTreeView.ShowRoot" link="#lcl.comctrls.TCustomTreeView.ShowRoot"/>
<element name="TTreeView.ShowSeparators" link="#lcl.comctrls.TCustomTreeView.ShowSeparators"/>
<element name="TTreeView.SortType" link="#lcl.comctrls.TCustomTreeView.SortType"/>
<element name="TTreeView.StateImages" link="#lcl.comctrls.TCustomTreeView.StateImages"/>
<element name="TTreeView.StateImagesWidth" link="#lcl.comctrls.TCustomTreeView.StateImagesWidth"/>
<element name="TTreeView.TabOrder" link="#lcl.controls.TWinControl.TabOrder"/>

<element name="TTreeView.TabStop">
<short>Enables or disables navigation using the Tab key.</short>
<descr>
<p>
The default value for the property is <b>True</b> in TTreeView.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TWinControl.TabStop">TWinControl.TabStop</link>
</seealso>
</element>

<element name="TTreeView.Tag" link="#rtl.classes.TComponent.Tag"/>
<element name="TTreeView.ToolTips" link="#lcl.comctrls.TCustomTreeView.ToolTips"/>
<element name="TTreeView.Visible" link="#lcl.controls.TControl.Visible"/>

<element name="TTreeView.Options" link="#lcl.comctrls.TCustomTreeView.Options"/>
<element name="TTreeView.Items" link="#lcl.comctrls.TCustomTreeView.Items"/>
<element name="TTreeView.TreeLineColor" link="#lcl.comctrls.TCustomTreeView.TreeLineColor"/>
<element name="TTreeView.TreeLinePenStyle" link="#lcl.comctrls.TCustomTreeView.TreeLinePenStyle"/>
<element name="TTreeView.OnAddition" link="#lcl.comctrls.TCustomTreeView.OnAddition"/>
<element name="TTreeView.OnAdvancedCustomDraw" link="#lcl.comctrls.TCustomTreeView.OnAdvancedCustomDraw"/>
<element name="TTreeView.OnAdvancedCustomDrawItem" link="#lcl.comctrls.TCustomTreeView.OnAdvancedCustomDrawItem"/>
<element name="TTreeView.OnChange" link="#lcl.comctrls.TCustomTreeView.OnChange"/>
<element name="TTreeView.OnChanging" link="#lcl.comctrls.TCustomTreeView.OnChanging"/>
<element name="TTreeView.OnClick" link="#lcl.controls.TControl.OnClick"/>
<element name="TTreeView.OnCollapsed" link="#lcl.comctrls.TCustomTreeView.OnCollapsed"/>
<element name="TTreeView.OnCollapsing" link="#lcl.comctrls.TCustomTreeView.OnCollapsing"/>
<element name="TTreeView.OnCompare" link="#lcl.comctrls.TCustomTreeView.OnCompare"/>
<element name="TTreeView.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="TTreeView.OnCreateNodeClass" link="#lcl.comctrls.TCustomTreeView.OnCreateNodeClass"/>
<element name="TTreeView.OnCustomCreateItem" link="#lcl.comctrls.TCustomTreeView.OnCustomCreateItem"/>
<element name="TTreeView.OnCustomDraw" link="#lcl.comctrls.TCustomTreeView.OnCustomDraw"/>
<element name="TTreeView.OnCustomDrawItem" link="#lcl.comctrls.TCustomTreeView.OnCustomDrawItem"/>
<element name="TTreeView.OnCustomDrawArrow" link="#lcl.comctrls.TCustomTreeView.OnCustomDrawArrow"/>
<element name="TTreeView.OnDblClick" link="#lcl.controls.TControl.OnDblClick"/>
<element name="TTreeView.OnDeletion" link="#lcl.comctrls.TCustomTreeView.OnDeletion"/>
<element name="TTreeView.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="TTreeView.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="TTreeView.OnEdited" link="#lcl.comctrls.TCustomTreeView.OnEdited"/>
<element name="TTreeView.OnEditing" link="#lcl.comctrls.TCustomTreeView.OnEditing"/>
<element name="TTreeView.OnEditingEnd" link="#lcl.comctrls.TCustomTreeView.OnEditingEnd"/>
<element name="TTreeView.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="TTreeView.OnEnter" link="#lcl.controls.TWinControl.OnEnter"/>
<element name="TTreeView.OnExit" link="#lcl.controls.TWinControl.OnExit"/>
<element name="TTreeView.OnExpanded" link="#lcl.comctrls.TCustomTreeView.OnExpanded"/>
<element name="TTreeView.OnExpanding" link="#lcl.comctrls.TCustomTreeView.OnExpanding"/>
<element name="TTreeView.OnGetImageIndex" link="#lcl.comctrls.TCustomTreeView.OnGetImageIndex"/>
<element name="TTreeView.OnGetSelectedIndex" link="#lcl.comctrls.TCustomTreeView.OnGetSelectedIndex"/>
<element name="TTreeView.OnHasChildren" link="#lcl.comctrls.TCustomTreeView.OnHasChildren"/>
<element name="TTreeView.OnKeyDown" link="#lcl.controls.TWinControl.OnKeyDown"/>
<element name="TTreeView.OnKeyPress" link="#lcl.controls.TWinControl.OnKeyPress"/>
<element name="TTreeView.OnKeyUp" link="#lcl.controls.TWinControl.OnKeyUp"/>
<element name="TTreeView.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="TTreeView.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="TTreeView.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="TTreeView.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="TTreeView.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="TTreeView.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="TTreeView.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="TTreeView.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="TTreeView.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="TTreeView.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="TTreeView.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
<element name="TTreeView.OnNodeChanged" link="#lcl.comctrls.TCustomTreeView.OnNodeChanged"/>
<element name="TTreeView.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="TTreeView.OnSelectionChanged" link="#lcl.comctrls.TCustomTreeView.OnSelectionChanged"/>
<element name="TTreeView.OnShowHint" link="#lcl.controls.TControl.OnShowHint"/>
<element name="TTreeView.OnStartDrag" link="#lcl.controls.TControl.OnStartDrag"/>
<element name="TTreeView.OnUTF8KeyPress" link="#lcl.controls.TWinControl.OnUTF8KeyPress"/>

<element name="TTVGetNodeText">
<short>
Specifies an event handler used to get the text for a tree node.
</short>
<descr/>
<seealso>
<link id="TTreeNodeExpandedState.Create"/>
<link id="TTreeNodeExpandedState.OnGetNodeText"/>
</seealso>
</element>
<element name="TTVGetNodeText.Result">
<short>Text displayed for the tree node.</short>
</element>
<element name="TTVGetNodeText.Node">
<short>Tree node examined in the routine.</short>
</element>

<element name="TTreeNodeExpandedState">
<short>
Class used to save and restore the expanded state of a TTreeView.
</short>
<descr>
<p>
<var>TTreeNodeExpandedState</var> is a class used to save and restore the 
expanded state of a TTreeView. The nodes are identified by their Text 
property.
</p>
<p>Usage example:</p>
<code>
// save old expanded state
OldExpanded := TTreeNodeExpandedState.Create(ATreeView);
// ... change a lot of nodes ...
// restore old expanded state
OldExpanded.Apply(ATreeView);
OldExpanded.Free;
</code>
</descr>
<seealso>
<link id="TTreeView"/>
</seealso>
</element>

<element name="TTreeNodeExpandedState.FOnGetNodeText"/>

<element name="TTreeNodeExpandedState.DefaultGetNodeText">
<short/>
<descr/>
<seealso/>
</element>
<element name="TTreeNodeExpandedState.DefaultGetNodeText.Result">
<short/>
</element>
<element name="TTreeNodeExpandedState.DefaultGetNodeText.Node">
<short/>
</element>

<element name="TTreeNodeExpandedState.NodeText">
<short>
<var>NodeText</var> - the text in the current node.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeExpandedState.Children">
<short>
<var>Children</var> - the children of the current node, as an AvgLvlTree.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeExpandedState.Create">
<short>Constructor for the class instance.</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNodeExpandedState.Create.FirstTreeNode">
<short/>
</element>
<element name="TTreeNodeExpandedState.Create.GetNodeTextEvent">
<short/>
</element>
<element name="TTreeNodeExpandedState.Create.TreeView">
<short/>
</element>

<element name="TTreeNodeExpandedState.Destroy">
<short>Destructor for the class instance.</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeExpandedState.Clear">
<short>
<var>Clear</var> the expanded nodes for the tree structure.
</short>
<descr/>
<seealso/>
</element>

<element name="TTreeNodeExpandedState.CreateChildNodes">
<short>
<var>CreateChildNodes</var> - constructor for the child nodes.
</short>
<descr/>
<seealso/>
</element>
<element name="TTreeNodeExpandedState.CreateChildNodes.FirstTreeNode">
<short/>
</element>

<element name="TTreeNodeExpandedState.Apply">
<short>Used to restore the expanded state for a node or tree view.</short>
<descr>
<p>
<var>Apply</var> is an overloaded procedure used to restore the expanded 
state for nodes in a tree structure. The overloaded variants allow either a 
specific tree node or the first node in the tree view to be used to 
reconstruct the tree structure.
</p>
<p>
<var>CollapseToo</var> indicates whether child tree nodes are collapsed (when 
<b>True</b>) or expanded.
</p>
</descr>
<seealso/>
</element>
<element name="TTreeNodeExpandedState.Apply.FirstTreeNode">
<short>Initial tree node examined in the method.</short>
</element>
<element name="TTreeNodeExpandedState.Apply.TreeView">
<short>Tree view with nodes examined in the method.</short>
</element>
<element name="TTreeNodeExpandedState.Apply.CollapseToo">
<short>
Collapses previously expanded child nodes when <b>True</b>.
</short>
</element>

<element name="TTreeNodeExpandedState.OnGetNodeText">
<short>
Event handler signalled to get the text for the specified tree node.
</short>
<descr>
<p>
OnGetNodeText is a TTVGetNodeText property with the event handler signalled 
to get the text for the tree node passed as an argument. It is signalled from 
the CreateChildNodes method when the tree node has a parent node, or when 
expanding its child nodes. It is also signalled from the Apply method to get 
the text for an expanded child node.
</p>
</descr>
<seealso/>
</element>

<element name="THeaderSectionState">
<short>
Enumerated type which represents selection states for THeaderSection.
</short>
<descr>
<p>
<var>THeaderSectionState</var> is the type used to implement the 
<var>THeaderSection.State</var> property.
</p>
</descr>
<seealso>
<link id="THeaderSection.State"/>
</seealso>
</element>
<element name="THeaderSectionState.hsNormal">
<short>The header section is drawn in its normal state.</short>
</element>
<element name="THeaderSectionState.hsHot">
<short>The header section is drawn in its "hot-lighted" state.</short>
</element>
<element name="THeaderSectionState.hsPressed">
<short>The header section is drawn in its "pressed" state.</short>
</element>

<element name="THeaderSection">
<short>
Implements a section displayed on a TCustomHeaderControl / THeaderControl 
instance.
</short>
<descr>
<p>
<var>THeaderSection</var> is a <var>TCollectionItem</var> descendant which 
implements a section displayed on a <var>TCustomHeaderControl</var> / 
<var>THeaderControl</var> instance. THeaderSection is the type added and 
maintained in the <var>THeaderSections</var> collection, and used in the 
<var>TCustomHeaderControl.Sections</var> property.
</p>
<p>
THeaderSection has properties which identify its visual characteristics. This 
includes the text displayed for the section, its alignment, minimum and 
maximum widths, and an index for an optional image. Other properties contain 
run-time information about the section, including its left and right 
coordinates and its display state.
</p>
<p>
THeaderSection instances are normally created at design-time and edited using 
the IDE object inspector. They can be created at run-time using methods in 
the THeaderSections collection, and edited in code.
</p>
</descr>
<seealso>
<link id="THeaderSections"/>
<link id="TCustomHeaderControl.Sections"/>
</seealso>
</element>

<element name="THeaderSection.FAlignment"/>
<element name="THeaderSection.FImageIndex"/>
<element name="THeaderSection.FMinWidth"/>
<element name="THeaderSection.FMaxWidth"/>
<element name="THeaderSection.FState"/>
<element name="THeaderSection.FText"/>
<element name="THeaderSection.FVisible"/>
<element name="THeaderSection.FWidth"/>
<element name="THeaderSection.FOriginalIndex"/>

<element name="THeaderSection.GetWidth">
<short>Gets the value for the Width property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.GetWidth.Result">
<short>Value for the property.</short>
</element>

<element name="THeaderSection.GetLeft">
<short>Gets the value for the Left property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.GetLeft.Result">
<short>Value for the property.</short>
</element>

<element name="THeaderSection.GetRight">
<short>Gets the value for the Right property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.GetRight.Result">
<short>Value for the property.</short>
</element>

<element name="THeaderSection.SetAlignment">
<short>Sets the value for the Alignment property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.SetAlignment.AValue">
<short>New value for the property.</short>
</element>

<element name="THeaderSection.SetMaxWidth">
<short>Sets the value for the MaxWidth property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.SetMaxWidth.AValue">
<short>New value for the property.</short>
</element>

<element name="THeaderSection.SetMinWidth">
<short>Sets the value for the MinWidth property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.SetMinWidth.AValue">
<short>New value for the property.</short>
</element>

<element name="THeaderSection.SetState">
<short>Sets the value for the State property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.SetState.AValue">
<short>New value for the property.</short>
</element>

<element name="THeaderSection.SetText">
<short>Sets the value for the Text property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.SetText.AValue">
<short>New value for the property.</short>
</element>

<element name="THeaderSection.SetVisible">
<short>Sets the value for the Visible property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.SetVisible.AValue">
<short>New value for the property.</short>
</element>

<element name="THeaderSection.SetWidth">
<short>Sets the value for the Width property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.SetWidth.Value">
<short>New value for the property.</short>
</element>

<element name="THeaderSection.SetImageIndex">
<short>Sets the value for the ImageIndex property.</short>
<descr/>
<seealso/>
</element>
<element name="THeaderSection.SetImageIndex.Value">
<short>New value for the property.</short>
</element>

<element name="THeaderSection.CheckConstraints">
<short>
Ensures that the width for the section is within its minimum and maximum 
values.
</short>
<descr/>
<seealso/>
</element>

<element name="THeaderSection.GetDisplayName">
<short>Gets the value for the DisplayName property.</short>
<descr/>
<seealso>
<link id="#rtl.classes.TCollectionItem.DisplayName">TCollectionItem.DisplayName</link>
</seealso>
</element>
<element name="THeaderSection.Result">
<short>Display name for the collection item.</short>
</element>

<element name="THeaderSection.Create">
<short>Constructor for the class instance.</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for THeaderSection, and
calls the inherited <var>Create</var> method on entry. The value in 
ACollection is used as the Owner of the collection item. Create sets the 
default values for properties in the class instance.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollectionItem.Create">TCollectionItem.Create</link>
</seealso>
</element>
<element name="THeaderSection.Create.ACollection">
<short>Collection which owns the class instance.</short>
</element>

<element name="THeaderSection.Assign">
<short>
Implements object persistence for the THeaderSection type.
</short>
<descr>
<p>
<var>Assign</var> is an overridden method in <var>THeaderSection</var>. It 
extends the inherited method to provide support for persistent objects using 
the THeaderSection type.
</p>
<p>
If <var>Source</var> is a THeaderSection instance, the following properties are 
copied into the current class instance:
</p>
<ul>
<li>ImageIndex</li>
<li>Text</li>
<li>Width</li>
</ul>
<p>
The Changed method is called to notify the collection that the current item has 
been updated.
</p>
<p>
If Source is not derived from THeaderSection, the inherited method (in 
TPersistent) is called using Source as an argument. An EConvertError exception 
is raised in the inherited method if Source has not been assigned.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
<link id="#rtl.classes.TPersistent.Assign">TPersistent.Assign</link>
</seealso>
</element>
<element name="THeaderSection.Assign.Source">
<short>
Persistent object with the property values copied to the current class instance.
</short>
</element>

<element name="THeaderSection.Left">
<short>The position of the left boundary of the section.</short>
</element>

<element name="THeaderSection.Right">
<short>The position of the right boundary of the section.</short>
</element>

<element name="THeaderSection.State">
<short>
<var>State</var> - whether normal, hot (i.e. mouse hovers over it ready to be 
selected) or pressed (selected).
</short>
</element>

<element name="THeaderSection.OriginalIndex">
<short>
Index position which does not change when the user reorders the sections on a 
header control.
</short>
<descr>
<p>
<var>OriginalIndex</var> is an <var>Integer</var> property which contains the 
index order for the section when it was added to its Owner collection. The 
property value is assigned when the class instance is created in the AddItem 
method in THeaderSections. It normally contains the value in Index unless the 
value is already in use in the collection.
</p>
<p>
OriginalIndex may be updated when Delete in the THeaderSections is used to 
remove a header section from the collection.
</p>
</descr>
<version>
Modified in LCL version 4.0; changed to public visibility.
</version>
<seealso>
<link id="THeaderSections.AddItem"/>
<link id="THeaderSections.Delete"/>
<link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
</seealso>
</element>

<element name="THeaderSection.Alignment">
<short>
<var>Alignment</var> - whether text is to be left or right justified or 
centered.
</short>
<descr>
<p>
<var>Alignment</var> is a <var>TAlignment</var> property which indicates the 
horizontal alignment used to display the Text for the header section. The 
default value for the property is taLeftJustify. See 
<link id="#rtl.classes.TAlignment">TAlignment</link> for the values allowed in 
the property.
</p>
<p>
Changing the value for the property causes the Changed method to be called to 
update the item in its collection.
</p>
<p>
Alignment is used in the PaintSection method in TCustomHeaderControl when the 
image, text, and drawing state are used to render the section on the control 
canvas.
</p>
</descr>
<seealso>
<link id="THeaderSection.Text"/>
<link id="THeaderSection.ImageIndex"/>
<link id="THeaderSection.State"/>
<link id="THeaderSection.Create"/>
<link id="TCustomHeaderControl.PaintSection"/>
<link id="TCustomHeaderControl.Paint"/>
<link id="#rtl.classes.TAlignment">TAlignment</link>
</seealso>
</element>

<element name="THeaderSection.ImageIndex">
<short>
Ordinal position for the image displayed for the header section.
</short>
<descr>
<p>
<var>ImageIndex</var> is a <var>TImageIndex</var> property with the ordinal 
position for an image displayed on the header section. The default value for 
the property is -1 and indicates that a value has not been assigned for the 
property. Changing the value for the property causes the Changed method to be 
called to update the item in its collection.
</p>
<p>
ImageIndex refers to the position in the Images property in an associated 
THeaderControl. It is used, along with Text and Alignment, in the PaintSection 
method in TCustomHeaderControl / THeaderControl. The values control the content 
rendered for the header section on the control canvas.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.Images"/>
<link id="TCustomHeaderControl.PaintSection"/>
</seealso>
</element>

<element name="THeaderSection.MaxWidth">
<short>
Maximum width in pixels allowed for the header section.
</short>
<descr>
<p>
<var>MaxWidth</var> is an <var>Integer</var> property with the maximum size in 
pixels for the content displayed for the section on the header control. It 
includes the image, text, and any padding used between the elements for the 
section.
</p>
<p>
The default value for the property is an arbitrarily large value (10000). 
Changing the property causes the new value to be validated; it cannot exceed 
10000 and cannot be smaller than the value in the MinWidth property. The value 
in the Width property is range-limited to the new values in MinWidth and 
MaxWidth. The collection is updated when MaxWidth has been changed in the 
collection item.
</p>
</descr>
<seealso>
<link id="THeaderSection.MinWidth"/>
<link id="THeaderSection.Width"/>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
</seealso>
</element>

<element name="THeaderSection.MinWidth">
<short>
Minimum width in pixels allowed for the header section.
</short>
<descr>
<p>
<var>MinWidth</var> is an <var>Integer</var> property with the minimum width in 
pixels allowed for the content displayed for the section on the header control. 
The default value for the property is 0 (zero). 
</p>
<p>
Changing the property value causes the new value to be validated; it cannot be 
less than 0 and cannot exceed the value in the MaxWidth property. The value in 
the Width property is range-limited to the new values in MinWidth and MaxWidth. 
The collection is updated when MinWidth has been changed in the collection item.
</p>
</descr>
<seealso>
<link id="THeaderSection.MaxWidth"/>
<link id="THeaderSection.Width"/>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
</seealso>
</element>

<element name="THeaderSection.Text">
<short>
The text displayed on the header section.
</short>
<descr>
<p>
<var>Text</var> is a <var>TCaption</var> property which contains the textual 
value displayed on the header section. Along with the image specified in 
ImageIndex, it determines the content drawn for the section in the PaintSection 
method of the THeaderControl.
</p>
<p>
Changing the value for the property causes the collection item to be updated in 
its collection.
</p>
<p>
Use Alignment to set the horizontal alignment for the value in Text.
</p>
<p>
Use ImageIndex to specify the position for the image drawn on the header 
section.
</p>
<p>
Use Visible to indicate whether the header section is visible on the header 
control.
</p>
<p>
Use Width to specify the cumulative width for the image and text on the header 
section.
</p>
</descr>
<seealso>
<link id="THeaderSection.Alignment"/>
<link id="THeaderSection.ImageIndex"/>
<link id="THeaderSection.Width"/>
<link id="THeaderSection.MaxWidth"/>
<link id="THeaderSection.MinWidth"/>
<link id="THeaderSection.Visible"/>
<link id="TCustomHeaderControl.PaintSection"/>
<link id="TCustomHeaderControl.Sections"/>
<link id="#rtl.classes.TCollectionItem">TCollectionItem</link>
<link id="#rtl.classes.TCollection">TCollection</link>
</seealso>
</element>

<element name="THeaderSection.Width">
<short>
Total width in pixels for the text and image on the header section.
</short>
<descr>
<p>
<var>Width</var> is an <var>Integer</var> property with the number of pixels 
allocated for the text and image on the header section. It does not indicate 
the actual width of the content - only the size allocated for its display.
</p>
<p>
The Width property always returns 0 (zero) when Visible is set to <b>False</b>.
</p>
<p>
Setting a new value for the property causes it to be range-limited to the 
values in MinWidth and MaxWidth. The item is updated in its collection when 
Width has been changed.
</p>
<p>
The value in the property may be automatically scaled for high DPI displays in 
the DoAutoAdjustLayout and ChangeScale methods for the header control.
</p>
<p>
Width is updated at design-time when the divider between adjacent header 
sections is dragged.
</p>
<p>
Use MinWidth and MaxWidth to specify the smallest and largest sizes allowed for 
the header section.
</p>
</descr>
<seealso>
<link id="THeaderSection.MaxWidth"/>
<link id="THeaderSection.MinWidth"/>
<link id="THeaderSection.Text"/>
<link id="THeaderSection.ImageIndex"/>
<link id="TCustomHeaderControl.PaintSection"/>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.ChangeScale"/>
<link id="TCustomHeaderControl.DoAutoAdjustLayout"/>
</seealso>
</element>

<element name="THeaderSection.Visible">
<short>Indicates if the section is visible in the header control.</short>
<descr>
<p>
<var>Visible</var> is a <var>Boolean</var> property which indicates if the 
header section is visible in the header control. When set to <b>False</b>, 
the section cannot be drawn using the TCustomHeaderControl.PaintSection 
method, and the Width for the section is 0.
</p>
<p>
The default value for the property is <b>True</b>.
</p>
</descr>
</element>

<element name="THeaderSectionClass">
<short>
Class reference used to create new THeaderSection instances.
</short>
</element>

<element name="THeaderSections">
<short>
Implements a collection for sections in a TCustomHeaderControl control.
</short>
<descr>
<p>
<var>THeaderSections</var> is a <var>TCollection</var> descendant used to 
store sections defined for a <var>TCustomHeaderControl</var> instance. 
THeaderSections is the type used to implement the <var>Sections</var> 
property in TCustomHeaderControl.
</p>
<p>
THeaderSections re-implements methods from the ancestor class that are used 
to add, insert, delete, and retrieve <var>THeaderSection</var> instances 
stored in the collection.
</p>
</descr>
<seealso>
<link id="THeaderSection"/>
<link id="TCustomHeaderControl.Sections"/>
<link id="#rtl.classes.TCollection">TCollection</link>
</seealso>
</element>

<element name="THeaderSections.FHeaderControl"/>

<element name="THeaderSections.GetItem">
<short>Gets the value for the indexed Items property.</short>
<descr/>
<seealso>
<link id="THeaderSections.Items"/>
<link id="#rtl.classes.TCollection.GetItem">TCollection.GetItem</link>
</seealso>
</element>
<element name="THeaderSections.GetItem.Result">
<short>Value for the property.</short>
</element>
<element name="THeaderSections.GetItem.Index">
<short>Ordinal position in the collection for the requested item.</short>
</element>

<element name="THeaderSections.SetItem">
<short>Sets the value for the indexed Items property.</short>
<descr/>
<seealso>
<link id="THeaderSections.Items"/>
<link id="#rtl.classes.TCollection.GetItem">TCollection.GetItem</link>
</seealso>
</element>
<element name="THeaderSections.SetItem.Index">
<short>Ordinal position in the collection for the affected item.</short>
</element>
<element name="THeaderSections.SetItem.Value">
<short>New value for the property.</short>
</element>

<element name="THeaderSections.GetOwner">
<short>
Gets the Owner of the class instance.
</short>
<seealso>
<link id="#rtl.classes.TPersistent">TPersistent</link>
</seealso>
</element>
<element name="THeaderSections.GetOwner.Result">
<short>Owner of the class instance.</short>
</element>

<element name="THeaderSections.Update">
<short>
Performs actions needed when a collection item has been changed.
</short>
<descr>
<p>
<var>Update</var> is an overridden method used to update the section in the 
header control. When Item is assigned, the UpdateSection method in the 
THeaderControl instance is called. If Item is unassigned (contains 
<b>Nil</b>), the UpdateSections method in the THeaderControl instance is 
called update all sections in the collection.
</p>
<remark>
Update does <b>not</b> call the inherited method which notifies observers of 
the change.
</remark>
</descr>
<seealso>
<link id="#rtl.classes.TCollection">TCollection</link>
<link id="#rtl.classes.TPersistent.FPONotifyObservers">TPersistent.FPONotifyObservers</link>
</seealso>
</element>
<element name="THeaderSections.Update.Item">
<short>Section updated in the collection for the header control.</short>
</element>

<element name="THeaderSections.Create">
<short>Constructor for the class instance.</short>
<descr/>
<seealso>
<link id="#rtl.classes.TCollection.Create">TCollection.Create</link>
</seealso>
</element>
<element name="THeaderSections.Create.HeaderControl">
<short>Owner of the collection.</short>
</element>

<element name="THeaderSections.Add">
<short>Creates a new header section and adds it to the collection.</short>
<descr>
<p>
Add calls the AddItem method to get the return value for the method.
</p>
</descr>
<seealso>
<link id="THeaderSections.AddItem"/>
<link id="THeaderSections.Delete"/>
<link id="#rtl.classes.TCollection.Add">TCollection.Add</link>
</seealso>
</element>
<element name="THeaderSections.Add.Result">
<short>Collection item created and stored in the method.</short>
</element>

<element name="THeaderSections.AddItem">
<short>
Adds the specified header section at the position specified in Index.
</short>
<descr>
<p>
The <var>THeaderSection</var> instance in <var>Item</var> is created when the 
argument value is <b>Nil</b> (unassigned). The return value contains the new 
header section instance, or the existing value in Item when it is assigned.
</p>
</descr>
</element>
<element name="THeaderSections.AddItem.Result">
<short>
Header section created (optional) and stored in the method.
</short>
</element>
<element name="THeaderSections.AddItem.Item">
<short>
Header section to add in the method, or <b>Nil</b> to create a new one.
</short>
</element>
<element name="THeaderSections.AddItem.Index">
<short>
Ordinal position in the collection where the header section is stored.
</short>
</element>

<element name="THeaderSections.Insert">
<short>
Inserts a new collection item at the specified position in the collection.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TCollection.Insert">TCollection.Insert</link>
</seealso>
</element>
<element name="THeaderSections.Insert.Result">
<short>Header section created in the method.</short>
</element>
<element name="THeaderSections.Insert.Index">
<short>
Ordinal position in the collection where the new header section is inserted.
</short>
</element>

<element name="THeaderSections.Delete">
<short>
Deletes the collection item stored at the specified position in the 
collection.
</short>
<descr/>
<seealso>
<link id="#rtl.classes.TCollection.Delete">TCollection.Delete</link>
</seealso>
</element>
<element name="THeaderSections.Delete.Index">
<short>Ordinal position for the collection item deleted in the method.</short>
</element>

<element name="THeaderSections.Items">
<short>
<var>Items</var> - the series of individual HeaderSections in the collection.
</short>
<descr>
<p>
<var>Items</var> is an indexed <var>THeaderSection</var> property which 
provides access to the header sections in the collection by their ordinal 
position. It is implemented using TFpList to store the collection items. 
Items is the default property for the class instance.
</p>
<p>
When reading a value in the property, the item is cast to the THeaderSection 
type used in the collection. <var>SetItem</var> is called to store a value 
for the indexed property.
</p>
</descr>
<seealso>
<link id="THeaderSection"/>
</seealso>
</element>
<element name="THeaderSections.Items.Index">
<short>Ordinal position in the collection for the property value.</short>
</element>

<element name="TSectionTrackState">
<short>
Enumerated type with tracking states for a header section.
</short>
</element>
<element name="TSectionTrackState.tsTrackBegin">
<short>Mouse tracking for a section is enabled.</short>
</element>
<element name="TSectionTrackState.tsTrackMove">
<short>Mouse tracking for a section drag operation is enabled.</short>
</element>
<element name="TSectionTrackState.tsTrackEnd">
<short>Mouse tracking for a section is disabled.</short>
</element>

<element name="TCustomSectionTrackEvent">
<short>
<var>TCustomSectionTrackEvent</var> - generic event handling method for 
custom tracking a header section.
</short>
</element>
<element name="TCustomSectionTrackEvent.HeaderControl">
<short/>
</element>
<element name="TCustomSectionTrackEvent.Section">
<short/>
</element>
<element name="TCustomSectionTrackEvent.Width">
<short/>
</element>
<element name="TCustomSectionTrackEvent.State">
<short/>
</element>

<element name="TSectionDragEvent">
<short>
<var>TSectionDragEvent</var> - generic event handling method for dragging a 
header section.
</short>
</element>
<element name="TSectionDragEvent.Sender">
<short/>
</element>
<element name="TSectionDragEvent.FromSection">
<short/>
</element>
<element name="TSectionDragEvent.ToSection">
<short/>
</element>
<element name="TSectionDragEvent.AllowDrag">
<short/>
</element>

<element name="TCustomSectionNotifyEvent">
<short>
<var>TCustomSectionNotifyEvent</var> - generic event notification method for 
header section.
</short>
</element>
<element name="TCustomSectionNotifyEvent.HeaderControl">
<short/>
</element>
<element name="TCustomSectionNotifyEvent.Section">
<short/>
</element>

<element name="TCustomHCCreateSectionClassEvent">
<short>
Specifies the event handler signalled to get the class type for a new section 
on a THeaderControl instance.
</short>
<descr>
<p>
<var>TCustomHCCreateSectionClassEvent</var> is an object procedure type which 
specifies an event handler signalled when a new section is created for 
THeaderControl. It is the type used for the OnCreateSectionClass property in 
TCustomHeaderControl.
</p>
<p>
An application can implement and assign a method using the method signature to 
respond to the event notification. Arguments to the handler include the 
TCustomHeaderControl for the event notification (Sender) and the class type 
needed to create a new section for the control (SectionClass).
</p>
<p>
TCustomHCCreateSectionClassEvent allows a class other than THeaderSection to be 
used to create a section collection item. The type should, however, be a 
descendant of THeaderSection as it is the base type expected in the 
THeaderSections collection.
</p>
</descr>
<seealso>
<link id="THeaderSections"/>
<link id="THeaderSections.Add"/>
<link id="THeaderSections.AddItem"/>
<link id="TCustomHeaderControl.OnCreateSectionClass"/>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.CreateSection"/>
</seealso>
</element>
<element name="TCustomHCCreateSectionClassEvent.Sender">
<short>
Object (TCustomHeaderControl) for the event notification.
</short>
</element>
<element name="TCustomHCCreateSectionClassEvent.SectionClass">
<short>
Returns the class type used to create a new section on a THeaderControl.
</short>
</element>

<element name="TCustomHeaderControl">
<short>
<var>TCustomHeaderControl</var> - base class for <var>THeaderControl</var>, a 
header strip of user-designed sections which allow selection of pages or 
actions.
</short>
<descr>
<p>
<var>TCustomHeaderControl</var> - base class for <var>THeaderControl</var>, a 
header strip of user-designed sections which allow selection of pages or 
actions.
</p>
<p>
<var>THeaderControl</var> offers a widget that could be placed along the edge 
of a <var>Panel</var> or <var>Form</var> allowing a highly customized 
mechanism for selection. However, there are no intrinsically associated 
display areas and it is the developer's responsibility to supply an index 
associated with the selection from the <var>THeaderControl</var> and 
determining what action is to occur or what is to be displayed in any 
attached Panel or Form.
</p>
</descr>
<seealso>
<link id="#lcl.extctrls.MultiPageControls">Using Multi-Page Controls</link>
</seealso>
</element>

<element name="TCustomHeaderControl.FDragReorder"/>
<element name="TCustomHeaderControl.FSections"/>
<element name="TCustomHeaderControl.FImages"/>
<element name="TCustomHeaderControl.FImagesWidth"/>
<element name="TCustomHeaderControl.FPaintRect"/>
<element name="TCustomHeaderControl.FDown"/>
<element name="TCustomHeaderControl.FDownPoint"/>
<element name="TCustomHeaderControl.FTracking"/>
<element name="TCustomHeaderControl.FDragging"/>
<element name="TCustomHeaderControl.FEndDragSectionIndex"/>
<element name="TCustomHeaderControl.FSelectedSection"/>
<element name="TCustomHeaderControl.FMouseInControl"/>
<element name="TCustomHeaderControl.FSavedCursor"/>
<element name="TCustomHeaderControl.FOnSectionClick"/>
<element name="TCustomHeaderControl.FOnSectionResize"/>
<element name="TCustomHeaderControl.FOnSectionTrack"/>
<element name="TCustomHeaderControl.FOnSectionSeparatorDblClick"/>
<element name="TCustomHeaderControl.FOnSectionDrag"/>
<element name="TCustomHeaderControl.FOnSectionEndDrag"/>
<element name="TCustomHeaderControl.FOnCreateSectionClass"/>

<element name="TCustomHeaderControl.GetSectionFromOriginalIndex">
<short>
Gets the value for the indexed SectionFromOriginalIndex property.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomHeaderControl.GetSectionFromOriginalIndex.Result">
<short>value for the property.</short>
</element>
<element name="TCustomHeaderControl.GetSectionFromOriginalIndex.OriginalIndex">
<short>
Original position (ignoring visibility) in the Sections property.
</short>
</element>

<element name="TCustomHeaderControl.SetImages">
<short>Sets the value for the Images property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomHeaderControl.SetImages.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomHeaderControl.SetImagesWidth">
<short>Sets the value for the ImagesWidth property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomHeaderControl.SetImagesWidth.AImagesWidth">
<short>New value for the property.</short>
</element>

<element name="TCustomHeaderControl.SetSections">
<short>Sets the value for the Sections property.</short>
<descr/>
<seealso/>
</element>
<element name="TCustomHeaderControl.SetSections.AValue">
<short>New value for the property.</short>
</element>

<element name="TCustomHeaderControl.UpdateSection">
<short>
Updates the header section at the specified position on the header control.
</short>
<descr>
<p>
<var>UpdateSection</var> is called from the THeaderSections.Update method when 
a collection item (THeaderSection) is passed as an argument to the method.
</p>
<p>
In the current LCL implementation, all sections are redrawn on the header 
control by calling the Repaint method.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.UpdateSections"/>
<link id="THeaderSections.Update"/>
</seealso>
</element>
<element name="TCustomHeaderControl.UpdateSection.Index">
<short>
Ignored in the current implementation.
</short>
</element>

<element name="TCustomHeaderControl.UpdateSections">
<short>
Updates all header Sections on the control by calling Repaint.
</short>
<descr>
<p>
<var>UpdateSections</var> calls the Repaint method to redraw the Sections 
defined on the header control. It is called from the THeaderSections.Update 
method when a collection item (THeaderSection) is <b>not</b> passed as an 
argument to the method.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.UpdateSection"/>
<link id="THeaderSections.Update"/>
</seealso>
</element>

<element name="TCustomHeaderControl.CreateSection">
<short>
Creates a new header section for the control.
</short>
<descr>
<p>
<var>CreateSection</var> is a <var>THeaderSection</var> function used to create 
a new value in the Sections collection for the control. The return value 
contains an instance of THeaderSection (or a descendant class) created in the 
method with the Sections collection as the owner of the item.
</p>
<p>
The OnCreateSectionClass event handler is signalled (when assigned) at run-time 
to allow a custom item class to be used to create the collection item. The 
handler returns the class type instantiated in the method. By default, the 
class type is THeaderSection but can be overridden in OnCreateSectionClass to 
use a THeaderSection descendant.
</p>
<p>
OnCreateSectionClass is not signalled at design-time; THeaderSection is always 
used as the item class when added to the Sections property using the Object 
Inspector property editor.
</p>
<p>
CreateSection is called from the AddItem method in the Sections 
(THeaderSections) collection, and occurs when an item class instance is not 
passed as an argument to the collection method.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.OnCreateSectionClass"/>
<link id="THeaderSections.AddItem"/>
<link id="THeaderSections.Items"/>
<link id="THeaderSection"/>
</seealso>
</element>
<element name="TCustomHeaderControl.CreateSection.Result">
<short>THeaderSection instance created in the method.</short>
</element>

<element name="TCustomHeaderControl.CreateSections">
<short>
Creates the collection used to store header sections defined for the control.
</short>
<descr>
CreateSections is called from the TCustomHeaderControl.Create constructor to 
allocate the collection used to store the Sections defined for the control.
</descr>
<seealso>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.Create"/>
<link id="THeaderSections.Create"/>
<link id="THeaderSection"/>
</seealso>
</element>
<element name="TCustomHeaderControl.CreateSections.Result">
<short>THeaderSections instance created in the method.</short>
</element>

<element name="TCustomHeaderControl.Loaded">
<short>
Performs actions when the component has been loaded during LCL component 
streaming.
</short>
<descr/>
<p>
<var>Loaded</var> is an overridden method in <var>TCustomHeaderControl</var>. 
It calls the inherited method (in TWinControl) on entry into the method. 
It extends the inherited method to ensure that the internal member used to 
track the cursor shape for the control is initialized to the value in Cursor.
</p>
<seealso>
<link id="#lcl.controls.TWinControl.Loaded">TWinControl.Loaded</link>
<link id="#lcl.controls.TControl.Cursor">TControl.Cursor</link>
</seealso>
</element>

<element name="TCustomHeaderControl.Notification">
<short>
Handles the notification when a component is added to or removed from the 
class instance.
</short>
<descr>
<p>
Calls the inherited method on entry. Ensures that the <var>Images</var> 
member is set to <b>Nil</b> when the component is removed from the class 
instance.
</p>
</descr>
<seealso>
<link id="#rtl.classes.TComponent">TComponent</link>
</seealso>
</element>

<element name="TCustomHeaderControl.SectionClick">
<short>
Performs actions needed when the mouse is clicked on the specified header 
section.
</short>
<descr>
<p>
Signals the <var>OnSectionClick</var> event handler (when assigned). Called 
from the <var>Click</var> method when the mouse event occurred on the header 
section in the <var>Section</var> argument.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.OnSectionClick"/>
<link id="TCustomHeaderControl.Click"/>
<link id="TCustomHeaderControl.Sections"/>
</seealso>
</element>
<element name="TCustomHeaderControl.SectionClick.Section">
<short>Header section for the mouse event.</short>
</element>

<element name="TCustomHeaderControl.SectionResize">
<short>
Performs actions needed to resize the specified header section.
</short>
<descr>
<p>
Signals the <var>OnSectionResize</var> event handler (when assigned). Called 
from the <var>MouseUp</var> method when mouse tracking has been ended for the 
specified <var>Section</var>.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomHeaderControl.SectionResize.Section">
<short>Header section for the resize action.</short>
</element>

<element name="TCustomHeaderControl.SectionTrack">
<short>
Performs actions needed when the mouse tracking state for a header section 
has changed.
</short>
<descr>
<p>
Signals the <var>OnSectionTrack</var> event handler (when assigned). Called 
from the <var>MouseDown</var>, <var>MouseMove</var>, and <var>MouseUp</var> 
methods when mouse tracking is active for a section in the header control.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.MouseDown"/>
<link id="TCustomHeaderControl.MouseMove"/>
<link id="TCustomHeaderControl.MouseUp"/>
</seealso>
</element>
<element name="TCustomHeaderControl.SectionTrack.Section">
<short>Header section for the mouse tracking state.</short>
</element>
<element name="TCustomHeaderControl.SectionTrack.State">
<short>New mouse tracking state for the action.</short>
</element>

<element name="TCustomHeaderControl.SectionSeparatorDblClick">
<short>
Performs actions to handle a mouse double click event for the specified 
header section.
</short>
<descr>
<p>
Signals the <var>OnSectionSeparatorDblClick</var> event handler (when 
assigned). Called from the <var>DblClick</var> method when the mouse event 
occurs when mouse tracking has been enabled for the header control.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.OnSectionSeparatorDblClick"/>
<link id="TCustomHeaderControl.DblClick"/>
</seealso>
</element>
<element name="TCustomHeaderControl.SectionSeparatorDblClick.Section">
<short>Header section for the double click mouse event.</short>
</element>

<element name="TCustomHeaderControl.SectionEndDrag">
<short>
Signals the OnSectionEndDrag event handler (when assigned).
</short>
<descr>
<p>
<var>SectionEndDrag</var> is called from the MouseUp method when the a mouse 
button is released during a drag operation for a header section on the control. 
It is called after the selected header section has been reordered by updating 
its Index property.
</p>
<p>
Use OnSectionEndDrag to perform any actions needed when the section order has 
been updated in a drag operation.
</p>
<p>
Use DragReorder to enable or disable drag operations for the Sections on 
the header control.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.OnSectionEndDrag"/>
<link id="TCustomHeaderControl.Mouseup"/>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.DragReorder"/>
<link id="THeaderSection.OriginalIndex"/>
<link id="#rtl.classes.TCollectionItem.Index">TCollectionItem.Index</link>
</seealso>
</element>

<element name="TCustomHeaderControl.SectionDrag">
<short>
Signals the OnSectionDrag event handler (when assigned and enabled).
</short>
<descr>
<p>
<var>SectionDrag</var> is a <var>Boolean</var> function used to signal the 
OnSectionDrag event handler when a drag operation is started for a section on 
the header control. The return value is <b>True</b> if the DragReorder 
property is enabled, and the OnSectionDrag event handler has been assigned and 
allows the drag operation for the specified source and destination sections.
</p>
<p>
No actions are performed in the method if DragReorder is set to <b>False</b>.
</p>
<p>
Update the AllowDrag argument in the TSectionDragEvent handler to indicate 
whether the section in FromSection can be dragged to the position for the 
section in ToSection.
</p>
<p>
SectionDrag is called from the MouseMove method when a Shift+Left mouse button 
event is detected on one of the Sections for the control.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.OnSectionDrag"/>
<link id="TCustomHeaderControl.DragReorder"/>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.MouseMove"/>
<link id="TSectionDragEvent"/>
</seealso>
</element>
<element name="TCustomHeaderControl.SectionDrag.Result">
<short>
<b>True</b> if the drag operation can be performed the selected section.
</short>
</element>
<element name="TCustomHeaderControl.SectionDrag.FromSection">
<short>
Section to be dragged on the header control.
</short>
</element>
<element name="TCustomHeaderControl.SectionDrag.ToSection">
<short>
Section that is the potential drop target for the drag operation.
</short>
</element>

<element name="TCustomHeaderControl.MouseEnter" link="#lcl.controls.TControl.MouseEnter"/>
<element name="TCustomHeaderControl.MouseLeave" link="#lcl.controls.TControl.MouseLeave"/>
<element name="TCustomHeaderControl.MouseDown" link="#lcl.controls.TControl.MouseDown"/>
<element name="TCustomHeaderControl.MouseMove" link="#lcl.controls.TControl.MouseMove"/>
<element name="TCustomHeaderControl.MouseUp" link="#lcl.controls.TControl.MouseUp"/>

<element name="TCustomHeaderControl.UpdateState">
<short>
Updates the State property in one or more of the Sections on the header 
control.
</short>
<descr>
<p>
<var>UpdateState</var> is a method used to update the drawing state for one or 
more of the Sections on the header control. When Enabled is set to <b>True</b>, 
it ensures that the selected section on the control has its State property set 
to the Up (hsNormal) or Down (hsPressed) drawing style as required. If a mouse 
down event has not reported for the control, the section under the mouse 
pointer is updated to use hsHot in its State property.
</p>
<p>
UpdateState visits each of the THeaderSection instances in Sections, and sets 
their State property to hsNormal if it is not the selected or highlighted 
section on the control.
</p>
<p>
UpdateState is called from the MouseEnter and MouseLeave methods when the 
control gains or loses mouse capture for the control. It is also called from 
MouseDown, MouseMove, and MouseUp when mouse events are handled for the control.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.MouseEnter"/>
<link id="TCustomHeaderControl.MouseLeave"/>
<link id="TCustomHeaderControl.MouseMove"/>
<link id="TCustomHeaderControl.MouseDown"/>
<link id="TCustomHeaderControl.MouseUp"/>
<link id="THeaderSection.State"/>
<link id="THeaderSectionState"/>
<link id="#lcl.controls.TControl.Enabled">TControl.Enabled</link>
</seealso>
</element>

<element name="TCustomHeaderControl.GetControlClassDefaultSize">
<short>
Gets the default size for new instances of the class.
</short>
<seealso>
<link id="#lcl.controls.TControl.GetControlClassDefaultSize">TControl.GetControlClassDefaultSize</link>
</seealso>
</element>
<element name="TCustomHeaderControl.GetControlClassDefaultSize.Result">
<short/>
</element>

<element name="TCustomHeaderControl.DoAutoAdjustLayout">
<short>
Applies an automatic layout policy to the control using the specified scaling 
factors.
</short>
<descr>
<p>
<var>DoAutoAdjustLayout</var> calls the inherited method (in TControl) to apply 
adjusts to the dimensions, border spacing, and anchoring common to all 
controls. It extends the inherited method to adjust the Width for the Sections 
defined on the control using the AXProportion argument.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.Sections"/>
<link id="THeaderSection.Width"/>
<link id="#lcl.controls.TControl.DoAutoAdjustLayout">TControl.DoAutoAdjustLayout</link>
</seealso>
</element>
<element name="TCustomHeaderControl.DoAutoAdjustLayout.AMode">
<short>
Layout adjustment policy applied in the method.
</short>
</element>
<element name="TCustomHeaderControl.DoAutoAdjustLayout.AXProportion">
<short>
Scaling factor for horizontal adjustments applied in the method.
</short>
</element>
<element name="TCustomHeaderControl.DoAutoAdjustLayout.AYProportion">
<short>
Scaling factor for vertical adjustments applied in the method.
</short>
</element>

<element name="TCustomHeaderControl.SectionFromOriginalIndex">
<short>
Gets a header section by its original position in the Sections collection.
</short>
<descr/>
<seealso/>
</element>
<element name="TCustomHeaderControl.SectionFromOriginalIndex.Result">
<short>
Header section located in Sections with the specified original index value.
</short>
</element><element name="TCustomHeaderControl.SectionFromOriginalIndex.OriginalIndex">
<short>
Value used to locate the header section in the return value.
</short>
</element>

<element name="TCustomHeaderControl.Create">
<short>
Constructor for the class instance.
</short>
<descr>
<p>
<var>Create</var> is the overridden constructor for 
<var>TCustomHeaderControl</var>, and calls the inherited <var>Create</var> on 
entry.
</p>
<p>
Create allocates resources needed for the Sections property by call 
CreateSections. It also sets the default size for the control using the 
values returned from GetControlClassDefaultSize.
</p>
<p>
The control style flags are updated in the method to include mouse capture 
and click events and to remove caption display for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TCustomControl.Create">TCustomControl.Create</link>
</seealso>
</element>
<element name="TCustomHeaderControl.Create.AOwner">
<short>Owner of the class instance.</short>
</element>

<element name="TCustomHeaderControl.Destroy">
<short>
Destructor for the class instance.
</short>
<descr>
<p>
<var>Destroy</var> is the overridden destructor for 
<var>TCustomHeaderControl</var>. It ensures that resources allocated to the 
Sections property are freed, and calls the inherited method prior to exit.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TCustomControl.Destroy">TCustomControl.Destroy</link>
</seealso>
</element>

<element name="TCustomHeaderControl.Click" link="#lcl.controls.TControl.Click"/>
<element name="TCustomHeaderControl.DblClick" link="#lcl.controls.TControl.DblClick"/>

<element name="TCustomHeaderControl.GetSectionAt">
<short>
Gets the header section at the position specified in P.
</short>
<descr>
<p>
<var>GetSectionAt</var> is an <var>Integer</var> function used to get the 
position for the header section found at the coordinates in P.
</p>
<p>
GetSectionAt iterates over the <var>THeaderSection</var> instances in 
<var>Sections</var> to find a matching collection item. A match is found when 
the X- axis coordinate in P is within the Left and Right values for the 
header section.
</p>
<p>
The return value contains the ordinal position in Sections where the header 
section is stored, or -1 if a header section was not found for the 
coordinates.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomHeaderControl.GetSectionAt.Result">
<short>Ordinal position in Sections for the header section.</short>
</element>
<element name="TCustomHeaderControl.GetSectionAt.P">
<short>TPoint instance with the coordinates examined in the method.</short>
</element>

<element name="TCustomHeaderControl.Paint">
<short>
Draws the control to its Canvas using highlighting, drag images, and theme 
details.
</short>
<descr>
<p>
<var>Paint</var> is an overridden method in <var>TCustomHeaderControl</var> 
used to draw the control to its <var>Canvas</var>.
</p>
<p>
Paint calls the inherited method on entry to signal the OnPaint event handler 
(when assigned). The display rectangle is updated to reflect the current 
Width and Height for the control.
</p>
<p>
Paint iterates over the header sections defined in the Sections property, and 
calls PaintSection to render each one. If all sections fit within the control 
display area without scrolling, theme services are used to draw the control 
to the control to its Canvas.
</p>
<p>
Paint handles configuring the Canvas and drawing the preview when a section 
drag operation is in effect.
</p>
<p>
See PaintSection for more information about the actions performed to draw an 
individual header section for the control.
</p>
</descr>
<seealso>
<link id="#lcl.controls.TCustomControl.Paint">TCustomControl.Paint</link>
</seealso>
</element>

<element name="TCustomHeaderControl.PaintSection">
<short>
Paints the specified header section to the Canvas for the control.
</short>
<descr>
<p>
<var>PaintSection</var> is a method used to paint the specified header 
section to the <var>Canvas</var> for the <var>THeaderControl</var> control.
</p>
<p>
<var>Index</var> contains the ordinal position for the 
<var>THeaderSection</var> instance in the <var>Sections</var> collection. No 
actions are performed in the method if the header section is not 
<var>Visible</var>.
</p>
<p>
PaintSection draws the header section using the <var>Left</var> and 
<var>Right</var> properties in the THeaderSection instance. The value in its 
<var>State</var> property is used to render the section by calling methods in 
ThemeServices. When Images have been assigned in the control, and the header 
section has an assigned image index, it is drawn to the Canvas. When Text 
contains a non-empty value, it is also rendered to the Canvas using the 
DrawText method in ThemeServices.
</p>
</descr>
<seealso/>
</element>
<element name="TCustomHeaderControl.PaintSection.Index">
<short>Ordinal position for the header section rendered in the method.</short>
</element>

<element name="TCustomHeaderControl.ChangeScale">
<short>
Scales the width of the header sections in the control using the specified 
multiplier and divisor.
</short>
<descr>
<p>
<var>ChangeScale</var> is an overridden method in TCustomHeaderControl, and 
calls the inherited method on entry to scale the overall size for the control 
and its child controls. ChangeScale applies the scaling factor represented by 
M and D to the individual header sections defined in the Sections collection. 
The Width for each THeaderSection instance is updated using the multiplier 
and divisor to scale the section width.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.Sections"/>
<link id="THeaderSection"/>
<link id="#lcl.controls.TWinControl.ChangeScale">TWinControl.ChangeScale</link>
</seealso>
</element>
<element name="TCustomHeaderControl.ChangeScale.M">
<short>Multiplier for the scaling factor.</short>
</element>
<element name="TCustomHeaderControl.ChangeScale.D">
<short>Divisor for the scaling factor.</short>
</element>

<element name="TCustomHeaderControl.DragReorder">
<short>
Enables or disables reordering of header sections on the control using drag and 
drop.
</short>
<descr>
<p>
<var>DragReorder</var> is used in the SectionDrag method to control whether 
drag and drop is enabled for header sections. It also determines whether the 
OnSectionDrag event handler is signalled to allow or disallow the source and 
destination section targets.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.SectionDrag"/>
<link id="TCustomHeaderControl.OnSectionDrag"/>
</seealso>
</element>

<element name="TCustomHeaderControl.Images">
<short>
Contains bitmaps displayed on the header sections for the control.
</short>
<descr>
<p>
The control cannot display images on the header section if Images has not 
been assigned or is empty.
</p>
<p>
Use the ImageIndex property for the THeaderSection instances in Sections to 
assign the image used for the header section.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomHeaderControl.ImagesWidth">
<short>Specifies the width for Images displayed in the header control.</short>
<descr>
<p>
If <var>ImagesWidth</var> is unassigned (contains 0), the width of the 
bitmaps in <var>Images</var> is used.
</p>
</descr>
<seealso/>
</element>

<element name="TCustomHeaderControl.Sections">
<short>
<var>Sections</var> - the short segments of the header separated by vertical 
bars that function as the elementary selection units of the header.
</short>
<descr>
<p>
<var>Sections</var> is a <var>THeaderSections</var> property with the 
collection of header sections defined for the control. The 
<var>THeaderSection</var> instances in the collection contain the size, 
layout, content, appearance, and state for each header section.
</p>
</descr>
<seealso>
<link id="THeaderSections"/>
<link id="THeaderSection"/>
</seealso>
</element>

<element name="TCustomHeaderControl.OnSectionDrag">
<short>
Event handler signalled to determine whether a header section can be dragged 
and dropped at a new position on the control.
</short>
<descr>
<p>
<var>OnSectionDrag</var> is a <var>TSectionDragEvent</var> property with the 
event handler signalled when a drag and drop operation for a section header is 
requested.
</p>
<p>
Arguments passed to the TSectionDragEvent routine include the Sender object 
(TCustomHeaderControl) for the event notification, and THeaderSection instances 
representing the dragged section and the section that is the target for the 
drag request. The AllowDrag variable parameter is used to indicate whether the 
drag and drop operation using the specified source and destination is allowed. 
Setting AllowDrag to <b>False</b> in the handler prevents the drag and drop 
operation for the specified sections.
</p>
<p>
OnSectionDrag is signalled (when assigned) from the SectionDrag method, and 
occurs if DragReorder has been enabled for the control.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.DragReorder"/>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.SectionDrag"/>
<link id="TSectionDragEvent"/>
</seealso>
</element>

<element name="TCustomHeaderControl.OnSectionEndDrag">
<short>
Event handler signalled when a drag and drop operation for a section is 
completed.
</short>
<descr>
<p>
<var>OnSectionEndDrag</var> is signalled (when assigned) from the 
SectionEndDrag method called when the left mouse button is released for a 
dragged header section. An application can implement and assign a handler 
routine to perform actions needed when the drag and drop operation is 
completed. The Sender argument for the handler contains the 
TCustomHeaderControl instance for the event notification.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.OnSectionDrag"/>
<link id="TCustomHeaderControl.DragReorder"/>
<link id="#rtl.classes.TNotifyEvent">TNotifyEvent</link>
</seealso>
</element>

<element name="TCustomHeaderControl.OnSectionClick">
<short>
Event handler signalled when a mouse click event occurs in a section header on 
the control.
</short>
<descr>
<p>
<var>OnSectionClick</var> is a <var>TCustomSectionNotifyEvent</var> property 
with the event handler signalled when a mouse click is handled for the header 
control. It is signalled (when assigned) from the SectionClick method using 
the THeaderSection instance where the mouse click occurred as an argument to 
the handler routine. On SectionClick is not signalled if the mouse click was on 
an unused part of the header control not covered by a header section.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.SectionClick"/>
<link id="TCustomHeaderControl.Click"/>
<link id="TCustomHeaderControl.GetSectionAt"/>
<link id="TCustomSectionNotifyEvent"/>
</seealso>
</element>

<element name="TCustomHeaderControl.OnSectionResize">
<short>
Event handler signalled when a resize operation for a header section has been 
completed.
</short>
<descr>
<p>
<var>OnSectionResize</var> is a <var>TCustomSectionNotifyEvent</var> property 
with the event handler signalled when one of the header Sections has been 
resized by dragging the  separator for the section. It is signalled (when 
assigned) in the SectionResize method with arguments that identify the header 
control and the header section for the event notification.
</p>
<p>
SectionResize / OnSectionResize occur when the left mouse button is released to 
complete a resizing operation. An application can implement and assign a 
handler routine using the signature in TCustomSectionNotifyEvent to perform 
actions related to the resize event for the selected section.
</p>
<p>
Use OnSectionSeparatorDblClick to handle a mouse double-click event on the 
section separator.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.SectionResize"/>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.MouseUp"/>
<link id="TCustomHeaderControl.OnSectionSeparatorDblClick"/>
<link id="TCustomSectionNotifyEvent"/>
</seealso>
</element>

<element name="TCustomHeaderControl.OnSectionTrack">
<short>
Event handler signalled when drag tracking/resizing is activated for the 
selected header section on the control.
</short>
<descr>
<p>
<var>OnSectionTrack</var> is a <var>TCustomSectionTrackEvent</var> property 
with the event handler signalled when resize tracking is activated for one of 
the Sections on the header control. It is signalled (when assigned) from the 
SectionTrack method. The event occurs when MouseDown, MouseMove, and MouseUp 
methods handle Shift+Left mouse button events on the control.
</p>
<p>
An application can implement and assign a handler routine using the signature 
in TCustomSectionTrackEvent to perform actions related to the resize tracking 
operation. Arguments passed to the handler routine include the header control 
and the header section for the notification. The Width and tracking state for 
the section are also included.
</p>
<p>
Use OnSectionResize to performs action needed when a resize operation has been 
completed for one of the header Sections.
</p>
<p>
Use OnSectionSeparatorDblClick to perform actions when the separator for a 
header section is double-clicked.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.SectionTrack"/>
<link id="TCustomHeaderControl.MouseDown"/>
<link id="TCustomHeaderControl.MouseMove"/>
<link id="TCustomHeaderControl.MouseUp"/>
<link id="TCustomHeaderControl.OnSectionResize"/>
<link id="TCustomHeaderControl.OnSectionSeparatorDblClick"/>
</seealso>
</element>

<element name="TCustomHeaderControl.OnSectionSeparatorDblClick">
<short>
Event handler signalled when a separator between header sections on the 
control is double-clicked.
</short>
<descr>
<p>
<var>OnSectionSeparatorDblClick</var> is a <var>TCustomSectionNotifyEvent</var> 
property with the event handler signalled when the separator for a header 
section has been double-clicked. It is signalled (when assigned) from the 
SectionSeparatorDblClick method. It occurs when the DblClick method handles the 
mouse event when resize tracking has been enabled by hovering the mouse over 
the separator for the section.
</p>
<p>
An application can implement and assign a routine using the signature in 
TCustomSectionNotifyEvent to respond to the event notification. Arguments 
passed to the handler include the header control and the header section 
affected in the event.
</p>
<p>
Use OnSectionTrack and OnSectionResize to perform actions needed then resize 
tracking is activated or completed.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.Sections"/>
<link id="TCustomHeaderControl.DblClick"/>
<link id="TCustomHeaderControl.OnSectionTrack"/>
<link id="TCustomHeaderControl.OnSectionResize"/>
<link id="TCustomSectionNotifyEvent"/>
</seealso>
</element>

<element name="TCustomHeaderControl.OnCreateSectionClass">
<short>
Event handler signalled to get the class type used to create a new section for 
the header control.
</short>
<descr>
<p>
<var>OnCreateSectionClass</var> is a 
<var>TCustomHCCreateSectionClassEvent</var> property with the event handler 
signalled to get the class type for a new section on the control.
</p>
<p>
OnCreateSectionClass is signalled (when assigned) from the CreateSection 
method, and allows the class type for a new section to be determined. The 
variable SectionClass argument for the event handler is used to return the 
class type. The return value is used in CreateSection to create the collection 
item added to the Sections on the control.
</p>
<p>
If OnCreateSectionClass is not assigned, the THeaderSection class type is used.
</p>
<p>
OnCreateSectionClass is signalled at run-time when the Add or AddItem method in 
the Sections collection is called. OnCreateSectionClass is not signalled at 
design-time when the Object Inspector property editor is used to maintain the 
Sections property. The THeaderSection class type is always used at design-time 
as the item class for the Sections collection.
</p>
</descr>
<seealso>
<link id="TCustomHeaderControl.CreateSection"/>
<link id="TCustomHeaderControl.CreateSections"/>
<link id="THeaderSections.Add"/>
<link id="THeaderSections.AddItem"/>
<link id="THeaderSections.Create"/>
<link id="TCustomHCCreateSectionClassEvent"/>
</seealso>
</element>

<element name="THeaderControl">
<short>
<var>THeaderControl</var>, a header strip of user-designed sections which 
allow selection of pages or actions.
</short>
<descr>
<p>
<var>THeaderControl</var>, a header strip of user-designed sections which 
allow selection of pages or actions.
</p>
<p>
<var>THeaderControl</var> offers a widget that could be placed along the edge 
of a <var>Panel</var> or <var>Form</var> allowing a highly customized 
mechanism for selection. However there are no intrinsically associated 
display areas and it is the developer's responsibility to supply an index 
associated with the selection from the <var>THeaderControl</var> and 
determine what action is to occur or what is to be displayed in any attached 
Panel or Form.
</p>
<p>
THeaderControl is used by selecting its icon from the Common Controls tab of 
the IDE Component Palette and placing it on the Form in the desired position. 
It may be convenient to dock it with a <var>Form</var> or <var>Panel</var> 
whose properties it is to be used for controlling.
</p>
<p>
After size, position, docking, alignment, anchoring etc have been performed 
using the Object Inspector or Form Designer, the Sections of the Header can 
be created by selecting the control, right-clicking with the mouse and 
choosing 'Section Editor'. A Stringlist editor will pop up with options to 
add, delete or move entries up or down the list. Each entry is given an Index 
which can be used in OnClick event handlers to determine the action to be 
taken when that section is selected at run-time.
</p>
</descr>
<seealso>
<link id="#lcl.ExtCtrls.MultiPageControls">Using Multi-Page Controls</link>
</seealso>
</element>

<element name="THeaderControl.Align" link="#lcl.controls.TControl.Align"/>
<element name="THeaderControl.Anchors" link="#lcl.controls.TControl.Anchors"/>
<element name="THeaderControl.BiDiMode" link="#lcl.controls.TControl.BiDiMode"/>
<element name="THeaderControl.BorderWidth" link="#lcl.controls.TWinControl.BorderWidth"/>
<element name="THeaderControl.BorderSpacing" link="#lcl.controls.TControl.BorderSpacing"/>
<element name="THeaderControl.DragCursor" link="#lcl.controls.TControl.DragCursor"/>
<element name="THeaderControl.DragKind" link="#lcl.controls.TControl.DragKind"/>
<element name="THeaderControl.DragMode" link="#lcl.controls.TControl.DragMode"/>
<element name="THeaderControl.Enabled" link="#lcl.controls.TControl.Enabled"/>
<element name="THeaderControl.Font" link="#lcl.controls.TControl.Font"/>
<element name="THeaderControl.Images" link="#lcl.comctrls.TCustomHeaderControl.Images"/>
<element name="THeaderControl.ImagesWidth" link="#lcl.comctrls.TCustomHeaderControl.ImagesWidth"/>
<element name="THeaderControl.Constraints" link="#lcl.controls.TControl.Constraints"/>
<element name="THeaderControl.Sections" link="#lcl.comctrls.TCustomHeaderControl.Sections"/>
<element name="THeaderControl.ShowHint" link="#lcl.controls.TControl.ShowHint"/>
<element name="THeaderControl.ParentBiDiMode" link="#lcl.controls.TControl.ParentBiDiMode"/>
<element name="THeaderControl.ParentFont" link="#lcl.controls.TControl.ParentFont"/>
<element name="THeaderControl.ParentShowHint" link="#lcl.controls.TControl.ParentShowHint"/>
<element name="THeaderControl.PopupMenu" link="#lcl.controls.TControl.PopupMenu"/>
<element name="THeaderControl.Visible" link="#lcl.controls.TControl.Visible"/>
<element name="THeaderControl.OnContextPopup" link="#lcl.controls.TControl.OnContextPopup"/>
<element name="THeaderControl.OnCreateSectionClass" link="#lcl.comctrls.TCustomHeaderControl.OnCreateSectionClass"/>
<element name="THeaderControl.OnDragDrop" link="#lcl.controls.TControl.OnDragDrop"/>
<element name="THeaderControl.OnDragOver" link="#lcl.controls.TControl.OnDragOver"/>
<element name="THeaderControl.OnEndDock" link="#lcl.controls.TControl.OnEndDock"/>
<element name="THeaderControl.OnEndDrag" link="#lcl.controls.TControl.OnEndDrag"/>
<element name="THeaderControl.OnMouseDown" link="#lcl.controls.TControl.OnMouseDown"/>
<element name="THeaderControl.OnMouseEnter" link="#lcl.controls.TControl.OnMouseEnter"/>
<element name="THeaderControl.OnMouseLeave" link="#lcl.controls.TControl.OnMouseLeave"/>
<element name="THeaderControl.OnMouseMove" link="#lcl.controls.TControl.OnMouseMove"/>
<element name="THeaderControl.OnMouseUp" link="#lcl.controls.TControl.OnMouseUp"/>
<element name="THeaderControl.OnMouseWheel" link="#lcl.controls.TControl.OnMouseWheel"/>
<element name="THeaderControl.OnMouseWheelDown" link="#lcl.controls.TControl.OnMouseWheelDown"/>
<element name="THeaderControl.OnMouseWheelUp" link="#lcl.controls.TControl.OnMouseWheelUp"/>
<element name="THeaderControl.OnMouseWheelHorz" link="#lcl.controls.TControl.OnMouseWheelHorz"/>
<element name="THeaderControl.OnMouseWheelLeft" link="#lcl.controls.TControl.OnMouseWheelLeft"/>
<element name="THeaderControl.OnMouseWheelRight" link="#lcl.controls.TControl.OnMouseWheelRight"/>
<element name="THeaderControl.OnResize" link="#lcl.controls.TControl.OnResize"/>
<element name="THeaderControl.OnSectionClick" link="#lcl.comctrls.TCustomHeaderControl.OnSectionClick"/>
<element name="THeaderControl.OnSectionResize" link="#lcl.comctrls.TCustomHeaderControl.OnSectionResize"/>
<element name="THeaderControl.OnSectionTrack" link="#lcl.comctrls.TCustomHeaderControl.OnSectionTrack"/>

<element name="TCN_First">
<short>Represents the first tab control notification message.</short>
<seealso>
<link id="TCustomTabControl.CNNotify"/>
</seealso>
</element>

<element name="TCN_SELCHANGE">
<short>
Represents the selection changed notification message for tab controls.
</short>
<seealso>
<link id="TCustomTabControl.CNNotify"/>
</seealso>
</element>

<element name="TCN_SELCHANGING">
<short>
Represents the selection changing notification message for tab controls.
</short>
<seealso>
<link id="TCustomTabControl.CNNotify"/>
</seealso>
</element>

<element name="CompareExpandedNodes">
<short>Function to compare the node text in two tree nodes.</short>
<descr>
<p>
This function does an ANSICompare on the NodeText of two nodes. The 
parameters Data1 and Data2 are pointers to the nodes to be compared. The 
result is the same as the result from ANSICompareText. For example:
</p>
<dl>
<dt>-1</dt>
<dd>
The nodetext from the first node is lower than the nodetext from the second.
</dd>
<dt>0</dt>
<dd>
The nodetext values from both nodes are equal.
</dd>
<dt>1</dt>
<dd>
The nodetext from the first node is higher than the nodetext from the second.
</dd>
</dl>
</descr>
</element>
<element name="CompareExpandedNodes.Result">
<short/>
</element>
<element name="CompareExpandedNodes.Data1">
<short/>
</element>
<element name="CompareExpandedNodes.Data2">
<short/>
</element>

<element name="CompareTextWithExpandedNode">
<short>
Function to compare the given text with the nodetext of the specified tree node.
</short>
<descr>
<p>
This function does an ANSICompare on the NodeText of two nodes. The 
parameters Data1 and Data2 are pointers to the nodes to be compared. The 
result is the same as the result from ANSICompareText.
</p>
<dl>
<dt>-1</dt>
<dd>The given text is lower then the nodetext from the given node.</dd>
<dt>0</dt>
<dd>The given text is equal to the nodetext from the given node.</dd>
<dt>1</dt>
<dd>The given text is higher then the nodetext from the given node.</dd>
</dl>
</descr>
</element>
<element name="CompareTextWithExpandedNode.Result">
<short/>
</element>
<element name="CompareTextWithExpandedNode.Key">
<short/>
</element>
<element name="CompareTextWithExpandedNode.Data">
<short/>
</element>

<element name="DbgS">
<short>
Generates a list of tab control options for display in the debugger.
</short>
<descr>
<p>
<var>DbgS</var> is an overloaded <var>String</var> function used to generate 
string content displayed in the debugger for option values used in 
<var>TCustomTabControl</var>. DbgS generates a comma-delimited list of option 
values found in the specified argument using the string representations in 
<var>TabControlOptionStr</var>.
</p>
</descr>
<seealso/>
</element>
<element name="DbgS.Result">
<short>
String with the tab control option values displayed in the debugger.
</short>
</element>
<element name="DbgS.Opt">
<short>LCL-compatible tab control options to examine in the routine.</short>
</element>

<element name="Register">
<short>Registers components in the Lazarus IDE.</short>
<descr>
<p>
Register is a procedure used to register components in the 
<file>comctrls.pp</file> unit in the Lazarus IDE. Register adds the following 
components to the Component palette:
</p>
<p>
<b>Common Controls Tab</b>
</p>
<ul>
<li>TTrackbar</li>
<li>TProgressBar</li>
<li>TTreeView</li>
<li>TListView</li>
<li>TStatusBar</li>
<li>TToolBar</li>
<li>TCoolBar</li>
<li>TUpDown</li>
<li>TPageControl</li>
<li>TTabControl</li>
<li>THeaderControl</li>
</ul>
<p>
Register adds the following as components with no icon on the component 
palette:
</p>
<ul>
<li>TToolButton</li>
<li>TTabSheet</li>
</ul>
</descr>
<seealso/>
</element>

<element name="RegisterCustomPage">
<short>
Calls WSRegisterCustomPage to register a custom page using the widgetset 
classes.
</short>
<descr/>
<seealso/>
</element>

<element name="RegisterCustomTabControl">
<short>
Registers TCustomTabControl and its widgetset class type when needed.
</short>
<descr/>
<seealso/>
</element>

</module>
<!-- ComCtrls -->
</package>
</fpdoc-descriptions>
